Term<start,type="int">= Factor { ("+"|"-") Factor } => {
	int result = Factor1;
	int i = 2;
	while (i<Length) {
		if(node.Children[i-1].SymbolId==add)
			result += EvaluateFactor(node.Children[i],state);
		else
			result -= EvaluateFactor(node.Children[i],state);
		i+=2;
	}
	return result;
}

Factor<type="int">= Unary { ("*"|"/") Unary } => { 
	int result = Unary1;
	int i = 2;
	// Because of the way the grammar is factored, this can 
	// end up being Factors when collapsed
	while (i<Length) {
		if(node.Children[i].SymbolId==Unary) {
			if(node.Children[i-1].SymbolId==mul)
				result *= EvaluateUnary(node.Children[i],state);
			else
				result /= EvaluateUnary(node.Children[i],state);
		} else {
			if(node.Children[i-1].SymbolId==mul)
				result *= EvaluateFactor(node.Children[i],state);
			else
				result /= EvaluateFactor(node.Children[i-1],state);
		}
		i+=2;
	}
	return result;
}
Unary<type="int">= ("+"|"-") Unary | Leaf => {
	if(Length==1)
		return Leaf1;
	if(SymbolId1==add)
		return Unary2;
	else
		return -Unary2;
}
Leaf<type="int">= integer | "(" Term ")" => {
	if(Length==1)
		return integer1;
	else return Term2; 
}
add="+";
sub="-";
mul="*";
div="/";
lparen="(";
rparen=")";
integer='[0-9]+';
whitespace<hidden>='\s+';