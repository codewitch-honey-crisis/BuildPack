//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ParsleyDemo {
    using System;
    using System.Collections.Generic;
    
    /// <summary>Parses the following grammar:
    /// Json= Object | Array;
    /// Object= "{" [ Field { "," Field } ] "}";
    /// Field= string ":" Value;
    /// Array= "[" [ Value { "," Value } ] "]";
    /// {Value}= string | number | Object | Array | Boolean | null;
    /// Boolean= true | false;
    /// number= '\-?(0|[1-9][0-9]*)(\.[0-9]+)?([Ee][\+\-]?[0-9]+)?';
    /// string= '"([^\n"\\]|\\([btrnf"\\/]|(u[A-Fa-f]{4})))*"';
    /// true= "true";
    /// false= "false";
    /// null= "null";
    /// {lbracket}= "[";
    /// {rbracket}= "]";
    /// {lbrace}= "{";
    /// {rbrace}= "}";
    /// {colon}= ":";
    /// {comma}= ",";
    /// (whitespace)= '[\n\r\t ]+';
    /// </summary>
    /// <remarks>The rules for the factored grammar are as follows:
    /// Json -> Object
    /// Json -> Array
    /// Field -> string colon Value
    /// Value -> string
    /// Value -> number
    /// Value -> Object
    /// Value -> Array
    /// Value -> Boolean
    /// Value -> null
    /// Boolean -> true
    /// Boolean -> false
    /// ObjectList -> comma Field ObjectListRightAssoc
    /// ArrayList -> comma Value ArrayListRightAssoc
    /// ObjectListRightAssoc -> comma Field ObjectListRightAssoc
    /// ObjectListRightAssoc ->
    /// ArrayListRightAssoc -> comma Value ArrayListRightAssoc
    /// ArrayListRightAssoc ->
    /// ObjectPart -> ObjectList rbrace
    /// ObjectPart -> rbrace
    /// ArrayPart -> ArrayList rbracket
    /// ArrayPart -> rbracket
    /// Object -> lbrace ObjectPart2
    /// ObjectPart2 -> rbrace
    /// ObjectPart2 -> Field ObjectPart
    /// Array -> lbracket ArrayPart2
    /// ArrayPart2 -> rbracket
    /// ArrayPart2 -> Value ArrayPart
    /// </remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Parsley", "0.1.2.0")]
    internal partial class JsonParser {
        internal const int ErrorSymbol = -1;
        internal const int EosSymbol = -2;
        public const int Json = 0;
        public const int Field = 1;
        public const int Value = 2;
        public const int Boolean = 3;
        public const int ObjectList = 4;
        public const int ArrayList = 5;
        public const int ObjectListRightAssoc = 6;
        public const int ArrayListRightAssoc = 7;
        public const int ObjectPart = 8;
        public const int ArrayPart = 9;
        public const int Object = 10;
        public const int ObjectPart2 = 11;
        public const int Array = 12;
        public const int ArrayPart2 = 13;
        public const int number = 14;
        public const int @string = 15;
        public const int @true = 16;
        public const int @false = 17;
        public const int @null = 18;
        public const int lbracket = 19;
        public const int rbracket = 20;
        public const int lbrace = 21;
        public const int rbrace = 22;
        public const int colon = 23;
        public const int comma = 24;
        public const int whitespace = 25;
        internal static ParseNode ParseJson(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // Json -> Object
            if ((JsonParser.lbrace == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                children[0] = JsonParser.ParseObject(context);
                return new ParseNode(JsonParser.Json, "Json", children, line__, column__, position__);
            }
            // Json -> Array
            if ((JsonParser.lbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                children[0] = JsonParser.ParseArray(context);
                return new ParseNode(JsonParser.Json, "Json", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Object or Array at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        /// <summary>
        /// Parses a production of the form:
        /// Json= Object | Array
        /// </summary>
        /// <remarks>
        /// The production rules are:
        /// Json -> Object
        /// Json -> Array
        /// </remarks>
        /// <param name="tokenizer">The tokenizer to parse with</param><returns>A <see cref="ParseNode" /> representing the parsed tokens</returns>
        public static ParseNode Parse(System.Collections.Generic.IEnumerable<Token> tokenizer) {
            ParserContext context = new ParserContext(tokenizer);
            context.EnsureStarted();
            ParseNode result = JsonParser.ParseJson(context);
            if ((false == context.IsEnded)) {
                context.Error("Unexpected remainder in input.");
            }
            return result;
        }
        internal static ParseNode ParseField(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // Field -> string colon Value
            if ((JsonParser.@string == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (JsonParser.@string == context.SymbolId))) {
                    context.Error("Expecting string at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(JsonParser.@string, "string", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (JsonParser.colon == context.SymbolId))) {
                    context.Error("Expecting colon at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(JsonParser.ParseValue(context).Children);
                return new ParseNode(JsonParser.Field, "Field", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting string at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseValue(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // Value -> string
            if ((JsonParser.@string == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (JsonParser.@string == context.SymbolId))) {
                    context.Error("Expecting string at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(JsonParser.@string, "string", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(JsonParser.Value, "Value", children, line__, column__, position__);
            }
            // Value -> number
            if ((JsonParser.number == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (JsonParser.number == context.SymbolId))) {
                    context.Error("Expecting number at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(JsonParser.number, "number", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(JsonParser.Value, "Value", children, line__, column__, position__);
            }
            // Value -> Object
            if ((JsonParser.lbrace == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                children[0] = JsonParser.ParseObject(context);
                return new ParseNode(JsonParser.Value, "Value", children, line__, column__, position__);
            }
            // Value -> Array
            if ((JsonParser.lbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                children[0] = JsonParser.ParseArray(context);
                return new ParseNode(JsonParser.Value, "Value", children, line__, column__, position__);
            }
            // Value -> Boolean
            if (((JsonParser.@true == context.SymbolId) 
                        || (JsonParser.@false == context.SymbolId))) {
                ParseNode[] children = new ParseNode[1];
                children[0] = JsonParser.ParseBoolean(context);
                return new ParseNode(JsonParser.Value, "Value", children, line__, column__, position__);
            }
            // Value -> null
            if ((JsonParser.@null == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (JsonParser.@null == context.SymbolId))) {
                    context.Error("Expecting null at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(JsonParser.@null, "null", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(JsonParser.Value, "Value", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting string, number, Object, Array, Boolean, or null at line {0}, column {1}" +
                        ", position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseBoolean(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // Boolean -> true
            if ((JsonParser.@true == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (JsonParser.@true == context.SymbolId))) {
                    context.Error("Expecting true at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(JsonParser.@true, "true", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(JsonParser.Boolean, "Boolean", children, line__, column__, position__);
            }
            // Boolean -> false
            if ((JsonParser.@false == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (JsonParser.@false == context.SymbolId))) {
                    context.Error("Expecting false at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(JsonParser.@false, "false", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(JsonParser.Boolean, "Boolean", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting true or false at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseObjectList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ObjectList -> comma Field ObjectListRightAssoc
            if ((JsonParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (JsonParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.Add(JsonParser.ParseField(context));
                children.AddRange(JsonParser.ParseObjectListRightAssoc(context).Children);
                return new ParseNode(JsonParser.ObjectList, "ObjectList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseArrayList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ArrayList -> comma Value ArrayListRightAssoc
            if ((JsonParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (JsonParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(JsonParser.ParseValue(context).Children);
                children.AddRange(JsonParser.ParseArrayListRightAssoc(context).Children);
                return new ParseNode(JsonParser.ArrayList, "ArrayList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseObjectListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ObjectListRightAssoc -> comma Field ObjectListRightAssoc
            if ((JsonParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (JsonParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.Add(JsonParser.ParseField(context));
                children.AddRange(JsonParser.ParseObjectListRightAssoc(context).Children);
                return new ParseNode(JsonParser.ObjectListRightAssoc, "ObjectListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // ObjectListRightAssoc ->
            if ((JsonParser.rbrace == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(JsonParser.ObjectListRightAssoc, "ObjectListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseArrayListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ArrayListRightAssoc -> comma Value ArrayListRightAssoc
            if ((JsonParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (JsonParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(JsonParser.ParseValue(context).Children);
                children.AddRange(JsonParser.ParseArrayListRightAssoc(context).Children);
                return new ParseNode(JsonParser.ArrayListRightAssoc, "ArrayListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // ArrayListRightAssoc ->
            if ((JsonParser.rbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(JsonParser.ArrayListRightAssoc, "ArrayListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseObjectPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ObjectPart -> ObjectList rbrace
            if ((JsonParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(JsonParser.ParseObjectList(context).Children);
                if ((false 
                            == (JsonParser.rbrace == context.SymbolId))) {
                    context.Error("Expecting rbrace at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                return new ParseNode(JsonParser.ObjectPart, "ObjectPart", children.ToArray(), line__, column__, position__);
            }
            // ObjectPart -> rbrace
            if ((JsonParser.rbrace == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (JsonParser.rbrace == context.SymbolId))) {
                    context.Error("Expecting rbrace at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                return new ParseNode(JsonParser.ObjectPart, "ObjectPart", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting ObjectList or rbrace at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseArrayPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ArrayPart -> ArrayList rbracket
            if ((JsonParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(JsonParser.ParseArrayList(context).Children);
                if ((false 
                            == (JsonParser.rbracket == context.SymbolId))) {
                    context.Error("Expecting rbracket at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                return new ParseNode(JsonParser.ArrayPart, "ArrayPart", children.ToArray(), line__, column__, position__);
            }
            // ArrayPart -> rbracket
            if ((JsonParser.rbracket == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (JsonParser.rbracket == context.SymbolId))) {
                    context.Error("Expecting rbracket at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                return new ParseNode(JsonParser.ArrayPart, "ArrayPart", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting ArrayList or rbracket at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseObject(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // Object -> lbrace ObjectPart2
            if ((JsonParser.lbrace == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (JsonParser.lbrace == context.SymbolId))) {
                    context.Error("Expecting lbrace at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(JsonParser.ParseObjectPart2(context).Children);
                return new ParseNode(JsonParser.Object, "Object", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting lbrace at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseObjectPart2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ObjectPart2 -> rbrace
            if ((JsonParser.rbrace == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (JsonParser.rbrace == context.SymbolId))) {
                    context.Error("Expecting rbrace at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                return new ParseNode(JsonParser.ObjectPart2, "ObjectPart2", children.ToArray(), line__, column__, position__);
            }
            // ObjectPart2 -> Field ObjectPart
            if ((JsonParser.@string == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(JsonParser.ParseField(context));
                children.AddRange(JsonParser.ParseObjectPart(context).Children);
                return new ParseNode(JsonParser.ObjectPart2, "ObjectPart2", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting rbrace or Field at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseArray(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // Array -> lbracket ArrayPart2
            if ((JsonParser.lbracket == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (JsonParser.lbracket == context.SymbolId))) {
                    context.Error("Expecting lbracket at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(JsonParser.ParseArrayPart2(context).Children);
                return new ParseNode(JsonParser.Array, "Array", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting lbracket at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseArrayPart2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ArrayPart2 -> rbracket
            if ((JsonParser.rbracket == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (JsonParser.rbracket == context.SymbolId))) {
                    context.Error("Expecting rbracket at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                return new ParseNode(JsonParser.ArrayPart2, "ArrayPart2", children.ToArray(), line__, column__, position__);
            }
            // ArrayPart2 -> Value ArrayPart
            if ((((((((JsonParser.@string == context.SymbolId) 
                        || (JsonParser.number == context.SymbolId)) 
                        || (JsonParser.lbrace == context.SymbolId)) 
                        || (JsonParser.lbracket == context.SymbolId)) 
                        || (JsonParser.@true == context.SymbolId)) 
                        || (JsonParser.@false == context.SymbolId)) 
                        || (JsonParser.@null == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(JsonParser.ParseValue(context).Children);
                children.AddRange(JsonParser.ParseArrayPart(context).Children);
                return new ParseNode(JsonParser.ArrayPart2, "ArrayPart2", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting rbracket or Value at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
    }
}
