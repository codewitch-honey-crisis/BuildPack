//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ParsleyDemo {
    using System;
    using System.Collections.Generic;
    
    internal partial class JsonParser {
        internal const int ErrorSymbol = -1;
        internal const int EosSymbol = -2;
        public const int Json = 0;
        public const int Field = 1;
        public const int Value = 2;
        public const int Boolean = 3;
        public const int Object = 4;
        public const int ObjectPart = 5;
        public const int Fields = 6;
        public const int FieldsPart = 7;
        public const int Array = 8;
        public const int ArrayPart = 9;
        public const int Values = 10;
        public const int ValuesPart = 11;
        public const int @string = 12;
        public const int colon = 13;
        public const int number = 14;
        public const int @null = 15;
        public const int @true = 16;
        public const int @false = 17;
        public const int lbrace = 18;
        public const int rbrace = 19;
        public const int comma = 20;
        public const int lbracket = 21;
        public const int rbracket = 22;
        public const int whitespace = 23;
        private static ParseNode _ParseJson(ParserContext context) {
            int line = context.Line;
            int column = context.Column;
            long position = context.Position;
            if ((JsonParser.lbrace == context.SymbolId)) {
                // Json -> Object
                ParseNode[] children = new ParseNode[1];
                children[0] = JsonParser._ParseObject(context);
                return new ParseNode(JsonParser.Json, "Json", children, line, column, position);
            }
            if ((JsonParser.lbracket == context.SymbolId)) {
                // Json -> Array
                ParseNode[] children = new ParseNode[1];
                children[0] = JsonParser._ParseArray(context);
                return new ParseNode(JsonParser.Json, "Json", children, line, column, position);
            }
            context.Error("Expecting lbrace or lbracket");
            return null;
        }
        private static ParseNode _ParseField(ParserContext context) {
            int line = context.Line;
            int column = context.Column;
            long position = context.Position;
            if ((JsonParser.@string == context.SymbolId)) {
                // Field -> string colon Value
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(new ParseNode(JsonParser.@string, "string", context.Value, line, column, position));
                context.Advance();
                context.Advance();
                children.AddRange(JsonParser._ParseValue(context).Children);
                return new ParseNode(JsonParser.Field, "Field", children.ToArray(), line, column, position);
            }
            context.Error("Expecting string");
            return null;
        }
        private static ParseNode _ParseValue(ParserContext context) {
            int line = context.Line;
            int column = context.Column;
            long position = context.Position;
            if ((JsonParser.@string == context.SymbolId)) {
                // Value -> string
                ParseNode[] children = new ParseNode[1];
                children[0] = new ParseNode(JsonParser.@string, "string", context.Value, line, column, position);
                context.Advance();
                return new ParseNode(JsonParser.Value, "Value", children, line, column, position);
            }
            if ((JsonParser.number == context.SymbolId)) {
                // Value -> number
                ParseNode[] children = new ParseNode[1];
                children[0] = new ParseNode(JsonParser.number, "number", context.Value, line, column, position);
                context.Advance();
                return new ParseNode(JsonParser.Value, "Value", children, line, column, position);
            }
            if ((JsonParser.lbrace == context.SymbolId)) {
                // Value -> Object
                ParseNode[] children = new ParseNode[1];
                children[0] = JsonParser._ParseObject(context);
                return new ParseNode(JsonParser.Value, "Value", children, line, column, position);
            }
            if ((JsonParser.lbracket == context.SymbolId)) {
                // Value -> Array
                ParseNode[] children = new ParseNode[1];
                children[0] = JsonParser._ParseArray(context);
                return new ParseNode(JsonParser.Value, "Value", children, line, column, position);
            }
            if (((JsonParser.@true == context.SymbolId) 
                        || (JsonParser.@false == context.SymbolId))) {
                // Value -> Boolean
                ParseNode[] children = new ParseNode[1];
                children[0] = JsonParser._ParseBoolean(context);
                return new ParseNode(JsonParser.Value, "Value", children, line, column, position);
            }
            if ((JsonParser.@null == context.SymbolId)) {
                // Value -> null
                ParseNode[] children = new ParseNode[1];
                children[0] = new ParseNode(JsonParser.@null, "null", context.Value, line, column, position);
                context.Advance();
                return new ParseNode(JsonParser.Value, "Value", children, line, column, position);
            }
            context.Error("Expecting string, number, lbrace, lbracket, true, false, or null");
            return null;
        }
        private static ParseNode _ParseBoolean(ParserContext context) {
            int line = context.Line;
            int column = context.Column;
            long position = context.Position;
            if ((JsonParser.@true == context.SymbolId)) {
                // Boolean -> true
                ParseNode[] children = new ParseNode[1];
                children[0] = new ParseNode(JsonParser.@true, "true", context.Value, line, column, position);
                context.Advance();
                return new ParseNode(JsonParser.Boolean, "Boolean", children, line, column, position);
            }
            if ((JsonParser.@false == context.SymbolId)) {
                // Boolean -> false
                ParseNode[] children = new ParseNode[1];
                children[0] = new ParseNode(JsonParser.@false, "false", context.Value, line, column, position);
                context.Advance();
                return new ParseNode(JsonParser.Boolean, "Boolean", children, line, column, position);
            }
            context.Error("Expecting true or false");
            return null;
        }
        private static ParseNode _ParseObject(ParserContext context) {
            int line = context.Line;
            int column = context.Column;
            long position = context.Position;
            if ((JsonParser.lbrace == context.SymbolId)) {
                // Object -> lbrace ObjectPart
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                context.Advance();
                children.AddRange(JsonParser._ParseObjectPart(context).Children);
                return new ParseNode(JsonParser.Object, "Object", children.ToArray(), line, column, position);
            }
            context.Error("Expecting lbrace");
            return null;
        }
        private static ParseNode _ParseObjectPart(ParserContext context) {
            int line = context.Line;
            int column = context.Column;
            long position = context.Position;
            if ((JsonParser.rbrace == context.SymbolId)) {
                // ObjectPart -> rbrace
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                context.Advance();
                return new ParseNode(JsonParser.ObjectPart, "ObjectPart", children.ToArray(), line, column, position);
            }
            if ((JsonParser.@string == context.SymbolId)) {
                // ObjectPart -> Fields rbrace
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(JsonParser._ParseFields(context).Children);
                context.Advance();
                return new ParseNode(JsonParser.ObjectPart, "ObjectPart", children.ToArray(), line, column, position);
            }
            context.Error("Expecting rbrace or string");
            return null;
        }
        private static ParseNode _ParseFields(ParserContext context) {
            int line = context.Line;
            int column = context.Column;
            long position = context.Position;
            if ((JsonParser.@string == context.SymbolId)) {
                // Fields -> Field FieldsPart
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(JsonParser._ParseField(context));
                children.AddRange(JsonParser._ParseFieldsPart(context).Children);
                return new ParseNode(JsonParser.Fields, "Fields", children.ToArray(), line, column, position);
            }
            context.Error("Expecting string");
            return null;
        }
        private static ParseNode _ParseFieldsPart(ParserContext context) {
            int line = context.Line;
            int column = context.Column;
            long position = context.Position;
            if ((JsonParser.comma == context.SymbolId)) {
                // FieldsPart -> comma Fields
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                context.Advance();
                children.AddRange(JsonParser._ParseFields(context).Children);
                return new ParseNode(JsonParser.FieldsPart, "FieldsPart", children.ToArray(), line, column, position);
            }
            if ((JsonParser.rbrace == context.SymbolId)) {
                // FieldsPart ->
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(JsonParser.FieldsPart, "FieldsPart", children, line, column, position);
            }
            context.Error("Expecting comma or rbrace");
            return null;
        }
        private static ParseNode _ParseArray(ParserContext context) {
            int line = context.Line;
            int column = context.Column;
            long position = context.Position;
            if ((JsonParser.lbracket == context.SymbolId)) {
                // Array -> lbracket ArrayPart
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                context.Advance();
                children.AddRange(JsonParser._ParseArrayPart(context).Children);
                return new ParseNode(JsonParser.Array, "Array", children.ToArray(), line, column, position);
            }
            context.Error("Expecting lbracket");
            return null;
        }
        private static ParseNode _ParseArrayPart(ParserContext context) {
            int line = context.Line;
            int column = context.Column;
            long position = context.Position;
            if ((JsonParser.rbracket == context.SymbolId)) {
                // ArrayPart -> rbracket
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                context.Advance();
                return new ParseNode(JsonParser.ArrayPart, "ArrayPart", children.ToArray(), line, column, position);
            }
            if ((((((((JsonParser.@string == context.SymbolId) 
                        || (JsonParser.number == context.SymbolId)) 
                        || (JsonParser.lbrace == context.SymbolId)) 
                        || (JsonParser.lbracket == context.SymbolId)) 
                        || (JsonParser.@true == context.SymbolId)) 
                        || (JsonParser.@false == context.SymbolId)) 
                        || (JsonParser.@null == context.SymbolId))) {
                // ArrayPart -> Values rbracket
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(JsonParser._ParseValues(context).Children);
                context.Advance();
                return new ParseNode(JsonParser.ArrayPart, "ArrayPart", children.ToArray(), line, column, position);
            }
            context.Error("Expecting rbracket, string, number, lbrace, lbracket, true, false, or null");
            return null;
        }
        private static ParseNode _ParseValues(ParserContext context) {
            int line = context.Line;
            int column = context.Column;
            long position = context.Position;
            if ((((((((JsonParser.@string == context.SymbolId) 
                        || (JsonParser.number == context.SymbolId)) 
                        || (JsonParser.lbrace == context.SymbolId)) 
                        || (JsonParser.lbracket == context.SymbolId)) 
                        || (JsonParser.@true == context.SymbolId)) 
                        || (JsonParser.@false == context.SymbolId)) 
                        || (JsonParser.@null == context.SymbolId))) {
                // Values -> Value ValuesPart
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(JsonParser._ParseValue(context).Children);
                children.AddRange(JsonParser._ParseValuesPart(context).Children);
                return new ParseNode(JsonParser.Values, "Values", children.ToArray(), line, column, position);
            }
            context.Error("Expecting string, number, lbrace, lbracket, true, false, or null");
            return null;
        }
        private static ParseNode _ParseValuesPart(ParserContext context) {
            int line = context.Line;
            int column = context.Column;
            long position = context.Position;
            if ((JsonParser.comma == context.SymbolId)) {
                // ValuesPart -> comma Values
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                context.Advance();
                children.AddRange(JsonParser._ParseValues(context).Children);
                return new ParseNode(JsonParser.ValuesPart, "ValuesPart", children.ToArray(), line, column, position);
            }
            if ((JsonParser.rbracket == context.SymbolId)) {
                // ValuesPart ->
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(JsonParser.ValuesPart, "ValuesPart", children, line, column, position);
            }
            context.Error("Expecting comma or rbracket");
            return null;
        }
        public static ParseNode ParseJson(System.Collections.Generic.IEnumerable<Token> tokenizer) {
            ParserContext context = new ParserContext(tokenizer);
            context.EnsureStarted();
            return JsonParser._ParseJson(context);
        }
    }
    /// <summary>
    /// 
    /// </summary>
    internal class SyntaxException : Exception {
        private int _line;
        private int _column;
        private long _position;
        /// <summary>
        /// Creates a syntax exception with the specified arguments
        /// </summary>
        /// <param name="message">The error message</param>
        /// <param name="line">The line where the error occurred</param>
        /// <param name="column">The column where the error occured</param>
        /// <param name="position">The position where the error occured</param>
        public SyntaxException(string message, int line, int column, long position) : 
                base(SyntaxException._GetMessage(message, line, column, position)) {
            this._line = line;
            this._column = column;
            this._position = position;
        }
        /// <summary>
        /// The line where the error occurred
        /// </summary>
        public int Line {
            get {
                return this._line;
            }
        }
        /// <summary>
        /// The column where the error occurred
        /// </summary>
        public int Column {
            get {
                return this._column;
            }
        }
        /// <summary>
        /// The position where the error occurred
        /// </summary>
        public long Position {
            get {
                return this._position;
            }
        }
        static string _GetMessage(string message, int line, int column, long position) {
            return string.Format("{0} at line {1}, column {2}, position {3}", message, line, column, position);
        }
    }
    internal partial class ParseNode {
        private int _symbolId;
        private string _symbol;
        private string _value;
        private int _line;
        private int _column;
        private long _position;
        private ParseNode[] _children;
        public ParseNode(int symbolId, string symbol, ParseNode[] children, int line, int column, long position) {
            this._symbolId = symbolId;
            this._symbol = symbol;
            this._value = null;
            this._children = children;
            this._line = line;
            this._column = column;
            this._position = position;
        }
        public ParseNode(int symbolId, string symbol, string value, int line, int column, long position) {
            this._symbolId = symbolId;
            this._symbol = symbol;
            this._value = value;
            this._children = null;
            this._line = line;
            this._column = column;
            this._position = position;
        }
        public bool IsNonTerminal {
            get {
                return (null != this._children);
            }
        }
        public ParseNode[] Children {
            get {
                return this._children;
            }
        }
        public int SymbolId {
            get {
                return this._symbolId;
            }
        }
        public string Symbol {
            get {
                return this._symbol;
            }
        }
        public string Value {
            get {
                return this._value;
            }
        }
        public int Line {
            get {
                return this._line;
            }
        }
        public int Column {
            get {
                return this._column;
            }
        }
        public long Position {
            get {
                return this._position;
            }
        }
    }
    internal partial class ParserContext : Object, IDisposable {
        private int _state;
        private IEnumerator<Token> _e;
        private Token _t;
        public ParserContext(IEnumerable<Token> tokenizer) {
            this._e = tokenizer.GetEnumerator();
            this._state = -1;
            this._t.SymbolId = -1;
        }
        public void EnsureStarted() {
            if ((-1 == this._state)) {
                this.Advance();
            }
        }
        public int SymbolId {
            get {
                return this._t.SymbolId;
            }
        }
        public string Value {
            get {
                return this._t.Value;
            }
        }
        public int Line {
            get {
                return this._t.Line;
            }
        }
        public int Column {
            get {
                return this._t.Column;
            }
        }
        public long Position {
            get {
                return this._t.Position;
            }
        }
        public bool IsEnded {
            get {
                return (-2 == this._state);
            }
        }
        public bool Advance() {
            if ((false == this._e.MoveNext())) {
                this._t.SymbolId = -2;
                this._state = -2;
            }
            else {
                this._state = 0;
                this._t = this._e.Current;
                return true;
            }
            return false;
        }
        public void Error(string message, object arg1, object arg2, object arg3) {
            throw new SyntaxException(string.Format(message, arg1, arg2, arg3), this.Line, this.Column, this.Position);
        }
        public void Error(string message, object arg1, object arg2) {
            throw new SyntaxException(string.Format(message, arg1, arg2), this.Line, this.Column, this.Position);
        }
        public void Error(string message, object arg) {
            throw new SyntaxException(string.Format(message, arg), this.Line, this.Column, this.Position);
        }
        public void Error(string message) {
            throw new SyntaxException(message, this.Line, this.Column, this.Position);
        }
        public void Dispose() {
            this._e.Dispose();
            this._state = -3;
        }
        void IDisposable.Dispose() {
            this.Dispose();
        }
    }
}
