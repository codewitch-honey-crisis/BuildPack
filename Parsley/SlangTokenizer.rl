verbatimIdentifier<id=0, terminal>= '@'
keyword<id=1, terminal>= 'abstract|as|ascending|async|await|base|bool|break|byte|case|catch|char|checked|class|const|continue|decimal|default|delegate|descending|do|double|dynamic|else|enum|equals|explicit|extern|event|false|finally|fixed|float|for|foreach|get|global|goto|if|implicit|int|interface|internal|is|lock|long|namespace|new|null|object|operator|out|override|params|partial|private|protected|public|readonly|ref|return|sbyte|sealed|set|short|sizeof|stackalloc|static|string|struct|switch|this|throw|true|try|typeof|uint|ulong|unchecked|unsafe|ushort|using|var|virtual|void|volatile|while|yield'
identifier<id=2, terminal>= '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*'
lineComment<id=3, terminal>= '\/\/[^\n]*'
blockComment<id=4, blockEnd= "*/">= '/\*'
verbatimStringLiteral<id=5, terminal>= '@"([^"|""])*"'
stringLiteral<id=6, terminal>= '"([^\\"\'\a\b\f\n\r\t\v\0]|\\[^\r\n]|\\[0-7]{3}|\\x[0-9A-Fa-f]{2}|\\u[0-9A-Fa-f]{4}|\\U[0-9A-Fa-f]{8})*"'
characterLiteral<id=7, terminal>= '[\u0027]([^\\"\'\a\b\f\n\r\t\v\0]|\\[^\r\n]|\\[0-7]{3}|\\x[0-9A-Fa-f]{2}|\\u[0-9A-Fa-f]{4}|\\U[0-9A-Fa-f]{8})[\u0027]'
whitespace<id=8, hidden>= '[ \t\r\n\v\f]+'
lte<id=9, terminal>= '\<='
lt<id=10, terminal>= '\<'
gte<id=11, terminal>= '\>='
gt<id=12, terminal>= '\>'
eqEq<id=13, terminal>= '=='
notEq<id=14, terminal>= '!='
eq<id=15, terminal>= '='
inc<id=16, terminal>= '\+\+'
addAssign<id=17, terminal>= '\+='
add<id=18, terminal>= '\+'
dec<id=19, terminal>= '\-\-'
subAssign<id=20, terminal>= '\-='
sub<id=21, terminal>= '\-'
mulAssign<id=22, terminal>= '\*='
mul<id=23, terminal>= '\*'
divAssign<id=24, terminal>= '/='
div<id=25, terminal>= '/'
modAssign<id=26, terminal>= '%='
mod<id=27, terminal>= '%'
and<id=28, terminal>= '&&'
bitwiseAndAssign<id=29, terminal>= '&='
bitwiseAnd<id=30, terminal>= '&'
or<id=31, terminal>= '\|\|'
bitwiseOrAssign<id=32, terminal>= '\|='
bitwiseOr<id=33, terminal>= '\|'
not<id=34, terminal>= '!'
lbracket<id=35, terminal>= '\['
rbracket<id=36, terminal>= '\]'
lparen<id=37, terminal>= '\('
rparen<id=38, terminal>= '\)'
lbrace<id=39, terminal>= '\{'
rbrace<id=40, terminal>= '\}'
comma<id=41, terminal>= ','
colonColon<id=42, terminal>= '::'
colon<id=43, terminal>= ':'
semi<id=44, terminal>= '\;'
dot<id=45, terminal>= '\.'
integerLiteral<id=46, terminal>= '(0x[0-9A-Fa-f]{1,16}|(0|[1-9][0-9]*))([Uu][Ll]?|[Ll][Uu]?)?'
floatLiteral<id=47, terminal>= '((0|[1-9][0-9]*)(\.[0-9]+)?([Ee][\+\-]?[0-9]+)?[DdMmFf]?)|((\.[0-9]+)([Ee][\+\-]?[0-9]+)?[DdMmFf]?)'
directive<id=48, blockEnd= "\n">= '#[ \t]*[a-z]+[ \t]*'

