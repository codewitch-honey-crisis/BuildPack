Term<start>= Factor { ("+"|"-") Factor } => {
	int result = (int)EvaluateFactor(node.Children[0]);
	int i = 2;
	while (i<Length) 
	{
		if(node.Children[i-1].SymbolId==add)
			result += (int)EvaluateFactor(node.Children[i]);
		else // sub
			result -= (int)EvaluateFactor(node.Children[i]);
		i+=2;
	}
	return result;
}

Factor= Unary { ("*"|"/") Unary } => { 
	int result = (int)EvaluateUnary(node.Children[0]);
	int i = 2;
	// Because of the way the grammar is factored, this can 
	// end up being Factors when collapsed. We have to check
	while (i<Length) 
	{
		if(node.Children[i].SymbolId==Unary) // Unary
		{
			if(node.Children[i-1].SymbolId==mul) 
				result *= (int)EvaluateUnary(node.Children[i]);
			else // div
				result /= (int)EvaluateUnary(node.Children[i]);
		} else // Factor
		{
			if(node.Children[i-1].SymbolId==mul) 
				result *= (int)EvaluateFactor(node.Children[i]);
			else // div
				result /= (int)EvaluateFactor(node.Children[i]);
		}
		i+=2;
	}
	return result;
}
Unary= ("+"|"-") Unary | Leaf => {
	if(node.Children.Length==1)
		return EvaluateLeaf(node.Children[0]);
	if(node.Children[0].SymbolId==add)
		return EvaluateUnary(node.Children[1]);
	else
		return -(int)EvaluateUnary(node.Children[1]);
}
Leaf= integer | identifier | "(" Term ")" => {
	if(node.Children.Length==1) // integer | identifer
	{
		if(node.Children[1].SymbolId==integer)
			return int.Parse(node.Children[0].Value);
		else // identifier
			throw new NotImplementedException("Variables are not implemented.");
	} else // Term
		return EvaluateTerm(node.Children[1]); 
}
// we only need to declare terminals explicitly if we want 
// constant names for them or to apply attributes to them
// in this case we don't need divide, subtract or 
// parentheses to be declared
add="+";
mul="*";
integer='[0-9]+';
identifier='[A-Z_a-z][0-9A-Z_a-z]*';
whitespace<hidden>='\s+';