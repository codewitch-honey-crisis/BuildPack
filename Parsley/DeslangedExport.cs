//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.CodeDom;
using System.Reflection;


internal partial class Deslanged {
    private static CodeCompileUnit _CompileUnit(string[] referencedAssemblies, CodeNamespace[] namespaces, CodeAttributeDeclaration[] assemblyCustomAttributes, CodeDirective[] startDirectives, CodeDirective[] endDirectives) {
        CodeCompileUnit result = new CodeCompileUnit();
        result.ReferencedAssemblies.AddRange(referencedAssemblies);
        result.Namespaces.AddRange(namespaces);
        result.AssemblyCustomAttributes.AddRange(assemblyCustomAttributes);
        result.StartDirectives.AddRange(startDirectives);
        result.EndDirectives.AddRange(endDirectives);
        return result;
    }
    private static CodeNamespace _Namespace(string name, CodeNamespaceImport[] imports, CodeTypeDeclaration[] types, CodeCommentStatement[] comments) {
        CodeNamespace result = new CodeNamespace();
        result.Name = name;
        result.Imports.AddRange(imports);
        result.Types.AddRange(types);
        result.Comments.AddRange(comments);
        return result;
    }
    private static CodeTypeDeclaration _TypeDeclaration(
                string name, 
                bool isClass, 
                bool isEnum, 
                bool isInterface, 
                bool isStruct, 
                bool isPartial, 
                MemberAttributes attributes, 
                TypeAttributes typeAttributes, 
                CodeTypeParameter[] typeParameters, 
                CodeTypeReference[] baseTypes, 
                CodeTypeMember[] members, 
                CodeCommentStatement[] comments, 
                CodeAttributeDeclaration[] customAttributes, 
                CodeDirective[] startDirectives, 
                CodeDirective[] endDirectives, 
                CodeLinePragma linePragma) {
        CodeTypeDeclaration result = new CodeTypeDeclaration(name);
        result.IsClass = isClass;
        result.IsEnum = isEnum;
        result.IsInterface = isInterface;
        result.IsStruct = isStruct;
        result.IsPartial = isPartial;
        result.Attributes = attributes;
        result.TypeAttributes = typeAttributes;
        result.TypeParameters.AddRange(typeParameters);
        result.BaseTypes.AddRange(baseTypes);
        result.Members.AddRange(members);
        result.Comments.AddRange(comments);
        result.CustomAttributes.AddRange(customAttributes);
        result.StartDirectives.AddRange(startDirectives);
        result.EndDirectives.AddRange(endDirectives);
        result.LinePragma = linePragma;
        return result;
    }
    private static CodeMemberField _MemberField(CodeTypeReference type, string name, CodeExpression initExpression, MemberAttributes attributes, CodeCommentStatement[] comments, CodeAttributeDeclaration[] customAttributes, CodeDirective[] startDirectives, CodeDirective[] endDirectives, CodeLinePragma linePragma) {
        CodeMemberField result = new CodeMemberField(type, name);
        result.InitExpression = initExpression;
        result.Attributes = attributes;
        result.Comments.AddRange(comments);
        result.CustomAttributes.AddRange(customAttributes);
        result.StartDirectives.AddRange(startDirectives);
        result.EndDirectives.AddRange(endDirectives);
        result.LinePragma = linePragma;
        return result;
    }
    public static System.CodeDom.CodeCompileUnit Parser {
        get {
            return Deslanged._CompileUnit(new string[0], new CodeNamespace[] {
                        Deslanged._Namespace("", new CodeNamespaceImport[] {
                                    new CodeNamespaceImport("System.Collections.Generic")}, new CodeTypeDeclaration[0], new CodeCommentStatement[0]),
                        Deslanged._Namespace("Parsley", new CodeNamespaceImport[0], new CodeTypeDeclaration[] {
                                    Deslanged._TypeDeclaration("Parser", true, false, false, false, true, ((MemberAttributes)(0)), TypeAttributes.NotPublic, new CodeTypeParameter[0], new CodeTypeReference[0], new CodeTypeMember[] {
                                                Deslanged._MemberField(new CodeTypeReference(typeof(int)), "ErrorSymbol", new CodePrimitiveExpression(-1), (MemberAttributes.Const | MemberAttributes. FamilyAndAssembly), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference(typeof(int)), "EosSymbol", new CodePrimitiveExpression(-2), (MemberAttributes.Const | MemberAttributes. FamilyAndAssembly), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0])}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0]);
        }
    }
    public static System.CodeDom.CodeCompileUnit Token {
        get {
            return Deslanged._CompileUnit(new string[0], new CodeNamespace[] {
                        Deslanged._Namespace("Parsley", new CodeNamespaceImport[0], new CodeTypeDeclaration[] {
                                    Deslanged._TypeDeclaration("Token", false, false, false, true, false, ((MemberAttributes)(0)), TypeAttributes.NotPublic, new CodeTypeParameter[0], new CodeTypeReference[0], new CodeTypeMember[] {
                                                Deslanged._MemberField(new CodeTypeReference(typeof(int)), "Line", null, (MemberAttributes.Final | MemberAttributes. Public), new CodeCommentStatement[] {
                                                            new CodeCommentStatement("<summary>", true),
                                                            new CodeCommentStatement("Indicates the line where the token occurs", true),
                                                            new CodeCommentStatement("</summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference(typeof(int)), "Column", null, (MemberAttributes.Final | MemberAttributes. Public), new CodeCommentStatement[] {
                                                            new CodeCommentStatement("<summary>", true),
                                                            new CodeCommentStatement("Indicates the column where the token occurs", true),
                                                            new CodeCommentStatement("</summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference(typeof(long)), "Position", null, (MemberAttributes.Final | MemberAttributes. Public), new CodeCommentStatement[] {
                                                            new CodeCommentStatement("<summary>", true),
                                                            new CodeCommentStatement("Indicates the position where the token occurs", true),
                                                            new CodeCommentStatement("</summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference(typeof(int)), "SymbolId", null, (MemberAttributes.Final | MemberAttributes. Public), new CodeCommentStatement[] {
                                                            new CodeCommentStatement("<summary>", true),
                                                            new CodeCommentStatement("Indicates the symbol id or -1 for the error symbol", true),
                                                            new CodeCommentStatement("</summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference(typeof(string)), "Value", null, (MemberAttributes.Final | MemberAttributes. Public), new CodeCommentStatement[] {
                                                            new CodeCommentStatement("<summary>", true),
                                                            new CodeCommentStatement("Indicates the value of the token", true),
                                                            new CodeCommentStatement("</summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference(new CodeTypeReference("Token"), 1), "Skipped", null, (MemberAttributes.Final | MemberAttributes. Public), new CodeCommentStatement[] {
                                                            new CodeCommentStatement("<summary>", true),
                                                            new CodeCommentStatement("If supported, indicates the tokens that were", true),
                                                            new CodeCommentStatement("skipped between here and the last read", true),
                                                            new CodeCommentStatement("</summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[] {
                                                new CodeCommentStatement("<summary>", true),
                                                new CodeCommentStatement("Represents a lexeme/token", true),
                                                new CodeCommentStatement("</summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0])}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0]);
        }
    }
    private static CodeConstructor _Constructor(MemberAttributes attributes, CodeParameterDeclarationExpression[] parameters, CodeExpression[] chainedConstructorArgs, CodeExpression[] baseConstructorArgs, CodeStatement[] statements, CodeCommentStatement[] comments, CodeAttributeDeclaration[] customAttributes, CodeDirective[] startDirectives, CodeDirective[] endDirectives, CodeLinePragma linePragma) {
        CodeConstructor result = new CodeConstructor();
        result.Attributes = attributes;
        result.Parameters.AddRange(parameters);
        result.ChainedConstructorArgs.AddRange(chainedConstructorArgs);
        result.BaseConstructorArgs.AddRange(baseConstructorArgs);
        result.Statements.AddRange(statements);
        result.Comments.AddRange(comments);
        result.CustomAttributes.AddRange(customAttributes);
        result.StartDirectives.AddRange(startDirectives);
        result.EndDirectives.AddRange(endDirectives);
        result.LinePragma = linePragma;
        return result;
    }
    private static CodeMemberMethod _MemberMethod(CodeTypeReference returnType, string name, MemberAttributes attributes, CodeParameterDeclarationExpression[] parameters, CodeStatement[] statements, CodeTypeReference[] implementationTypes, CodeTypeReference privateImplementationType, CodeCommentStatement[] comments, CodeAttributeDeclaration[] customAttributes, CodeAttributeDeclaration[] returnTypeCustomAttributes, CodeDirective[] startDirectives, CodeDirective[] endDirectives, CodeLinePragma linePragma) {
        CodeMemberMethod result = new CodeMemberMethod();
        result.ReturnType = returnType;
        result.Name = name;
        result.Attributes = attributes;
        result.Parameters.AddRange(parameters);
        result.Statements.AddRange(statements);
        result.ImplementationTypes.AddRange(implementationTypes);
        result.PrivateImplementationType = privateImplementationType;
        result.Comments.AddRange(comments);
        result.CustomAttributes.AddRange(customAttributes);
        result.ReturnTypeCustomAttributes.AddRange(returnTypeCustomAttributes);
        result.StartDirectives.AddRange(startDirectives);
        result.EndDirectives.AddRange(endDirectives);
        result.LinePragma = linePragma;
        return result;
    }
    private static CodeMemberProperty _MemberProperty(CodeTypeReference type, string name, MemberAttributes attributes, CodeParameterDeclarationExpression[] parameters, CodeStatement[] getStatements, CodeStatement[] setStatements, CodeTypeReference[] implementationTypes, CodeTypeReference privateImplementationType, CodeCommentStatement[] comments, CodeAttributeDeclaration[] customAttributes, CodeDirective[] startDirectives, CodeDirective[] endDirectives, CodeLinePragma linePragma) {
        CodeMemberProperty result = new CodeMemberProperty();
        result.Type = type;
        result.Name = name;
        result.Attributes = attributes;
        result.Parameters.AddRange(parameters);
        result.GetStatements.AddRange(getStatements);
        result.SetStatements.AddRange(setStatements);
        result.ImplementationTypes.AddRange(implementationTypes);
        result.PrivateImplementationType = privateImplementationType;
        result.Comments.AddRange(comments);
        result.CustomAttributes.AddRange(customAttributes);
        result.StartDirectives.AddRange(startDirectives);
        result.EndDirectives.AddRange(endDirectives);
        result.LinePragma = linePragma;
        return result;
    }
    public static System.CodeDom.CodeCompileUnit ParserContext {
        get {
            return Deslanged._CompileUnit(new string[0], new CodeNamespace[] {
                        Deslanged._Namespace("", new CodeNamespaceImport[] {
                                    new CodeNamespaceImport("System"),
                                    new CodeNamespaceImport("System.Collections.Generic")}, new CodeTypeDeclaration[0], new CodeCommentStatement[0]),
                        Deslanged._Namespace("Parsley", new CodeNamespaceImport[0], new CodeTypeDeclaration[] {
                                    Deslanged._TypeDeclaration("ParserContext", true, false, false, false, true, ((MemberAttributes)(0)), TypeAttributes.NotPublic, new CodeTypeParameter[0], new CodeTypeReference[] {
                                                new CodeTypeReference("Object"),
                                                new CodeTypeReference("IDisposable")}, new CodeTypeMember[] {
                                                Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_state", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference("IEnumerator`1", new CodeTypeReference[] {
                                                                new CodeTypeReference("System.Object", CodeTypeReferenceOptions.GenericTypeParameter)}), "_e", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference("LookAheadEnumerator`1", new CodeTypeReference[] {
                                                                new CodeTypeReference("System.Object", CodeTypeReferenceOptions.GenericTypeParameter)}), "_el", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference("Token"), "_t", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_advanceCount", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_line", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_column", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference(typeof(long)), "_position", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._Constructor((MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference("IEnumerable`1", new CodeTypeReference[] {
                                                                            new CodeTypeReference("System.Object", CodeTypeReferenceOptions.GenericTypeParameter)}), "tokenizer")}, new CodeExpression[] {
                                                            new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeArgumentReferenceExpression("tokenizer"), "GetEnumerator"), new CodeExpression[0]),
                                                            new CodePrimitiveExpression(true)}, new CodeExpression[0], new CodeStatement[0], new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._Constructor(MemberAttributes.Private, new CodeParameterDeclarationExpression[] {
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference("IEnumerator`1", new CodeTypeReference[] {
                                                                            new CodeTypeReference("System.Object", CodeTypeReferenceOptions.GenericTypeParameter)}), "enumerator"),
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(bool)), "wrap")}, new CodeExpression[0], new CodeExpression[0], new CodeStatement[] {
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_e"), new CodeArgumentReferenceExpression("enumerator")),
                                                            new CodeConditionStatement(new CodeArgumentReferenceExpression("wrap"), new CodeStatement[] {
                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_el"), new CodeObjectCreateExpression(new CodeTypeReference("LookAheadEnumerator`1", new CodeTypeReference[] {
                                                                                            new CodeTypeReference("System.Object", CodeTypeReferenceOptions.GenericTypeParameter)}), new CodeExpression[] {
                                                                                        new CodeArgumentReferenceExpression("enumerator")})),
                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_e"), new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_el")),
                                                                        new CodeCommentStatement("we need both pointers to point to the lookahead")}, new CodeStatement[0]),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodePrimitiveExpression(-1)),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_t"), "SymbolId"), new CodePrimitiveExpression(-1)),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_advanceCount"), new CodePrimitiveExpression(0))}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberMethod(new CodeTypeReference(typeof(void)), "SetLocation", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "line"),
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "column"),
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(long)), "position")}, new CodeStatement[] {
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line"), new CodeArgumentReferenceExpression("line")),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), new CodeArgumentReferenceExpression("column")),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_position"), new CodeArgumentReferenceExpression("position"))}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberMethod(new CodeTypeReference(typeof(void)), "EnsureStarted", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(-1), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state")), new CodeStatement[] {
                                                                        new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "Advance"), new CodeExpression[0]))}, new CodeStatement[0])}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberMethod(new CodeTypeReference("ParserContext"), "GetLookAhead", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(null), CodeBinaryOperatorType.IdentityEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_el")), new CodeStatement[] {
                                                                        new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("NotSupportedException"), new CodeExpression[] {
                                                                                        new CodePrimitiveExpression("This parser context does not support lookahead.")}))}, new CodeStatement[0]),
                                                            new CodeVariableDeclarationStatement(new CodeTypeReference("ParserContext"), "result", new CodeObjectCreateExpression(new CodeTypeReference("ParserContext"), new CodeExpression[] {
                                                                            new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_el"), "LookAhead"), "GetEnumerator"), new CodeExpression[0]),
                                                                            new CodePrimitiveExpression(true)})),
                                                            new CodeMethodReturnStatement(new CodeVariableReferenceExpression("result"))}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberProperty(new CodeTypeReference("Token"), "Current", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_t"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberMethod(new CodeTypeReference("ParserContext"), "GetLookAhead", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(bool)), "start")}, new CodeStatement[] {
                                                            new CodeVariableDeclarationStatement(new CodeTypeReference("ParserContext"), "result", new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "GetLookAhead"), new CodeExpression[0])),
                                                            new CodeConditionStatement(new CodeArgumentReferenceExpression("start"), new CodeStatement[] {
                                                                        new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeVariableReferenceExpression("result"), "EnsureStarted"), new CodeExpression[0]))}, new CodeStatement[0]),
                                                            new CodeMethodReturnStatement(new CodeVariableReferenceExpression("result"))}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberProperty(new CodeTypeReference(typeof(int)), "AdvanceCount", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_advanceCount"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberMethod(new CodeTypeReference(typeof(void)), "ResetAdvanceCount", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_advanceCount"), new CodePrimitiveExpression(0))}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberProperty(new CodeTypeReference(typeof(int)), "SymbolId", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_t"), "SymbolId"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberProperty(new CodeTypeReference(typeof(string)), "Value", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_t"), "Value"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberProperty(new CodeTypeReference(typeof(int)), "Line", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_t"), "Line"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberProperty(new CodeTypeReference(typeof(int)), "Column", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_t"), "Column"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberProperty(new CodeTypeReference(typeof(long)), "Position", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_t"), "Position"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberProperty(new CodeTypeReference(typeof(bool)), "IsEnded", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeMethodReturnStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(-2), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state")))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberProperty(new CodeTypeReference(new CodeTypeReference("Token"), 1), "Skipped", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_t"), "Skipped"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberMethod(new CodeTypeReference(typeof(bool)), "Advance", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_e"), "MoveNext"), new CodeExpression[0])), new CodeStatement[] {
                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_t"), "SymbolId"), new CodePrimitiveExpression(-2)),
                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodePrimitiveExpression(-2))}, new CodeStatement[] {
                                                                        new CodeCommentStatement("sanity check. should never happen"),
                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(int))), "MaxValue"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_advanceCount")), new CodeStatement[] {
                                                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_advanceCount"), new CodePrimitiveExpression(-1))}, new CodeStatement[0]),
                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_advanceCount"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_advanceCount"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodePrimitiveExpression(0)),
                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_t"), new CodeCastExpression(new CodeTypeReference("Token"), new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_e"), "Current"))),
                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeCastExpression(new CodeTypeReference("Token"), new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_t")), "Line"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeCastExpression(new CodeTypeReference("Token"), new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_t")), "Line"), CodeBinaryOperatorType.Add, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line"))),
                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeCastExpression(new CodeTypeReference("Token"), new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_t")), "Column"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeCastExpression(new CodeTypeReference("Token"), new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_t")), "Column"), CodeBinaryOperatorType.Add, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"))),
                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeCastExpression(new CodeTypeReference("Token"), new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_t")), "Position"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeCastExpression(new CodeTypeReference("Token"), new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_t")), "Position"), CodeBinaryOperatorType.Add, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_position"))),
                                                                        new CodeMethodReturnStatement(new CodePrimitiveExpression(true))}),
                                                            new CodeMethodReturnStatement(new CodePrimitiveExpression(false))}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberMethod(new CodeTypeReference(typeof(void)), "Error", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(string)), "message"),
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(object)), "arg1"),
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(object)), "arg2"),
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(object)), "arg3")}, new CodeStatement[] {
                                                            new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("SyntaxException"), new CodeExpression[] {
                                                                            new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(string))), "Format"), new CodeExpression[] {
                                                                                        new CodeArgumentReferenceExpression("message"),
                                                                                        new CodeArgumentReferenceExpression("arg1"),
                                                                                        new CodeArgumentReferenceExpression("arg2"),
                                                                                        new CodeArgumentReferenceExpression("arg3")}),
                                                                            new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Line"),
                                                                            new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Column"),
                                                                            new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Position")}))}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberMethod(new CodeTypeReference(typeof(void)), "Error", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(string)), "message"),
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(object)), "arg1"),
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(object)), "arg2")}, new CodeStatement[] {
                                                            new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("SyntaxException"), new CodeExpression[] {
                                                                            new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(string))), "Format"), new CodeExpression[] {
                                                                                        new CodeArgumentReferenceExpression("message"),
                                                                                        new CodeArgumentReferenceExpression("arg1"),
                                                                                        new CodeArgumentReferenceExpression("arg2")}),
                                                                            new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Line"),
                                                                            new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Column"),
                                                                            new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Position")}))}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberMethod(new CodeTypeReference(typeof(void)), "Error", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(string)), "message"),
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(object)), "arg")}, new CodeStatement[] {
                                                            new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("SyntaxException"), new CodeExpression[] {
                                                                            new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(string))), "Format"), new CodeExpression[] {
                                                                                        new CodeArgumentReferenceExpression("message"),
                                                                                        new CodeArgumentReferenceExpression("arg")}),
                                                                            new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Line"),
                                                                            new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Column"),
                                                                            new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Position")}))}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberMethod(new CodeTypeReference(typeof(void)), "Error", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(string)), "message")}, new CodeStatement[] {
                                                            new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("SyntaxException"), new CodeExpression[] {
                                                                            new CodeArgumentReferenceExpression("message"),
                                                                            new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Line"),
                                                                            new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Column"),
                                                                            new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Position")}))}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberMethod(new CodeTypeReference(typeof(void)), "Dispose", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_e"), "Dispose"), new CodeExpression[0])),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodePrimitiveExpression(-3))}, new CodeTypeReference[] {
                                                            new CodeTypeReference("IDisposable")}, null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0])}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0]);
        }
    }
    public static System.CodeDom.CodeCompileUnit ParseNode {
        get {
            return Deslanged._CompileUnit(new string[0], new CodeNamespace[] {
                        Deslanged._Namespace("", new CodeNamespaceImport[] {
                                    new CodeNamespaceImport("System.Collections.Generic")}, new CodeTypeDeclaration[0], new CodeCommentStatement[0]),
                        Deslanged._Namespace("Parsley", new CodeNamespaceImport[0], new CodeTypeDeclaration[] {
                                    Deslanged._TypeDeclaration("ParseNode", true, false, false, false, true, ((MemberAttributes)(0)), TypeAttributes.NotPublic, new CodeTypeParameter[0], new CodeTypeReference[0], new CodeTypeMember[] {
                                                Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_symbolId", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference(typeof(string)), "_symbol", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference(typeof(string)), "_value", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_line", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_column", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference(typeof(long)), "_position", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference(new CodeTypeReference("ParseNode"), 1), "_children", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._Constructor((MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "symbolId"),
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(string)), "symbol"),
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(new CodeTypeReference("ParseNode"), 1), "children"),
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "line"),
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "column"),
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(long)), "position")}, new CodeExpression[0], new CodeExpression[0], new CodeStatement[] {
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_symbolId"), new CodeArgumentReferenceExpression("symbolId")),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_symbol"), new CodeArgumentReferenceExpression("symbol")),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_value"), new CodePrimitiveExpression(null)),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_children"), new CodeArgumentReferenceExpression("children")),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line"), new CodeArgumentReferenceExpression("line")),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), new CodeArgumentReferenceExpression("column")),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_position"), new CodeArgumentReferenceExpression("position"))}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._Constructor((MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "symbolId"),
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(string)), "symbol"),
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(string)), "value"),
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "line"),
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "column"),
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(long)), "position")}, new CodeExpression[0], new CodeExpression[0], new CodeStatement[] {
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_symbolId"), new CodeArgumentReferenceExpression("symbolId")),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_symbol"), new CodeArgumentReferenceExpression("symbol")),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_value"), new CodeArgumentReferenceExpression("value")),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_children"), new CodePrimitiveExpression(null)),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line"), new CodeArgumentReferenceExpression("line")),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), new CodeArgumentReferenceExpression("column")),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_position"), new CodeArgumentReferenceExpression("position"))}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberProperty(new CodeTypeReference(typeof(bool)), "IsNonTerminal", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeMethodReturnStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(null), CodeBinaryOperatorType.IdentityInequality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_children")))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberProperty(new CodeTypeReference(new CodeTypeReference("ParseNode"), 1), "Children", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_children"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberProperty(new CodeTypeReference(typeof(int)), "SymbolId", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_symbolId"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberProperty(new CodeTypeReference(typeof(string)), "Symbol", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_symbol"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberProperty(new CodeTypeReference(typeof(string)), "Value", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_value"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberProperty(new CodeTypeReference(typeof(int)), "Line", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberProperty(new CodeTypeReference(typeof(int)), "Column", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberProperty(new CodeTypeReference(typeof(long)), "Position", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_position"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0])}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0]);
        }
    }
    public static System.CodeDom.CodeCompileUnit SyntaxException {
        get {
            return Deslanged._CompileUnit(new string[0], new CodeNamespace[] {
                        Deslanged._Namespace("", new CodeNamespaceImport[] {
                                    new CodeNamespaceImport("System")}, new CodeTypeDeclaration[0], new CodeCommentStatement[0]),
                        Deslanged._Namespace("Parsley", new CodeNamespaceImport[0], new CodeTypeDeclaration[] {
                                    Deslanged._TypeDeclaration("SyntaxException", true, false, false, false, false, ((MemberAttributes)(0)), TypeAttributes.NotPublic, new CodeTypeParameter[0], new CodeTypeReference[] {
                                                new CodeTypeReference("Exception")}, new CodeTypeMember[] {
                                                Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_line", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_column", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference(typeof(long)), "_position", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._Constructor((MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(string)), "message"),
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "line"),
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "column"),
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(long)), "position")}, new CodeExpression[0], new CodeExpression[] {
                                                            new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Parsley.SyntaxException")), "_GetMessage"), new CodeExpression[] {
                                                                        new CodeArgumentReferenceExpression("message"),
                                                                        new CodeArgumentReferenceExpression("line"),
                                                                        new CodeArgumentReferenceExpression("column"),
                                                                        new CodeArgumentReferenceExpression("position")})}, new CodeStatement[] {
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line"), new CodeArgumentReferenceExpression("line")),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), new CodeArgumentReferenceExpression("column")),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_position"), new CodeArgumentReferenceExpression("position"))}, new CodeCommentStatement[] {
                                                            new CodeCommentStatement("<summary>", true),
                                                            new CodeCommentStatement("Creates a syntax exception with the specified arguments", true),
                                                            new CodeCommentStatement("</summary>", true),
                                                            new CodeCommentStatement("<param name=\"message\">The error message</param>", true),
                                                            new CodeCommentStatement("<param name=\"line\">The line where the error occurred</param>", true),
                                                            new CodeCommentStatement("<param name=\"column\">The column where the error occured</param>", true),
                                                            new CodeCommentStatement("<param name=\"position\">The position where the error occured</param>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberProperty(new CodeTypeReference(typeof(int)), "Line", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[] {
                                                            new CodeCommentStatement("<summary>", true),
                                                            new CodeCommentStatement("The line where the error occurred", true),
                                                            new CodeCommentStatement("</summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberProperty(new CodeTypeReference(typeof(int)), "Column", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[] {
                                                            new CodeCommentStatement("<summary>", true),
                                                            new CodeCommentStatement("The column where the error occurred", true),
                                                            new CodeCommentStatement("</summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberProperty(new CodeTypeReference(typeof(long)), "Position", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_position"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[] {
                                                            new CodeCommentStatement("<summary>", true),
                                                            new CodeCommentStatement("The position where the error occurred", true),
                                                            new CodeCommentStatement("</summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberMethod(new CodeTypeReference(typeof(string)), "_GetMessage", MemberAttributes.Static, new CodeParameterDeclarationExpression[] {
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(string)), "message"),
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "line"),
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "column"),
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(long)), "position")}, new CodeStatement[] {
                                                            new CodeMethodReturnStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(string))), "Format"), new CodeExpression[] {
                                                                            new CodePrimitiveExpression("{0} at line {1}, column {2}, position {3}"),
                                                                            new CodeArgumentReferenceExpression("message"),
                                                                            new CodeArgumentReferenceExpression("line"),
                                                                            new CodeArgumentReferenceExpression("column"),
                                                                            new CodeArgumentReferenceExpression("position")}))}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[] {
                                                new CodeCommentStatement("<summary>", true),
                                                new CodeCommentStatement("", true),
                                                new CodeCommentStatement("</summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0])}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0]);
        }
    }
    private static CodeParameterDeclarationExpression _ParameterDeclarationExpression(CodeTypeReference type, string name, FieldDirection direction, CodeAttributeDeclaration[] customAttributes) {
        CodeParameterDeclarationExpression result = new CodeParameterDeclarationExpression(type, name);
        result.Direction = direction;
        result.CustomAttributes.AddRange(customAttributes);
        return result;
    }
    public static System.CodeDom.CodeCompileUnit LookAheadEnumerator {
        get {
            return Deslanged._CompileUnit(new string[0], new CodeNamespace[] {
                        Deslanged._Namespace("", new CodeNamespaceImport[] {
                                    new CodeNamespaceImport("System"),
                                    new CodeNamespaceImport("System.Collections.Generic")}, new CodeTypeDeclaration[0], new CodeCommentStatement[0]),
                        Deslanged._Namespace("Parsley", new CodeNamespaceImport[0], new CodeTypeDeclaration[] {
                                    Deslanged._TypeDeclaration("LookAheadEnumerator", true, false, false, false, false, ((MemberAttributes)(0)), TypeAttributes.NotPublic, new CodeTypeParameter[] {
                                                new CodeTypeParameter("T")}, new CodeTypeReference[] {
                                                new CodeTypeReference(typeof(object)),
                                                new CodeTypeReference("IEnumerator`1", new CodeTypeReference[] {
                                                            new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)})}, new CodeTypeMember[] {
                                                Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_Enumerating", new CodePrimitiveExpression(0), (MemberAttributes.Const | MemberAttributes. Private), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_NotStarted", new CodePrimitiveExpression(-2), (MemberAttributes.Const | MemberAttributes. Private), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_Ended", new CodePrimitiveExpression(-1), (MemberAttributes.Const | MemberAttributes. Private), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_Disposed", new CodePrimitiveExpression(-3), (MemberAttributes.Const | MemberAttributes. Private), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference("IEnumerator`1", new CodeTypeReference[] {
                                                                new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)}), "_inner", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_state", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_DefaultCapacity", new CodePrimitiveExpression(16), (MemberAttributes.Const | MemberAttributes. Private), new CodeCommentStatement[] {
                                                            new CodeCommentStatement("for the lookahead queue")}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference(typeof(float)), "_GrowthFactor", new CodePrimitiveExpression(0.9F), (MemberAttributes.Const | MemberAttributes. Private), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference(new CodeTypeReference("T"), 1), "_queue", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_queueHead", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_queueCount", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._Constructor((MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference("IEnumerator`1", new CodeTypeReference[] {
                                                                            new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)}), "inner")}, new CodeExpression[0], new CodeExpression[0], new CodeStatement[] {
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_inner"), new CodeArgumentReferenceExpression("inner")),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Parsley.LookAheadEnumerator`1", new CodeTypeReference[] {
                                                                                    new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)})), "_NotStarted")),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queue"), new CodeArrayCreateExpression(new CodeTypeReference(new CodeTypeReference("T"), 1), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Parsley.LookAheadEnumerator`1", new CodeTypeReference[] {
                                                                                        new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)})), "_DefaultCapacity"))),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueHead"), new CodePrimitiveExpression(0)),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueCount"), new CodePrimitiveExpression(0))}, new CodeCommentStatement[] {
                                                            new CodeCommentStatement("<summary>", true),
                                                            new CodeCommentStatement("Creates a new instance. Once this is created, the inner/wrapped enumerator must n" +
                                                                    "ot be touched.", true),
                                                            new CodeCommentStatement("</summary>", true),
                                                            new CodeCommentStatement("<param name=\"inner\"></param>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberMethod(new CodeTypeReference(typeof(void)), "DiscardLookAhead", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeIterationStatement(new CodeSnippetStatement(""), new CodeBinaryOperatorExpression(new CodePrimitiveExpression(1), CodeBinaryOperatorType.LessThan, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueCount")), new CodeSnippetStatement(""), new CodeStatement[] {
                                                                        new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_Dequeue"), new CodeExpression[0]))})}, new CodeTypeReference[0], null, new CodeCommentStatement[] {
                                                            new CodeCommentStatement("<summary>", true),
                                                            new CodeCommentStatement("Discards the lookahead and advances the cursor to the physical position.", true),
                                                            new CodeCommentStatement("</summary>", true)}, new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberProperty(new CodeTypeReference("T"), "Current", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.GreaterThan, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state")), new CodeStatement[] {
                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Parsley.LookAheadEnumerator`1", new CodeTypeReference[] {
                                                                                                    new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)})), "_NotStarted"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state")), new CodeStatement[] {
                                                                                    new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("InvalidOperationException"), new CodeExpression[] {
                                                                                                    new CodePrimitiveExpression("The cursor is before the start of the enumeration.")}))}, new CodeStatement[0]),
                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Parsley.LookAheadEnumerator`1", new CodeTypeReference[] {
                                                                                                    new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)})), "_Ended"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state")), new CodeStatement[] {
                                                                                    new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("InvalidOperationException"), new CodeExpression[] {
                                                                                                    new CodePrimitiveExpression("The cursor is after the end of the enumeration.")}))}, new CodeStatement[0]),
                                                                        new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("ObjectDisposedException"), new CodeExpression[] {
                                                                                        new CodePropertyReferenceExpression(new CodeTypeOfExpression(new CodeTypeReference("LookAheadEnumerator`1", new CodeTypeReference[] {
                                                                                                            new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)})), "Name")}))}, new CodeStatement[0]),
                                                            new CodeMethodReturnStatement(new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queue"), new CodeExpression[] {
                                                                            new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueHead")}))}, new CodeStatement[0], new CodeTypeReference[] {
                                                            new CodeTypeReference("IEnumerator`1", new CodeTypeReference[] {
                                                                        new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)})}, null, new CodeCommentStatement[] {
                                                            new CodeCommentStatement("<summary>", true),
                                                            new CodeCommentStatement("Retrieves the value under the cursor", true),
                                                            new CodeCommentStatement("</summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberProperty(new CodeTypeReference(typeof(object)), "Current", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeMethodReturnStatement(new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Current"))}, new CodeStatement[0], new CodeTypeReference[0], new CodeTypeReference(typeof(System.Collections.IEnumerator)), new CodeCommentStatement[] {
                                                            new CodeCommentStatement("legacy enum support (required)")}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberProperty(new CodeTypeReference(typeof(int)), "QueueCount", MemberAttributes.FamilyAndAssembly, new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueCount"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberMethod(new CodeTypeReference(typeof(bool)), "TryPeek", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "lookahead"),
                                                            Deslanged._ParameterDeclarationExpression(new CodeTypeReference("T"), "value", FieldDirection.Out, new CodeAttributeDeclaration[0])}, new CodeStatement[] {
                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Parsley.LookAheadEnumerator`1", new CodeTypeReference[] {
                                                                                        new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)})), "_Disposed"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state")), new CodeStatement[] {
                                                                        new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("ObjectDisposedException"), new CodeExpression[] {
                                                                                        new CodePropertyReferenceExpression(new CodeTypeOfExpression(new CodeTypeReference("LookAheadEnumerator`1", new CodeTypeReference[] {
                                                                                                            new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)})), "Name")}))}, new CodeStatement[0]),
                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.GreaterThan, new CodeArgumentReferenceExpression("lookahead")), new CodeStatement[] {
                                                                        new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("ArgumentOutOfRangeException"), new CodeExpression[] {
                                                                                        new CodePrimitiveExpression("lookahead")}))}, new CodeStatement[0]),
                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Parsley.LookAheadEnumerator`1", new CodeTypeReference[] {
                                                                                        new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)})), "_Ended"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state")), new CodeStatement[] {
                                                                        new CodeAssignStatement(new CodeArgumentReferenceExpression("value"), new CodeDefaultValueExpression(new CodeTypeReference("T"))),
                                                                        new CodeMethodReturnStatement(new CodePrimitiveExpression(false))}, new CodeStatement[0]),
                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Parsley.LookAheadEnumerator`1", new CodeTypeReference[] {
                                                                                        new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)})), "_NotStarted"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state")), new CodeStatement[] {
                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.ValueEquality, new CodeArgumentReferenceExpression("lookahead")), new CodeStatement[] {
                                                                                    new CodeAssignStatement(new CodeArgumentReferenceExpression("value"), new CodeDefaultValueExpression(new CodeTypeReference("T"))),
                                                                                    new CodeMethodReturnStatement(new CodePrimitiveExpression(false))}, new CodeStatement[0])}, new CodeStatement[0]),
                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeArgumentReferenceExpression("lookahead"), CodeBinaryOperatorType.LessThan, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueCount")), new CodeStatement[] {
                                                                        new CodeAssignStatement(new CodeArgumentReferenceExpression("value"), new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queue"), new CodeExpression[] {
                                                                                        new CodeBinaryOperatorExpression(new CodeBinaryOperatorExpression(new CodeArgumentReferenceExpression("lookahead"), CodeBinaryOperatorType.Add, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueHead")), CodeBinaryOperatorType.Modulus, new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queue"), "Length"))})),
                                                                        new CodeMethodReturnStatement(new CodePrimitiveExpression(true))}, new CodeStatement[0]),
                                                            new CodeAssignStatement(new CodeArgumentReferenceExpression("lookahead"), new CodeBinaryOperatorExpression(new CodeArgumentReferenceExpression("lookahead"), CodeBinaryOperatorType.Subtract, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueCount"))),
                                                            new CodeAssignStatement(new CodeArgumentReferenceExpression("value"), new CodeDefaultValueExpression(new CodeTypeReference("T"))),
                                                            new CodeIterationStatement(new CodeSnippetStatement(""), new CodeBinaryOperatorExpression(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.LessThanOrEqual, new CodeArgumentReferenceExpression("lookahead")), CodeBinaryOperatorType.BooleanAnd, new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_inner"), "MoveNext"), new CodeExpression[0])), new CodeSnippetStatement(""), new CodeStatement[] {
                                                                        new CodeAssignStatement(new CodeArgumentReferenceExpression("value"), new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_inner"), "Current")),
                                                                        new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_Enqueue"), new CodeExpression[] {
                                                                                        new CodeArgumentReferenceExpression("value")})),
                                                                        new CodeAssignStatement(new CodeArgumentReferenceExpression("lookahead"), new CodeBinaryOperatorExpression(new CodeArgumentReferenceExpression("lookahead"), CodeBinaryOperatorType.Subtract, new CodePrimitiveExpression(1)))}),
                                                            new CodeMethodReturnStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(-1), CodeBinaryOperatorType.ValueEquality, new CodeArgumentReferenceExpression("lookahead")))}, new CodeTypeReference[0], null, new CodeCommentStatement[] {
                                                            new CodeCommentStatement("<summary>", true),
                                                            new CodeCommentStatement("Attempts to peek the specified number of positions from the current position with" +
                                                                    "out advancing", true),
                                                            new CodeCommentStatement("</summary>", true),
                                                            new CodeCommentStatement("<param name=\"lookahead\">The offset from the current position to peek at</param>", true),
                                                            new CodeCommentStatement("<param name=\"value\">The value returned</param>", true),
                                                            new CodeCommentStatement("<returns>True if the peek could be satisfied, otherwise false</returns>", true)}, new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberMethod(new CodeTypeReference("T"), "Peek", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "lookahead")}, new CodeStatement[] {
                                                            new CodeVariableDeclarationStatement(new CodeTypeReference("T"), "value", null),
                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "TryPeek"), new CodeExpression[] {
                                                                                new CodeArgumentReferenceExpression("lookahead"),
                                                                                new CodeDirectionExpression(FieldDirection.Out, new CodeVariableReferenceExpression("value"))})), new CodeStatement[] {
                                                                        new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("InvalidOperationException"), new CodeExpression[] {
                                                                                        new CodePrimitiveExpression("There were not enough values in the enumeration to satisfy the request")}))}, new CodeStatement[0]),
                                                            new CodeMethodReturnStatement(new CodeVariableReferenceExpression("value"))}, new CodeTypeReference[0], null, new CodeCommentStatement[] {
                                                            new CodeCommentStatement("<summary>", true),
                                                            new CodeCommentStatement("Peek the specified number of positions from the current position without advancin" +
                                                                    "g", true),
                                                            new CodeCommentStatement("</summary>", true),
                                                            new CodeCommentStatement("<param name=\"lookahead\">The offset from the current position to peek at</param>", true),
                                                            new CodeCommentStatement("<returns>The value at the specified position</returns>", true)}, new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberProperty(new CodeTypeReference(typeof(bool)), "IsEnumerating", MemberAttributes.FamilyAndAssembly, new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeMethodReturnStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(-1), CodeBinaryOperatorType.LessThan, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state")))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberProperty(new CodeTypeReference(typeof(bool)), "IsEnded", MemberAttributes.FamilyAndAssembly, new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeMethodReturnStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Parsley.LookAheadEnumerator`1", new CodeTypeReference[] {
                                                                                        new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)})), "_Ended"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state")))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberProperty(new CodeTypeReference("IEnumerable`1", new CodeTypeReference[] {
                                                                new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)}), "LookAhead", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.GreaterThan, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state")), new CodeStatement[] {
                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Parsley.LookAheadEnumerator`1", new CodeTypeReference[] {
                                                                                                    new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)})), "_NotStarted")), new CodeStatement[] {
                                                                                    new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("InvalidOperationException"), new CodeExpression[] {
                                                                                                    new CodePrimitiveExpression("The cursor is before the start of the enumeration.")}))}, new CodeStatement[0]),
                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Parsley.LookAheadEnumerator`1", new CodeTypeReference[] {
                                                                                                    new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)})), "_Ended")), new CodeStatement[] {
                                                                                    new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("InvalidOperationException"), new CodeExpression[] {
                                                                                                    new CodePrimitiveExpression("The cursor is after the end of the enumeration.")}))}, new CodeStatement[0]),
                                                                        new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("ObjectDisposedException"), new CodeExpression[] {
                                                                                        new CodePropertyReferenceExpression(new CodeTypeOfExpression(new CodeTypeReference("LookAheadEnumerator`1", new CodeTypeReference[] {
                                                                                                            new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)})), "Name")}))}, new CodeStatement[0]),
                                                            new CodeMethodReturnStatement(new CodeObjectCreateExpression(new CodeTypeReference("LookAheadEnumeratorEnumerable`1", new CodeTypeReference[] {
                                                                                new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)}), new CodeExpression[] {
                                                                            new CodeThisReferenceExpression()}))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[] {
                                                            new CodeCommentStatement("<summary>", true),
                                                            new CodeCommentStatement("Retrieves a lookahead cursor from the current cursor that can be navigated withou" +
                                                                    "t moving the main cursor", true),
                                                            new CodeCommentStatement("</summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberMethod(new CodeTypeReference(typeof(bool)), "MoveNext", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.GreaterThan, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state")), new CodeStatement[] {
                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Parsley.LookAheadEnumerator`1", new CodeTypeReference[] {
                                                                                                    new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)})), "_Disposed"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state")), new CodeStatement[] {
                                                                                    new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("ObjectDisposedException"), new CodeExpression[] {
                                                                                                    new CodePropertyReferenceExpression(new CodeTypeOfExpression(new CodeTypeReference("LookAheadEnumerator`1", new CodeTypeReference[] {
                                                                                                                        new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)})), "Name")}))}, new CodeStatement[0]),
                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Parsley.LookAheadEnumerator`1", new CodeTypeReference[] {
                                                                                                    new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)})), "_Ended"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state")), new CodeStatement[] {
                                                                                    new CodeMethodReturnStatement(new CodePrimitiveExpression(false))}, new CodeStatement[0]),
                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Parsley.LookAheadEnumerator`1", new CodeTypeReference[] {
                                                                                                    new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)})), "_NotStarted"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state")), new CodeStatement[] {
                                                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.LessThan, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueCount")), new CodeStatement[] {
                                                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Parsley.LookAheadEnumerator`1", new CodeTypeReference[] {
                                                                                                                        new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)})), "_Enumerating")),
                                                                                                new CodeMethodReturnStatement(new CodePrimitiveExpression(true))}, new CodeStatement[0]),
                                                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_inner"), "MoveNext"), new CodeExpression[0])), new CodeStatement[] {
                                                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Parsley.LookAheadEnumerator`1", new CodeTypeReference[] {
                                                                                                                        new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)})), "_Ended")),
                                                                                                new CodeMethodReturnStatement(new CodePrimitiveExpression(false))}, new CodeStatement[0]),
                                                                                    new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_Enqueue"), new CodeExpression[] {
                                                                                                    new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_inner"), "Current")})),
                                                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Parsley.LookAheadEnumerator`1", new CodeTypeReference[] {
                                                                                                            new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)})), "_Enumerating")),
                                                                                    new CodeMethodReturnStatement(new CodePrimitiveExpression(true))}, new CodeStatement[0])}, new CodeStatement[0]),
                                                            new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_Dequeue"), new CodeExpression[0])),
                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueCount")), new CodeStatement[] {
                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_inner"), "MoveNext"), new CodeExpression[0])), new CodeStatement[] {
                                                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Parsley.LookAheadEnumerator`1", new CodeTypeReference[] {
                                                                                                            new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)})), "_Ended")),
                                                                                    new CodeMethodReturnStatement(new CodePrimitiveExpression(false))}, new CodeStatement[0]),
                                                                        new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_Enqueue"), new CodeExpression[] {
                                                                                        new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_inner"), "Current")}))}, new CodeStatement[0]),
                                                            new CodeMethodReturnStatement(new CodePrimitiveExpression(true))}, new CodeTypeReference[0], new CodeTypeReference(typeof(System.Collections.IEnumerator)), new CodeCommentStatement[] {
                                                            new CodeCommentStatement("<summary>", true),
                                                            new CodeCommentStatement("Advances the cursor", true),
                                                            new CodeCommentStatement("</summary>", true),
                                                            new CodeCommentStatement("<returns>True if more input was read, otherwise false</returns>", true)}, new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberMethod(new CodeTypeReference(typeof(void)), "Reset", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_inner"), "Reset"), new CodeExpression[0])),
                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.LessThan, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueCount")), CodeBinaryOperatorType.BooleanAnd, new CodeBinaryOperatorExpression(new CodePrimitiveExpression(null), CodeBinaryOperatorType.IdentityEquality, new CodeDefaultValueExpression(new CodeTypeReference("T")))), new CodeStatement[] {
                                                                        new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(System.Array))), "Clear"), new CodeExpression[] {
                                                                                        new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queue"),
                                                                                        new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueHead"),
                                                                                        new CodeBinaryOperatorExpression(new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queue"), "Length"), CodeBinaryOperatorType.Subtract, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueHead"))})),
                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueHead"), CodeBinaryOperatorType.Add, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueCount")), CodeBinaryOperatorType.GreaterThanOrEqual, new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queue"), "Length")), new CodeStatement[] {
                                                                                    new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(System.Array))), "Clear"), new CodeExpression[] {
                                                                                                    new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queue"),
                                                                                                    new CodePrimitiveExpression(0),
                                                                                                    new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueHead"), CodeBinaryOperatorType.Add, new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueCount"), CodeBinaryOperatorType.Modulus, new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queue"), "Length")))}))}, new CodeStatement[0])}, new CodeStatement[0]),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueHead"), new CodePrimitiveExpression(0)),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueCount"), new CodePrimitiveExpression(0)),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Parsley.LookAheadEnumerator`1", new CodeTypeReference[] {
                                                                                    new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)})), "_NotStarted"))}, new CodeTypeReference[0], new CodeTypeReference(typeof(System.Collections.IEnumerator)), new CodeCommentStatement[] {
                                                            new CodeCommentStatement("<summary>", true),
                                                            new CodeCommentStatement("Resets the cursor, and clears the queue.", true),
                                                            new CodeCommentStatement("</summary>", true)}, new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberMethod(new CodeTypeReference(typeof(void)), "Dispose", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Parsley.LookAheadEnumerator`1", new CodeTypeReference[] {
                                                                                            new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)})), "_Disposed"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"))), new CodeStatement[] {
                                                                        new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_inner"), "Dispose"), new CodeExpression[0])),
                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Parsley.LookAheadEnumerator`1", new CodeTypeReference[] {
                                                                                                new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)})), "_Disposed"))}, new CodeStatement[0])}, new CodeTypeReference[0], new CodeTypeReference(typeof(System.IDisposable)), new CodeCommentStatement[] {
                                                            new CodeCommentStatement("<summary>", true),
                                                            new CodeCommentStatement("Disposes of this instance", true),
                                                            new CodeCommentStatement("</summary>", true)}, new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[] {
                                                            new CodeRegionDirective(CodeRegionMode.Start, "IDisposable Support")}, new CodeDirective[0], null),
                                                Deslanged._MemberMethod(new CodeTypeReference(typeof(void)), "_Enqueue", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[] {
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference("T"), "item")}, new CodeStatement[] {
                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueCount"), CodeBinaryOperatorType.ValueEquality, new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queue"), "Length")), new CodeStatement[] {
                                                                        new CodeVariableDeclarationStatement(new CodeTypeReference(new CodeTypeReference("T"), 1), "arr", new CodeArrayCreateExpression(new CodeTypeReference(new CodeTypeReference("T"), 1), new CodeCastExpression(new CodeTypeReference(typeof(int)), new CodeBinaryOperatorExpression(new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queue"), "Length"), CodeBinaryOperatorType.Multiply, new CodeBinaryOperatorExpression(new CodePrimitiveExpression(1), CodeBinaryOperatorType.Add, new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Parsley.LookAheadEnumerator`1", new CodeTypeReference[] {
                                                                                                                new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)})), "_GrowthFactor")))))),
                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueHead"), CodeBinaryOperatorType.Add, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueCount")), CodeBinaryOperatorType.LessThanOrEqual, new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queue"), "Length")), new CodeStatement[] {
                                                                                    new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(System.Array))), "Copy"), new CodeExpression[] {
                                                                                                    new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queue"),
                                                                                                    new CodeVariableReferenceExpression("arr"),
                                                                                                    new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueCount")})),
                                                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueHead"), new CodePrimitiveExpression(0)),
                                                                                    new CodeAssignStatement(new CodeArrayIndexerExpression(new CodeVariableReferenceExpression("arr"), new CodeExpression[] {
                                                                                                    new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueCount")}), new CodeArgumentReferenceExpression("item")),
                                                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueCount"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueCount"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queue"), new CodeVariableReferenceExpression("arr"))}, new CodeStatement[] {
                                                                                    new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(System.Array))), "Copy"), new CodeExpression[] {
                                                                                                    new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queue"),
                                                                                                    new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueHead"),
                                                                                                    new CodeVariableReferenceExpression("arr"),
                                                                                                    new CodePrimitiveExpression(0),
                                                                                                    new CodeBinaryOperatorExpression(new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queue"), "Length"), CodeBinaryOperatorType.Subtract, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueHead"))})),
                                                                                    new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(System.Array))), "Copy"), new CodeExpression[] {
                                                                                                    new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queue"),
                                                                                                    new CodePrimitiveExpression(0),
                                                                                                    new CodeVariableReferenceExpression("arr"),
                                                                                                    new CodeBinaryOperatorExpression(new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queue"), "Length"), CodeBinaryOperatorType.Subtract, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueHead")),
                                                                                                    new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueHead")})),
                                                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueHead"), new CodePrimitiveExpression(0)),
                                                                                    new CodeAssignStatement(new CodeArrayIndexerExpression(new CodeVariableReferenceExpression("arr"), new CodeExpression[] {
                                                                                                    new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueCount")}), new CodeArgumentReferenceExpression("item")),
                                                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueCount"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueCount"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queue"), new CodeVariableReferenceExpression("arr"))})}, new CodeStatement[] {
                                                                        new CodeAssignStatement(new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queue"), new CodeExpression[] {
                                                                                        new CodeBinaryOperatorExpression(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueHead"), CodeBinaryOperatorType.Add, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueCount")), CodeBinaryOperatorType.Modulus, new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queue"), "Length"))}), new CodeArgumentReferenceExpression("item")),
                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueCount"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueCount"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1)))})}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberMethod(new CodeTypeReference("T"), "_Dequeue", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueCount")), new CodeStatement[] {
                                                                        new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("InvalidOperationException"), new CodeExpression[] {
                                                                                        new CodePrimitiveExpression("The queue is empty")}))}, new CodeStatement[0]),
                                                            new CodeVariableDeclarationStatement(new CodeTypeReference("T"), "result", new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queue"), new CodeExpression[] {
                                                                            new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueHead")})),
                                                            new CodeAssignStatement(new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queue"), new CodeExpression[] {
                                                                            new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueHead")}), new CodeDefaultValueExpression(new CodeTypeReference("T"))),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueHead"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueHead"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueHead"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueHead"), CodeBinaryOperatorType.Modulus, new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queue"), "Length"))),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueCount"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueCount"), CodeBinaryOperatorType.Subtract, new CodePrimitiveExpression(1))),
                                                            new CodeMethodReturnStatement(new CodeVariableReferenceExpression("result"))}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[] {
                                                            new CodeRegionDirective(CodeRegionMode.End, "")}, null)}, new CodeCommentStatement[] {
                                                new CodeCommentStatement("<summary>", true),
                                                new CodeCommentStatement("An enumerator that provides lookahead without advancing the cursor", true),
                                                new CodeCommentStatement("</summary>", true),
                                                new CodeCommentStatement("<typeparam name=\"T\">The type to enumerate</typeparam>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                    Deslanged._TypeDeclaration("LookAheadEnumeratorEnumerable", true, false, false, false, false, ((MemberAttributes)(0)), TypeAttributes.NotPublic, new CodeTypeParameter[] {
                                                new CodeTypeParameter("T")}, new CodeTypeReference[] {
                                                new CodeTypeReference(typeof(object)),
                                                new CodeTypeReference("IEnumerable`1", new CodeTypeReference[] {
                                                            new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)})}, new CodeTypeMember[] {
                                                Deslanged._MemberField(new CodeTypeReference("LookAheadEnumerator`1", new CodeTypeReference[] {
                                                                new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)}), "_outer", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._Constructor((MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference("LookAheadEnumerator`1", new CodeTypeReference[] {
                                                                            new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)}), "outer")}, new CodeExpression[0], new CodeExpression[0], new CodeStatement[] {
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_outer"), new CodeArgumentReferenceExpression("outer"))}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberMethod(new CodeTypeReference("IEnumerator`1", new CodeTypeReference[] {
                                                                new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)}), "GetEnumerator", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeCommentStatement("for some reason VB was resolving new as AddressOf, so use this."),
                                                            new CodeVariableDeclarationStatement(new CodeTypeReference("LookAheadEnumeratorEnumerator`1", new CodeTypeReference[] {
                                                                            new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)}), "result", new CodeCastExpression(new CodeTypeReference("LookAheadEnumeratorEnumerator`1", new CodeTypeReference[] {
                                                                                new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)}), new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(System.Activator))), "CreateInstance"), new CodeExpression[] {
                                                                                new CodeTypeOfExpression(new CodeTypeReference("LookAheadEnumeratorEnumerator`1", new CodeTypeReference[] {
                                                                                                new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)})),
                                                                                new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_outer")}))),
                                                            new CodeMethodReturnStatement(new CodeVariableReferenceExpression("result"))}, new CodeTypeReference[] {
                                                            new CodeTypeReference("IEnumerable`1", new CodeTypeReference[] {
                                                                        new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)})}, null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberMethod(new CodeTypeReference(typeof(System.Collections.IEnumerator)), "GetEnumerator", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeMethodReturnStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "GetEnumerator"), new CodeExpression[0]))}, new CodeTypeReference[0], new CodeTypeReference(typeof(System.Collections.IEnumerable)), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                    Deslanged._TypeDeclaration("LookAheadEnumeratorEnumerator", true, false, false, false, false, ((MemberAttributes)(0)), TypeAttributes.NotPublic, new CodeTypeParameter[] {
                                                new CodeTypeParameter("T")}, new CodeTypeReference[] {
                                                new CodeTypeReference(typeof(object)),
                                                new CodeTypeReference("IEnumerator`1", new CodeTypeReference[] {
                                                            new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)})}, new CodeTypeMember[] {
                                                Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_NotStarted", new CodePrimitiveExpression(-2), (MemberAttributes.Const | MemberAttributes. Private), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_Ended", new CodePrimitiveExpression(-1), (MemberAttributes.Const | MemberAttributes. Private), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_Disposed", new CodePrimitiveExpression(-3), (MemberAttributes.Const | MemberAttributes. Private), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference("LookAheadEnumerator`1", new CodeTypeReference[] {
                                                                new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)}), "_outer", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_index", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference("T"), "_current", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._Constructor((MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference("LookAheadEnumerator`1", new CodeTypeReference[] {
                                                                            new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)}), "outer")}, new CodeExpression[0], new CodeExpression[0], new CodeStatement[] {
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_outer"), new CodeArgumentReferenceExpression("outer")),
                                                            new CodeConditionStatement(new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_outer"), "IsEnumerating"), new CodeStatement[] {
                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_outer"), "Current"))}, new CodeStatement[0]),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_index"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Parsley.LookAheadEnumeratorEnumerator`1", new CodeTypeReference[] {
                                                                                    new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)})), "_NotStarted"))}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberProperty(new CodeTypeReference("T"), "Current", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.GreaterThan, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_index")), new CodeStatement[] {
                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_index"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Parsley.LookAheadEnumeratorEnumerator`1", new CodeTypeReference[] {
                                                                                                    new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)})), "_NotStarted")), new CodeStatement[] {
                                                                                    new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("InvalidOperationException"), new CodeExpression[] {
                                                                                                    new CodePrimitiveExpression("The cursor is before the start of the enumeration.")}))}, new CodeStatement[0]),
                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_index"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Parsley.LookAheadEnumeratorEnumerator`1", new CodeTypeReference[] {
                                                                                                    new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)})), "_Ended")), new CodeStatement[] {
                                                                                    new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("InvalidOperationException"), new CodeExpression[] {
                                                                                                    new CodePrimitiveExpression("The cursor is after the end of the enumeration.")}))}, new CodeStatement[0]),
                                                                        new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("ObjectDisposedException"), new CodeExpression[] {
                                                                                        new CodePropertyReferenceExpression(new CodeTypeOfExpression(new CodeTypeReference("LookAheadEnumeratorEnumerator`1", new CodeTypeReference[] {
                                                                                                            new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)})), "Name")}))}, new CodeStatement[0]),
                                                            new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"))}, new CodeStatement[0], new CodeTypeReference[] {
                                                            new CodeTypeReference("IEnumerator`1", new CodeTypeReference[] {
                                                                        new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)})}, null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberProperty(new CodeTypeReference(typeof(object)), "Current", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeMethodReturnStatement(new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Current"))}, new CodeStatement[0], new CodeTypeReference[0], new CodeTypeReference(typeof(System.Collections.IEnumerator)), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberMethod(new CodeTypeReference(typeof(void)), "Dispose", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_index"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Parsley.LookAheadEnumeratorEnumerator`1", new CodeTypeReference[] {
                                                                                    new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)})), "_Disposed"))}, new CodeTypeReference[0], new CodeTypeReference(typeof(System.IDisposable)), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberMethod(new CodeTypeReference(typeof(bool)), "MoveNext", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeVariableDeclarationStatement(new CodeTypeReference("T"), "value", null),
                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.GreaterThan, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_index")), new CodeStatement[] {
                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_index"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Parsley.LookAheadEnumeratorEnumerator`1", new CodeTypeReference[] {
                                                                                                    new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)})), "_Disposed")), new CodeStatement[] {
                                                                                    new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("ObjectDisposedException"), new CodeExpression[] {
                                                                                                    new CodePropertyReferenceExpression(new CodeTypeOfExpression(new CodeTypeReference("LookAheadEnumeratorEnumerator`1", new CodeTypeReference[] {
                                                                                                                        new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)})), "Name")}))}, new CodeStatement[0]),
                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_index"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Parsley.LookAheadEnumeratorEnumerator`1", new CodeTypeReference[] {
                                                                                                    new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)})), "_Ended")), new CodeStatement[] {
                                                                                    new CodeMethodReturnStatement(new CodePrimitiveExpression(false))}, new CodeStatement[0]),
                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_index"), new CodePrimitiveExpression(-1))}, new CodeStatement[0]),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_index"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_index"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_outer"), "TryPeek"), new CodeExpression[] {
                                                                                new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_index"),
                                                                                new CodeDirectionExpression(FieldDirection.Out, new CodeVariableReferenceExpression("value"))})), new CodeStatement[] {
                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_index"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Parsley.LookAheadEnumeratorEnumerator`1", new CodeTypeReference[] {
                                                                                                new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)})), "_Ended")),
                                                                        new CodeMethodReturnStatement(new CodePrimitiveExpression(false))}, new CodeStatement[0]),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), new CodeVariableReferenceExpression("value")),
                                                            new CodeMethodReturnStatement(new CodePrimitiveExpression(true))}, new CodeTypeReference[0], new CodeTypeReference(typeof(System.Collections.IEnumerator)), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberMethod(new CodeTypeReference(typeof(void)), "Reset", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_index"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Parsley.LookAheadEnumeratorEnumerator`1", new CodeTypeReference[] {
                                                                                    new CodeTypeReference("T", CodeTypeReferenceOptions.GenericTypeParameter)})), "_NotStarted"))}, new CodeTypeReference[0], new CodeTypeReference(typeof(System.Collections.IEnumerator)), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0])}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0]);
        }
    }
}
