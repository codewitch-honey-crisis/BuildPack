//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.CodeDom;
using System.Reflection;


internal partial class Deslanged {
    private static CodeCompileUnit _CompileUnit(string[] referencedAssemblies, CodeNamespace[] namespaces, CodeAttributeDeclaration[] assemblyCustomAttributes, CodeDirective[] startDirectives, CodeDirective[] endDirectives) {
        CodeCompileUnit result = new CodeCompileUnit();
        result.ReferencedAssemblies.AddRange(referencedAssemblies);
        result.Namespaces.AddRange(namespaces);
        result.AssemblyCustomAttributes.AddRange(assemblyCustomAttributes);
        result.StartDirectives.AddRange(startDirectives);
        result.EndDirectives.AddRange(endDirectives);
        return result;
    }
    private static CodeNamespace _Namespace(string name, CodeNamespaceImport[] imports, CodeTypeDeclaration[] types, CodeCommentStatement[] comments) {
        CodeNamespace result = new CodeNamespace();
        result.Name = name;
        result.Imports.AddRange(imports);
        result.Types.AddRange(types);
        result.Comments.AddRange(comments);
        return result;
    }
    private static CodeTypeDeclaration _TypeDeclaration(
                string name, 
                bool isClass, 
                bool isEnum, 
                bool isInterface, 
                bool isStruct, 
                bool isPartial, 
                MemberAttributes attributes, 
                TypeAttributes typeAttributes, 
                CodeTypeParameter[] typeParameters, 
                CodeTypeReference[] baseTypes, 
                CodeTypeMember[] members, 
                CodeCommentStatement[] comments, 
                CodeAttributeDeclaration[] customAttributes, 
                CodeDirective[] startDirectives, 
                CodeDirective[] endDirectives, 
                CodeLinePragma linePragma) {
        CodeTypeDeclaration result = new CodeTypeDeclaration(name);
        result.IsClass = isClass;
        result.IsEnum = isEnum;
        result.IsInterface = isInterface;
        result.IsStruct = isStruct;
        result.IsPartial = isPartial;
        result.Attributes = attributes;
        result.TypeAttributes = typeAttributes;
        result.TypeParameters.AddRange(typeParameters);
        result.BaseTypes.AddRange(baseTypes);
        result.Members.AddRange(members);
        result.Comments.AddRange(comments);
        result.CustomAttributes.AddRange(customAttributes);
        result.StartDirectives.AddRange(startDirectives);
        result.EndDirectives.AddRange(endDirectives);
        result.LinePragma = linePragma;
        return result;
    }
    private static CodeMemberField _MemberField(CodeTypeReference type, string name, CodeExpression initExpression, MemberAttributes attributes, CodeCommentStatement[] comments, CodeAttributeDeclaration[] customAttributes, CodeDirective[] startDirectives, CodeDirective[] endDirectives, CodeLinePragma linePragma) {
        CodeMemberField result = new CodeMemberField(type, name);
        result.InitExpression = initExpression;
        result.Attributes = attributes;
        result.Comments.AddRange(comments);
        result.CustomAttributes.AddRange(customAttributes);
        result.StartDirectives.AddRange(startDirectives);
        result.EndDirectives.AddRange(endDirectives);
        result.LinePragma = linePragma;
        return result;
    }
    public static System.CodeDom.CodeCompileUnit Parser {
        get {
            return Deslanged._CompileUnit(new string[0], new CodeNamespace[] {
                        Deslanged._Namespace("", new CodeNamespaceImport[] {
                                    new CodeNamespaceImport("System.Collections.Generic")}, new CodeTypeDeclaration[0], new CodeCommentStatement[0]),
                        Deslanged._Namespace("Parsley", new CodeNamespaceImport[0], new CodeTypeDeclaration[] {
                                    Deslanged._TypeDeclaration("Parser", true, false, false, false, true, ((MemberAttributes)(0)), TypeAttributes.NotPublic, new CodeTypeParameter[0], new CodeTypeReference[0], new CodeTypeMember[] {
                                                Deslanged._MemberField(new CodeTypeReference(typeof(int)), "ErrorSymbol", new CodePrimitiveExpression(-1), (MemberAttributes.Const | MemberAttributes. FamilyAndAssembly), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference(typeof(int)), "EosSymbol", new CodePrimitiveExpression(-2), (MemberAttributes.Const | MemberAttributes. FamilyAndAssembly), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0])}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0]);
        }
    }
    public static System.CodeDom.CodeCompileUnit Token {
        get {
            return Deslanged._CompileUnit(new string[0], new CodeNamespace[] {
                        Deslanged._Namespace("Parsley", new CodeNamespaceImport[0], new CodeTypeDeclaration[] {
                                    Deslanged._TypeDeclaration("Token", false, false, false, true, false, ((MemberAttributes)(0)), TypeAttributes.NotPublic, new CodeTypeParameter[0], new CodeTypeReference[0], new CodeTypeMember[] {
                                                Deslanged._MemberField(new CodeTypeReference(typeof(int)), "Line", null, (MemberAttributes.Final | MemberAttributes. Public), new CodeCommentStatement[] {
                                                            new CodeCommentStatement("<summary>", true),
                                                            new CodeCommentStatement("Indicates the line where the token occurs", true),
                                                            new CodeCommentStatement("</summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference(typeof(int)), "Column", null, (MemberAttributes.Final | MemberAttributes. Public), new CodeCommentStatement[] {
                                                            new CodeCommentStatement("<summary>", true),
                                                            new CodeCommentStatement("Indicates the column where the token occurs", true),
                                                            new CodeCommentStatement("</summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference(typeof(long)), "Position", null, (MemberAttributes.Final | MemberAttributes. Public), new CodeCommentStatement[] {
                                                            new CodeCommentStatement("<summary>", true),
                                                            new CodeCommentStatement("Indicates the position where the token occurs", true),
                                                            new CodeCommentStatement("</summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference(typeof(int)), "SymbolId", null, (MemberAttributes.Final | MemberAttributes. Public), new CodeCommentStatement[] {
                                                            new CodeCommentStatement("<summary>", true),
                                                            new CodeCommentStatement("Indicates the symbol id or -1 for the error symbol", true),
                                                            new CodeCommentStatement("</summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference(typeof(string)), "Value", null, (MemberAttributes.Final | MemberAttributes. Public), new CodeCommentStatement[] {
                                                            new CodeCommentStatement("<summary>", true),
                                                            new CodeCommentStatement("Indicates the value of the token", true),
                                                            new CodeCommentStatement("</summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[] {
                                                new CodeCommentStatement("<summary>", true),
                                                new CodeCommentStatement("Shim for slang. Not actually used", true),
                                                new CodeCommentStatement("</summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0])}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0]);
        }
    }
    private static CodeConstructor _Constructor(MemberAttributes attributes, CodeParameterDeclarationExpression[] parameters, CodeExpression[] chainedConstructorArgs, CodeExpression[] baseConstructorArgs, CodeStatement[] statements, CodeCommentStatement[] comments, CodeAttributeDeclaration[] customAttributes, CodeDirective[] startDirectives, CodeDirective[] endDirectives, CodeLinePragma linePragma) {
        CodeConstructor result = new CodeConstructor();
        result.Attributes = attributes;
        result.Parameters.AddRange(parameters);
        result.ChainedConstructorArgs.AddRange(chainedConstructorArgs);
        result.BaseConstructorArgs.AddRange(baseConstructorArgs);
        result.Statements.AddRange(statements);
        result.Comments.AddRange(comments);
        result.CustomAttributes.AddRange(customAttributes);
        result.StartDirectives.AddRange(startDirectives);
        result.EndDirectives.AddRange(endDirectives);
        result.LinePragma = linePragma;
        return result;
    }
    private static CodeMemberMethod _MemberMethod(CodeTypeReference returnType, string name, MemberAttributes attributes, CodeParameterDeclarationExpression[] parameters, CodeStatement[] statements, CodeTypeReference[] implementationTypes, CodeTypeReference privateImplementationType, CodeCommentStatement[] comments, CodeAttributeDeclaration[] customAttributes, CodeAttributeDeclaration[] returnTypeCustomAttributes, CodeDirective[] startDirectives, CodeDirective[] endDirectives, CodeLinePragma linePragma) {
        CodeMemberMethod result = new CodeMemberMethod();
        result.ReturnType = returnType;
        result.Name = name;
        result.Attributes = attributes;
        result.Parameters.AddRange(parameters);
        result.Statements.AddRange(statements);
        result.ImplementationTypes.AddRange(implementationTypes);
        result.PrivateImplementationType = privateImplementationType;
        result.Comments.AddRange(comments);
        result.CustomAttributes.AddRange(customAttributes);
        result.ReturnTypeCustomAttributes.AddRange(returnTypeCustomAttributes);
        result.StartDirectives.AddRange(startDirectives);
        result.EndDirectives.AddRange(endDirectives);
        result.LinePragma = linePragma;
        return result;
    }
    private static CodeMemberProperty _MemberProperty(CodeTypeReference type, string name, MemberAttributes attributes, CodeParameterDeclarationExpression[] parameters, CodeStatement[] getStatements, CodeStatement[] setStatements, CodeTypeReference[] implementationTypes, CodeTypeReference privateImplementationType, CodeCommentStatement[] comments, CodeAttributeDeclaration[] customAttributes, CodeDirective[] startDirectives, CodeDirective[] endDirectives, CodeLinePragma linePragma) {
        CodeMemberProperty result = new CodeMemberProperty();
        result.Type = type;
        result.Name = name;
        result.Attributes = attributes;
        result.Parameters.AddRange(parameters);
        result.GetStatements.AddRange(getStatements);
        result.SetStatements.AddRange(setStatements);
        result.ImplementationTypes.AddRange(implementationTypes);
        result.PrivateImplementationType = privateImplementationType;
        result.Comments.AddRange(comments);
        result.CustomAttributes.AddRange(customAttributes);
        result.StartDirectives.AddRange(startDirectives);
        result.EndDirectives.AddRange(endDirectives);
        result.LinePragma = linePragma;
        return result;
    }
    public static System.CodeDom.CodeCompileUnit ParserContext {
        get {
            return Deslanged._CompileUnit(new string[0], new CodeNamespace[] {
                        Deslanged._Namespace("", new CodeNamespaceImport[] {
                                    new CodeNamespaceImport("System"),
                                    new CodeNamespaceImport("System.Collections.Generic")}, new CodeTypeDeclaration[0], new CodeCommentStatement[0]),
                        Deslanged._Namespace("Parsley", new CodeNamespaceImport[0], new CodeTypeDeclaration[] {
                                    Deslanged._TypeDeclaration("ParserContext", true, false, false, false, true, ((MemberAttributes)(0)), TypeAttributes.NotPublic, new CodeTypeParameter[0], new CodeTypeReference[] {
                                                new CodeTypeReference("Object"),
                                                new CodeTypeReference("IDisposable")}, new CodeTypeMember[] {
                                                Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_state", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference("IEnumerator`1", new CodeTypeReference[] {
                                                                new CodeTypeReference("System.Object", CodeTypeReferenceOptions.GenericTypeParameter)}), "_e", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference("Token"), "_t", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._Constructor((MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference("IEnumerable`1", new CodeTypeReference[] {
                                                                            new CodeTypeReference("System.Object", CodeTypeReferenceOptions.GenericTypeParameter)}), "tokenizer")}, new CodeExpression[0], new CodeExpression[0], new CodeStatement[] {
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_e"), new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeArgumentReferenceExpression("tokenizer"), "GetEnumerator"), new CodeExpression[0])),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodePrimitiveExpression(-1)),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_t"), "SymbolId"), new CodePrimitiveExpression(-1))}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberMethod(new CodeTypeReference(typeof(void)), "EnsureStarted", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.Subtract, new CodeBinaryOperatorExpression(new CodePrimitiveExpression(1), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"))), new CodeStatement[] {
                                                                        new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "Advance"), new CodeExpression[0]))}, new CodeStatement[0])}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberProperty(new CodeTypeReference(typeof(int)), "SymbolId", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_t"), "SymbolId"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberProperty(new CodeTypeReference(typeof(string)), "Value", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_t"), "Value"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberProperty(new CodeTypeReference(typeof(int)), "Line", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_t"), "Line"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberProperty(new CodeTypeReference(typeof(int)), "Column", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_t"), "Column"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberProperty(new CodeTypeReference(typeof(long)), "Position", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_t"), "Position"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberProperty(new CodeTypeReference(typeof(bool)), "IsEnded", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeMethodReturnStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.Subtract, new CodeBinaryOperatorExpression(new CodePrimitiveExpression(2), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"))))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberMethod(new CodeTypeReference(typeof(bool)), "Advance", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_e"), "MoveNext"), new CodeExpression[0])), new CodeStatement[] {
                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_t"), "SymbolId"), new CodePrimitiveExpression(-2)),
                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodePrimitiveExpression(-2))}, new CodeStatement[] {
                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodePrimitiveExpression(0)),
                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_t"), new CodeCastExpression(new CodeTypeReference("Token"), new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_e"), "Current"))),
                                                                        new CodeMethodReturnStatement(new CodePrimitiveExpression(true))}),
                                                            new CodeMethodReturnStatement(new CodePrimitiveExpression(false))}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberMethod(new CodeTypeReference(typeof(void)), "Error", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(string)), "message"),
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(object)), "arg1"),
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(object)), "arg2"),
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(object)), "arg3")}, new CodeStatement[] {
                                                            new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("SyntaxException"), new CodeExpression[] {
                                                                            new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(string))), "Format"), new CodeExpression[] {
                                                                                        new CodeArgumentReferenceExpression("message"),
                                                                                        new CodeArgumentReferenceExpression("arg1"),
                                                                                        new CodeArgumentReferenceExpression("arg2"),
                                                                                        new CodeArgumentReferenceExpression("arg3")}),
                                                                            new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Line"),
                                                                            new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Column"),
                                                                            new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Position")}))}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberMethod(new CodeTypeReference(typeof(void)), "Error", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(string)), "message"),
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(object)), "arg1"),
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(object)), "arg2")}, new CodeStatement[] {
                                                            new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("SyntaxException"), new CodeExpression[] {
                                                                            new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(string))), "Format"), new CodeExpression[] {
                                                                                        new CodeArgumentReferenceExpression("message"),
                                                                                        new CodeArgumentReferenceExpression("arg1"),
                                                                                        new CodeArgumentReferenceExpression("arg2")}),
                                                                            new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Line"),
                                                                            new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Column"),
                                                                            new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Position")}))}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberMethod(new CodeTypeReference(typeof(void)), "Error", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(string)), "message"),
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(object)), "arg")}, new CodeStatement[] {
                                                            new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("SyntaxException"), new CodeExpression[] {
                                                                            new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(string))), "Format"), new CodeExpression[] {
                                                                                        new CodeArgumentReferenceExpression("message"),
                                                                                        new CodeArgumentReferenceExpression("arg")}),
                                                                            new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Line"),
                                                                            new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Column"),
                                                                            new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Position")}))}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberMethod(new CodeTypeReference(typeof(void)), "Error", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(string)), "message")}, new CodeStatement[] {
                                                            new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("SyntaxException"), new CodeExpression[] {
                                                                            new CodeArgumentReferenceExpression("message"),
                                                                            new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Line"),
                                                                            new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Column"),
                                                                            new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Position")}))}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberMethod(new CodeTypeReference(typeof(void)), "Dispose", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_e"), "Dispose"), new CodeExpression[0])),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodePrimitiveExpression(-3))}, new CodeTypeReference[] {
                                                            new CodeTypeReference("IDisposable")}, null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0])}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0]);
        }
    }
    public static System.CodeDom.CodeCompileUnit ParseNode {
        get {
            return Deslanged._CompileUnit(new string[0], new CodeNamespace[] {
                        Deslanged._Namespace("", new CodeNamespaceImport[] {
                                    new CodeNamespaceImport("System.Collections.Generic")}, new CodeTypeDeclaration[0], new CodeCommentStatement[0]),
                        Deslanged._Namespace("Parsley", new CodeNamespaceImport[0], new CodeTypeDeclaration[] {
                                    Deslanged._TypeDeclaration("ParseNode", true, false, false, false, true, ((MemberAttributes)(0)), TypeAttributes.NotPublic, new CodeTypeParameter[0], new CodeTypeReference[0], new CodeTypeMember[] {
                                                Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_symbolId", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference(typeof(string)), "_symbol", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference(typeof(string)), "_value", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_line", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_column", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference(typeof(long)), "_position", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference(new CodeTypeReference("ParseNode"), 1), "_children", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._Constructor((MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "symbolId"),
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(string)), "symbol"),
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(new CodeTypeReference("ParseNode"), 1), "children"),
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "line"),
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "column"),
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(long)), "position")}, new CodeExpression[0], new CodeExpression[0], new CodeStatement[] {
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_symbolId"), new CodeArgumentReferenceExpression("symbolId")),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_symbol"), new CodeArgumentReferenceExpression("symbol")),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_value"), new CodePrimitiveExpression(null)),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_children"), new CodeArgumentReferenceExpression("children")),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line"), new CodeArgumentReferenceExpression("line")),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), new CodeArgumentReferenceExpression("column")),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_position"), new CodeArgumentReferenceExpression("position"))}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._Constructor((MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "symbolId"),
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(string)), "symbol"),
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(string)), "value"),
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "line"),
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "column"),
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(long)), "position")}, new CodeExpression[0], new CodeExpression[0], new CodeStatement[] {
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_symbolId"), new CodeArgumentReferenceExpression("symbolId")),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_symbol"), new CodeArgumentReferenceExpression("symbol")),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_value"), new CodeArgumentReferenceExpression("value")),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_children"), new CodePrimitiveExpression(null)),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line"), new CodeArgumentReferenceExpression("line")),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), new CodeArgumentReferenceExpression("column")),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_position"), new CodeArgumentReferenceExpression("position"))}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberProperty(new CodeTypeReference(typeof(bool)), "IsNonTerminal", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeMethodReturnStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(null), CodeBinaryOperatorType.IdentityInequality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_children")))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberProperty(new CodeTypeReference(new CodeTypeReference("ParseNode"), 1), "Children", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_children"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberProperty(new CodeTypeReference(typeof(int)), "SymbolId", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_symbolId"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberProperty(new CodeTypeReference(typeof(string)), "Symbol", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_symbol"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberProperty(new CodeTypeReference(typeof(string)), "Value", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_value"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberProperty(new CodeTypeReference(typeof(int)), "Line", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberProperty(new CodeTypeReference(typeof(int)), "Column", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberProperty(new CodeTypeReference(typeof(long)), "Position", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_position"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0])}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0]);
        }
    }
    public static System.CodeDom.CodeCompileUnit SyntaxException {
        get {
            return Deslanged._CompileUnit(new string[0], new CodeNamespace[] {
                        Deslanged._Namespace("", new CodeNamespaceImport[] {
                                    new CodeNamespaceImport("System")}, new CodeTypeDeclaration[0], new CodeCommentStatement[0]),
                        Deslanged._Namespace("Parsley", new CodeNamespaceImport[0], new CodeTypeDeclaration[] {
                                    Deslanged._TypeDeclaration("SyntaxException", true, false, false, false, false, ((MemberAttributes)(0)), TypeAttributes.NotPublic, new CodeTypeParameter[0], new CodeTypeReference[] {
                                                new CodeTypeReference("Exception")}, new CodeTypeMember[] {
                                                Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_line", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_column", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberField(new CodeTypeReference(typeof(long)), "_position", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._Constructor((MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(string)), "message"),
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "line"),
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "column"),
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(long)), "position")}, new CodeExpression[0], new CodeExpression[] {
                                                            new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Parsley.SyntaxException")), "_GetMessage"), new CodeExpression[] {
                                                                        new CodeArgumentReferenceExpression("message"),
                                                                        new CodeArgumentReferenceExpression("line"),
                                                                        new CodeArgumentReferenceExpression("column"),
                                                                        new CodeArgumentReferenceExpression("position")})}, new CodeStatement[] {
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line"), new CodeArgumentReferenceExpression("line")),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), new CodeArgumentReferenceExpression("column")),
                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_position"), new CodeArgumentReferenceExpression("position"))}, new CodeCommentStatement[] {
                                                            new CodeCommentStatement("<summary>", true),
                                                            new CodeCommentStatement("Creates a syntax exception with the specified arguments", true),
                                                            new CodeCommentStatement("</summary>", true),
                                                            new CodeCommentStatement("<param name=\"message\">The error message</param>", true),
                                                            new CodeCommentStatement("<param name=\"line\">The line where the error occurred</param>", true),
                                                            new CodeCommentStatement("<param name=\"column\">The column where the error occured</param>", true),
                                                            new CodeCommentStatement("<param name=\"position\">The position where the error occured</param>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberProperty(new CodeTypeReference(typeof(int)), "Line", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[] {
                                                            new CodeCommentStatement("<summary>", true),
                                                            new CodeCommentStatement("The line where the error occurred", true),
                                                            new CodeCommentStatement("</summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberProperty(new CodeTypeReference(typeof(int)), "Column", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[] {
                                                            new CodeCommentStatement("<summary>", true),
                                                            new CodeCommentStatement("The column where the error occurred", true),
                                                            new CodeCommentStatement("</summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberProperty(new CodeTypeReference(typeof(long)), "Position", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                            new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_position"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[] {
                                                            new CodeCommentStatement("<summary>", true),
                                                            new CodeCommentStatement("The position where the error occurred", true),
                                                            new CodeCommentStatement("</summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                Deslanged._MemberMethod(new CodeTypeReference(typeof(string)), "_GetMessage", MemberAttributes.Static, new CodeParameterDeclarationExpression[] {
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(string)), "message"),
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "line"),
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "column"),
                                                            new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(long)), "position")}, new CodeStatement[] {
                                                            new CodeMethodReturnStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(string))), "Format"), new CodeExpression[] {
                                                                            new CodePrimitiveExpression("{0} at line {1}, column {2}, position {3}"),
                                                                            new CodeArgumentReferenceExpression("message"),
                                                                            new CodeArgumentReferenceExpression("line"),
                                                                            new CodeArgumentReferenceExpression("column"),
                                                                            new CodeArgumentReferenceExpression("position")}))}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[] {
                                                new CodeCommentStatement("<summary>", true),
                                                new CodeCommentStatement("", true),
                                                new CodeCommentStatement("</summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0])}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0]);
        }
    }
}
