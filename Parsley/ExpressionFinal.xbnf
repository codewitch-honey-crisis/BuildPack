Term<start,type="int">= Factor { ("+"|"-") Factor } => {
	int result = Factor1;
	int i = 2;
	while (i<Length) {
		if(node.Children[i-1].SymbolId==add)
			result += Factor[i];
		else
			result -= Factor[i];
		i+=2;
	}
	return result;
}

Factor<type="int">= Unary { ("*"|"/") Unary } => { 
	int result = Unary1;
	int i = 2;
	// Because of the way the grammar is factored, this can 
	// end up being Factors when collapsed. We use the "smart"
	// evaluation to resolve this at runtime
	while (i<Length) {
		if(node.Children[i-1].SymbolId==mul)
			result *= (int)Child[i];
		else
			result /= (int)Child[i];
		i+=2;
	}
	return result;
}
Unary<type="int">= ("+"|"-") Unary | Leaf => {
	if(Length==1)
		return Leaf1;
	if(SymbolId1==add)
		return Unary2;
	else
		return -Unary2;
}
Leaf<type="int">= integer | "(" Term ")" => {
	if(Length==1)
		return integer1;
	else return Term2; 
}
// we only need to declare terminals explicitly if we want 
// constant names for them or to apply attributes to them
// in this case we don't need divide, subtract or 
// parentheses to be declared
add="+";
mul="*";
integer='[0-9]+';
whitespace<hidden>='\s+';