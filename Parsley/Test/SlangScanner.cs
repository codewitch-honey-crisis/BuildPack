//
//  This CSharp output file generated by Gardens Point LEX
//  Gardens Point LEX (GPLEX) is Copyright (c) John Gough, QUT 2006-2014.
//  Output produced by GPLEX is the property of the user.
//  See accompanying file GPLEXcopyright.rtf.
//
//  GPLEX Version:  1.2.2
//  Machine:  DESKTOP-U8QJ4Q2
//  DateTime: 12/22/2019 6:01:43 PM
//  UserName: gazto
//  GPLEX input file <Slang.lex - 12/22/2019 5:55:49 PM>
//  GPLEX frame file <embedded resource>
//
//  Option settings: unicode, verbose, noParser, stack, minimize
//  Option settings: classes, compressMap, compressNext, persistBuffer, noEmbedBuffers
//  Fallback code page: Raw 8-bit binary
//

//
// Revised backup code
// Version 1.2.1 of 24-June-2013
//
//
#define BACKUP
#define STACK
#define STANDALONE
#define PERSIST

using System;
using System.IO;
using System.Text;
using System.Globalization;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Diagnostics.CodeAnalysis;

using QUT.GplexBuffers;

namespace CD
{   
    /// <summary>
    /// Summary Canonical example of GPLEX automaton
    /// </summary>
    
#if STANDALONE
    //
    // These are the dummy declarations for stand-alone GPLEX applications
    // normally these declarations would come from the parser.
    // If you declare /noparser, or %option noparser then you get this.
    //

     internal enum Tokens
    { 
      EOF = 0, maxParseToken = int.MaxValue 
      // must have at least these two, values are almost arbitrary
    }

     internal abstract class ScanBase
    {
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public abstract int yylex();

        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yywrap")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yywrap")]
        protected virtual bool yywrap() { return true; }

#if BABEL
        protected abstract int CurrentSc { get; set; }
        // EolState is the 32-bit of state data persisted at 
        // the end of each line for Visual Studio colorization.  
        // The default is to return CurrentSc.  You must override
        // this if you want more complicated behavior.
        public virtual int EolState { 
            get { return CurrentSc; }
            set { CurrentSc = value; } 
        }
    }
    
     internal interface IColorScan
    {
        void SetSource(string source, int offset);
        int GetNext(ref int state, out int start, out int end);
#endif // BABEL
    }

#endif // STANDALONE
    
    // If the compiler can't find the scanner base class maybe you
    // need to run GPPG with the /gplex option, or GPLEX with /noparser
#if BABEL
     internal sealed partial class Scanner : ScanBase, IColorScan
    {
        private ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
        
        protected override int CurrentSc 
        {
             // The current start state is a property
             // to try to avoid the user error of setting
             // scState but forgetting to update the FSA
             // start state "currentStart"
             //
             get { return currentScOrd; }  // i.e. return YY_START;
             set { currentScOrd = value;   // i.e. BEGIN(value);
                   currentStart = startState[value]; }
        }
#else  // BABEL
     internal sealed partial class Scanner : ScanBase
    {
        private ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
#endif // BABEL
        
        /// <summary>
        /// The input buffer for this scanner.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public ScanBuff Buffer { get { return buffer; } }
        
        private static int GetMaxParseToken() {
     System.Reflection.FieldInfo f = typeof(Tokens).GetField("maxParseToken");
            return (f == null ? int.MaxValue : (int)f.GetValue(null));
        }
        
        static int parserMax = GetMaxParseToken();
        
        enum Result {accept, noMatch, contextFound};

        const int maxAccept = 262;
        const int initial = 263;
        const int eofNum = 0;
        const int goStart = -1;
        const int INITIAL = 0;

#region user code
/* 
 * Expected file format is Unicode. In the event that no 
 * byte order mark prefix is found, revert to raw bytes.
 */
enum Tokens {
		EOF = -1
		}
		// foreach Token support
    	public Token Current = _InitToken();
		static Token _InitToken()
		{
			var result = default(Token);
			result.SymbolId = -4;
			return result;
		}
		public void Advance()
		{
			Current.Line = yyline;
			Current.Column = yycol;
			Current.Position = yypos;
			Current.SymbolId = yylex();
			Current.Value = yytext;
		}
		public void Close()
		{
			Current.SymbolId = -3; // _Disposed
		}
		bool _TryReadUntil(int character,StringBuilder sb)
		{
			if (-1 == code) return false;
			var chcmp = character.ToString();
			var s = char.ConvertFromUtf32(code);
			sb.Append(s);
			if (code == character)
				return true;
			while (true)
			{
				GetCode();
				if (-1 == code || code == character)
					break;
				s = char.ConvertFromUtf32(code);
				sb.Append(s);
			}
			if (-1!=code)
			{
				s = char.ConvertFromUtf32(code);
				sb.Append(s);
				if (null == tokTxt)
					tokTxt = sb.ToString();
				else
					tokTxt += sb.ToString();
				return code == character;
			}
			return false;
		}
		// reads until the string is encountered, capturing it.
		bool _TryReadUntilBlockEnd(string blockEnd)
		{
			string s = yytext;
			var sb = new StringBuilder();
			int ch = -1;
			var isPair = false;
			if (char.IsSurrogatePair(blockEnd, 0))
			{
				ch = char.ConvertToUtf32(blockEnd, 0);
				isPair = true;
			} 
			else
				ch = blockEnd[0];
			while (-1 != code && _TryReadUntil(ch,sb))
			{
				bool found = true;
				int i = 1;
				if (isPair)
					++i;
				for (; found && i < blockEnd.Length; ++i)
				{
					GetCode();
					int scmp=blockEnd[i];
					if (char.IsSurrogatePair(blockEnd, i))
					{
						scmp = char.ConvertToUtf32(blockEnd, i);
						++i;
					}
					if (-1==code || code!=scmp)
						found = false;
					else if (-1!=code)
						sb.Append(char.ConvertFromUtf32(code));
				}
				if (found)
				{
					// TODO: verify this
					GetCode();
					tokTxt = s+ sb.ToString();
					return true;
				}
			}
			tokTxt = s+sb.ToString();
			return false;
		}
#endregion user code

        int state;
        int currentStart = startState[0];
        int code;      // last code read
        int cCol;      // column number of code
        int lNum;      // current line number
        //
        // The following instance variables are used, among other
        // things, for constructing the yylloc location objects.
        //
        int tokPos;        // buffer position at start of token
        int tokCol;        // zero-based column number at start of token
        int tokLin;        // line number at start of token
        int tokEPos;       // buffer position at end of token
        int tokECol;       // column number at end of token
        int tokELin;       // line number at end of token
        string tokTxt;     // lazily constructed text of token
#if STACK          
        private Stack<int> scStack = new Stack<int>();
#endif // STACK

#region ScannerTables
    struct Table {
        public int min; public int rng; public int dflt;
        public short[] nxt;
        public Table(int m, int x, int d, short[] n) {
            min = m; rng = x; dflt = d; nxt = n;
        }
    };

    static int[] startState = new int[] {263, 0};

#region CompressedCharacterMap
    //
    // There are 67 equivalence classes
    // There are 2 character sequence regions
    // There are 1 tables, 126 entries
    // There are 1 runs, 0 singletons
    // Decision tree depth is 1
    //
    static sbyte[] mapC0 = new sbyte[126] {
/*     '\0' */ 34, 32, 32, 32, 32, 32, 32, 34, 34, 65, 66, 39, 39, 0, 32, 32, 
/*   '\x10' */ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
/*   '\x20' */ 38, 43, 31, 64, 32, 46, 47, 32, 51, 52, 30, 44, 55, 45, 58, 29, 
/*      '0' */ 59, 35, 35, 35, 35, 35, 35, 35, 28, 28, 56, 57, 40, 41, 42, 32, 
/*      '@' */ 32, 36, 36, 36, 63, 61, 63, 27, 27, 27, 27, 27, 60, 62, 27, 27, 
/*      'P' */ 27, 27, 27, 27, 27, 37, 27, 27, 27, 27, 27, 49, 33, 50, 32, 27, 
/*      '`' */ 32, 1, 2, 6, 9, 7, 20, 11, 17, 10, 25, 16, 15, 19, 8, 14, 
/*      'p' */ 23, 21, 5, 3, 4, 18, 24, 13, 22, 12, 26, 53, 48, 54 };

    static sbyte MapC(int code)
    { // '\0' <= code <= '\U0010FFFF'
      if (code < 126) // '\0' <= code <= '}'
        return mapC0[code - 0];
      else // '~' <= code <= '\U0010FFFF'
        return (sbyte)32;
    }
#endregion

    static Table[] NxS = new Table[271] {
/* NxS[   0] */ new Table(0, 0, 0, null), // Shortest string ""
/* NxS[   1] */ // Shortest string "\x20"
      new Table(38, 30, -1, new short[] {1, 1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 1, 1, 1}),
/* NxS[   2] */ // Shortest string "a"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 256, 257, 17, 17, 17, 17, 17, 17, 17, 17, 17, 258, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[   3] */ // Shortest string "b"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 137, 17, 17, 17, 253, 17, 17, 17, 17, 17, 17, 118, 17, 
          254, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[   4] */ // Shortest string "s"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 239, 17, 240, 17, 17, 241, 17, 17, 242, 17, 17, 243, 
          17, 17, 17, 150, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[   5] */ // Shortest string "t"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 232, 17, 17, 17, 17, 17, 17, 233, 17, 
          17, 17, 17, 234, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[   6] */ // Shortest string "r"
      new Table(29, 46, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 17, 17, 17, 17, 227}),
/* NxS[   7] */ // Shortest string "c"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 218, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          219, 220, 17, 221, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[   8] */ // Shortest string "e"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 208, 17, 17, 17, 17, 17, 
          17, 137, 17, 17, 17, 17, 17, 209, 210, 17, 211, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[   9] */ // Shortest string "n"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 202, 17, 17, 17, 17, 17, 203, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 204, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[  10] */ // Shortest string "d"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 184, 17, 17, 17, 17, 185, 17, 
          186, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[  11] */ // Shortest string "i"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 100, 17, 17, 17, 17, 173, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 174, 100, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[  12] */ // Shortest string "g"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 128, 17, 17, 17, 17, 17, 17, 
          169, 170, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[  13] */ // Shortest string "y"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 167, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[  14] */ // Shortest string "w"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 97, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[  15] */ // Shortest string "o"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 154, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 128, 17, 17, 17, 17, 155, 156, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[  16] */ // Shortest string "l"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          152, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[  17] */ // Shortest string "k"
      new Table(29, 39, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1}),
/* NxS[  18] */ // Shortest string "u"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 138, 17, 17, 17, 17, 139, 17, 140, 17, 17, 17, 
          17, 141, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[  19] */ // Shortest string "f"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 123, 17, 17, 17, 17, 17, 17, 17, 17, 124, 17, 17, 17, 
          125, 126, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[  20] */ // Shortest string "p"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 105, 17, 17, 17, 106, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 107, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[  21] */ // Shortest string "v"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 91, 17, 17, 17, 17, 17, 17, 17, 17, 92, 17, 17, 17, 
          93, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[  22] */ // Shortest string "8"
      new Table(58, 47, -1, new short[] {267, 22, 51, 265, 50, 50, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 265, -1, 50, -1, -1, -1, 
          -1, -1, 51, -1, -1, 52, 50, 50, -1, -1, -1, -1, -1, -1, -1, 22, 
          -1, -1, -1, -1, -1, -1, 22, -1, 52}),
/* NxS[  23] */ // Shortest string "/"
      new Table(29, 13, -1, new short[] {88, 89, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 90}),
/* NxS[  24] */ // Shortest string "*"
      new Table(41, 1, -1, new short[] {87}),
/* NxS[  25] */ // Shortest string "\""
      new Table(31, 37, 269, new short[] {86, 269, 270, -1, 269, 269, 
          269, 269, -1, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 
          269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, -1, -1, -1}),
/* NxS[  26] */ new Table(0, 0, -1, null), // Shortest string "\x01"
/* NxS[  27] */ // Shortest string "<"
      new Table(41, 1, -1, new short[] {85}),
/* NxS[  28] */ // Shortest string "="
      new Table(41, 1, -1, new short[] {84}),
/* NxS[  29] */ // Shortest string ">"
      new Table(41, 1, -1, new short[] {83}),
/* NxS[  30] */ // Shortest string "!"
      new Table(41, 1, -1, new short[] {82}),
/* NxS[  31] */ // Shortest string "+"
      new Table(41, 4, -1, new short[] {80, -1, -1, 81}),
/* NxS[  32] */ // Shortest string "-"
      new Table(41, 5, -1, new short[] {78, -1, -1, -1, 79}),
/* NxS[  33] */ // Shortest string "%"
      new Table(41, 1, -1, new short[] {77}),
/* NxS[  34] */ // Shortest string "&"
      new Table(41, 7, -1, new short[] {75, -1, -1, -1, -1, -1, 
          76}),
/* NxS[  35] */ // Shortest string "|"
      new Table(41, 8, -1, new short[] {73, -1, -1, -1, -1, -1, 
          -1, 74}),
/* NxS[  36] */ new Table(0, 0, -1, null), // Shortest string "["
/* NxS[  37] */ new Table(0, 0, -1, null), // Shortest string "]"
/* NxS[  38] */ new Table(0, 0, -1, null), // Shortest string "("
/* NxS[  39] */ new Table(0, 0, -1, null), // Shortest string ")"
/* NxS[  40] */ new Table(0, 0, -1, null), // Shortest string "{"
/* NxS[  41] */ new Table(0, 0, -1, null), // Shortest string "}"
/* NxS[  42] */ new Table(0, 0, -1, null), // Shortest string ","
/* NxS[  43] */ // Shortest string ":"
      new Table(56, 1, -1, new short[] {72}),
/* NxS[  44] */ new Table(0, 0, -1, null), // Shortest string ";"
/* NxS[  45] */ // Shortest string "."
      new Table(28, 32, -1, new short[] {53, -1, -1, -1, -1, -1, 
          -1, 53, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 53}),
/* NxS[  46] */ // Shortest string "0"
      new Table(58, 47, -1, new short[] {267, -1, 51, 265, 50, 50, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 265, -1, 50, -1, -1, -1, 
          -1, -1, 51, -1, -1, 52, 50, 50, -1, 266, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 52}),
/* NxS[  47] */ // Shortest string "#"
      new Table(27, 41, 48, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 264, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          264, -1, -1}),
/* NxS[  48] */ // Shortest string "#a"
      new Table(27, 41, 48, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 49, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          49, -1, -1}),
/* NxS[  49] */ // Shortest string "#a\x20"
      new Table(38, 28, -1, new short[] {49, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 49}),
/* NxS[  50] */ new Table(0, 0, -1, null), // Shortest string "8d"
/* NxS[  51] */ // Shortest string "8l"
      new Table(18, 20, -1, new short[] {70, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 70}),
/* NxS[  52] */ // Shortest string "8u"
      new Table(60, 23, -1, new short[] {70, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          70}),
/* NxS[  53] */ // Shortest string ".8"
      new Table(59, 44, -1, new short[] {53, -1, 265, 50, 50, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 265, -1, 50, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 50, 50, -1, -1, -1, -1, -1, -1, -1, 53, -1, 
          -1, -1, -1, -1, -1, 53}),
/* NxS[  54] */ // Shortest string "0xa"
      new Table(59, 46, -1, new short[] {55, 51, 55, -1, 55, -1, 
          -1, -1, -1, 55, 55, -1, -1, -1, 55, 55, -1, 55, -1, -1, -1, -1, 
          -1, 51, -1, -1, 52, -1, 55, -1, -1, -1, -1, -1, -1, -1, 55, -1, 
          -1, -1, -1, -1, -1, 55, 55, 52}),
/* NxS[  55] */ // Shortest string "0xaa"
      new Table(59, 46, -1, new short[] {56, 51, 56, -1, 56, -1, 
          -1, -1, -1, 56, 56, -1, -1, -1, 56, 56, -1, 56, -1, -1, -1, -1, 
          -1, 51, -1, -1, 52, -1, 56, -1, -1, -1, -1, -1, -1, -1, 56, -1, 
          -1, -1, -1, -1, -1, 56, 56, 52}),
/* NxS[  56] */ // Shortest string "0xaaa"
      new Table(59, 46, -1, new short[] {57, 51, 57, -1, 57, -1, 
          -1, -1, -1, 57, 57, -1, -1, -1, 57, 57, -1, 57, -1, -1, -1, -1, 
          -1, 51, -1, -1, 52, -1, 57, -1, -1, -1, -1, -1, -1, -1, 57, -1, 
          -1, -1, -1, -1, -1, 57, 57, 52}),
/* NxS[  57] */ // Shortest string "0xaaaa"
      new Table(59, 46, -1, new short[] {58, 51, 58, -1, 58, -1, 
          -1, -1, -1, 58, 58, -1, -1, -1, 58, 58, -1, 58, -1, -1, -1, -1, 
          -1, 51, -1, -1, 52, -1, 58, -1, -1, -1, -1, -1, -1, -1, 58, -1, 
          -1, -1, -1, -1, -1, 58, 58, 52}),
/* NxS[  58] */ // Shortest string "0xaaaaa"
      new Table(59, 46, -1, new short[] {59, 51, 59, -1, 59, -1, 
          -1, -1, -1, 59, 59, -1, -1, -1, 59, 59, -1, 59, -1, -1, -1, -1, 
          -1, 51, -1, -1, 52, -1, 59, -1, -1, -1, -1, -1, -1, -1, 59, -1, 
          -1, -1, -1, -1, -1, 59, 59, 52}),
/* NxS[  59] */ // Shortest string "0xaaaaaa"
      new Table(59, 46, -1, new short[] {60, 51, 60, -1, 60, -1, 
          -1, -1, -1, 60, 60, -1, -1, -1, 60, 60, -1, 60, -1, -1, -1, -1, 
          -1, 51, -1, -1, 52, -1, 60, -1, -1, -1, -1, -1, -1, -1, 60, -1, 
          -1, -1, -1, -1, -1, 60, 60, 52}),
/* NxS[  60] */ // Shortest string "0xaaaaaaa"
      new Table(59, 46, -1, new short[] {61, 51, 61, -1, 61, -1, 
          -1, -1, -1, 61, 61, -1, -1, -1, 61, 61, -1, 61, -1, -1, -1, -1, 
          -1, 51, -1, -1, 52, -1, 61, -1, -1, -1, -1, -1, -1, -1, 61, -1, 
          -1, -1, -1, -1, -1, 61, 61, 52}),
/* NxS[  61] */ // Shortest string "0xaaaaaaaa"
      new Table(59, 46, -1, new short[] {62, 51, 62, -1, 62, -1, 
          -1, -1, -1, 62, 62, -1, -1, -1, 62, 62, -1, 62, -1, -1, -1, -1, 
          -1, 51, -1, -1, 52, -1, 62, -1, -1, -1, -1, -1, -1, -1, 62, -1, 
          -1, -1, -1, -1, -1, 62, 62, 52}),
/* NxS[  62] */ // Shortest string "0xaaaaaaaaa"
      new Table(59, 46, -1, new short[] {63, 51, 63, -1, 63, -1, 
          -1, -1, -1, 63, 63, -1, -1, -1, 63, 63, -1, 63, -1, -1, -1, -1, 
          -1, 51, -1, -1, 52, -1, 63, -1, -1, -1, -1, -1, -1, -1, 63, -1, 
          -1, -1, -1, -1, -1, 63, 63, 52}),
/* NxS[  63] */ // Shortest string "0xaaaaaaaaaa"
      new Table(59, 46, -1, new short[] {64, 51, 64, -1, 64, -1, 
          -1, -1, -1, 64, 64, -1, -1, -1, 64, 64, -1, 64, -1, -1, -1, -1, 
          -1, 51, -1, -1, 52, -1, 64, -1, -1, -1, -1, -1, -1, -1, 64, -1, 
          -1, -1, -1, -1, -1, 64, 64, 52}),
/* NxS[  64] */ // Shortest string "0xaaaaaaaaaaa"
      new Table(59, 46, -1, new short[] {65, 51, 65, -1, 65, -1, 
          -1, -1, -1, 65, 65, -1, -1, -1, 65, 65, -1, 65, -1, -1, -1, -1, 
          -1, 51, -1, -1, 52, -1, 65, -1, -1, -1, -1, -1, -1, -1, 65, -1, 
          -1, -1, -1, -1, -1, 65, 65, 52}),
/* NxS[  65] */ // Shortest string "0xaaaaaaaaaaaa"
      new Table(59, 46, -1, new short[] {66, 51, 66, -1, 66, -1, 
          -1, -1, -1, 66, 66, -1, -1, -1, 66, 66, -1, 66, -1, -1, -1, -1, 
          -1, 51, -1, -1, 52, -1, 66, -1, -1, -1, -1, -1, -1, -1, 66, -1, 
          -1, -1, -1, -1, -1, 66, 66, 52}),
/* NxS[  66] */ // Shortest string "0xaaaaaaaaaaaaa"
      new Table(59, 46, -1, new short[] {67, 51, 67, -1, 67, -1, 
          -1, -1, -1, 67, 67, -1, -1, -1, 67, 67, -1, 67, -1, -1, -1, -1, 
          -1, 51, -1, -1, 52, -1, 67, -1, -1, -1, -1, -1, -1, -1, 67, -1, 
          -1, -1, -1, -1, -1, 67, 67, 52}),
/* NxS[  67] */ // Shortest string "0xaaaaaaaaaaaaaa"
      new Table(59, 46, -1, new short[] {68, 51, 68, -1, 68, -1, 
          -1, -1, -1, 68, 68, -1, -1, -1, 68, 68, -1, 68, -1, -1, -1, -1, 
          -1, 51, -1, -1, 52, -1, 68, -1, -1, -1, -1, -1, -1, -1, 68, -1, 
          -1, -1, -1, -1, -1, 68, 68, 52}),
/* NxS[  68] */ // Shortest string "0xaaaaaaaaaaaaaaa"
      new Table(59, 46, -1, new short[] {69, 51, 69, -1, 69, -1, 
          -1, -1, -1, 69, 69, -1, -1, -1, 69, 69, -1, 69, -1, -1, -1, -1, 
          -1, 51, -1, -1, 52, -1, 69, -1, -1, -1, -1, -1, -1, -1, 69, -1, 
          -1, -1, -1, -1, -1, 69, 69, 52}),
/* NxS[  69] */ // Shortest string "0xaaaaaaaaaaaaaaaa"
      new Table(60, 45, -1, new short[] {51, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          51, -1, -1, 52, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 52}),
/* NxS[  70] */ new Table(0, 0, -1, null), // Shortest string "8lu"
/* NxS[  71] */ // Shortest string "8e8"
      new Table(59, 44, -1, new short[] {71, -1, -1, 50, 50, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 50, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 50, 50, -1, -1, -1, -1, -1, -1, -1, 71, -1, 
          -1, -1, -1, -1, -1, 71}),
/* NxS[  72] */ new Table(0, 0, -1, null), // Shortest string "::"
/* NxS[  73] */ new Table(0, 0, -1, null), // Shortest string "|="
/* NxS[  74] */ new Table(0, 0, -1, null), // Shortest string "||"
/* NxS[  75] */ new Table(0, 0, -1, null), // Shortest string "&="
/* NxS[  76] */ new Table(0, 0, -1, null), // Shortest string "&&"
/* NxS[  77] */ new Table(0, 0, -1, null), // Shortest string "%="
/* NxS[  78] */ new Table(0, 0, -1, null), // Shortest string "-="
/* NxS[  79] */ new Table(0, 0, -1, null), // Shortest string "--"
/* NxS[  80] */ new Table(0, 0, -1, null), // Shortest string "+="
/* NxS[  81] */ new Table(0, 0, -1, null), // Shortest string "++"
/* NxS[  82] */ new Table(0, 0, -1, null), // Shortest string "!="
/* NxS[  83] */ new Table(0, 0, -1, null), // Shortest string ">="
/* NxS[  84] */ new Table(0, 0, -1, null), // Shortest string "=="
/* NxS[  85] */ new Table(0, 0, -1, null), // Shortest string "<="
/* NxS[  86] */ new Table(0, 0, -1, null), // Shortest string "\"\""
/* NxS[  87] */ new Table(0, 0, -1, null), // Shortest string "*="
/* NxS[  88] */ new Table(0, 0, -1, null), // Shortest string "//"
/* NxS[  89] */ new Table(0, 0, -1, null), // Shortest string "/*"
/* NxS[  90] */ new Table(0, 0, -1, null), // Shortest string "/="
/* NxS[  91] */ // Shortest string "va"
      new Table(29, 44, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 17, 17, 100}),
/* NxS[  92] */ // Shortest string "vi"
      new Table(29, 44, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 17, 17, 101}),
/* NxS[  93] */ // Shortest string "vo"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 94, 17, 17, 17, 
          17, 95, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[  94] */ // Shortest string "voi"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 100, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[  95] */ // Shortest string "vol"
      new Table(29, 40, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 96}),
/* NxS[  96] */ // Shortest string "vola"
      new Table(29, 43, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 17, 97}),
/* NxS[  97] */ // Shortest string "wh"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 98, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[  98] */ // Shortest string "whi"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 99, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[  99] */ // Shortest string "bas"
      new Table(29, 46, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 17, 17, 17, 17, 100}),
/* NxS[ 100] */ // Shortest string "is"
      new Table(29, 39, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1}),
/* NxS[ 101] */ // Shortest string "vir"
      new Table(29, 43, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 17, 102}),
/* NxS[ 102] */ // Shortest string "virt"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 103, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 103] */ // Shortest string "glob"
      new Table(29, 40, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 104}),
/* NxS[ 104] */ // Shortest string "boo"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 100, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 105] */ // Shortest string "pa"
      new Table(29, 44, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 17, 17, 119}),
/* NxS[ 106] */ // Shortest string "pr"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 111, 17, 17, 17, 
          112, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 107] */ // Shortest string "pu"
      new Table(29, 41, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 108}),
/* NxS[ 108] */ // Shortest string "pub"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 109, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 109] */ // Shortest string "stat"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 110, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 110] */ // Shortest string "asyn"
      new Table(29, 45, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 17, 17, 17, 100}),
/* NxS[ 111] */ // Shortest string "pri"
      new Table(24, 44, 17, new short[] {117, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 
          17, 17, -1, -1, -1, -1}),
/* NxS[ 112] */ // Shortest string "pro"
      new Table(29, 43, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 17, 113}),
/* NxS[ 113] */ // Shortest string "prot"
      new Table(29, 46, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 17, 17, 17, 17, 114}),
/* NxS[ 114] */ // Shortest string "prote"
      new Table(29, 45, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 17, 17, 17, 115}),
/* NxS[ 115] */ // Shortest string "protec"
      new Table(29, 43, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 17, 116}),
/* NxS[ 116] */ // Shortest string "fix"
      new Table(29, 46, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 17, 17, 17, 17, 94}),
/* NxS[ 117] */ // Shortest string "priv"
      new Table(29, 40, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 118}),
/* NxS[ 118] */ // Shortest string "by"
      new Table(29, 43, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 17, 99}),
/* NxS[ 119] */ // Shortest string "par"
      new Table(29, 43, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 120, 17, 17, 121}),
/* NxS[ 120] */ // Shortest string "para"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 122, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 121] */ // Shortest string "part"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 103, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 122] */ // Shortest string "thi"
      new Table(29, 42, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 100}),
/* NxS[ 123] */ // Shortest string "fa"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 137, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 124] */ // Shortest string "fi"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 133, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 116, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 125] */ // Shortest string "fo"
      new Table(29, 44, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 17, 17, 129}),
/* NxS[ 126] */ // Shortest string "fl"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          127, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 127] */ // Shortest string "flo"
      new Table(29, 40, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 128}),
/* NxS[ 128] */ // Shortest string "ge"
      new Table(29, 43, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 17, 100}),
/* NxS[ 129] */ // Shortest string "for"
      new Table(29, 46, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 17, 17, 17, 17, 130}),
/* NxS[ 130] */ // Shortest string "fore"
      new Table(29, 40, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 131}),
/* NxS[ 131] */ // Shortest string "cat"
      new Table(29, 45, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 17, 17, 17, 132}),
/* NxS[ 132] */ // Shortest string "catc"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 100, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 133] */ // Shortest string "fin"
      new Table(29, 40, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 134}),
/* NxS[ 134] */ // Shortest string "fina"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 135, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 135] */ // Shortest string "final"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 136, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 136] */ // Shortest string "finall"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 100, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 137] */ // Shortest string "ba"
      new Table(29, 42, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 99}),
/* NxS[ 138] */ // Shortest string "us"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 142, 17, 17, 17, 
          17, 17, 17, 150, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 139] */ // Shortest string "un"
      new Table(29, 45, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 144, 17, 17, 145}),
/* NxS[ 140] */ // Shortest string "ui"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 128, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 141] */ // Shortest string "ul"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          142, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 142] */ // Shortest string "usi"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 143, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 143] */ // Shortest string "lon"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 100, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 144] */ // Shortest string "uns"
      new Table(29, 40, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 149}),
/* NxS[ 145] */ // Shortest string "unc"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 146, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 146] */ // Shortest string "unch"
      new Table(29, 46, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 17, 17, 17, 17, 147}),
/* NxS[ 147] */ // Shortest string "che"
      new Table(29, 45, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 17, 17, 17, 148}),
/* NxS[ 148] */ // Shortest string "chec"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 116, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 149] */ // Shortest string "unsa"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 99, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 150] */ // Shortest string "sh"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          151, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 151] */ // Shortest string "sho"
      new Table(29, 44, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 17, 17, 128}),
/* NxS[ 152] */ // Shortest string "lo"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 153, 17, 143, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 153] */ // Shortest string "loc"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 100, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 154] */ // Shortest string "ob"
      new Table(25, 43, 17, new short[] {165, 17, 17, 17, -1, -1, 
          -1, -1, -1, -1, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 
          17, -1, -1, -1, -1}),
/* NxS[ 155] */ // Shortest string "op"
      new Table(29, 46, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 17, 17, 17, 17, 161}),
/* NxS[ 156] */ // Shortest string "ov"
      new Table(29, 46, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 17, 17, 17, 17, 157}),
/* NxS[ 157] */ // Shortest string "ove"
      new Table(29, 44, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 17, 17, 158}),
/* NxS[ 158] */ // Shortest string "over"
      new Table(29, 44, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 17, 17, 159}),
/* NxS[ 159] */ // Shortest string "overr"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 160, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 160] */ // Shortest string "overri"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 99, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 161] */ // Shortest string "ope"
      new Table(29, 44, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 17, 17, 162}),
/* NxS[ 162] */ // Shortest string "oper"
      new Table(29, 40, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 163}),
/* NxS[ 163] */ // Shortest string "opera"
      new Table(29, 43, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 17, 164}),
/* NxS[ 164] */ // Shortest string "operat"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          91, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 165] */ // Shortest string "obj"
      new Table(29, 46, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 17, 17, 17, 17, 166}),
/* NxS[ 166] */ // Shortest string "stru"
      new Table(29, 45, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 17, 17, 17, 128}),
/* NxS[ 167] */ // Shortest string "yi"
      new Table(29, 46, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 17, 17, 17, 17, 168}),
/* NxS[ 168] */ // Shortest string "yie"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 94, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 169] */ // Shortest string "go"
      new Table(29, 43, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 17, 172}),
/* NxS[ 170] */ // Shortest string "gl"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          171, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 171] */ // Shortest string "glo"
      new Table(29, 41, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 103}),
/* NxS[ 172] */ // Shortest string "got"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          100, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 173] */ // Shortest string "in"
      new Table(29, 43, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 17, 179}),
/* NxS[ 174] */ // Shortest string "im"
      new Table(23, 45, 17, new short[] {175, 17, 17, 17, 17, 17, 
          -1, -1, -1, -1, -1, -1, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, -1, -1, -1, -1}),
/* NxS[ 175] */ // Shortest string "exp"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 176, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 176] */ // Shortest string "expl"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 177, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 177] */ // Shortest string "expli"
      new Table(29, 45, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 17, 17, 17, 178}),
/* NxS[ 178] */ // Shortest string "awa"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 128, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 179] */ // Shortest string "int"
      new Table(29, 46, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 17, 17, 17, 17, 180}),
/* NxS[ 180] */ // Shortest string "inte"
      new Table(29, 44, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 17, 17, 181}),
/* NxS[ 181] */ // Shortest string "inter"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 103, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 182, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 182] */ // Shortest string "namesp"
      new Table(29, 40, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 183}),
/* NxS[ 183] */ // Shortest string "namespa"
      new Table(29, 45, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 17, 17, 17, 99}),
/* NxS[ 184] */ // Shortest string "de"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 190, 17, 17, 191, 17, 17, 17, 17, 17, 17, 17, 
          17, 192, 17, 17, 17, 17, 193, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 185] */ // Shortest string "dy"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 188, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 186] */ // Shortest string "do"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 187, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 187] */ // Shortest string "dou"
      new Table(29, 41, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 98}),
/* NxS[ 188] */ // Shortest string "dyn"
      new Table(29, 40, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 189}),
/* NxS[ 189] */ // Shortest string "dyna"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 109, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 190] */ // Shortest string "des"
      new Table(29, 45, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 17, 17, 17, 198}),
/* NxS[ 191] */ // Shortest string "dec"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 197, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 192] */ // Shortest string "del"
      new Table(29, 46, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 17, 17, 17, 17, 196}),
/* NxS[ 193] */ // Shortest string "def"
      new Table(29, 40, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 194}),
/* NxS[ 194] */ // Shortest string "defa"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 195, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 195] */ // Shortest string "defau"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 128, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 196] */ // Shortest string "dele"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 117, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 197] */ // Shortest string "deci"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 103, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 198] */ // Shortest string "asc"
      new Table(29, 46, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 17, 17, 17, 17, 199}),
/* NxS[ 199] */ // Shortest string "asce"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 200, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 200] */ // Shortest string "ascen"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 201, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 201] */ // Shortest string "ascend"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 142, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 202] */ // Shortest string "na"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 205, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 203] */ // Shortest string "ne"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 100, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 204] */ // Shortest string "nu"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 104, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 205] */ // Shortest string "nam"
      new Table(29, 46, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 17, 17, 17, 17, 206}),
/* NxS[ 206] */ // Shortest string "name"
      new Table(29, 42, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 207}),
/* NxS[ 207] */ // Shortest string "names"
      new Table(23, 45, 17, new short[] {182, 17, 17, 17, 17, 17, 
          -1, -1, -1, -1, -1, -1, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, -1, -1, -1, -1}),
/* NxS[ 208] */ // Shortest string "en"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 217, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 209] */ // Shortest string "eq"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 215, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 210] */ // Shortest string "ex"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 212, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 175, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 211] */ // Shortest string "ev"
      new Table(29, 46, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 17, 17, 17, 17, 140}),
/* NxS[ 212] */ // Shortest string "ext"
      new Table(29, 46, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 17, 17, 17, 17, 213}),
/* NxS[ 213] */ // Shortest string "retu"
      new Table(29, 44, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 17, 17, 214}),
/* NxS[ 214] */ // Shortest string "retur"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 100, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 215] */ // Shortest string "equ"
      new Table(29, 40, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 216}),
/* NxS[ 216] */ // Shortest string "equa"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 122, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 217] */ // Shortest string "enu"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 100, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 218] */ // Shortest string "ca"
      new Table(29, 43, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 99, 131}),
/* NxS[ 219] */ // Shortest string "co"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 223, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 220] */ // Shortest string "cl"
      new Table(29, 40, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 222}),
/* NxS[ 221] */ // Shortest string "ch"
      new Table(29, 46, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 91, 17, 17, 17, 17, 17, 147}),
/* NxS[ 222] */ // Shortest string "cla"
      new Table(29, 42, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 122}),
/* NxS[ 223] */ // Shortest string "con"
      new Table(29, 43, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 128, 224}),
/* NxS[ 224] */ // Shortest string "cont"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 225, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 225] */ // Shortest string "conti"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 226, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 226] */ // Shortest string "contin"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 99, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 227] */ // Shortest string "re"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 228, 17, 17, 229, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 100, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 228] */ // Shortest string "rea"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 230, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 229] */ // Shortest string "ret"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 213, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 230] */ // Shortest string "read"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          231, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 231] */ // Shortest string "reado"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 135, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 232] */ // Shortest string "tr"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 100, 17, 
          17, 17, 17, 17, 99, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 233] */ // Shortest string "ty"
      new Table(23, 45, 17, new short[] {236, 17, 17, 17, 17, 17, 
          -1, -1, -1, -1, -1, -1, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, -1, -1, -1, -1}),
/* NxS[ 234] */ // Shortest string "th"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 235, 17, 17, 17, 17, 122, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 235] */ // Shortest string "thr"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          203, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 236] */ // Shortest string "siz"
      new Table(29, 46, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 17, 17, 17, 17, 237}),
/* NxS[ 237] */ // Shortest string "size"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          238, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 238] */ // Shortest string "sizeo"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 100, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 239] */ // Shortest string "sb"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 118, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 240] */ // Shortest string "st"
      new Table(29, 44, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 246, 17, 17, 17, 247}),
/* NxS[ 241] */ // Shortest string "se"
      new Table(29, 43, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 245, 17, 17, 100}),
/* NxS[ 242] */ // Shortest string "si"
      new Table(26, 42, 17, new short[] {236, 17, 17, -1, -1, -1, 
          -1, -1, -1, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, 
          -1, -1, -1, -1}),
/* NxS[ 243] */ // Shortest string "sw"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 244, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 244] */ // Shortest string "swi"
      new Table(29, 43, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 17, 131}),
/* NxS[ 245] */ // Shortest string "sea"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 116, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 246] */ // Shortest string "sta"
      new Table(29, 45, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 17, 109, 17, 248}),
/* NxS[ 247] */ // Shortest string "str"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 142, 17, 17, 17, 
          17, 17, 17, 17, 166, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 248] */ // Shortest string "stac"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 249, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 249] */ // Shortest string "stack"
      new Table(29, 40, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 250}),
/* NxS[ 250] */ // Shortest string "stacka"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 251, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 251] */ // Shortest string "stackal"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 252, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 252] */ // Shortest string "stackall"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          110, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 253] */ // Shortest string "br"
      new Table(29, 46, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 17, 17, 17, 17, 255}),
/* NxS[ 254] */ // Shortest string "bo"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          104, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 255] */ // Shortest string "bre"
      new Table(29, 40, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 153}),
/* NxS[ 256] */ // Shortest string "ab"
      new Table(29, 42, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 260}),
/* NxS[ 257] */ // Shortest string "as"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 198, 17, 17, 17, 17, 17, 259, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 258] */ // Shortest string "aw"
      new Table(29, 40, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 178}),
/* NxS[ 259] */ // Shortest string "asy"
      new Table(59, 46, -1, new short[] {17, 17, 17, 17, 17, -1, 
          -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 110, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 
          -1, -1, -1, -1, -1, 17, 17, 17}),
/* NxS[ 260] */ // Shortest string "abs"
      new Table(29, 43, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 17, 261}),
/* NxS[ 261] */ // Shortest string "abst"
      new Table(29, 44, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 17, 17, 17, 17, 262}),
/* NxS[ 262] */ // Shortest string "abstr"
      new Table(29, 40, 17, new short[] {-1, -1, -1, -1, -1, -1, 
          17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, 166}),
/* NxS[ 263] */ // Shortest string ""
      new Table(64, 63, 17, new short[] {47, 1, 1, 1, 2, 3, 
          4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 18, 
          17, 19, 17, 17, 20, 21, 17, 17, 17, 22, 23, 24, 25, 26, 26, 26, 
          22, 17, 17, 1, 1, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 
          38, 39, 40, 41, 42, 43, 44, 45, 46}),
/* NxS[ 264] */ // Shortest string "#\x20"
      new Table(27, 41, 48, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 264, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          264, -1, -1}),
/* NxS[ 265] */ // Shortest string "8e"
      new Table(28, 32, -1, new short[] {71, -1, -1, -1, -1, -1, 
          -1, 71, -1, -1, -1, -1, -1, -1, -1, -1, 268, 268, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 71}),
/* NxS[ 266] */ // Shortest string "0x"
      new Table(59, 45, -1, new short[] {54, -1, 54, -1, 54, -1, 
          -1, -1, -1, 54, 54, -1, -1, -1, 54, 54, -1, 54, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 54, -1, -1, -1, -1, -1, -1, -1, 54, -1, 
          -1, -1, -1, -1, -1, 54, 54}),
/* NxS[ 267] */ // Shortest string "8."
      new Table(28, 32, -1, new short[] {53, -1, -1, -1, -1, -1, 
          -1, 53, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 53}),
/* NxS[ 268] */ // Shortest string "8e+"
      new Table(28, 32, -1, new short[] {71, -1, -1, -1, -1, -1, 
          -1, 71, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 71}),
/* NxS[ 269] */ // Shortest string "\"a"
      new Table(31, 37, 269, new short[] {86, 269, 270, -1, 269, 269, 
          269, 269, -1, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 
          269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, -1, -1, -1}),
/* NxS[ 270] */ // Shortest string "\"\\"
      new Table(66, 2, 269, new short[] {-1, -1}),
    };

int NextState() {
    if (code == ScanBuff.EndOfFile)
        return eofNum;
    else
        unchecked {
            int rslt;
            int idx = MapC(code) - NxS[state].min;
            if (idx < 0) idx += 67;
            if ((uint)idx >= (uint)NxS[state].rng) rslt = NxS[state].dflt;
            else rslt = NxS[state].nxt[idx];
            return rslt;
        }
}

#endregion


#if BACKUP
        // ==============================================================
        // == Nested struct used for backup in automata that do backup ==
        // ==============================================================

        struct Context // class used for automaton backup.
        {
            public int bPos;
            public int rPos; // scanner.readPos saved value
            public int cCol;
            public int lNum; // Need this in case of backup over EOL.
            public int state;
            public int cChr;
        }
        
        private Context ctx = new Context();
#endif // BACKUP

        // ==============================================================
        // ==== Nested struct to support input switching in scanners ====
        // ==============================================================

		struct BufferContext {
            internal ScanBuff buffSv;
			internal int chrSv;
			internal int cColSv;
			internal int lNumSv;
		}

        // ==============================================================
        // ===== Private methods to save and restore buffer contexts ====
        // ==============================================================

        /// <summary>
        /// This method creates a buffer context record from
        /// the current buffer object, together with some
        /// scanner state values. 
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        BufferContext MkBuffCtx()
		{
			BufferContext rslt;
			rslt.buffSv = this.buffer;
			rslt.chrSv = this.code;
			rslt.cColSv = this.cCol;
			rslt.lNumSv = this.lNum;
			return rslt;
		}

        /// <summary>
        /// This method restores the buffer value and allied
        /// scanner state from the given context record value.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void RestoreBuffCtx(BufferContext value)
		{
			this.buffer = value.buffSv;
			this.code = value.chrSv;
			this.cCol = value.cColSv;
			this.lNum = value.lNumSv;
        } 
        // =================== End Nested classes =======================

#if !NOFILES
     internal Scanner(Stream file) {
            SetSource(file, -1); // unicode option
        }

        public Scanner(Stream file, string codepage) {
            SetSource(file, CodePageHandling.GetCodePage(codepage));
        }   
#endif // !NOFILES

     internal Scanner() { }

        private int readPos;

        void GetCode()
        {
            if (code == '\n')  // This needs to be fixed for other conventions
                               // i.e. [\r\n\205\u2028\u2029]
            { 
                cCol = -1;
                lNum++;
            }
            readPos = buffer.Pos;

            // Now read new codepoint.
            code = buffer.Read();
            if (code > ScanBuff.EndOfFile)
            {
#if (!BYTEMODE)
                if (code >= 0xD800 && code <= 0xDBFF)
                {
                    int next = buffer.Read();
                    if (next < 0xDC00 || next > 0xDFFF)
                        code = ScanBuff.UnicodeReplacementChar;
                    else
                        code = (0x10000 + ((code & 0x3FF) << 10) + (next & 0x3FF));
                }
#endif
                cCol++;
            }
        }

        void MarkToken()
        {
#if (!PERSIST)
            buffer.Mark();
#endif
            tokPos = readPos;
            tokLin = lNum;
            tokCol = cCol;
        }
        
        void MarkEnd()
        {
            tokTxt = null;
            tokEPos = readPos;
            tokELin = lNum;
            tokECol = cCol;
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int Peek()
        {
            int rslt, codeSv = code, cColSv = cCol, lNumSv = lNum, bPosSv = buffer.Pos;
            GetCode(); rslt = code;
            lNum = lNumSv; cCol = cColSv; code = codeSv; buffer.Pos = bPosSv;
            return rslt;
        }

        // ==============================================================
        // =====    Initialization of string-based input buffers     ====
        // ==============================================================

        /// <summary>
        /// Create and initialize a StringBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the input string</param>
        /// <param name="offset">starting offset in the string</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(string source, int offset)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.buffer.Pos = offset;
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }

        // ================ LineBuffer Initialization ===================
        /// <summary>
        /// Create and initialize a LineBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the list of input strings</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(IList<string> source)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            this.lNum = 0;
            GetCode();
        }

#if !NOFILES        
        // =============== StreamBuffer Initialization ==================

        /// <summary>
        /// Create and initialize a StreamBuff buffer object for this scanner.
        /// StreamBuff is buffer for 8-bit byte files.
        /// </summary>
        /// <param name="source">the input byte stream</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }
        
#if !BYTEMODE
        // ================ TextBuffer Initialization ===================

        /// <summary>
        /// Create and initialize a TextBuff buffer object for this scanner.
        /// TextBuff is a buffer for encoded unicode files.
        /// </summary>
        /// <param name="source">the input text file</param>
        /// <param name="fallbackCodePage">Code page to use if file has
        /// no BOM. For 0, use machine default; for -1, 8-bit binary</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source, int fallbackCodePage)
        {
            this.buffer = ScanBuff.GetBuffer(source, fallbackCodePage);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }
#endif // !BYTEMODE
#endif // !NOFILES
        
        // ==============================================================

#if BABEL
        //
        //  Get the next token for Visual Studio
        //
        //  "state" is the inout mode variable that maintains scanner
        //  state between calls, using the EolState property. In principle,
        //  if the calls of EolState are costly set could be called once
        //  only per line, at the start; and get called only at the end
        //  of the line. This needs more infrastructure ...
        //
        public int GetNext(ref int state, out int start, out int end)
        {
                Tokens next;
            int s, e;
            s = state;        // state at start
            EolState = state;
                next = (Tokens)Scan();
            state = EolState;
            e = state;       // state at end;
            start = tokPos;
            end = tokEPos - 1; // end is the index of last char.
            return (int)next;
        }        
#endif // BABEL

        // ======== AbstractScanner<> Implementation =========

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public override int yylex()
        {
            // parserMax is set by reflecting on the Tokens
            // enumeration.  If maxParseToken is defined
            // that is used, otherwise int.MaxValue is used.
            int next;
            do { next = Scan(); } while (next >= parserMax);
            return next;
        }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yypos { get { return tokPos; } }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yyline { get { return tokLin; } }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yycol { get { return tokCol; } }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yytext")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yytext")]
        public string yytext
        {
            get 
            {
                if (tokTxt == null) 
                    tokTxt = buffer.GetString(tokPos, tokEPos);
                return tokTxt;
            }
        }

        /// <summary>
        /// Discards all but the first "n" codepoints in the recognized pattern.
        /// Resets the buffer position so that only n codepoints have been consumed;
        /// yytext is also re-evaluated. 
        /// </summary>
        /// <param name="n">The number of codepoints to consume</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void yyless(int n)
        {
            buffer.Pos = tokPos;
            // Must read at least one char, so set before start.
            cCol = tokCol - 1; 
            GetCode();
            // Now ensure that line counting is correct.
            lNum = tokLin;
            // And count the rest of the text.
            for (int i = 0; i < n; i++) GetCode();
            MarkEnd();
        }
       
        //
        //  It would be nice to count backward in the text
        //  but it does not seem possible to re-establish
        //  the correct column counts except by going forward.
        //
        /// <summary>
        /// Removes the last "n" code points from the pattern.
        /// </summary>
        /// <param name="n">The number to remove</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void _yytrunc(int n) { yyless(yyleng - n); }
        
        //
        // This is painful, but we no longer count
        // codepoints.  For the overwhelming majority 
        // of cases the single line code is fast, for
        // the others, well, at least it is all in the
        // buffer so no files are touched. Note that we
        // can't use (tokEPos - tokPos) because of the
        // possibility of surrogate pairs in the token.
        //
        /// <summary>
        /// The length of the pattern in codepoints (not the same as 
        /// string-length if the pattern contains any surrogate pairs).
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yyleng")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yyleng")]
        public int yyleng
        {
            get {
                if (tokELin == tokLin)
                    return tokECol - tokCol;
                else
#if BYTEMODE
                    return tokEPos - tokPos;
#else
                {
                    int ch;
                    int count = 0;
                    int save = buffer.Pos;
                    buffer.Pos = tokPos;
                    do {
                        ch = buffer.Read();
                        if (!char.IsHighSurrogate((char)ch)) count++;
                    } while (buffer.Pos < tokEPos && ch != ScanBuff.EndOfFile);
                    buffer.Pos = save;
                    return count;
                }
#endif // BYTEMODE
            }
        }
        
        // ============ methods available in actions ==============

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int YY_START {
            get { return currentScOrd; }
            set { currentScOrd = value; 
                  currentStart = startState[value]; 
            } 
        }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void BEGIN(int next) {
            currentScOrd = next;
            currentStart = startState[next];
        }

        // ============== The main tokenizer code =================

        int Scan() {
                for (; ; ) {
                    int next;              // next state to enter
#if LEFTANCHORS
                    for (;;) {
                        // Discard characters that do not start any pattern.
                        // Must check the left anchor condition after *every* GetCode!
                        state = ((cCol == 0) ? anchorState[currentScOrd] : currentStart);
                        if ((next = NextState()) != goStart) break; // LOOP EXIT HERE...
                        GetCode();
                    }
                    
#else // !LEFTANCHORS
                    state = currentStart;
                    while ((next = NextState()) == goStart) {
                        // At this point, the current character has no
                        // transition from the current state.  We discard 
                        // the "no-match" char.   In traditional LEX such 
                        // characters are echoed to the console.
                        GetCode();
                    }
#endif // LEFTANCHORS                    
                    // At last, a valid transition ...    
                    MarkToken();
                    state = next;
                    GetCode();                    
#if BACKUP
                    bool contextSaved = false;
                    while ((next = NextState()) > eofNum) { // Exit for goStart AND for eofNum
                        if (state <= maxAccept && next > maxAccept) { // need to prepare backup data
                            // Store data for the *latest* accept state that was found.
                            SaveStateAndPos( ref ctx );
                            contextSaved = true;
                        }
                        state = next;
                        GetCode();
                    }
                    if (state > maxAccept && contextSaved)
                        RestoreStateAndPos( ref ctx );
#else  // BACKUP
                    while ((next = NextState()) > eofNum) { // Exit for goStart AND for eofNum
                         state = next;
                         GetCode();
                    }
#endif // BACKUP
                    if (state <= maxAccept) {
                        MarkEnd();
#region ActionSwitch
#pragma warning disable 162, 1522
    switch (state)
    {
        case eofNum:
            switch (currentStart) {
                case 263:
return -2;
                    break;
            }
            if (yywrap())
                return (int)Tokens.EOF;
            break;
        case 1: // Recognized '[ \t\r\n\v\f]+',	Shortest string "\x20"
return yylex();
            break;
        case 2: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "a"
        case 3: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "b"
        case 4: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "s"
        case 5: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "t"
        case 6: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "r"
        case 7: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "c"
        case 8: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "e"
        case 9: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "n"
        case 10: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "d"
        case 11: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "i"
        case 12: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "g"
        case 13: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "y"
        case 14: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "w"
        case 15: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "o"
        case 16: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "l"
        case 17: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "k"
        case 18: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "u"
        case 19: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "f"
        case 20: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "p"
        case 21: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "v"
        case 91: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "va"
        case 92: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "vi"
        case 93: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "vo"
        case 94: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "voi"
        case 95: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "vol"
        case 96: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "vola"
        case 97: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "wh"
        case 98: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "whi"
        case 99: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "bas"
        case 101: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "vir"
        case 102: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "virt"
        case 103: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "glob"
        case 104: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "boo"
        case 105: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "pa"
        case 106: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "pr"
        case 107: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "pu"
        case 108: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "pub"
        case 109: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "stat"
        case 110: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "asyn"
        case 111: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "pri"
        case 112: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "pro"
        case 113: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "prot"
        case 114: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "prote"
        case 115: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "protec"
        case 116: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "fix"
        case 117: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "priv"
        case 118: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "by"
        case 119: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "par"
        case 120: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "para"
        case 121: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "part"
        case 122: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "thi"
        case 123: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "fa"
        case 124: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "fi"
        case 125: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "fo"
        case 126: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "fl"
        case 127: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "flo"
        case 128: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "ge"
        case 130: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "fore"
        case 131: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "cat"
        case 132: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "catc"
        case 133: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "fin"
        case 134: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "fina"
        case 135: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "final"
        case 136: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "finall"
        case 137: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "ba"
        case 138: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "us"
        case 139: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "un"
        case 140: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "ui"
        case 141: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "ul"
        case 142: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "usi"
        case 143: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "lon"
        case 144: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "uns"
        case 145: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "unc"
        case 146: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "unch"
        case 147: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "che"
        case 148: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "chec"
        case 149: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "unsa"
        case 150: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "sh"
        case 151: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "sho"
        case 152: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "lo"
        case 153: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "loc"
        case 154: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "ob"
        case 155: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "op"
        case 156: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "ov"
        case 157: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "ove"
        case 158: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "over"
        case 159: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "overr"
        case 160: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "overri"
        case 161: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "ope"
        case 162: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "oper"
        case 163: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "opera"
        case 164: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "operat"
        case 165: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "obj"
        case 166: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "stru"
        case 167: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "yi"
        case 168: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "yie"
        case 169: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "go"
        case 170: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "gl"
        case 171: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "glo"
        case 172: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "got"
        case 173: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "in"
        case 174: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "im"
        case 175: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "exp"
        case 176: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "expl"
        case 177: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "expli"
        case 178: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "awa"
        case 180: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "inte"
        case 181: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "inter"
        case 182: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "namesp"
        case 183: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "namespa"
        case 184: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "de"
        case 185: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "dy"
        case 187: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "dou"
        case 188: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "dyn"
        case 189: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "dyna"
        case 190: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "des"
        case 191: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "dec"
        case 192: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "del"
        case 193: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "def"
        case 194: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "defa"
        case 195: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "defau"
        case 196: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "dele"
        case 197: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "deci"
        case 198: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "asc"
        case 199: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "asce"
        case 200: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "ascen"
        case 201: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "ascend"
        case 202: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "na"
        case 203: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "ne"
        case 204: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "nu"
        case 205: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "nam"
        case 206: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "name"
        case 207: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "names"
        case 208: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "en"
        case 209: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "eq"
        case 210: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "ex"
        case 211: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "ev"
        case 212: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "ext"
        case 213: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "retu"
        case 214: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "retur"
        case 215: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "equ"
        case 216: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "equa"
        case 217: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "enu"
        case 218: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "ca"
        case 219: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "co"
        case 220: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "cl"
        case 221: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "ch"
        case 222: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "cla"
        case 223: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "con"
        case 224: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "cont"
        case 225: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "conti"
        case 226: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "contin"
        case 227: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "re"
        case 228: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "rea"
        case 229: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "ret"
        case 230: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "read"
        case 231: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "reado"
        case 232: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "tr"
        case 233: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "ty"
        case 234: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "th"
        case 235: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "thr"
        case 236: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "siz"
        case 237: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "size"
        case 238: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "sizeo"
        case 239: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "sb"
        case 240: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "st"
        case 241: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "se"
        case 242: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "si"
        case 243: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "sw"
        case 244: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "swi"
        case 245: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "sea"
        case 246: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "sta"
        case 247: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "str"
        case 248: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "stac"
        case 249: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "stack"
        case 250: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "stacka"
        case 251: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "stackal"
        case 252: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "stackall"
        case 253: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "br"
        case 254: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "bo"
        case 255: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "bre"
        case 256: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "ab"
        case 258: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "aw"
        case 259: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "asy"
        case 260: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "abs"
        case 261: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "abst"
        case 262: // Recognized '[A-Z_a-z][0-9A-Z_a-z]*',	Shortest string "abstr"
return 1;
            break;
        case 22: // Recognized '(0x[0-9A-Fa-f]{1,16}|(0|[1-9][0-9]*))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "8"
        case 46: // Recognized '(0x[0-9A-Fa-f]{1,16}|(0|[1-9][0-9]*))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0"
        case 51: // Recognized '(0x[0-9A-Fa-f]{1,16}|(0|[1-9][0-9]*))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "8l"
        case 52: // Recognized '(0x[0-9A-Fa-f]{1,16}|(0|[1-9][0-9]*))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "8u"
        case 54: // Recognized '(0x[0-9A-Fa-f]{1,16}|(0|[1-9][0-9]*))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0xa"
        case 55: // Recognized '(0x[0-9A-Fa-f]{1,16}|(0|[1-9][0-9]*))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0xaa"
        case 56: // Recognized '(0x[0-9A-Fa-f]{1,16}|(0|[1-9][0-9]*))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0xaaa"
        case 57: // Recognized '(0x[0-9A-Fa-f]{1,16}|(0|[1-9][0-9]*))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0xaaaa"
        case 58: // Recognized '(0x[0-9A-Fa-f]{1,16}|(0|[1-9][0-9]*))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0xaaaaa"
        case 59: // Recognized '(0x[0-9A-Fa-f]{1,16}|(0|[1-9][0-9]*))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0xaaaaaa"
        case 60: // Recognized '(0x[0-9A-Fa-f]{1,16}|(0|[1-9][0-9]*))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0xaaaaaaa"
        case 61: // Recognized '(0x[0-9A-Fa-f]{1,16}|(0|[1-9][0-9]*))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0xaaaaaaaa"
        case 62: // Recognized '(0x[0-9A-Fa-f]{1,16}|(0|[1-9][0-9]*))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0xaaaaaaaaa"
        case 63: // Recognized '(0x[0-9A-Fa-f]{1,16}|(0|[1-9][0-9]*))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0xaaaaaaaaaa"
        case 64: // Recognized '(0x[0-9A-Fa-f]{1,16}|(0|[1-9][0-9]*))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0xaaaaaaaaaaa"
        case 65: // Recognized '(0x[0-9A-Fa-f]{1,16}|(0|[1-9][0-9]*))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0xaaaaaaaaaaaa"
        case 66: // Recognized '(0x[0-9A-Fa-f]{1,16}|(0|[1-9][0-9]*))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0xaaaaaaaaaaaaa"
        case 67: // Recognized '(0x[0-9A-Fa-f]{1,16}|(0|[1-9][0-9]*))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0xaaaaaaaaaaaaaa"
        case 68: // Recognized '(0x[0-9A-Fa-f]{1,16}|(0|[1-9][0-9]*))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0xaaaaaaaaaaaaaaa"
        case 69: // Recognized '(0x[0-9A-Fa-f]{1,16}|(0|[1-9][0-9]*))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0xaaaaaaaaaaaaaaaa"
        case 70: // Recognized '(0x[0-9A-Fa-f]{1,16}|(0|[1-9][0-9]*))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "8lu"
return 43;
            break;
        case 23: // Recognized '"/"',	Shortest string "/"
return 22;
            break;
        case 24: // Recognized '"*"',	Shortest string "*"
return 20;
            break;
        case 25: // Recognized '[\n]|[^\n]',	Shortest string "\""
        case 26: // Recognized '[\n]|[^\n]',	Shortest string "\x01"
        case 47: // Recognized '[\n]|[^\n]',	Shortest string "#"
return -1;
            break;
        case 27: // Recognized '"<"',	Shortest string "<"
return 7;
            break;
        case 28: // Recognized '"="',	Shortest string "="
return 12;
            break;
        case 29: // Recognized '">"',	Shortest string ">"
return 9;
            break;
        case 30: // Recognized '"!"',	Shortest string "!"
return 31;
            break;
        case 31: // Recognized '"+"',	Shortest string "+"
return 15;
            break;
        case 32: // Recognized '"-"',	Shortest string "-"
return 18;
            break;
        case 33: // Recognized '"%"',	Shortest string "%"
return 24;
            break;
        case 34: // Recognized '"&"',	Shortest string "&"
return 27;
            break;
        case 35: // Recognized '"|"',	Shortest string "|"
return 30;
            break;
        case 36: // Recognized '"["',	Shortest string "["
return 32;
            break;
        case 37: // Recognized '"]"',	Shortest string "]"
return 33;
            break;
        case 38: // Recognized '"("',	Shortest string "("
return 34;
            break;
        case 39: // Recognized '")"',	Shortest string ")"
return 35;
            break;
        case 40: // Recognized '"{"',	Shortest string "{"
return 36;
            break;
        case 41: // Recognized '"}"',	Shortest string "}"
return 37;
            break;
        case 42: // Recognized '","',	Shortest string ","
return 38;
            break;
        case 43: // Recognized '":"',	Shortest string ":"
return 40;
            break;
        case 44: // Recognized '";"',	Shortest string ";"
return 41;
            break;
        case 45: // Recognized '"."',	Shortest string "."
return 42;
            break;
        case 48: // Recognized '#[ \t]*[a-z]+[ \t]*',	Shortest string "#a"
        case 49: // Recognized '#[ \t]*[a-z]+[ \t]*',	Shortest string "#a\x20"
if(!_TryReadUntilBlockEnd("\n")) return -1;return 45;
            break;
        case 50: // Recognized '((0|[1-9][0-9]*)(\.[0-9]+)?([Ee][\+\-]?[0-9]+)?[DdMmFf]?)|((\.[0-9]+)([Ee][\+\-]?[0-9]+)?[DdMmFf]?)',	Shortest string "8d"
        case 53: // Recognized '((0|[1-9][0-9]*)(\.[0-9]+)?([Ee][\+\-]?[0-9]+)?[DdMmFf]?)|((\.[0-9]+)([Ee][\+\-]?[0-9]+)?[DdMmFf]?)',	Shortest string ".8"
        case 71: // Recognized '((0|[1-9][0-9]*)(\.[0-9]+)?([Ee][\+\-]?[0-9]+)?[DdMmFf]?)|((\.[0-9]+)([Ee][\+\-]?[0-9]+)?[DdMmFf]?)',	Shortest string "8e8"
return 44;
            break;
        case 72: // Recognized '"::"',	Shortest string "::"
return 39;
            break;
        case 73: // Recognized '"|="',	Shortest string "|="
return 29;
            break;
        case 74: // Recognized '"||"',	Shortest string "||"
return 28;
            break;
        case 75: // Recognized '"&="',	Shortest string "&="
return 26;
            break;
        case 76: // Recognized '"&&"',	Shortest string "&&"
return 25;
            break;
        case 77: // Recognized '"%="',	Shortest string "%="
return 23;
            break;
        case 78: // Recognized '"-="',	Shortest string "-="
return 17;
            break;
        case 79: // Recognized '"--"',	Shortest string "--"
return 16;
            break;
        case 80: // Recognized '"+="',	Shortest string "+="
return 14;
            break;
        case 81: // Recognized '"++"',	Shortest string "++"
return 13;
            break;
        case 82: // Recognized '"!="',	Shortest string "!="
return 11;
            break;
        case 83: // Recognized '">="',	Shortest string ">="
return 8;
            break;
        case 84: // Recognized '"=="',	Shortest string "=="
return 10;
            break;
        case 85: // Recognized '"<="',	Shortest string "<="
return 6;
            break;
        case 86: // Recognized '\"([^\\\"\a\b\f\n\r\t\v\0]|\\[^\r\n]|\\[0-7]{3}|\\x[0-9A-Fa-f]{2}|\\u[0-9A-Fa-f]{4}|\\U[0-9A-Fa-f]{8})*\"',	Shortest string "\"\""
return 4;
            break;
        case 87: // Recognized '"*="',	Shortest string "*="
return 19;
            break;
        case 88: // Recognized '"//"',	Shortest string "//"
if(!_TryReadUntilBlockEnd("\n")) return -1;return 2;
            break;
        case 89: // Recognized '"/*"',	Shortest string "/*"
if(!_TryReadUntilBlockEnd("*/")) return -1;return 3;
            break;
        case 90: // Recognized '"/="',	Shortest string "/="
return 21;
            break;
        case 100: // Recognized 'abstract|as|ascending|async|await|base|bool|break|byte|case|catch|char|checked|class|const|continue|decimal|default|delegate|descending|do|double|dynamic|else|enum|equals|explicit|extern|event|false|finally|fixed|float|for|foreach|get|global|goto|if|implicit|int|interface|internal|is|lock|long|namespace|new|null|object|operator|out|override|params|partial|private|protected|public|readonly|ref|return|sbyte|sealed|set|short|sizeof|stackalloc|static|string|struct|switch|this|throw|true|try|typeof|uint|ulong|unchecked|unsafe|ushort|using|var|virtual|void|volatile|while|yield',	Shortest string "is"
        case 129: // Recognized 'abstract|as|ascending|async|await|base|bool|break|byte|case|catch|char|checked|class|const|continue|decimal|default|delegate|descending|do|double|dynamic|else|enum|equals|explicit|extern|event|false|finally|fixed|float|for|foreach|get|global|goto|if|implicit|int|interface|internal|is|lock|long|namespace|new|null|object|operator|out|override|params|partial|private|protected|public|readonly|ref|return|sbyte|sealed|set|short|sizeof|stackalloc|static|string|struct|switch|this|throw|true|try|typeof|uint|ulong|unchecked|unsafe|ushort|using|var|virtual|void|volatile|while|yield',	Shortest string "for"
        case 179: // Recognized 'abstract|as|ascending|async|await|base|bool|break|byte|case|catch|char|checked|class|const|continue|decimal|default|delegate|descending|do|double|dynamic|else|enum|equals|explicit|extern|event|false|finally|fixed|float|for|foreach|get|global|goto|if|implicit|int|interface|internal|is|lock|long|namespace|new|null|object|operator|out|override|params|partial|private|protected|public|readonly|ref|return|sbyte|sealed|set|short|sizeof|stackalloc|static|string|struct|switch|this|throw|true|try|typeof|uint|ulong|unchecked|unsafe|ushort|using|var|virtual|void|volatile|while|yield',	Shortest string "int"
        case 186: // Recognized 'abstract|as|ascending|async|await|base|bool|break|byte|case|catch|char|checked|class|const|continue|decimal|default|delegate|descending|do|double|dynamic|else|enum|equals|explicit|extern|event|false|finally|fixed|float|for|foreach|get|global|goto|if|implicit|int|interface|internal|is|lock|long|namespace|new|null|object|operator|out|override|params|partial|private|protected|public|readonly|ref|return|sbyte|sealed|set|short|sizeof|stackalloc|static|string|struct|switch|this|throw|true|try|typeof|uint|ulong|unchecked|unsafe|ushort|using|var|virtual|void|volatile|while|yield',	Shortest string "do"
        case 257: // Recognized 'abstract|as|ascending|async|await|base|bool|break|byte|case|catch|char|checked|class|const|continue|decimal|default|delegate|descending|do|double|dynamic|else|enum|equals|explicit|extern|event|false|finally|fixed|float|for|foreach|get|global|goto|if|implicit|int|interface|internal|is|lock|long|namespace|new|null|object|operator|out|override|params|partial|private|protected|public|readonly|ref|return|sbyte|sealed|set|short|sizeof|stackalloc|static|string|struct|switch|this|throw|true|try|typeof|uint|ulong|unchecked|unsafe|ushort|using|var|virtual|void|volatile|while|yield',	Shortest string "as"
return 0;
            break;
        default:
            break;
    }
#pragma warning restore 162, 1522
#endregion
                    }
                }
        }

#if BACKUP
        void SaveStateAndPos(ref Context ctx) {
            ctx.bPos  = buffer.Pos;
            ctx.rPos  = readPos;
            ctx.cCol  = cCol;
            ctx.lNum  = lNum;
            ctx.state = state;
            ctx.cChr  = code;
        }

        void RestoreStateAndPos(ref Context ctx) {
            buffer.Pos = ctx.bPos;
            readPos = ctx.rPos;
            cCol  = ctx.cCol;
            lNum  = ctx.lNum;
            state = ctx.state;
            code  = ctx.cChr;
        }
#endif  // BACKUP

        // ============= End of the tokenizer code ================

#if STACK        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void yy_clear_stack() { scStack.Clear(); }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int yy_top_state() { return scStack.Peek(); }
        
        internal void yy_push_state(int state)
        {
            scStack.Push(currentScOrd);
            BEGIN(state);
        }
        
        internal void yy_pop_state()
        {
            // Protect against input errors that pop too far ...
            if (scStack.Count > 0) {
				int newSc = scStack.Pop();
				BEGIN(newSc);
            } // Otherwise leave stack unchanged.
        }
 #endif // STACK

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void ECHO() { Console.Out.Write(yytext); }
        
    } // end class $Scanner


} // end namespace
