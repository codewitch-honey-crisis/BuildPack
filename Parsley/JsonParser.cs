//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ParsleyDemo {
    using System;
    using System.Collections.Generic;
    
    /// <summary>Parses the following grammar:
    /// Json= Object | Array;
    /// Object= "{" [ Field { "," Field } ] "}";
    /// Field= string ":" Value;
    /// Array= "[" [ Value { "," Value } ] "]";
    /// {Value}= string | number | Object | Array | Boolean | null;
    /// Boolean= true | false;
    /// number= '\-?(0|[1-9][0-9]*)(\.[0-9]+)?([Ee][\+\-]?[0-9]+)?';
    /// string= '"([^\n"\\]|\\([btrnf"\\/]|(u[A-Fa-f]{4})))*"';
    /// true= "true";
    /// false= "false";
    /// null= "null";
    /// {lbracket}= "[";
    /// {rbracket}= "]";
    /// {lbrace}= "{";
    /// {rbrace}= "}";
    /// {colon}= ":";
    /// {comma}= ",";
    /// (whitespace)= '[\n\r\t ]+';
    /// </summary>
    /// <remarks>The rules for the factored grammar are as follows:
    /// Json -> Object
    /// Json -> Array
    /// Field -> string colon Value
    /// Value -> string
    /// Value -> number
    /// Value -> Object
    /// Value -> Array
    /// Value -> Boolean
    /// Value -> null
    /// Boolean -> true
    /// Boolean -> false
    /// ImplicitList -> comma Field ImplicitListRightAssoc
    /// ImplicitList2 -> comma Value ImplicitList2RightAssoc
    /// ImplicitListRightAssoc -> comma Field ImplicitListRightAssoc
    /// ImplicitListRightAssoc ->
    /// ImplicitList2RightAssoc -> comma Value ImplicitList2RightAssoc
    /// ImplicitList2RightAssoc ->
    /// ObjectPart -> ImplicitList rbrace
    /// ObjectPart -> rbrace
    /// ArrayPart -> ImplicitList2 rbracket
    /// ArrayPart -> rbracket
    /// Object -> lbrace ObjectPart2
    /// ObjectPart2 -> rbrace
    /// ObjectPart2 -> Field ObjectPart
    /// Array -> lbracket ArrayPart2
    /// ArrayPart2 -> rbracket
    /// ArrayPart2 -> Value ArrayPart
    /// </remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Parsley", "0.1.0.0")]
    internal partial class JsonParser {
        internal const int ErrorSymbol = -1;
        internal const int EosSymbol = -2;
        public const int Json = 0;
        public const int Field = 1;
        public const int Value = 2;
        public const int Boolean = 3;
        public const int ImplicitList = 4;
        public const int ImplicitList2 = 5;
        public const int ImplicitListRightAssoc = 6;
        public const int ImplicitList2RightAssoc = 7;
        public const int ObjectPart = 8;
        public const int ArrayPart = 9;
        public const int Object = 10;
        public const int ObjectPart2 = 11;
        public const int Array = 12;
        public const int ArrayPart2 = 13;
        public const int @string = 14;
        public const int colon = 15;
        public const int number = 16;
        public const int @null = 17;
        public const int @true = 18;
        public const int @false = 19;
        public const int comma = 20;
        public const int rbrace = 21;
        public const int rbracket = 22;
        public const int lbrace = 23;
        public const int lbracket = 24;
        public const int whitespace = 25;
        
        #line 2 "C:\dev\BuildPack\Parsley\json.xbnf"
        private static ParseNode _ParseJson(ParserContext context) {
            int line = context.Line;
            int column = context.Column;
            long position = context.Position;
            if ((JsonParser.lbrace == context.SymbolId)) {
                // Json -> Object
                ParseNode[] children = new ParseNode[1];
                children[0] = JsonParser._ParseObject(context);
                return new ParseNode(JsonParser.Json, "Json", children, line, column, position);
            }
            if ((JsonParser.lbracket == context.SymbolId)) {
                // Json -> Array
                ParseNode[] children = new ParseNode[1];
                children[0] = JsonParser._ParseArray(context);
                return new ParseNode(JsonParser.Json, "Json", children, line, column, position);
            }
            context.Error("Expecting lbrace or lbracket");
            return null;
        }
        
        #line default
        #line hidden
        
        #line 4 "C:\dev\BuildPack\Parsley\json.xbnf"
        private static ParseNode _ParseField(ParserContext context) {
            int line = context.Line;
            int column = context.Column;
            long position = context.Position;
            if ((JsonParser.@string == context.SymbolId)) {
                // Field -> string colon Value
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(new ParseNode(JsonParser.@string, "string", context.Value, line, column, position));
                context.Advance();
                if ((JsonParser.colon == context.SymbolId)) {
                    context.Advance();
                    children.AddRange(JsonParser._ParseValue(context).Children);
                    return new ParseNode(JsonParser.Field, "Field", children.ToArray(), line, column, position);
                }
                context.Error("Expecting colon");
            }
            context.Error("Expecting string");
            return null;
        }
        
        #line default
        #line hidden
        
        #line 6 "C:\dev\BuildPack\Parsley\json.xbnf"
        private static ParseNode _ParseValue(ParserContext context) {
            int line = context.Line;
            int column = context.Column;
            long position = context.Position;
            if ((JsonParser.@string == context.SymbolId)) {
                // Value -> string
                ParseNode[] children = new ParseNode[1];
                children[0] = new ParseNode(JsonParser.@string, "string", context.Value, line, column, position);
                context.Advance();
                return new ParseNode(JsonParser.Value, "Value", children, line, column, position);
            }
            if ((JsonParser.number == context.SymbolId)) {
                // Value -> number
                ParseNode[] children = new ParseNode[1];
                children[0] = new ParseNode(JsonParser.number, "number", context.Value, line, column, position);
                context.Advance();
                return new ParseNode(JsonParser.Value, "Value", children, line, column, position);
            }
            if ((JsonParser.lbrace == context.SymbolId)) {
                // Value -> Object
                ParseNode[] children = new ParseNode[1];
                children[0] = JsonParser._ParseObject(context);
                return new ParseNode(JsonParser.Value, "Value", children, line, column, position);
            }
            if ((JsonParser.lbracket == context.SymbolId)) {
                // Value -> Array
                ParseNode[] children = new ParseNode[1];
                children[0] = JsonParser._ParseArray(context);
                return new ParseNode(JsonParser.Value, "Value", children, line, column, position);
            }
            if (((JsonParser.@true == context.SymbolId) 
                        || (JsonParser.@false == context.SymbolId))) {
                // Value -> Boolean
                ParseNode[] children = new ParseNode[1];
                children[0] = JsonParser._ParseBoolean(context);
                return new ParseNode(JsonParser.Value, "Value", children, line, column, position);
            }
            if ((JsonParser.@null == context.SymbolId)) {
                // Value -> null
                ParseNode[] children = new ParseNode[1];
                children[0] = new ParseNode(JsonParser.@null, "null", context.Value, line, column, position);
                context.Advance();
                return new ParseNode(JsonParser.Value, "Value", children, line, column, position);
            }
            context.Error("Expecting string, number, lbrace, lbracket, true, false, or null");
            return null;
        }
        
        #line default
        #line hidden
        
        #line 12 "C:\dev\BuildPack\Parsley\json.xbnf"
        private static ParseNode _ParseBoolean(ParserContext context) {
            int line = context.Line;
            int column = context.Column;
            long position = context.Position;
            if ((JsonParser.@true == context.SymbolId)) {
                // Boolean -> true
                ParseNode[] children = new ParseNode[1];
                children[0] = new ParseNode(JsonParser.@true, "true", context.Value, line, column, position);
                context.Advance();
                return new ParseNode(JsonParser.Boolean, "Boolean", children, line, column, position);
            }
            if ((JsonParser.@false == context.SymbolId)) {
                // Boolean -> false
                ParseNode[] children = new ParseNode[1];
                children[0] = new ParseNode(JsonParser.@false, "false", context.Value, line, column, position);
                context.Advance();
                return new ParseNode(JsonParser.Boolean, "Boolean", children, line, column, position);
            }
            context.Error("Expecting true or false");
            return null;
        }
        
        #line default
        #line hidden
        private static ParseNode _ParseImplicitList(ParserContext context) {
            int line = context.Line;
            int column = context.Column;
            long position = context.Position;
            if ((JsonParser.comma == context.SymbolId)) {
                // ImplicitList -> comma Field ImplicitListRightAssoc
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                context.Advance();
                children.Add(JsonParser._ParseField(context));
                children.AddRange(JsonParser._ParseImplicitListRightAssoc(context).Children);
                return new ParseNode(JsonParser.ImplicitList, "ImplicitList", children.ToArray(), line, column, position);
            }
            context.Error("Expecting comma");
            return null;
        }
        private static ParseNode _ParseImplicitList2(ParserContext context) {
            int line = context.Line;
            int column = context.Column;
            long position = context.Position;
            if ((JsonParser.comma == context.SymbolId)) {
                // ImplicitList2 -> comma Value ImplicitList2RightAssoc
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                context.Advance();
                children.AddRange(JsonParser._ParseValue(context).Children);
                children.AddRange(JsonParser._ParseImplicitList2RightAssoc(context).Children);
                return new ParseNode(JsonParser.ImplicitList2, "ImplicitList2", children.ToArray(), line, column, position);
            }
            context.Error("Expecting comma");
            return null;
        }
        private static ParseNode _ParseImplicitListRightAssoc(ParserContext context) {
            int line = context.Line;
            int column = context.Column;
            long position = context.Position;
            if ((JsonParser.comma == context.SymbolId)) {
                // ImplicitListRightAssoc -> comma Field ImplicitListRightAssoc
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                context.Advance();
                children.Add(JsonParser._ParseField(context));
                children.AddRange(JsonParser._ParseImplicitListRightAssoc(context).Children);
                return new ParseNode(JsonParser.ImplicitListRightAssoc, "ImplicitListRightAssoc", children.ToArray(), line, column, position);
            }
            if ((JsonParser.rbrace == context.SymbolId)) {
                // ImplicitListRightAssoc ->
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(JsonParser.ImplicitListRightAssoc, "ImplicitListRightAssoc", children, line, column, position);
            }
            context.Error("Expecting comma or rbrace");
            return null;
        }
        private static ParseNode _ParseImplicitList2RightAssoc(ParserContext context) {
            int line = context.Line;
            int column = context.Column;
            long position = context.Position;
            if ((JsonParser.comma == context.SymbolId)) {
                // ImplicitList2RightAssoc -> comma Value ImplicitList2RightAssoc
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                context.Advance();
                children.AddRange(JsonParser._ParseValue(context).Children);
                children.AddRange(JsonParser._ParseImplicitList2RightAssoc(context).Children);
                return new ParseNode(JsonParser.ImplicitList2RightAssoc, "ImplicitList2RightAssoc", children.ToArray(), line, column, position);
            }
            if ((JsonParser.rbracket == context.SymbolId)) {
                // ImplicitList2RightAssoc ->
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(JsonParser.ImplicitList2RightAssoc, "ImplicitList2RightAssoc", children, line, column, position);
            }
            context.Error("Expecting comma or rbracket");
            return null;
        }
        private static ParseNode _ParseObjectPart(ParserContext context) {
            int line = context.Line;
            int column = context.Column;
            long position = context.Position;
            if ((JsonParser.comma == context.SymbolId)) {
                // ObjectPart -> ImplicitList rbrace
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(JsonParser._ParseImplicitList(context).Children);
                if ((JsonParser.rbrace == context.SymbolId)) {
                    context.Advance();
                    return new ParseNode(JsonParser.ObjectPart, "ObjectPart", children.ToArray(), line, column, position);
                }
                context.Error("Expecting rbrace");
            }
            if ((JsonParser.rbrace == context.SymbolId)) {
                // ObjectPart -> rbrace
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                context.Advance();
                return new ParseNode(JsonParser.ObjectPart, "ObjectPart", children.ToArray(), line, column, position);
            }
            context.Error("Expecting comma or rbrace");
            return null;
        }
        private static ParseNode _ParseArrayPart(ParserContext context) {
            int line = context.Line;
            int column = context.Column;
            long position = context.Position;
            if ((JsonParser.comma == context.SymbolId)) {
                // ArrayPart -> ImplicitList2 rbracket
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(JsonParser._ParseImplicitList2(context).Children);
                if ((JsonParser.rbracket == context.SymbolId)) {
                    context.Advance();
                    return new ParseNode(JsonParser.ArrayPart, "ArrayPart", children.ToArray(), line, column, position);
                }
                context.Error("Expecting rbracket");
            }
            if ((JsonParser.rbracket == context.SymbolId)) {
                // ArrayPart -> rbracket
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                context.Advance();
                return new ParseNode(JsonParser.ArrayPart, "ArrayPart", children.ToArray(), line, column, position);
            }
            context.Error("Expecting comma or rbracket");
            return null;
        }
        
        #line 3 "C:\dev\BuildPack\Parsley\json.xbnf"
        private static ParseNode _ParseObject(ParserContext context) {
            int line = context.Line;
            int column = context.Column;
            long position = context.Position;
            if ((JsonParser.lbrace == context.SymbolId)) {
                // Object -> lbrace ObjectPart2
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                context.Advance();
                children.AddRange(JsonParser._ParseObjectPart2(context).Children);
                return new ParseNode(JsonParser.Object, "Object", children.ToArray(), line, column, position);
            }
            context.Error("Expecting lbrace");
            return null;
        }
        
        #line default
        #line hidden
        private static ParseNode _ParseObjectPart2(ParserContext context) {
            int line = context.Line;
            int column = context.Column;
            long position = context.Position;
            if ((JsonParser.rbrace == context.SymbolId)) {
                // ObjectPart2 -> rbrace
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                context.Advance();
                return new ParseNode(JsonParser.ObjectPart2, "ObjectPart2", children.ToArray(), line, column, position);
            }
            if ((JsonParser.@string == context.SymbolId)) {
                // ObjectPart2 -> Field ObjectPart
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(JsonParser._ParseField(context));
                children.AddRange(JsonParser._ParseObjectPart(context).Children);
                return new ParseNode(JsonParser.ObjectPart2, "ObjectPart2", children.ToArray(), line, column, position);
            }
            context.Error("Expecting rbrace or string");
            return null;
        }
        
        #line 5 "C:\dev\BuildPack\Parsley\json.xbnf"
        private static ParseNode _ParseArray(ParserContext context) {
            int line = context.Line;
            int column = context.Column;
            long position = context.Position;
            if ((JsonParser.lbracket == context.SymbolId)) {
                // Array -> lbracket ArrayPart2
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                context.Advance();
                children.AddRange(JsonParser._ParseArrayPart2(context).Children);
                return new ParseNode(JsonParser.Array, "Array", children.ToArray(), line, column, position);
            }
            context.Error("Expecting lbracket");
            return null;
        }
        
        #line default
        #line hidden
        private static ParseNode _ParseArrayPart2(ParserContext context) {
            int line = context.Line;
            int column = context.Column;
            long position = context.Position;
            if ((JsonParser.rbracket == context.SymbolId)) {
                // ArrayPart2 -> rbracket
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                context.Advance();
                return new ParseNode(JsonParser.ArrayPart2, "ArrayPart2", children.ToArray(), line, column, position);
            }
            if ((((((((JsonParser.@string == context.SymbolId) 
                        || (JsonParser.number == context.SymbolId)) 
                        || (JsonParser.lbrace == context.SymbolId)) 
                        || (JsonParser.lbracket == context.SymbolId)) 
                        || (JsonParser.@true == context.SymbolId)) 
                        || (JsonParser.@false == context.SymbolId)) 
                        || (JsonParser.@null == context.SymbolId))) {
                // ArrayPart2 -> Value ArrayPart
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(JsonParser._ParseValue(context).Children);
                children.AddRange(JsonParser._ParseArrayPart(context).Children);
                return new ParseNode(JsonParser.ArrayPart2, "ArrayPart2", children.ToArray(), line, column, position);
            }
            context.Error("Expecting rbracket, string, number, lbrace, lbracket, true, false, or null");
            return null;
        }
        /// <summary>
        /// Parses a production of the form:
        /// Json= Object | Array
        /// </summary>
        /// <remarks>
        /// The production rules are:
        /// Json -> Object
        /// Json -> Array
        /// </remarks>
        /// <param name="tokenizer">The tokenizer to parse with</param><returns>A <see cref="ParseNode" /> representing the parsed tokens</returns>
        
        #line 2 "C:\dev\BuildPack\Parsley\json.xbnf"
        public static ParseNode ParseJson(System.Collections.Generic.IEnumerable<Token> tokenizer) {
            ParserContext context = new ParserContext(tokenizer);
            context.EnsureStarted();
            return JsonParser._ParseJson(context);
        }
        
        #line default
        #line hidden
        /// <summary>
        /// Parses a production of the form:
        /// Object= "{" [ Field { "," Field } ] "}"
        /// </summary>
        /// <remarks>
        /// The production rules are:
        /// Object -> lbrace ObjectPart2
        /// </remarks>
        /// <param name="tokenizer">The tokenizer to parse with</param><returns>A <see cref="ParseNode" /> representing the parsed tokens</returns>
        
        #line 3 "C:\dev\BuildPack\Parsley\json.xbnf"
        public static ParseNode ParseObject(System.Collections.Generic.IEnumerable<Token> tokenizer) {
            ParserContext context = new ParserContext(tokenizer);
            context.EnsureStarted();
            return JsonParser._ParseObject(context);
        }
        
        #line default
        #line hidden
        /// <summary>
        /// Parses a production of the form:
        /// Field= string ":" Value
        /// </summary>
        /// <remarks>
        /// The production rules are:
        /// Field -> string colon Value
        /// </remarks>
        /// <param name="tokenizer">The tokenizer to parse with</param><returns>A <see cref="ParseNode" /> representing the parsed tokens</returns>
        
        #line 4 "C:\dev\BuildPack\Parsley\json.xbnf"
        public static ParseNode ParseField(System.Collections.Generic.IEnumerable<Token> tokenizer) {
            ParserContext context = new ParserContext(tokenizer);
            context.EnsureStarted();
            return JsonParser._ParseField(context);
        }
        
        #line default
        #line hidden
        /// <summary>
        /// Parses a production of the form:
        /// Array= "[" [ Value { "," Value } ] "]"
        /// </summary>
        /// <remarks>
        /// The production rules are:
        /// Array -> lbracket ArrayPart2
        /// </remarks>
        /// <param name="tokenizer">The tokenizer to parse with</param><returns>A <see cref="ParseNode" /> representing the parsed tokens</returns>
        
        #line 5 "C:\dev\BuildPack\Parsley\json.xbnf"
        public static ParseNode ParseArray(System.Collections.Generic.IEnumerable<Token> tokenizer) {
            ParserContext context = new ParserContext(tokenizer);
            context.EnsureStarted();
            return JsonParser._ParseArray(context);
        }
        
        #line default
        #line hidden
        /// <summary>
        /// Parses a production of the form:
        /// Boolean= true | false
        /// </summary>
        /// <remarks>
        /// The production rules are:
        /// Boolean -> true
        /// Boolean -> false
        /// </remarks>
        /// <param name="tokenizer">The tokenizer to parse with</param><returns>A <see cref="ParseNode" /> representing the parsed tokens</returns>
        
        #line 12 "C:\dev\BuildPack\Parsley\json.xbnf"
        public static ParseNode ParseBoolean(System.Collections.Generic.IEnumerable<Token> tokenizer) {
            ParserContext context = new ParserContext(tokenizer);
            context.EnsureStarted();
            return JsonParser._ParseBoolean(context);
        }
        
        #line default
        #line hidden
        /// <summary>
        /// Parses a derivation of the form:
        /// Json= Object | Array
        /// </summary>
        /// <remarks>
        /// The production rules are:
        /// Json -> Object
        /// Json -> Array
        /// </remarks>
        /// <param name="tokenizer">The tokenizer to parse with</param><returns>A <see cref="ParseNode" /> representing the parsed tokens</returns>
        
        #line 2 "C:\dev\BuildPack\Parsley\json.xbnf"
        public static ParseNode Parse(System.Collections.Generic.IEnumerable<Token> tokenizer) {
            ParserContext context = new ParserContext(tokenizer);
            context.EnsureStarted();
            return JsonParser._ParseJson(context);
        }
        
        #line default
        #line hidden
    }
    /// <summary>
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Parsley", "0.1.0.0")]
    internal class SyntaxException : Exception {
        private int _line;
        private int _column;
        private long _position;
        /// <summary>
        /// Creates a syntax exception with the specified arguments
        /// </summary>
        /// <param name="message">The error message</param>
        /// <param name="line">The line where the error occurred</param>
        /// <param name="column">The column where the error occured</param>
        /// <param name="position">The position where the error occured</param>
        public SyntaxException(string message, int line, int column, long position) : 
                base(SyntaxException._GetMessage(message, line, column, position)) {
            this._line = line;
            this._column = column;
            this._position = position;
        }
        /// <summary>
        /// The line where the error occurred
        /// </summary>
        public int Line {
            get {
                return this._line;
            }
        }
        /// <summary>
        /// The column where the error occurred
        /// </summary>
        public int Column {
            get {
                return this._column;
            }
        }
        /// <summary>
        /// The position where the error occurred
        /// </summary>
        public long Position {
            get {
                return this._position;
            }
        }
        static string _GetMessage(string message, int line, int column, long position) {
            return string.Format("{0} at line {1}, column {2}, position {3}", message, line, column, position);
        }
    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Parsley", "0.1.0.0")]
    internal partial class ParseNode {
        private int _symbolId;
        private string _symbol;
        private string _value;
        private int _line;
        private int _column;
        private long _position;
        private ParseNode[] _children;
        public ParseNode(int symbolId, string symbol, ParseNode[] children, int line, int column, long position) {
            this._symbolId = symbolId;
            this._symbol = symbol;
            this._value = null;
            this._children = children;
            this._line = line;
            this._column = column;
            this._position = position;
        }
        public ParseNode(int symbolId, string symbol, string value, int line, int column, long position) {
            this._symbolId = symbolId;
            this._symbol = symbol;
            this._value = value;
            this._children = null;
            this._line = line;
            this._column = column;
            this._position = position;
        }
        public bool IsNonTerminal {
            get {
                return (null != this._children);
            }
        }
        public ParseNode[] Children {
            get {
                return this._children;
            }
        }
        public int SymbolId {
            get {
                return this._symbolId;
            }
        }
        public string Symbol {
            get {
                return this._symbol;
            }
        }
        public string Value {
            get {
                return this._value;
            }
        }
        public int Line {
            get {
                return this._line;
            }
        }
        public int Column {
            get {
                return this._column;
            }
        }
        public long Position {
            get {
                return this._position;
            }
        }
    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Parsley", "0.1.0.0")]
    internal partial class ParserContext : Object, IDisposable {
        private int _state;
        private IEnumerator<Token> _e;
        private Token _t;
        public ParserContext(IEnumerable<Token> tokenizer) {
            this._e = tokenizer.GetEnumerator();
            this._state = -1;
            this._t.SymbolId = -1;
        }
        public void EnsureStarted() {
            if ((-1 == this._state)) {
                this.Advance();
            }
        }
        public int SymbolId {
            get {
                return this._t.SymbolId;
            }
        }
        public string Value {
            get {
                return this._t.Value;
            }
        }
        public int Line {
            get {
                return this._t.Line;
            }
        }
        public int Column {
            get {
                return this._t.Column;
            }
        }
        public long Position {
            get {
                return this._t.Position;
            }
        }
        public bool IsEnded {
            get {
                return (-2 == this._state);
            }
        }
        public bool Advance() {
            if ((false == this._e.MoveNext())) {
                this._t.SymbolId = -2;
                this._state = -2;
            }
            else {
                this._state = 0;
                this._t = this._e.Current;
                return true;
            }
            return false;
        }
        public void Error(string message, object arg1, object arg2, object arg3) {
            throw new SyntaxException(string.Format(message, arg1, arg2, arg3), this.Line, this.Column, this.Position);
        }
        public void Error(string message, object arg1, object arg2) {
            throw new SyntaxException(string.Format(message, arg1, arg2), this.Line, this.Column, this.Position);
        }
        public void Error(string message, object arg) {
            throw new SyntaxException(string.Format(message, arg), this.Line, this.Column, this.Position);
        }
        public void Error(string message) {
            throw new SyntaxException(message, this.Line, this.Column, this.Position);
        }
        public void Dispose() {
            this._e.Dispose();
            this._state = -3;
        }
    }
}
