//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ParsleyDemo {
    using System;
    using System.Collections.Generic;
    
    /// <summary>Parses the following grammar:
    /// Expression= Term "+" Expression | Term;
    /// Term= Term "*" Factor | Factor;
    /// Factor= "(" Expression ")" | integer | identifier;
    /// integer= '[0-9]+';
    /// identifier= '[A-Z_a-z][0-9A-Z_a-z]*';
    /// (whitespace)= '\s+';
    /// add= "+";
    /// sub= "-";
    /// mul= "*";
    /// div= "/";
    /// lparen= "(";
    /// rparen= ")";
    /// </summary>
    /// <remarks>The rules for the factored grammar are as follows:
    /// Term -> Factor TermRightAssoc
    /// Factor -> lparen Expression rparen
    /// Factor -> integer
    /// Factor -> identifier
    /// TermRightAssoc -> mul Factor TermRightAssoc
    /// TermRightAssoc ->
    /// Expression -> Term ExpressionPart
    /// ExpressionPart -> add Expression
    /// ExpressionPart ->
    /// </remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Parsley", "0.1.0.0")]
    internal partial class ExpressionParser {
        internal const int ErrorSymbol = -1;
        internal const int EosSymbol = -2;
        public const int Term = 0;
        public const int Factor = 1;
        public const int TermRightAssoc = 2;
        public const int Expression = 3;
        public const int ExpressionPart = 4;
        public const int lparen = 5;
        public const int rparen = 6;
        public const int integer = 7;
        public const int identifier = 8;
        public const int mul = 9;
        public const int add = 10;
        public const int whitespace = 11;
        
        #line 9 "C:\dev\BuildPack\Parsley\Expression.xbnf"
        private static ParseNode _ParseTerm(ParserContext context) {
            int line = context.Line;
            int column = context.Column;
            long position = context.Position;
            if ((((ExpressionParser.lparen == context.SymbolId) 
                        || (ExpressionParser.integer == context.SymbolId)) 
                        || (ExpressionParser.identifier == context.SymbolId))) {
                // Term -> Factor TermRightAssoc
                ParseNode[] children = new ParseNode[2];
                children[0] = ExpressionParser._ParseFactor(context);
                children[1] = ExpressionParser._ParseTermRightAssoc(context);
                return new ParseNode(ExpressionParser.Term, "Term", children, line, column, position);
            }
            context.Error("Expecting lparen, integer, or identifier");
            return null;
        }
        
        #line default
        #line hidden
        
        #line 17 "C:\dev\BuildPack\Parsley\Expression.xbnf"
        private static ParseNode _ParseFactor(ParserContext context) {
            int line = context.Line;
            int column = context.Column;
            long position = context.Position;
            if ((ExpressionParser.lparen == context.SymbolId)) {
                // Factor -> lparen Expression rparen
                ParseNode[] children = new ParseNode[3];
                children[0] = new ParseNode(ExpressionParser.lparen, "lparen", context.Value, line, column, position);
                context.Advance();
                children[1] = ExpressionParser._ParseExpression(context);
                children[2] = new ParseNode(ExpressionParser.rparen, "rparen", context.Value, line, column, position);
                if ((ExpressionParser.rparen == context.SymbolId)) {
                    context.Advance();
                    return new ParseNode(ExpressionParser.Factor, "Factor", children, line, column, position);
                }
                context.Error("Expecting rparen");
            }
            if ((ExpressionParser.integer == context.SymbolId)) {
                // Factor -> integer
                ParseNode[] children = new ParseNode[1];
                children[0] = new ParseNode(ExpressionParser.integer, "integer", context.Value, line, column, position);
                context.Advance();
                return new ParseNode(ExpressionParser.Factor, "Factor", children, line, column, position);
            }
            if ((ExpressionParser.identifier == context.SymbolId)) {
                // Factor -> identifier
                ParseNode[] children = new ParseNode[1];
                children[0] = new ParseNode(ExpressionParser.identifier, "identifier", context.Value, line, column, position);
                context.Advance();
                return new ParseNode(ExpressionParser.Factor, "Factor", children, line, column, position);
            }
            context.Error("Expecting lparen, integer, or identifier");
            return null;
        }
        
        #line default
        #line hidden
        
        #line 9 "C:\dev\BuildPack\Parsley\Expression.xbnf"
        private static ParseNode _ParseTermRightAssoc(ParserContext context) {
            int line = context.Line;
            int column = context.Column;
            long position = context.Position;
            if ((ExpressionParser.mul == context.SymbolId)) {
                // TermRightAssoc -> mul Factor TermRightAssoc
                ParseNode[] children = new ParseNode[3];
                children[0] = new ParseNode(ExpressionParser.mul, "mul", context.Value, line, column, position);
                context.Advance();
                children[1] = ExpressionParser._ParseFactor(context);
                children[2] = ExpressionParser._ParseTermRightAssoc(context);
                return new ParseNode(ExpressionParser.Term, "Term", children, line, column, position);
            }
            if ((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId))) {
                // TermRightAssoc ->
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.Term, "Term", children, line, column, position);
            }
            context.Error("Expecting mul, add, #EOS, or rparen");
            return null;
        }
        
        #line default
        #line hidden
        
        #line 1 "C:\dev\BuildPack\Parsley\Expression.xbnf"
        private static ParseNode _ParseExpression(ParserContext context) {
            int line = context.Line;
            int column = context.Column;
            long position = context.Position;
            if ((((ExpressionParser.lparen == context.SymbolId) 
                        || (ExpressionParser.integer == context.SymbolId)) 
                        || (ExpressionParser.identifier == context.SymbolId))) {
                // Expression -> Term ExpressionPart
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser._ParseTerm(context));
                children.AddRange(ExpressionParser._ParseExpressionPart(context).Children);
                return new ParseNode(ExpressionParser.Expression, "Expression", children.ToArray(), line, column, position);
            }
            context.Error("Expecting lparen, integer, or identifier");
            return null;
        }
        
        #line default
        #line hidden
        private static ParseNode _ParseExpressionPart(ParserContext context) {
            int line = context.Line;
            int column = context.Column;
            long position = context.Position;
            if ((ExpressionParser.add == context.SymbolId)) {
                // ExpressionPart -> add Expression
                ParseNode[] children = new ParseNode[2];
                children[0] = new ParseNode(ExpressionParser.add, "add", context.Value, line, column, position);
                context.Advance();
                children[1] = ExpressionParser._ParseExpression(context);
                return new ParseNode(ExpressionParser.ExpressionPart, "ExpressionPart", children, line, column, position);
            }
            if (((ExpressionParser.EosSymbol == context.SymbolId) 
                        || (ExpressionParser.rparen == context.SymbolId))) {
                // ExpressionPart ->
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.ExpressionPart, "ExpressionPart", children, line, column, position);
            }
            context.Error("Expecting add, #EOS, or rparen");
            return null;
        }
        /// <summary>
        /// Parses a production of the form:
        /// Expression= Term "+" Expression | Term
        /// </summary>
        /// <remarks>
        /// The production rules are:
        /// Expression -> Term ExpressionPart
        /// </remarks>
        /// <param name="tokenizer">The tokenizer to parse with</param><returns>A <see cref="ParseNode" /> representing the parsed tokens</returns>
        
        #line 1 "C:\dev\BuildPack\Parsley\Expression.xbnf"
        public static ParseNode ParseExpression(System.Collections.Generic.IEnumerable<Token> tokenizer) {
            ParserContext context = new ParserContext(tokenizer);
            context.EnsureStarted();
            return ExpressionParser._ParseExpression(context);
        }
        
        #line default
        #line hidden
        /// <summary>
        /// Parses a production of the form:
        /// Term= Term "*" Factor | Factor
        /// </summary>
        /// <remarks>
        /// The production rules are:
        /// Term -> Factor TermRightAssoc
        /// </remarks>
        /// <param name="tokenizer">The tokenizer to parse with</param><returns>A <see cref="ParseNode" /> representing the parsed tokens</returns>
        
        #line 9 "C:\dev\BuildPack\Parsley\Expression.xbnf"
        public static ParseNode ParseTerm(System.Collections.Generic.IEnumerable<Token> tokenizer) {
            ParserContext context = new ParserContext(tokenizer);
            context.EnsureStarted();
            return ExpressionParser._ParseTerm(context);
        }
        
        #line default
        #line hidden
        /// <summary>
        /// Parses a production of the form:
        /// Factor= "(" Expression ")" | integer | identifier
        /// </summary>
        /// <remarks>
        /// The production rules are:
        /// Factor -> lparen Expression rparen
        /// Factor -> integer
        /// Factor -> identifier
        /// </remarks>
        /// <param name="tokenizer">The tokenizer to parse with</param><returns>A <see cref="ParseNode" /> representing the parsed tokens</returns>
        
        #line 17 "C:\dev\BuildPack\Parsley\Expression.xbnf"
        public static ParseNode ParseFactor(System.Collections.Generic.IEnumerable<Token> tokenizer) {
            ParserContext context = new ParserContext(tokenizer);
            context.EnsureStarted();
            return ExpressionParser._ParseFactor(context);
        }
        
        #line default
        #line hidden
        /// <summary>
        /// Parses a derivation of the form:
        /// Expression= Term "+" Expression | Term
        /// </summary>
        /// <remarks>
        /// The production rules are:
        /// Expression -> Term ExpressionPart
        /// </remarks>
        /// <param name="tokenizer">The tokenizer to parse with</param><returns>A <see cref="ParseNode" /> representing the parsed tokens</returns>
        
        #line 1 "C:\dev\BuildPack\Parsley\Expression.xbnf"
        public static ParseNode Parse(System.Collections.Generic.IEnumerable<Token> tokenizer) {
            ParserContext context = new ParserContext(tokenizer);
            context.EnsureStarted();
            return ExpressionParser._ParseExpression(context);
        }
        
        #line default
        #line hidden
        /// <summary>
        /// Evaluates a derivation of the form:
        /// Expression= Term "+" Expression | Term
        /// </summary>
        /// <remarks>
        /// The production rules are:
        /// Expression -> Term ExpressionPart
        /// </remarks>
        /// <param name="node">The <see cref="ParseNode"/> to evaluate</param>
        /// <returns>The result of the evaluation</returns>
        
        #line 1 "C:\dev\BuildPack\Parsley\Expression.xbnf"
        public static int Evaluate(ParseNode node) {
            return ExpressionParser.EvaluateExpression(node);
        }
        
        #line default
        #line hidden
        /// <summary>
        /// Evaluates a derivation of the form:
        /// Expression= Term "+" Expression | Term
        /// </summary>
        /// <remarks>
        /// The production rules are:
        /// Expression -> Term ExpressionPart
        /// </remarks>
        /// <param name="node">The <see cref="ParseNode"/> to evaluate</param>
        /// <param name="state">A user supplied state object. What it should be depends on the production's associated code block</param>
        /// <returns>The result of the evaluation</returns>
        
        #line 1 "C:\dev\BuildPack\Parsley\Expression.xbnf"
        public static int Evaluate(ParseNode node, object state) {
            return ExpressionParser.EvaluateExpression(node, state);
        }
        
        #line default
        #line hidden
        /// <summary>
        /// Evaluates a derivation of the form:
        /// Expression= Term "+" Expression | Term
        /// </summary>
        /// <remarks>
        /// The production rules are:
        /// Expression -> Term ExpressionPart
        /// </remarks>
        /// <param name="node">The <see cref="ParseNode"/> to evaluate</param>
        /// <param name="state">A user supplied state object. What it should be depends on the production's associated code block</param>
        /// <returns>The result of the evaluation</returns>
        
        #line 1 "C:\dev\BuildPack\Parsley\Expression.xbnf"
        public static int EvaluateExpression(ParseNode node, object state) {
            if ((ExpressionParser.Expression == node.SymbolId)) {
                if ((node.Children.Length == 1)) {
                    return ((int)(ExpressionParser._ChangeType(ExpressionParser.EvaluateTerm(node.Children[0], state), typeof(int))));
                }
                if ((node.Children[1].SymbolId == ParsleyDemo.ExpressionParser.add)) {
                    return ((int)(ExpressionParser._ChangeType((ExpressionParser.EvaluateTerm(node.Children[0], state) + ExpressionParser.EvaluateExpression(node.Children[2], state)), typeof(int))));
                }
                else {
                    return ((int)(ExpressionParser._ChangeType((ExpressionParser.EvaluateTerm(node.Children[0], state) - ExpressionParser.EvaluateExpression(node.Children[2], state)), typeof(int))));
                }
            }
            throw new SyntaxException("Expecting Expression", node.Line, node.Column, node.Position);
        }
        
        #line default
        #line hidden
        /// <summary>
        /// Evaluates a derivation of the form:
        /// Expression= Term "+" Expression | Term
        /// </summary>
        /// <remarks>
        /// The production rules are:
        /// Expression -> Term ExpressionPart
        /// </remarks>
        /// <param name="node">The <see cref="ParseNode"/> to evaluate</param>
        /// <returns>The result of the evaluation</returns>
        
        #line 1 "C:\dev\BuildPack\Parsley\Expression.xbnf"
        public static int EvaluateExpression(ParseNode node) {
            return ExpressionParser.EvaluateExpression(node, null);
        }
        
        #line default
        #line hidden
        /// <summary>
        /// Evaluates a derivation of the form:
        /// Term= Term "*" Factor | Factor
        /// </summary>
        /// <remarks>
        /// The production rules are:
        /// Term -> Factor TermRightAssoc
        /// </remarks>
        /// <param name="node">The <see cref="ParseNode"/> to evaluate</param>
        /// <param name="state">A user supplied state object. What it should be depends on the production's associated code block</param>
        /// <returns>The result of the evaluation</returns>
        
        #line 9 "C:\dev\BuildPack\Parsley\Expression.xbnf"
        public static int EvaluateTerm(ParseNode node, object state) {
            if ((ExpressionParser.Term == node.SymbolId)) {
                if ((node.Children.Length == 1)) {
                    return ((int)(ExpressionParser._ChangeType(ExpressionParser.EvaluateFactor(node.Children[0], state), typeof(int))));
                }
                if ((node.Children[1].SymbolId == ParsleyDemo.ExpressionParser.mul)) {
                    return ((int)(ExpressionParser._ChangeType((ExpressionParser.EvaluateTerm(node.Children[0], state) * ExpressionParser.EvaluateFactor(node.Children[2], state)), typeof(int))));
                }
                else {
                    return ((int)(ExpressionParser._ChangeType((ExpressionParser.EvaluateTerm(node.Children[0], state) / ExpressionParser.EvaluateFactor(node.Children[2], state)), typeof(int))));
                }
            }
            throw new SyntaxException("Expecting Term", node.Line, node.Column, node.Position);
        }
        
        #line default
        #line hidden
        /// <summary>
        /// Evaluates a derivation of the form:
        /// Term= Term "*" Factor | Factor
        /// </summary>
        /// <remarks>
        /// The production rules are:
        /// Term -> Factor TermRightAssoc
        /// </remarks>
        /// <param name="node">The <see cref="ParseNode"/> to evaluate</param>
        /// <returns>The result of the evaluation</returns>
        
        #line 9 "C:\dev\BuildPack\Parsley\Expression.xbnf"
        public static int EvaluateTerm(ParseNode node) {
            return ExpressionParser.EvaluateTerm(node, null);
        }
        
        #line default
        #line hidden
        /// <summary>
        /// Evaluates a derivation of the form:
        /// Factor= "(" Expression ")" | integer | identifier
        /// </summary>
        /// <remarks>
        /// The production rules are:
        /// Factor -> lparen Expression rparen
        /// Factor -> integer
        /// Factor -> identifier
        /// </remarks>
        /// <param name="node">The <see cref="ParseNode"/> to evaluate</param>
        /// <param name="state">A user supplied state object. What it should be depends on the production's associated code block</param>
        /// <returns>The result of the evaluation</returns>
        
        #line 17 "C:\dev\BuildPack\Parsley\Expression.xbnf"
        public static int EvaluateFactor(ParseNode node, object state) {
            if ((ExpressionParser.Factor == node.SymbolId)) {
                if ((node.Children.Length == 1)) {
                    if ((node.Children[0].SymbolId == ParsleyDemo.ExpressionParser.integer)) {
                        return ((int)(ExpressionParser._ChangeType(node.Children[0].Value, typeof(int))));
                    }
                    else {
                        if ((null == state)) {
                            throw new InvalidOperationException("Variables were not defined.");
                        }
                        return ((int)(ExpressionParser._ChangeType(((IDictionary<string, int>)(state))[node.Children[0].Value], typeof(int))));
                    }
                }
                return ((int)(ExpressionParser._ChangeType(ExpressionParser.EvaluateExpression(node.Children[1], state), typeof(int))));
            }
            throw new SyntaxException("Expecting Factor", node.Line, node.Column, node.Position);
        }
        
        #line default
        #line hidden
        /// <summary>
        /// Evaluates a derivation of the form:
        /// Factor= "(" Expression ")" | integer | identifier
        /// </summary>
        /// <remarks>
        /// The production rules are:
        /// Factor -> lparen Expression rparen
        /// Factor -> integer
        /// Factor -> identifier
        /// </remarks>
        /// <param name="node">The <see cref="ParseNode"/> to evaluate</param>
        /// <returns>The result of the evaluation</returns>
        
        #line 17 "C:\dev\BuildPack\Parsley\Expression.xbnf"
        public static int EvaluateFactor(ParseNode node) {
            return ExpressionParser.EvaluateFactor(node, null);
        }
        
        #line default
        #line hidden
        private static object _ChangeType(object obj, System.Type type) {
            System.ComponentModel.TypeConverter typeConverter = System.ComponentModel.TypeDescriptor.GetConverter(obj);
            if (((null == typeConverter) 
                        || (false == typeConverter.CanConvertTo(type)))) {
                return System.Convert.ChangeType(obj, type);
            }
            return typeConverter.ConvertTo(obj, type);
        }
    }
    /// <summary>
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Parsley", "0.1.0.0")]
    internal class SyntaxException : Exception {
        private int _line;
        private int _column;
        private long _position;
        /// <summary>
        /// Creates a syntax exception with the specified arguments
        /// </summary>
        /// <param name="message">The error message</param>
        /// <param name="line">The line where the error occurred</param>
        /// <param name="column">The column where the error occured</param>
        /// <param name="position">The position where the error occured</param>
        public SyntaxException(string message, int line, int column, long position) : 
                base(SyntaxException._GetMessage(message, line, column, position)) {
            this._line = line;
            this._column = column;
            this._position = position;
        }
        /// <summary>
        /// The line where the error occurred
        /// </summary>
        public int Line {
            get {
                return this._line;
            }
        }
        /// <summary>
        /// The column where the error occurred
        /// </summary>
        public int Column {
            get {
                return this._column;
            }
        }
        /// <summary>
        /// The position where the error occurred
        /// </summary>
        public long Position {
            get {
                return this._position;
            }
        }
        static string _GetMessage(string message, int line, int column, long position) {
            return string.Format("{0} at line {1}, column {2}, position {3}", message, line, column, position);
        }
    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Parsley", "0.1.0.0")]
    internal partial class ParseNode {
        private int _symbolId;
        private string _symbol;
        private string _value;
        private int _line;
        private int _column;
        private long _position;
        private ParseNode[] _children;
        public ParseNode(int symbolId, string symbol, ParseNode[] children, int line, int column, long position) {
            this._symbolId = symbolId;
            this._symbol = symbol;
            this._value = null;
            this._children = children;
            this._line = line;
            this._column = column;
            this._position = position;
        }
        public ParseNode(int symbolId, string symbol, string value, int line, int column, long position) {
            this._symbolId = symbolId;
            this._symbol = symbol;
            this._value = value;
            this._children = null;
            this._line = line;
            this._column = column;
            this._position = position;
        }
        public bool IsNonTerminal {
            get {
                return (null != this._children);
            }
        }
        public ParseNode[] Children {
            get {
                return this._children;
            }
        }
        public int SymbolId {
            get {
                return this._symbolId;
            }
        }
        public string Symbol {
            get {
                return this._symbol;
            }
        }
        public string Value {
            get {
                return this._value;
            }
        }
        public int Line {
            get {
                return this._line;
            }
        }
        public int Column {
            get {
                return this._column;
            }
        }
        public long Position {
            get {
                return this._position;
            }
        }
    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Parsley", "0.1.0.0")]
    internal partial class ParserContext : Object, IDisposable {
        private int _state;
        private IEnumerator<Token> _e;
        private Token _t;
        public ParserContext(IEnumerable<Token> tokenizer) {
            this._e = tokenizer.GetEnumerator();
            this._state = -1;
            this._t.SymbolId = -1;
        }
        public void EnsureStarted() {
            if ((-1 == this._state)) {
                this.Advance();
            }
        }
        public int SymbolId {
            get {
                return this._t.SymbolId;
            }
        }
        public string Value {
            get {
                return this._t.Value;
            }
        }
        public int Line {
            get {
                return this._t.Line;
            }
        }
        public int Column {
            get {
                return this._t.Column;
            }
        }
        public long Position {
            get {
                return this._t.Position;
            }
        }
        public bool IsEnded {
            get {
                return (-2 == this._state);
            }
        }
        public bool Advance() {
            if ((false == this._e.MoveNext())) {
                this._t.SymbolId = -2;
                this._state = -2;
            }
            else {
                this._state = 0;
                this._t = this._e.Current;
                return true;
            }
            return false;
        }
        public void Error(string message, object arg1, object arg2, object arg3) {
            throw new SyntaxException(string.Format(message, arg1, arg2, arg3), this.Line, this.Column, this.Position);
        }
        public void Error(string message, object arg1, object arg2) {
            throw new SyntaxException(string.Format(message, arg1, arg2), this.Line, this.Column, this.Position);
        }
        public void Error(string message, object arg) {
            throw new SyntaxException(string.Format(message, arg), this.Line, this.Column, this.Position);
        }
        public void Error(string message) {
            throw new SyntaxException(message, this.Line, this.Column, this.Position);
        }
        public void Dispose() {
            this._e.Dispose();
            this._state = -3;
        }
    }
}
