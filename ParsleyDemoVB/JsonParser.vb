'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.Text

Namespace ParsleyDemo
    '''<summary>Parses the indicated grammar. Refer to E:\BuildPack\ParsleyDemoVB\json.xbnf</summary>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("Parsley", "0.1.2.0")>  _
    Partial Friend Class JsonParser
        Friend Const ErrorSymbol As Integer = -1
        Friend Const EosSymbol As Integer = -2
        Public Const Json As Integer = 0
        Public Const Field As Integer = 1
        Public Const Value As Integer = 2
        Public Const [Boolean] As Integer = 3
        Public Const [Object] As Integer = 10
        Public Const Array As Integer = 12
        Public Const number As Integer = 14
        Public Const [string] As Integer = 15
        Public Const [true] As Integer = 16
        Public Const [false] As Integer = 17
        Public Const null As Integer = 18
        Public Const lbracket As Integer = 19
        Public Const rbracket As Integer = 20
        Public Const lbrace As Integer = 21
        Public Const rbrace As Integer = 22
        Public Const colon As Integer = 23
        Public Const comma As Integer = 24
        Friend Shared Function ParseJson(ByVal context As ParserContext) As ParseNode
            Dim line As Integer = context.Line
            Dim column As Integer = context.Column
            Dim position As Long = context.Position
            'Json -> Object
            If (JsonParser.lbrace = context.SymbolId) Then
                Dim children(0) As ParseNode
                children(0) = JsonParser.ParseObject(context)
                Return New ParseNode(0, "Json", children, line, column, position)
            End If
            'Json -> Array
            If (JsonParser.lbracket = context.SymbolId) Then
                Dim children(0) As ParseNode
                children(0) = JsonParser.ParseArray(context)
                Return New ParseNode(0, "Json", children, line, column, position)
            End If
            Throw New SyntaxException("Expecting Object or Array", line, column, position)
        End Function
        '''<summary>
        '''Parses a production of the form:
        '''Json= Object | Array
        '''</summary>
        '''<remarks>
        '''The production rules are:
        '''Json -> Object
        '''Json -> Array
        '''</remarks>
        '''<param name="tokenizer">The tokenizer to parse with</param><returns>A <see cref="ParseNode" /> representing the parsed tokens</returns>
        Public Shared Function Parse(ByVal tokenizer As System.Collections.Generic.IEnumerable(Of Token)) As ParseNode
            Dim context As ParserContext = New ParserContext(tokenizer)
            context.EnsureStarted
            Dim result As ParseNode = JsonParser.ParseJson(context)
            If (false = context.IsEnded) Then
                context.Error("Unexpected remainder in input.")
            End If
            Return result
        End Function
        Friend Shared Function ParseField(ByVal context As ParserContext) As ParseNode
            Dim line As Integer = context.Line
            Dim column As Integer = context.Column
            Dim position As Long = context.Position
            'Field -> string colon Value
            If (JsonParser.[string] = context.SymbolId) Then
                Dim children As System.Collections.Generic.List(Of ParseNode) = New System.Collections.Generic.List(Of ParseNode)()
                If (false  _
                            = (JsonParser.[string] = context.SymbolId)) Then
                    context.Error("Expecting string")
                End If
                children.Add(New ParseNode(JsonParser.[string], "string", context.Value, context.Line, context.Column, context.Position))
                context.Advance
                If (false  _
                            = (JsonParser.colon = context.SymbolId)) Then
                    context.Error("Expecting colon")
                End If
                context.Advance
                children.AddRange(JsonParser.ParseValue(context).Children)
                Return New ParseNode(1, "Field", children.ToArray, line, column, position)
            End If
            Throw New SyntaxException("Expecting string", line, column, position)
        End Function
        Friend Shared Function ParseValue(ByVal context As ParserContext) As ParseNode
            Dim line As Integer = context.Line
            Dim column As Integer = context.Column
            Dim position As Long = context.Position
            'Value -> string
            If (JsonParser.[string] = context.SymbolId) Then
                Dim children(0) As ParseNode
                If (false  _
                            = (JsonParser.[string] = context.SymbolId)) Then
                    context.Error("Expecting string")
                End If
                children(0) = New ParseNode(JsonParser.[string], "string", context.Value, context.Line, context.Column, context.Position)
                context.Advance
                Return New ParseNode(2, "Value", children, line, column, position)
            End If
            'Value -> number
            If (JsonParser.number = context.SymbolId) Then
                Dim children(0) As ParseNode
                If (false  _
                            = (JsonParser.number = context.SymbolId)) Then
                    context.Error("Expecting number")
                End If
                children(0) = New ParseNode(JsonParser.number, "number", context.Value, context.Line, context.Column, context.Position)
                context.Advance
                Return New ParseNode(2, "Value", children, line, column, position)
            End If
            'Value -> Object
            If (JsonParser.lbrace = context.SymbolId) Then
                Dim children(0) As ParseNode
                children(0) = JsonParser.ParseObject(context)
                Return New ParseNode(2, "Value", children, line, column, position)
            End If
            'Value -> Array
            If (JsonParser.lbracket = context.SymbolId) Then
                Dim children(0) As ParseNode
                children(0) = JsonParser.ParseArray(context)
                Return New ParseNode(2, "Value", children, line, column, position)
            End If
            'Value -> Boolean
            If ((JsonParser.[true] = context.SymbolId)  _
                        OrElse (JsonParser.[false] = context.SymbolId)) Then
                Dim children(0) As ParseNode
                children(0) = JsonParser.ParseBoolean(context)
                Return New ParseNode(2, "Value", children, line, column, position)
            End If
            'Value -> null
            If (JsonParser.null = context.SymbolId) Then
                Dim children(0) As ParseNode
                If (false  _
                            = (JsonParser.null = context.SymbolId)) Then
                    context.Error("Expecting null")
                End If
                children(0) = New ParseNode(JsonParser.null, "null", context.Value, context.Line, context.Column, context.Position)
                context.Advance
                Return New ParseNode(2, "Value", children, line, column, position)
            End If
            Throw New SyntaxException("Expecting string, number, Object, Array, Boolean, or null", line, column, position)
        End Function
        Friend Shared Function ParseBoolean(ByVal context As ParserContext) As ParseNode
            Dim line As Integer = context.Line
            Dim column As Integer = context.Column
            Dim position As Long = context.Position
            'Boolean -> true
            If (JsonParser.[true] = context.SymbolId) Then
                Dim children(0) As ParseNode
                If (false  _
                            = (JsonParser.[true] = context.SymbolId)) Then
                    context.Error("Expecting true")
                End If
                children(0) = New ParseNode(JsonParser.[true], "true", context.Value, context.Line, context.Column, context.Position)
                context.Advance
                Return New ParseNode(3, "Boolean", children, line, column, position)
            End If
            'Boolean -> false
            If (JsonParser.[false] = context.SymbolId) Then
                Dim children(0) As ParseNode
                If (false  _
                            = (JsonParser.[false] = context.SymbolId)) Then
                    context.Error("Expecting false")
                End If
                children(0) = New ParseNode(JsonParser.[false], "false", context.Value, context.Line, context.Column, context.Position)
                context.Advance
                Return New ParseNode(3, "Boolean", children, line, column, position)
            End If
            Throw New SyntaxException("Expecting true or false", line, column, position)
        End Function
        Friend Shared Function ParseObjectList(ByVal context As ParserContext) As ParseNode
            Dim line As Integer = context.Line
            Dim column As Integer = context.Column
            Dim position As Long = context.Position
            'ObjectList -> comma Field ObjectListRightAssoc
            If (JsonParser.comma = context.SymbolId) Then
                Dim children As System.Collections.Generic.List(Of ParseNode) = New System.Collections.Generic.List(Of ParseNode)()
                If (false  _
                            = (JsonParser.comma = context.SymbolId)) Then
                    context.Error("Expecting comma")
                End If
                context.Advance
                children.Add(JsonParser.ParseField(context))
                children.AddRange(JsonParser.ParseObjectListRightAssoc(context).Children)
                Return New ParseNode(4, "ObjectList", children.ToArray, line, column, position)
            End If
            Throw New SyntaxException("Expecting comma", line, column, position)
        End Function
        Friend Shared Function ParseArrayList(ByVal context As ParserContext) As ParseNode
            Dim line As Integer = context.Line
            Dim column As Integer = context.Column
            Dim position As Long = context.Position
            'ArrayList -> comma Value ArrayListRightAssoc
            If (JsonParser.comma = context.SymbolId) Then
                Dim children As System.Collections.Generic.List(Of ParseNode) = New System.Collections.Generic.List(Of ParseNode)()
                If (false  _
                            = (JsonParser.comma = context.SymbolId)) Then
                    context.Error("Expecting comma")
                End If
                context.Advance
                children.AddRange(JsonParser.ParseValue(context).Children)
                children.AddRange(JsonParser.ParseArrayListRightAssoc(context).Children)
                Return New ParseNode(5, "ArrayList", children.ToArray, line, column, position)
            End If
            Throw New SyntaxException("Expecting comma", line, column, position)
        End Function
        Friend Shared Function ParseObjectListRightAssoc(ByVal context As ParserContext) As ParseNode
            Dim line As Integer = context.Line
            Dim column As Integer = context.Column
            Dim position As Long = context.Position
            'ObjectListRightAssoc -> comma Field ObjectListRightAssoc
            If (JsonParser.comma = context.SymbolId) Then
                Dim children As System.Collections.Generic.List(Of ParseNode) = New System.Collections.Generic.List(Of ParseNode)()
                If (false  _
                            = (JsonParser.comma = context.SymbolId)) Then
                    context.Error("Expecting comma")
                End If
                context.Advance
                children.Add(JsonParser.ParseField(context))
                children.AddRange(JsonParser.ParseObjectListRightAssoc(context).Children)
                Return New ParseNode(6, "ObjectListRightAssoc", children.ToArray, line, column, position)
            End If
            'ObjectListRightAssoc ->
            If (JsonParser.rbrace = context.SymbolId) Then
                Dim children(-1) As ParseNode
                Return New ParseNode(6, "ObjectListRightAssoc", children, line, column, position)
            End If
            Throw New SyntaxException("Expecting comma", line, column, position)
        End Function
        Friend Shared Function ParseArrayListRightAssoc(ByVal context As ParserContext) As ParseNode
            Dim line As Integer = context.Line
            Dim column As Integer = context.Column
            Dim position As Long = context.Position
            'ArrayListRightAssoc -> comma Value ArrayListRightAssoc
            If (JsonParser.comma = context.SymbolId) Then
                Dim children As System.Collections.Generic.List(Of ParseNode) = New System.Collections.Generic.List(Of ParseNode)()
                If (false  _
                            = (JsonParser.comma = context.SymbolId)) Then
                    context.Error("Expecting comma")
                End If
                context.Advance
                children.AddRange(JsonParser.ParseValue(context).Children)
                children.AddRange(JsonParser.ParseArrayListRightAssoc(context).Children)
                Return New ParseNode(7, "ArrayListRightAssoc", children.ToArray, line, column, position)
            End If
            'ArrayListRightAssoc ->
            If (JsonParser.rbracket = context.SymbolId) Then
                Dim children(-1) As ParseNode
                Return New ParseNode(7, "ArrayListRightAssoc", children, line, column, position)
            End If
            Throw New SyntaxException("Expecting comma", line, column, position)
        End Function
        Friend Shared Function ParseObjectPart(ByVal context As ParserContext) As ParseNode
            Dim line As Integer = context.Line
            Dim column As Integer = context.Column
            Dim position As Long = context.Position
            'ObjectPart -> ObjectList rbrace
            If (JsonParser.comma = context.SymbolId) Then
                Dim children As System.Collections.Generic.List(Of ParseNode) = New System.Collections.Generic.List(Of ParseNode)()
                children.AddRange(JsonParser.ParseObjectList(context).Children)
                If (false  _
                            = (JsonParser.rbrace = context.SymbolId)) Then
                    context.Error("Expecting rbrace")
                End If
                context.Advance
                Return New ParseNode(8, "ObjectPart", children.ToArray, line, column, position)
            End If
            'ObjectPart -> rbrace
            If (JsonParser.rbrace = context.SymbolId) Then
                Dim children As System.Collections.Generic.List(Of ParseNode) = New System.Collections.Generic.List(Of ParseNode)()
                If (false  _
                            = (JsonParser.rbrace = context.SymbolId)) Then
                    context.Error("Expecting rbrace")
                End If
                context.Advance
                Return New ParseNode(8, "ObjectPart", children.ToArray, line, column, position)
            End If
            Throw New SyntaxException("Expecting ObjectList or rbrace", line, column, position)
        End Function
        Friend Shared Function ParseArrayPart(ByVal context As ParserContext) As ParseNode
            Dim line As Integer = context.Line
            Dim column As Integer = context.Column
            Dim position As Long = context.Position
            'ArrayPart -> ArrayList rbracket
            If (JsonParser.comma = context.SymbolId) Then
                Dim children As System.Collections.Generic.List(Of ParseNode) = New System.Collections.Generic.List(Of ParseNode)()
                children.AddRange(JsonParser.ParseArrayList(context).Children)
                If (false  _
                            = (JsonParser.rbracket = context.SymbolId)) Then
                    context.Error("Expecting rbracket")
                End If
                context.Advance
                Return New ParseNode(9, "ArrayPart", children.ToArray, line, column, position)
            End If
            'ArrayPart -> rbracket
            If (JsonParser.rbracket = context.SymbolId) Then
                Dim children As System.Collections.Generic.List(Of ParseNode) = New System.Collections.Generic.List(Of ParseNode)()
                If (false  _
                            = (JsonParser.rbracket = context.SymbolId)) Then
                    context.Error("Expecting rbracket")
                End If
                context.Advance
                Return New ParseNode(9, "ArrayPart", children.ToArray, line, column, position)
            End If
            Throw New SyntaxException("Expecting ArrayList or rbracket", line, column, position)
        End Function
        Friend Shared Function ParseObject(ByVal context As ParserContext) As ParseNode
            Dim line As Integer = context.Line
            Dim column As Integer = context.Column
            Dim position As Long = context.Position
            'Object -> lbrace ObjectPart2
            If (JsonParser.lbrace = context.SymbolId) Then
                Dim children As System.Collections.Generic.List(Of ParseNode) = New System.Collections.Generic.List(Of ParseNode)()
                If (false  _
                            = (JsonParser.lbrace = context.SymbolId)) Then
                    context.Error("Expecting lbrace")
                End If
                context.Advance
                children.AddRange(JsonParser.ParseObjectPart2(context).Children)
                Return New ParseNode(10, "Object", children.ToArray, line, column, position)
            End If
            Throw New SyntaxException("Expecting lbrace", line, column, position)
        End Function
        Friend Shared Function ParseObjectPart2(ByVal context As ParserContext) As ParseNode
            Dim line As Integer = context.Line
            Dim column As Integer = context.Column
            Dim position As Long = context.Position
            'ObjectPart2 -> rbrace
            If (JsonParser.rbrace = context.SymbolId) Then
                Dim children As System.Collections.Generic.List(Of ParseNode) = New System.Collections.Generic.List(Of ParseNode)()
                If (false  _
                            = (JsonParser.rbrace = context.SymbolId)) Then
                    context.Error("Expecting rbrace")
                End If
                context.Advance
                Return New ParseNode(11, "ObjectPart2", children.ToArray, line, column, position)
            End If
            'ObjectPart2 -> Field ObjectPart
            If (JsonParser.[string] = context.SymbolId) Then
                Dim children As System.Collections.Generic.List(Of ParseNode) = New System.Collections.Generic.List(Of ParseNode)()
                children.Add(JsonParser.ParseField(context))
                children.AddRange(JsonParser.ParseObjectPart(context).Children)
                Return New ParseNode(11, "ObjectPart2", children.ToArray, line, column, position)
            End If
            Throw New SyntaxException("Expecting rbrace or Field", line, column, position)
        End Function
        Friend Shared Function ParseArray(ByVal context As ParserContext) As ParseNode
            Dim line As Integer = context.Line
            Dim column As Integer = context.Column
            Dim position As Long = context.Position
            'Array -> lbracket ArrayPart2
            If (JsonParser.lbracket = context.SymbolId) Then
                Dim children As System.Collections.Generic.List(Of ParseNode) = New System.Collections.Generic.List(Of ParseNode)()
                If (false  _
                            = (JsonParser.lbracket = context.SymbolId)) Then
                    context.Error("Expecting lbracket")
                End If
                context.Advance
                children.AddRange(JsonParser.ParseArrayPart2(context).Children)
                Return New ParseNode(12, "Array", children.ToArray, line, column, position)
            End If
            Throw New SyntaxException("Expecting lbracket", line, column, position)
        End Function
        Friend Shared Function ParseArrayPart2(ByVal context As ParserContext) As ParseNode
            Dim line As Integer = context.Line
            Dim column As Integer = context.Column
            Dim position As Long = context.Position
            'ArrayPart2 -> rbracket
            If (JsonParser.rbracket = context.SymbolId) Then
                Dim children As System.Collections.Generic.List(Of ParseNode) = New System.Collections.Generic.List(Of ParseNode)()
                If (false  _
                            = (JsonParser.rbracket = context.SymbolId)) Then
                    context.Error("Expecting rbracket")
                End If
                context.Advance
                Return New ParseNode(13, "ArrayPart2", children.ToArray, line, column, position)
            End If
            'ArrayPart2 -> Value ArrayPart
            If (((((((JsonParser.[string] = context.SymbolId)  _
                        OrElse (JsonParser.number = context.SymbolId))  _
                        OrElse (JsonParser.lbrace = context.SymbolId))  _
                        OrElse (JsonParser.lbracket = context.SymbolId))  _
                        OrElse (JsonParser.[true] = context.SymbolId))  _
                        OrElse (JsonParser.[false] = context.SymbolId))  _
                        OrElse (JsonParser.null = context.SymbolId)) Then
                Dim children As System.Collections.Generic.List(Of ParseNode) = New System.Collections.Generic.List(Of ParseNode)()
                children.AddRange(JsonParser.ParseValue(context).Children)
                children.AddRange(JsonParser.ParseArrayPart(context).Children)
                Return New ParseNode(13, "ArrayPart2", children.ToArray, line, column, position)
            End If
            Throw New SyntaxException("Expecting rbracket or Value", line, column, position)
        End Function
    End Class
End Namespace
