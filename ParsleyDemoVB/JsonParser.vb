'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Collections.Generic

Namespace ParsleyDemo
    Partial Friend Class JsonParser
        Friend Const ErrorSymbol As Integer = -1
        Friend Const EosSymbol As Integer = -2
        Public Const Json As Integer = 0
        Public Const Field As Integer = 1
        Public Const Value As Integer = 2
        Public Const [Boolean] As Integer = 3
        Public Const ImplicitList As Integer = 4
        Public Const ImplicitList2 As Integer = 5
        Public Const ImplicitListRightAssoc As Integer = 6
        Public Const ImplicitList2RightAssoc As Integer = 7
        Public Const [Object] As Integer = 8
        Public Const ObjectPart As Integer = 9
        Public Const Fields As Integer = 10
        Public Const FieldsPart As Integer = 11
        Public Const Array As Integer = 12
        Public Const ArrayPart As Integer = 13
        Public Const Values As Integer = 14
        Public Const ValuesPart As Integer = 15
        Public Const [string] As Integer = 16
        Public Const colon As Integer = 17
        Public Const number As Integer = 18
        Public Const null As Integer = 19
        Public Const [true] As Integer = 20
        Public Const [false] As Integer = 21
        Public Const comma As Integer = 22
        Public Const lbrace As Integer = 23
        Public Const rbrace As Integer = 24
        Public Const lbracket As Integer = 25
        Public Const rbracket As Integer = 26
        Public Const whitespace As Integer = 27
        Private Shared Function _ParseJson(ByVal context As ParserContext) As ParseNode
            Dim line As Integer = context.Line
            Dim column As Integer = context.Column
            Dim position As Long = context.Position
            If (JsonParser.lbrace = context.SymbolId) Then
                'Json -> Object
                Dim children(0) As ParseNode
                children(0) = JsonParser._ParseObject(context)
                Return New ParseNode(JsonParser.Json, "Json", children, line, column, position)
            End If
            If (JsonParser.lbracket = context.SymbolId) Then
                'Json -> Array
                Dim children(0) As ParseNode
                children(0) = JsonParser._ParseArray(context)
                Return New ParseNode(JsonParser.Json, "Json", children, line, column, position)
            End If
            context.Error("Expecting lbrace or lbracket")
            Return Nothing
        End Function
        Private Shared Function _ParseField(ByVal context As ParserContext) As ParseNode
            Dim line As Integer = context.Line
            Dim column As Integer = context.Column
            Dim position As Long = context.Position
            If (JsonParser.[string] = context.SymbolId) Then
                'Field -> string colon Value
                Dim children As System.Collections.Generic.List(Of ParseNode) = New System.Collections.Generic.List(Of ParseNode)()
                children.Add(New ParseNode(JsonParser.[string], "string", context.Value, line, column, position))
                context.Advance
                context.Advance
                children.AddRange(JsonParser._ParseValue(context).Children)
                Return New ParseNode(JsonParser.Field, "Field", children.ToArray, line, column, position)
            End If
            context.Error("Expecting string")
            Return Nothing
        End Function
        Private Shared Function _ParseValue(ByVal context As ParserContext) As ParseNode
            Dim line As Integer = context.Line
            Dim column As Integer = context.Column
            Dim position As Long = context.Position
            If (JsonParser.[string] = context.SymbolId) Then
                'Value -> string
                Dim children(0) As ParseNode
                children(0) = New ParseNode(JsonParser.[string], "string", context.Value, line, column, position)
                context.Advance
                Return New ParseNode(JsonParser.Value, "Value", children, line, column, position)
            End If
            If (JsonParser.number = context.SymbolId) Then
                'Value -> number
                Dim children(0) As ParseNode
                children(0) = New ParseNode(JsonParser.number, "number", context.Value, line, column, position)
                context.Advance
                Return New ParseNode(JsonParser.Value, "Value", children, line, column, position)
            End If
            If (JsonParser.lbrace = context.SymbolId) Then
                'Value -> Object
                Dim children(0) As ParseNode
                children(0) = JsonParser._ParseObject(context)
                Return New ParseNode(JsonParser.Value, "Value", children, line, column, position)
            End If
            If (JsonParser.lbracket = context.SymbolId) Then
                'Value -> Array
                Dim children(0) As ParseNode
                children(0) = JsonParser._ParseArray(context)
                Return New ParseNode(JsonParser.Value, "Value", children, line, column, position)
            End If
            If ((JsonParser.[true] = context.SymbolId)  _
                        OrElse (JsonParser.[false] = context.SymbolId)) Then
                'Value -> Boolean
                Dim children(0) As ParseNode
                children(0) = JsonParser._ParseBoolean(context)
                Return New ParseNode(JsonParser.Value, "Value", children, line, column, position)
            End If
            If (JsonParser.null = context.SymbolId) Then
                'Value -> null
                Dim children(0) As ParseNode
                children(0) = New ParseNode(JsonParser.null, "null", context.Value, line, column, position)
                context.Advance
                Return New ParseNode(JsonParser.Value, "Value", children, line, column, position)
            End If
            context.Error("Expecting string, number, lbrace, lbracket, true, false, or null")
            Return Nothing
        End Function
        Private Shared Function _ParseBoolean(ByVal context As ParserContext) As ParseNode
            Dim line As Integer = context.Line
            Dim column As Integer = context.Column
            Dim position As Long = context.Position
            If (JsonParser.[true] = context.SymbolId) Then
                'Boolean -> true
                Dim children(0) As ParseNode
                children(0) = New ParseNode(JsonParser.[true], "true", context.Value, line, column, position)
                context.Advance
                Return New ParseNode(JsonParser.[Boolean], "Boolean", children, line, column, position)
            End If
            If (JsonParser.[false] = context.SymbolId) Then
                'Boolean -> false
                Dim children(0) As ParseNode
                children(0) = New ParseNode(JsonParser.[false], "false", context.Value, line, column, position)
                context.Advance
                Return New ParseNode(JsonParser.[Boolean], "Boolean", children, line, column, position)
            End If
            context.Error("Expecting true or false")
            Return Nothing
        End Function
        Private Shared Function _ParseImplicitList(ByVal context As ParserContext) As ParseNode
            Dim line As Integer = context.Line
            Dim column As Integer = context.Column
            Dim position As Long = context.Position
            If (JsonParser.comma = context.SymbolId) Then
                'ImplicitList -> comma Field ImplicitListRightAssoc
                Dim children As System.Collections.Generic.List(Of ParseNode) = New System.Collections.Generic.List(Of ParseNode)()
                context.Advance
                children.Add(JsonParser._ParseField(context))
                children.AddRange(JsonParser._ParseImplicitListRightAssoc(context).Children)
                Return New ParseNode(JsonParser.ImplicitList, "ImplicitList", children.ToArray, line, column, position)
            End If
            context.Error("Expecting comma")
            Return Nothing
        End Function
        Private Shared Function _ParseImplicitList2(ByVal context As ParserContext) As ParseNode
            Dim line As Integer = context.Line
            Dim column As Integer = context.Column
            Dim position As Long = context.Position
            If (JsonParser.comma = context.SymbolId) Then
                'ImplicitList2 -> comma Value ImplicitList2RightAssoc
                Dim children As System.Collections.Generic.List(Of ParseNode) = New System.Collections.Generic.List(Of ParseNode)()
                context.Advance
                children.AddRange(JsonParser._ParseValue(context).Children)
                children.AddRange(JsonParser._ParseImplicitList2RightAssoc(context).Children)
                Return New ParseNode(JsonParser.ImplicitList2, "ImplicitList2", children.ToArray, line, column, position)
            End If
            context.Error("Expecting comma")
            Return Nothing
        End Function
        Private Shared Function _ParseImplicitListRightAssoc(ByVal context As ParserContext) As ParseNode
            Dim line As Integer = context.Line
            Dim column As Integer = context.Column
            Dim position As Long = context.Position
            If (JsonParser.comma = context.SymbolId) Then
                'ImplicitListRightAssoc -> comma Field ImplicitListRightAssoc
                Dim children As System.Collections.Generic.List(Of ParseNode) = New System.Collections.Generic.List(Of ParseNode)()
                context.Advance
                children.Add(JsonParser._ParseField(context))
                children.AddRange(JsonParser._ParseImplicitListRightAssoc(context).Children)
                Return New ParseNode(JsonParser.ImplicitListRightAssoc, "ImplicitListRightAssoc", children.ToArray, line, column, position)
            End If
            If (JsonParser.rbrace = context.SymbolId) Then
                'ImplicitListRightAssoc ->
                Dim children(-1) As ParseNode
                Return New ParseNode(JsonParser.ImplicitListRightAssoc, "ImplicitListRightAssoc", children, line, column, position)
            End If
            context.Error("Expecting comma or rbrace")
            Return Nothing
        End Function
        Private Shared Function _ParseImplicitList2RightAssoc(ByVal context As ParserContext) As ParseNode
            Dim line As Integer = context.Line
            Dim column As Integer = context.Column
            Dim position As Long = context.Position
            If (JsonParser.comma = context.SymbolId) Then
                'ImplicitList2RightAssoc -> comma Value ImplicitList2RightAssoc
                Dim children As System.Collections.Generic.List(Of ParseNode) = New System.Collections.Generic.List(Of ParseNode)()
                context.Advance
                children.AddRange(JsonParser._ParseValue(context).Children)
                children.AddRange(JsonParser._ParseImplicitList2RightAssoc(context).Children)
                Return New ParseNode(JsonParser.ImplicitList2RightAssoc, "ImplicitList2RightAssoc", children.ToArray, line, column, position)
            End If
            If (JsonParser.rbracket = context.SymbolId) Then
                'ImplicitList2RightAssoc ->
                Dim children(-1) As ParseNode
                Return New ParseNode(JsonParser.ImplicitList2RightAssoc, "ImplicitList2RightAssoc", children, line, column, position)
            End If
            context.Error("Expecting comma or rbracket")
            Return Nothing
        End Function
        Private Shared Function _ParseObject(ByVal context As ParserContext) As ParseNode
            Dim line As Integer = context.Line
            Dim column As Integer = context.Column
            Dim position As Long = context.Position
            If (JsonParser.lbrace = context.SymbolId) Then
                'Object -> lbrace ObjectPart
                Dim children As System.Collections.Generic.List(Of ParseNode) = New System.Collections.Generic.List(Of ParseNode)()
                context.Advance
                children.AddRange(JsonParser._ParseObjectPart(context).Children)
                Return New ParseNode(JsonParser.[Object], "Object", children.ToArray, line, column, position)
            End If
            context.Error("Expecting lbrace")
            Return Nothing
        End Function
        Private Shared Function _ParseObjectPart(ByVal context As ParserContext) As ParseNode
            Dim line As Integer = context.Line
            Dim column As Integer = context.Column
            Dim position As Long = context.Position
            If (JsonParser.rbrace = context.SymbolId) Then
                'ObjectPart -> rbrace
                Dim children As System.Collections.Generic.List(Of ParseNode) = New System.Collections.Generic.List(Of ParseNode)()
                context.Advance
                Return New ParseNode(JsonParser.ObjectPart, "ObjectPart", children.ToArray, line, column, position)
            End If
            If (JsonParser.[string] = context.SymbolId) Then
                'ObjectPart -> Fields rbrace
                Dim children As System.Collections.Generic.List(Of ParseNode) = New System.Collections.Generic.List(Of ParseNode)()
                children.AddRange(JsonParser._ParseFields(context).Children)
                context.Advance
                Return New ParseNode(JsonParser.ObjectPart, "ObjectPart", children.ToArray, line, column, position)
            End If
            context.Error("Expecting rbrace or string")
            Return Nothing
        End Function
        Private Shared Function _ParseFields(ByVal context As ParserContext) As ParseNode
            Dim line As Integer = context.Line
            Dim column As Integer = context.Column
            Dim position As Long = context.Position
            If (JsonParser.[string] = context.SymbolId) Then
                'Fields -> Field FieldsPart
                Dim children As System.Collections.Generic.List(Of ParseNode) = New System.Collections.Generic.List(Of ParseNode)()
                children.Add(JsonParser._ParseField(context))
                children.AddRange(JsonParser._ParseFieldsPart(context).Children)
                Return New ParseNode(JsonParser.Fields, "Fields", children.ToArray, line, column, position)
            End If
            context.Error("Expecting string")
            Return Nothing
        End Function
        Private Shared Function _ParseFieldsPart(ByVal context As ParserContext) As ParseNode
            Dim line As Integer = context.Line
            Dim column As Integer = context.Column
            Dim position As Long = context.Position
            If (JsonParser.comma = context.SymbolId) Then
                'FieldsPart -> ImplicitList
                Dim children As System.Collections.Generic.List(Of ParseNode) = New System.Collections.Generic.List(Of ParseNode)()
                children.AddRange(JsonParser._ParseImplicitList(context).Children)
                Return New ParseNode(JsonParser.FieldsPart, "FieldsPart", children.ToArray, line, column, position)
            End If
            If (JsonParser.rbrace = context.SymbolId) Then
                'FieldsPart ->
                Dim children(-1) As ParseNode
                Return New ParseNode(JsonParser.FieldsPart, "FieldsPart", children, line, column, position)
            End If
            context.Error("Expecting comma or rbrace")
            Return Nothing
        End Function
        Private Shared Function _ParseArray(ByVal context As ParserContext) As ParseNode
            Dim line As Integer = context.Line
            Dim column As Integer = context.Column
            Dim position As Long = context.Position
            If (JsonParser.lbracket = context.SymbolId) Then
                'Array -> lbracket ArrayPart
                Dim children As System.Collections.Generic.List(Of ParseNode) = New System.Collections.Generic.List(Of ParseNode)()
                context.Advance
                children.AddRange(JsonParser._ParseArrayPart(context).Children)
                Return New ParseNode(JsonParser.Array, "Array", children.ToArray, line, column, position)
            End If
            context.Error("Expecting lbracket")
            Return Nothing
        End Function
        Private Shared Function _ParseArrayPart(ByVal context As ParserContext) As ParseNode
            Dim line As Integer = context.Line
            Dim column As Integer = context.Column
            Dim position As Long = context.Position
            If (JsonParser.rbracket = context.SymbolId) Then
                'ArrayPart -> rbracket
                Dim children As System.Collections.Generic.List(Of ParseNode) = New System.Collections.Generic.List(Of ParseNode)()
                context.Advance
                Return New ParseNode(JsonParser.ArrayPart, "ArrayPart", children.ToArray, line, column, position)
            End If
            If (((((((JsonParser.[string] = context.SymbolId)  _
                        OrElse (JsonParser.number = context.SymbolId))  _
                        OrElse (JsonParser.lbrace = context.SymbolId))  _
                        OrElse (JsonParser.lbracket = context.SymbolId))  _
                        OrElse (JsonParser.[true] = context.SymbolId))  _
                        OrElse (JsonParser.[false] = context.SymbolId))  _
                        OrElse (JsonParser.null = context.SymbolId)) Then
                'ArrayPart -> Values rbracket
                Dim children As System.Collections.Generic.List(Of ParseNode) = New System.Collections.Generic.List(Of ParseNode)()
                children.AddRange(JsonParser._ParseValues(context).Children)
                context.Advance
                Return New ParseNode(JsonParser.ArrayPart, "ArrayPart", children.ToArray, line, column, position)
            End If
            context.Error("Expecting rbracket, string, number, lbrace, lbracket, true, false, or null")
            Return Nothing
        End Function
        Private Shared Function _ParseValues(ByVal context As ParserContext) As ParseNode
            Dim line As Integer = context.Line
            Dim column As Integer = context.Column
            Dim position As Long = context.Position
            If (((((((JsonParser.[string] = context.SymbolId)  _
                        OrElse (JsonParser.number = context.SymbolId))  _
                        OrElse (JsonParser.lbrace = context.SymbolId))  _
                        OrElse (JsonParser.lbracket = context.SymbolId))  _
                        OrElse (JsonParser.[true] = context.SymbolId))  _
                        OrElse (JsonParser.[false] = context.SymbolId))  _
                        OrElse (JsonParser.null = context.SymbolId)) Then
                'Values -> Value ValuesPart
                Dim children As System.Collections.Generic.List(Of ParseNode) = New System.Collections.Generic.List(Of ParseNode)()
                children.AddRange(JsonParser._ParseValue(context).Children)
                children.AddRange(JsonParser._ParseValuesPart(context).Children)
                Return New ParseNode(JsonParser.Values, "Values", children.ToArray, line, column, position)
            End If
            context.Error("Expecting string, number, lbrace, lbracket, true, false, or null")
            Return Nothing
        End Function
        Private Shared Function _ParseValuesPart(ByVal context As ParserContext) As ParseNode
            Dim line As Integer = context.Line
            Dim column As Integer = context.Column
            Dim position As Long = context.Position
            If (JsonParser.comma = context.SymbolId) Then
                'ValuesPart -> ImplicitList2
                Dim children As System.Collections.Generic.List(Of ParseNode) = New System.Collections.Generic.List(Of ParseNode)()
                children.AddRange(JsonParser._ParseImplicitList2(context).Children)
                Return New ParseNode(JsonParser.ValuesPart, "ValuesPart", children.ToArray, line, column, position)
            End If
            If (JsonParser.rbracket = context.SymbolId) Then
                'ValuesPart ->
                Dim children(-1) As ParseNode
                Return New ParseNode(JsonParser.ValuesPart, "ValuesPart", children, line, column, position)
            End If
            context.Error("Expecting comma or rbracket")
            Return Nothing
        End Function
        Public Shared Function ParseJson(ByVal tokenizer As System.Collections.Generic.IEnumerable(Of Token)) As ParseNode
            Dim context As ParserContext = New ParserContext(tokenizer)
            context.EnsureStarted
            Return JsonParser._ParseJson(context)
        End Function
        Public Shared Function ParseObject(ByVal tokenizer As System.Collections.Generic.IEnumerable(Of Token)) As ParseNode
            Dim context As ParserContext = New ParserContext(tokenizer)
            context.EnsureStarted
            Return JsonParser._ParseObject(context)
        End Function
        Public Shared Function ParseFields(ByVal tokenizer As System.Collections.Generic.IEnumerable(Of Token)) As ParseNode
            Dim context As ParserContext = New ParserContext(tokenizer)
            context.EnsureStarted
            Return JsonParser._ParseFields(context)
        End Function
        Public Shared Function ParseField(ByVal tokenizer As System.Collections.Generic.IEnumerable(Of Token)) As ParseNode
            Dim context As ParserContext = New ParserContext(tokenizer)
            context.EnsureStarted
            Return JsonParser._ParseField(context)
        End Function
        Public Shared Function ParseArray(ByVal tokenizer As System.Collections.Generic.IEnumerable(Of Token)) As ParseNode
            Dim context As ParserContext = New ParserContext(tokenizer)
            context.EnsureStarted
            Return JsonParser._ParseArray(context)
        End Function
        Public Shared Function ParseValues(ByVal tokenizer As System.Collections.Generic.IEnumerable(Of Token)) As ParseNode
            Dim context As ParserContext = New ParserContext(tokenizer)
            context.EnsureStarted
            Return JsonParser._ParseValues(context)
        End Function
        Public Shared Function ParseValue(ByVal tokenizer As System.Collections.Generic.IEnumerable(Of Token)) As ParseNode
            Dim context As ParserContext = New ParserContext(tokenizer)
            context.EnsureStarted
            Return JsonParser._ParseValue(context)
        End Function
        Public Shared Function ParseBoolean(ByVal tokenizer As System.Collections.Generic.IEnumerable(Of Token)) As ParseNode
            Dim context As ParserContext = New ParserContext(tokenizer)
            context.EnsureStarted
            Return JsonParser._ParseBoolean(context)
        End Function
        Public Shared Function Parse(ByVal tokenizer As System.Collections.Generic.IEnumerable(Of Token)) As ParseNode
            Dim context As ParserContext = New ParserContext(tokenizer)
            context.EnsureStarted
            Return JsonParser._ParseJson(context)
        End Function
    End Class
    '''<summary>
    '''
    '''</summary>
    Friend Class SyntaxException
        Inherits Exception
        Private _line As Integer
        Private _column As Integer
        Private _position As Long
        '''<summary>
        '''Creates a syntax exception with the specified arguments
        '''</summary>
        '''<param name="message">The error message</param>
        '''<param name="line">The line where the error occurred</param>
        '''<param name="column">The column where the error occured</param>
        '''<param name="position">The position where the error occured</param>
        Public Sub New(ByVal message As String, ByVal line As Integer, ByVal column As Integer, ByVal position As Long)
            MyBase.New(SyntaxException._GetMessage(message, line, column, position))
            Me._line = line
            Me._column = column
            Me._position = position
        End Sub
        '''<summary>
        '''The line where the error occurred
        '''</summary>
        Public ReadOnly Property Line() As Integer
            Get
                Return Me._line
            End Get
        End Property
        '''<summary>
        '''The column where the error occurred
        '''</summary>
        Public ReadOnly Property Column() As Integer
            Get
                Return Me._column
            End Get
        End Property
        '''<summary>
        '''The position where the error occurred
        '''</summary>
        Public ReadOnly Property Position() As Long
            Get
                Return Me._position
            End Get
        End Property
        Shared Function _GetMessage(ByVal message As String, ByVal line As Integer, ByVal column As Integer, ByVal position As Long) As String
            Return String.Format("{0} at line {1}, column {2}, position {3}", message, line, column, position)
        End Function
    End Class
    Partial Friend Class ParseNode
        Private _symbolId As Integer
        Private _symbol As String
        Private _value As String
        Private _line As Integer
        Private _column As Integer
        Private _position As Long
        Private _children() As ParseNode
        Public Sub New(ByVal symbolId As Integer, ByVal symbol As String, ByVal children() As ParseNode, ByVal line As Integer, ByVal column As Integer, ByVal position As Long)
            MyBase.New
            Me._symbolId = symbolId
            Me._symbol = symbol
            Me._value = Nothing
            Me._children = children
            Me._line = line
            Me._column = column
            Me._position = position
        End Sub
        Public Sub New(ByVal symbolId As Integer, ByVal symbol As String, ByVal value As String, ByVal line As Integer, ByVal column As Integer, ByVal position As Long)
            MyBase.New
            Me._symbolId = symbolId
            Me._symbol = symbol
            Me._value = value
            Me._children = Nothing
            Me._line = line
            Me._column = column
            Me._position = position
        End Sub
        Public ReadOnly Property IsNonTerminal() As Boolean
            Get
                Return (Not (Me._children) Is Nothing)
            End Get
        End Property
        Public ReadOnly Property Children() As ParseNode()
            Get
                Return Me._children
            End Get
        End Property
        Public ReadOnly Property SymbolId() As Integer
            Get
                Return Me._symbolId
            End Get
        End Property
        Public ReadOnly Property Symbol() As String
            Get
                Return Me._symbol
            End Get
        End Property
        Public ReadOnly Property Value() As String
            Get
                Return Me._value
            End Get
        End Property
        Public ReadOnly Property Line() As Integer
            Get
                Return Me._line
            End Get
        End Property
        Public ReadOnly Property Column() As Integer
            Get
                Return Me._column
            End Get
        End Property
        Public ReadOnly Property Position() As Long
            Get
                Return Me._position
            End Get
        End Property
    End Class
    Partial Friend Class ParserContext
        Inherits [Object]
        Implements IDisposable
        Private _state As Integer
        Private _e As IEnumerator(Of Token)
        Private _t As Token
        Public Sub New(ByVal tokenizer As IEnumerable(Of Token))
            MyBase.New
            Me._e = tokenizer.GetEnumerator
            Me._state = -1
            Me._t.SymbolId = -1
        End Sub
        Public Sub EnsureStarted()
            If (-1 = Me._state) Then
                Me.Advance
            End If
        End Sub
        Public ReadOnly Property SymbolId() As Integer
            Get
                Return Me._t.SymbolId
            End Get
        End Property
        Public ReadOnly Property Value() As String
            Get
                Return Me._t.Value
            End Get
        End Property
        Public ReadOnly Property Line() As Integer
            Get
                Return Me._t.Line
            End Get
        End Property
        Public ReadOnly Property Column() As Integer
            Get
                Return Me._t.Column
            End Get
        End Property
        Public ReadOnly Property Position() As Long
            Get
                Return Me._t.Position
            End Get
        End Property
        Public ReadOnly Property IsEnded() As Boolean
            Get
                Return (-2 = Me._state)
            End Get
        End Property
        Public Function Advance() As Boolean
            If (false = Me._e.MoveNext) Then
                Me._t.SymbolId = -2
                Me._state = -2
            Else
                Me._state = 0
                Me._t = Me._e.Current
                Return true
            End If
            Return false
        End Function
        Public Overloads Sub [Error](ByVal message As String, ByVal arg1 As Object, ByVal arg2 As Object, ByVal arg3 As Object)
            Throw New SyntaxException(String.Format(message, arg1, arg2, arg3), Me.Line, Me.Column, Me.Position)
        End Sub
        Public Overloads Sub [Error](ByVal message As String, ByVal arg1 As Object, ByVal arg2 As Object)
            Throw New SyntaxException(String.Format(message, arg1, arg2), Me.Line, Me.Column, Me.Position)
        End Sub
        Public Overloads Sub [Error](ByVal message As String, ByVal arg As Object)
            Throw New SyntaxException(String.Format(message, arg), Me.Line, Me.Column, Me.Position)
        End Sub
        Public Overloads Sub [Error](ByVal message As String)
            Throw New SyntaxException(message, Me.Line, Me.Column, Me.Position)
        End Sub
        Public Sub Dispose() Implements IDisposable.Dispose
            Me._e.Dispose
            Me._state = -3
        End Sub
    End Class
End Namespace
