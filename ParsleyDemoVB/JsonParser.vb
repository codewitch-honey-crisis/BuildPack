'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Collections.Generic

Namespace ParsleyDemo
    '''<summary>Parses the indicated grammar. Refer to C:\dev\BuildPack\ParsleyDemoVB\json.xbnf</summary>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("Parsley", "0.1.2.0")>  _
    Partial Friend Class JsonParser
        Friend Const ErrorSymbol As Integer = -1
        Friend Const EosSymbol As Integer = -2
        Public Const Json As Integer = 0
        Public Const Field As Integer = 1
        Public Const Value As Integer = 2
        Public Const [Boolean] As Integer = 3
        Public Const ObjectList As Integer = 4
        Public Const ArrayList As Integer = 5
        Public Const ObjectListRightAssoc As Integer = 6
        Public Const ArrayListRightAssoc As Integer = 7
        Public Const ObjectPart As Integer = 8
        Public Const ArrayPart As Integer = 9
        Public Const [Object] As Integer = 10
        Public Const ObjectPart2 As Integer = 11
        Public Const Array As Integer = 12
        Public Const ArrayPart2 As Integer = 13
        Public Const number As Integer = 14
        Public Const [string] As Integer = 15
        Public Const [true] As Integer = 16
        Public Const [false] As Integer = 17
        Public Const null As Integer = 18
        Public Const lbracket As Integer = 19
        Public Const rbracket As Integer = 20
        Public Const lbrace As Integer = 21
        Public Const rbrace As Integer = 22
        Public Const colon As Integer = 23
        Public Const comma As Integer = 24
        Public Const whitespace As Integer = 25
        Friend Shared Function ParseJson(ByVal context As ParserContext) As ParseNode
            Dim line__ As Integer = context.Line
            Dim column__ As Integer = context.Column
            Dim position__ As Long = context.Position
            'Json -> Object
            If (JsonParser.lbrace = context.SymbolId) Then
                Dim children(0) As ParseNode
                children(0) = JsonParser.ParseObject(context)
                Return New ParseNode(JsonParser.Json, "Json", children, line__, column__, position__)
            End If
            'Json -> Array
            If (JsonParser.lbracket = context.SymbolId) Then
                Dim children(0) As ParseNode
                children(0) = JsonParser.ParseArray(context)
                Return New ParseNode(JsonParser.Json, "Json", children, line__, column__, position__)
            End If
            Throw New SyntaxException("Expecting Object or Array", line__, column__, position__)
        End Function
        '''<summary>
        '''Parses a production of the form:
        '''Json= Object | Array
        '''</summary>
        '''<remarks>
        '''The production rules are:
        '''Json -> Object
        '''Json -> Array
        '''</remarks>
        '''<param name="tokenizer">The tokenizer to parse with</param><returns>A <see cref="ParseNode" /> representing the parsed tokens</returns>
        Public Shared Function Parse(ByVal tokenizer As System.Collections.Generic.IEnumerable(Of Token)) As ParseNode
            Dim context As ParserContext = New ParserContext(tokenizer)
            context.EnsureStarted
            Dim result As ParseNode = JsonParser.ParseJson(context)
            If (false = context.IsEnded) Then
                context.Error("Unexpected remainder in input.")
            End If
            Return result
        End Function
        Friend Shared Function ParseField(ByVal context As ParserContext) As ParseNode
            Dim line__ As Integer = context.Line
            Dim column__ As Integer = context.Column
            Dim position__ As Long = context.Position
            'Field -> string colon Value
            If (JsonParser.[string] = context.SymbolId) Then
                Dim children As System.Collections.Generic.List(Of ParseNode) = New System.Collections.Generic.List(Of ParseNode)()
                If (false  _
                            = (JsonParser.[string] = context.SymbolId)) Then
                    context.Error("Expecting string")
                End If
                children.Add(New ParseNode(JsonParser.[string], "string", context.Value, context.Line, context.Column, context.Position))
                context.Advance
                If (false  _
                            = (JsonParser.colon = context.SymbolId)) Then
                    context.Error("Expecting colon")
                End If
                context.Advance
                children.AddRange(JsonParser.ParseValue(context).Children)
                Return New ParseNode(JsonParser.Field, "Field", children.ToArray, line__, column__, position__)
            End If
            Throw New SyntaxException("Expecting string", line__, column__, position__)
        End Function
        Friend Shared Function ParseValue(ByVal context As ParserContext) As ParseNode
            Dim line__ As Integer = context.Line
            Dim column__ As Integer = context.Column
            Dim position__ As Long = context.Position
            'Value -> string
            If (JsonParser.[string] = context.SymbolId) Then
                Dim children(0) As ParseNode
                If (false  _
                            = (JsonParser.[string] = context.SymbolId)) Then
                    context.Error("Expecting string")
                End If
                children(0) = New ParseNode(JsonParser.[string], "string", context.Value, context.Line, context.Column, context.Position)
                context.Advance
                Return New ParseNode(JsonParser.Value, "Value", children, line__, column__, position__)
            End If
            'Value -> number
            If (JsonParser.number = context.SymbolId) Then
                Dim children(0) As ParseNode
                If (false  _
                            = (JsonParser.number = context.SymbolId)) Then
                    context.Error("Expecting number")
                End If
                children(0) = New ParseNode(JsonParser.number, "number", context.Value, context.Line, context.Column, context.Position)
                context.Advance
                Return New ParseNode(JsonParser.Value, "Value", children, line__, column__, position__)
            End If
            'Value -> Object
            If (JsonParser.lbrace = context.SymbolId) Then
                Dim children(0) As ParseNode
                children(0) = JsonParser.ParseObject(context)
                Return New ParseNode(JsonParser.Value, "Value", children, line__, column__, position__)
            End If
            'Value -> Array
            If (JsonParser.lbracket = context.SymbolId) Then
                Dim children(0) As ParseNode
                children(0) = JsonParser.ParseArray(context)
                Return New ParseNode(JsonParser.Value, "Value", children, line__, column__, position__)
            End If
            'Value -> Boolean
            If ((JsonParser.[true] = context.SymbolId)  _
                        OrElse (JsonParser.[false] = context.SymbolId)) Then
                Dim children(0) As ParseNode
                children(0) = JsonParser.ParseBoolean(context)
                Return New ParseNode(JsonParser.Value, "Value", children, line__, column__, position__)
            End If
            'Value -> null
            If (JsonParser.null = context.SymbolId) Then
                Dim children(0) As ParseNode
                If (false  _
                            = (JsonParser.null = context.SymbolId)) Then
                    context.Error("Expecting null")
                End If
                children(0) = New ParseNode(JsonParser.null, "null", context.Value, context.Line, context.Column, context.Position)
                context.Advance
                Return New ParseNode(JsonParser.Value, "Value", children, line__, column__, position__)
            End If
            Throw New SyntaxException("Expecting string, number, Object, Array, Boolean, or null", line__, column__, position__)
        End Function
        Friend Shared Function ParseBoolean(ByVal context As ParserContext) As ParseNode
            Dim line__ As Integer = context.Line
            Dim column__ As Integer = context.Column
            Dim position__ As Long = context.Position
            'Boolean -> true
            If (JsonParser.[true] = context.SymbolId) Then
                Dim children(0) As ParseNode
                If (false  _
                            = (JsonParser.[true] = context.SymbolId)) Then
                    context.Error("Expecting true")
                End If
                children(0) = New ParseNode(JsonParser.[true], "true", context.Value, context.Line, context.Column, context.Position)
                context.Advance
                Return New ParseNode(JsonParser.[Boolean], "Boolean", children, line__, column__, position__)
            End If
            'Boolean -> false
            If (JsonParser.[false] = context.SymbolId) Then
                Dim children(0) As ParseNode
                If (false  _
                            = (JsonParser.[false] = context.SymbolId)) Then
                    context.Error("Expecting false")
                End If
                children(0) = New ParseNode(JsonParser.[false], "false", context.Value, context.Line, context.Column, context.Position)
                context.Advance
                Return New ParseNode(JsonParser.[Boolean], "Boolean", children, line__, column__, position__)
            End If
            Throw New SyntaxException("Expecting true or false", line__, column__, position__)
        End Function
        Friend Shared Function ParseObjectList(ByVal context As ParserContext) As ParseNode
            Dim line__ As Integer = context.Line
            Dim column__ As Integer = context.Column
            Dim position__ As Long = context.Position
            'ObjectList -> comma Field ObjectListRightAssoc
            If (JsonParser.comma = context.SymbolId) Then
                Dim children As System.Collections.Generic.List(Of ParseNode) = New System.Collections.Generic.List(Of ParseNode)()
                If (false  _
                            = (JsonParser.comma = context.SymbolId)) Then
                    context.Error("Expecting comma")
                End If
                context.Advance
                children.Add(JsonParser.ParseField(context))
                children.AddRange(JsonParser.ParseObjectListRightAssoc(context).Children)
                Return New ParseNode(JsonParser.ObjectList, "ObjectList", children.ToArray, line__, column__, position__)
            End If
            Throw New SyntaxException("Expecting comma", line__, column__, position__)
        End Function
        Friend Shared Function ParseArrayList(ByVal context As ParserContext) As ParseNode
            Dim line__ As Integer = context.Line
            Dim column__ As Integer = context.Column
            Dim position__ As Long = context.Position
            'ArrayList -> comma Value ArrayListRightAssoc
            If (JsonParser.comma = context.SymbolId) Then
                Dim children As System.Collections.Generic.List(Of ParseNode) = New System.Collections.Generic.List(Of ParseNode)()
                If (false  _
                            = (JsonParser.comma = context.SymbolId)) Then
                    context.Error("Expecting comma")
                End If
                context.Advance
                children.AddRange(JsonParser.ParseValue(context).Children)
                children.AddRange(JsonParser.ParseArrayListRightAssoc(context).Children)
                Return New ParseNode(JsonParser.ArrayList, "ArrayList", children.ToArray, line__, column__, position__)
            End If
            Throw New SyntaxException("Expecting comma", line__, column__, position__)
        End Function
        Friend Shared Function ParseObjectListRightAssoc(ByVal context As ParserContext) As ParseNode
            Dim line__ As Integer = context.Line
            Dim column__ As Integer = context.Column
            Dim position__ As Long = context.Position
            'ObjectListRightAssoc -> comma Field ObjectListRightAssoc
            If (JsonParser.comma = context.SymbolId) Then
                Dim children As System.Collections.Generic.List(Of ParseNode) = New System.Collections.Generic.List(Of ParseNode)()
                If (false  _
                            = (JsonParser.comma = context.SymbolId)) Then
                    context.Error("Expecting comma")
                End If
                context.Advance
                children.Add(JsonParser.ParseField(context))
                children.AddRange(JsonParser.ParseObjectListRightAssoc(context).Children)
                Return New ParseNode(JsonParser.ObjectListRightAssoc, "ObjectListRightAssoc", children.ToArray, line__, column__, position__)
            End If
            'ObjectListRightAssoc ->
            If (JsonParser.rbrace = context.SymbolId) Then
                Dim children(-1) As ParseNode
                Return New ParseNode(JsonParser.ObjectListRightAssoc, "ObjectListRightAssoc", children, line__, column__, position__)
            End If
            Throw New SyntaxException("Expecting comma", line__, column__, position__)
        End Function
        Friend Shared Function ParseArrayListRightAssoc(ByVal context As ParserContext) As ParseNode
            Dim line__ As Integer = context.Line
            Dim column__ As Integer = context.Column
            Dim position__ As Long = context.Position
            'ArrayListRightAssoc -> comma Value ArrayListRightAssoc
            If (JsonParser.comma = context.SymbolId) Then
                Dim children As System.Collections.Generic.List(Of ParseNode) = New System.Collections.Generic.List(Of ParseNode)()
                If (false  _
                            = (JsonParser.comma = context.SymbolId)) Then
                    context.Error("Expecting comma")
                End If
                context.Advance
                children.AddRange(JsonParser.ParseValue(context).Children)
                children.AddRange(JsonParser.ParseArrayListRightAssoc(context).Children)
                Return New ParseNode(JsonParser.ArrayListRightAssoc, "ArrayListRightAssoc", children.ToArray, line__, column__, position__)
            End If
            'ArrayListRightAssoc ->
            If (JsonParser.rbracket = context.SymbolId) Then
                Dim children(-1) As ParseNode
                Return New ParseNode(JsonParser.ArrayListRightAssoc, "ArrayListRightAssoc", children, line__, column__, position__)
            End If
            Throw New SyntaxException("Expecting comma", line__, column__, position__)
        End Function
        Friend Shared Function ParseObjectPart(ByVal context As ParserContext) As ParseNode
            Dim line__ As Integer = context.Line
            Dim column__ As Integer = context.Column
            Dim position__ As Long = context.Position
            'ObjectPart -> ObjectList rbrace
            If (JsonParser.comma = context.SymbolId) Then
                Dim children As System.Collections.Generic.List(Of ParseNode) = New System.Collections.Generic.List(Of ParseNode)()
                children.AddRange(JsonParser.ParseObjectList(context).Children)
                If (false  _
                            = (JsonParser.rbrace = context.SymbolId)) Then
                    context.Error("Expecting rbrace")
                End If
                context.Advance
                Return New ParseNode(JsonParser.ObjectPart, "ObjectPart", children.ToArray, line__, column__, position__)
            End If
            'ObjectPart -> rbrace
            If (JsonParser.rbrace = context.SymbolId) Then
                Dim children As System.Collections.Generic.List(Of ParseNode) = New System.Collections.Generic.List(Of ParseNode)()
                If (false  _
                            = (JsonParser.rbrace = context.SymbolId)) Then
                    context.Error("Expecting rbrace")
                End If
                context.Advance
                Return New ParseNode(JsonParser.ObjectPart, "ObjectPart", children.ToArray, line__, column__, position__)
            End If
            Throw New SyntaxException("Expecting ObjectList or rbrace", line__, column__, position__)
        End Function
        Friend Shared Function ParseArrayPart(ByVal context As ParserContext) As ParseNode
            Dim line__ As Integer = context.Line
            Dim column__ As Integer = context.Column
            Dim position__ As Long = context.Position
            'ArrayPart -> ArrayList rbracket
            If (JsonParser.comma = context.SymbolId) Then
                Dim children As System.Collections.Generic.List(Of ParseNode) = New System.Collections.Generic.List(Of ParseNode)()
                children.AddRange(JsonParser.ParseArrayList(context).Children)
                If (false  _
                            = (JsonParser.rbracket = context.SymbolId)) Then
                    context.Error("Expecting rbracket")
                End If
                context.Advance
                Return New ParseNode(JsonParser.ArrayPart, "ArrayPart", children.ToArray, line__, column__, position__)
            End If
            'ArrayPart -> rbracket
            If (JsonParser.rbracket = context.SymbolId) Then
                Dim children As System.Collections.Generic.List(Of ParseNode) = New System.Collections.Generic.List(Of ParseNode)()
                If (false  _
                            = (JsonParser.rbracket = context.SymbolId)) Then
                    context.Error("Expecting rbracket")
                End If
                context.Advance
                Return New ParseNode(JsonParser.ArrayPart, "ArrayPart", children.ToArray, line__, column__, position__)
            End If
            Throw New SyntaxException("Expecting ArrayList or rbracket", line__, column__, position__)
        End Function
        Friend Shared Function ParseObject(ByVal context As ParserContext) As ParseNode
            Dim line__ As Integer = context.Line
            Dim column__ As Integer = context.Column
            Dim position__ As Long = context.Position
            'Object -> lbrace ObjectPart2
            If (JsonParser.lbrace = context.SymbolId) Then
                Dim children As System.Collections.Generic.List(Of ParseNode) = New System.Collections.Generic.List(Of ParseNode)()
                If (false  _
                            = (JsonParser.lbrace = context.SymbolId)) Then
                    context.Error("Expecting lbrace")
                End If
                context.Advance
                children.AddRange(JsonParser.ParseObjectPart2(context).Children)
                Return New ParseNode(JsonParser.[Object], "Object", children.ToArray, line__, column__, position__)
            End If
            Throw New SyntaxException("Expecting lbrace", line__, column__, position__)
        End Function
        Friend Shared Function ParseObjectPart2(ByVal context As ParserContext) As ParseNode
            Dim line__ As Integer = context.Line
            Dim column__ As Integer = context.Column
            Dim position__ As Long = context.Position
            'ObjectPart2 -> rbrace
            If (JsonParser.rbrace = context.SymbolId) Then
                Dim children As System.Collections.Generic.List(Of ParseNode) = New System.Collections.Generic.List(Of ParseNode)()
                If (false  _
                            = (JsonParser.rbrace = context.SymbolId)) Then
                    context.Error("Expecting rbrace")
                End If
                context.Advance
                Return New ParseNode(JsonParser.ObjectPart2, "ObjectPart2", children.ToArray, line__, column__, position__)
            End If
            'ObjectPart2 -> Field ObjectPart
            If (JsonParser.[string] = context.SymbolId) Then
                Dim children As System.Collections.Generic.List(Of ParseNode) = New System.Collections.Generic.List(Of ParseNode)()
                children.Add(JsonParser.ParseField(context))
                children.AddRange(JsonParser.ParseObjectPart(context).Children)
                Return New ParseNode(JsonParser.ObjectPart2, "ObjectPart2", children.ToArray, line__, column__, position__)
            End If
            Throw New SyntaxException("Expecting rbrace or Field", line__, column__, position__)
        End Function
        Friend Shared Function ParseArray(ByVal context As ParserContext) As ParseNode
            Dim line__ As Integer = context.Line
            Dim column__ As Integer = context.Column
            Dim position__ As Long = context.Position
            'Array -> lbracket ArrayPart2
            If (JsonParser.lbracket = context.SymbolId) Then
                Dim children As System.Collections.Generic.List(Of ParseNode) = New System.Collections.Generic.List(Of ParseNode)()
                If (false  _
                            = (JsonParser.lbracket = context.SymbolId)) Then
                    context.Error("Expecting lbracket")
                End If
                context.Advance
                children.AddRange(JsonParser.ParseArrayPart2(context).Children)
                Return New ParseNode(JsonParser.Array, "Array", children.ToArray, line__, column__, position__)
            End If
            Throw New SyntaxException("Expecting lbracket", line__, column__, position__)
        End Function
        Friend Shared Function ParseArrayPart2(ByVal context As ParserContext) As ParseNode
            Dim line__ As Integer = context.Line
            Dim column__ As Integer = context.Column
            Dim position__ As Long = context.Position
            'ArrayPart2 -> rbracket
            If (JsonParser.rbracket = context.SymbolId) Then
                Dim children As System.Collections.Generic.List(Of ParseNode) = New System.Collections.Generic.List(Of ParseNode)()
                If (false  _
                            = (JsonParser.rbracket = context.SymbolId)) Then
                    context.Error("Expecting rbracket")
                End If
                context.Advance
                Return New ParseNode(JsonParser.ArrayPart2, "ArrayPart2", children.ToArray, line__, column__, position__)
            End If
            'ArrayPart2 -> Value ArrayPart
            If (((((((JsonParser.[string] = context.SymbolId)  _
                        OrElse (JsonParser.number = context.SymbolId))  _
                        OrElse (JsonParser.lbrace = context.SymbolId))  _
                        OrElse (JsonParser.lbracket = context.SymbolId))  _
                        OrElse (JsonParser.[true] = context.SymbolId))  _
                        OrElse (JsonParser.[false] = context.SymbolId))  _
                        OrElse (JsonParser.null = context.SymbolId)) Then
                Dim children As System.Collections.Generic.List(Of ParseNode) = New System.Collections.Generic.List(Of ParseNode)()
                children.AddRange(JsonParser.ParseValue(context).Children)
                children.AddRange(JsonParser.ParseArrayPart(context).Children)
                Return New ParseNode(JsonParser.ArrayPart2, "ArrayPart2", children.ToArray, line__, column__, position__)
            End If
            Throw New SyntaxException("Expecting rbracket or Value", line__, column__, position__)
        End Function
    End Class
End Namespace
