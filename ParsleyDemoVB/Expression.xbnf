Expression<start,type="int">=Term => { return EvaluateTerm(node.Children[0],state);}
Term= Factor ("+"|"-") Factor | Factor => {
	if(1==node.Children.Length)
		return EvaluateFactor(node.Children[0],state);
	else if(node.Children[1].SymbolId==add)
		return ((int)EvaluateFactor(node.Children[0],state)) + ((int)EvaluateFactor(node.Children[2],state));
	else
		return ((int)EvaluateFactor(node.Children[0],state)) - ((int)EvaluateFactor(node.Children[2],state));
}
Factor<type="int">= Unary ("*"|"/") Unary | Unary => {
	if(1==node.Children.Length)
		return EvaluateUnary(node.Children[0],state);
	else if(node.Children[1].SymbolId==mul)
		return ((int)EvaluateUnary(node.Children[0],state)) * ((int)EvaluateUnary(node.Children[2],state));
	else
		return ((int)EvaluateUnary(node.Children[0],state)) / ((int)EvaluateUnary(node.Children[2],state));
}
Unary<type="int">= ("+"|"-") Unary | Leaf => {
	if (1 == node.Children.Length)
		return EvaluateLeaf(node.Children[0],state);
	else if (node.Children[0].SymbolId == add)
		return EvaluateUnary(node.Children[1],state);
	else
		return -(int)EvaluateUnary(node.Children[1],state);
}
Leaf<type="int">= identifier | integer | "(" Expression ")" => {
	var n = node.Children[0];
	if (identifier == n.SymbolId) {
		if(null==state)
			throw new InvalidOperationException("Variables were not defined.");
		return ((IDictionary<string,int>)state)[n.Value];
	}
	else if (integer == n.SymbolId)
		return n.Value;
	else 
		return EvaluateExpression(n.Children[1],state);
}
add= "+";
sub= "-";
mul= "*";
div= "/";
lparen= "(";
rparen= ")";
integer= '[0-9]+';
identifier= '[A-Z_a-z][0-9A-Z_a-z]*';
whitespace<hidden>= '\s+';