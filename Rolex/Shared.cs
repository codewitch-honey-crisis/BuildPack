//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Rolex {
    using System.CodeDom;
    using System.Reflection;
    
    internal partial class Shared {
        private static CodeCompileUnit _CompileUnit(string[] referencedAssemblies, CodeNamespace[] namespaces, CodeAttributeDeclaration[] assemblyCustomAttributes, CodeDirective[] startDirectives, CodeDirective[] endDirectives) {
            CodeCompileUnit result = new CodeCompileUnit();
            result.ReferencedAssemblies.AddRange(referencedAssemblies);
            result.Namespaces.AddRange(namespaces);
            result.AssemblyCustomAttributes.AddRange(assemblyCustomAttributes);
            result.StartDirectives.AddRange(startDirectives);
            result.EndDirectives.AddRange(endDirectives);
            return result;
        }
        private static CodeNamespace _Namespace(string name, CodeNamespaceImport[] imports, CodeTypeDeclaration[] types, CodeCommentStatement[] comments) {
            CodeNamespace result = new CodeNamespace();
            result.Name = name;
            result.Imports.AddRange(imports);
            result.Types.AddRange(types);
            result.Comments.AddRange(comments);
            return result;
        }
        private static CodeTypeDeclaration _TypeDeclaration(
                    string name, 
                    bool isClass, 
                    bool isEnum, 
                    bool isInterface, 
                    bool isStruct, 
                    bool isPartial, 
                    MemberAttributes attributes, 
                    TypeAttributes typeAttributes, 
                    CodeTypeParameter[] typeParameters, 
                    CodeTypeReference[] baseTypes, 
                    CodeTypeMember[] members, 
                    CodeCommentStatement[] comments, 
                    CodeAttributeDeclaration[] customAttributes, 
                    CodeDirective[] startDirectives, 
                    CodeDirective[] endDirectives, 
                    CodeLinePragma linePragma) {
            CodeTypeDeclaration result = new CodeTypeDeclaration(name);
            result.IsClass = isClass;
            result.IsEnum = isEnum;
            result.IsInterface = isInterface;
            result.IsStruct = isStruct;
            result.IsPartial = isPartial;
            result.Attributes = attributes;
            result.TypeAttributes = typeAttributes;
            result.TypeParameters.AddRange(typeParameters);
            result.BaseTypes.AddRange(baseTypes);
            result.Members.AddRange(members);
            result.Comments.AddRange(comments);
            result.CustomAttributes.AddRange(customAttributes);
            result.StartDirectives.AddRange(startDirectives);
            result.EndDirectives.AddRange(endDirectives);
            result.LinePragma = linePragma;
            return result;
        }
        private static CodeMemberField _MemberField(CodeTypeReference type, string name, CodeExpression initExpression, MemberAttributes attributes, CodeCommentStatement[] comments, CodeAttributeDeclaration[] customAttributes, CodeDirective[] startDirectives, CodeDirective[] endDirectives, CodeLinePragma linePragma) {
            CodeMemberField result = new CodeMemberField(type, name);
            result.InitExpression = initExpression;
            result.Attributes = attributes;
            result.Comments.AddRange(comments);
            result.CustomAttributes.AddRange(customAttributes);
            result.StartDirectives.AddRange(startDirectives);
            result.EndDirectives.AddRange(endDirectives);
            result.LinePragma = linePragma;
            return result;
        }
        public static System.CodeDom.CodeCompileUnit Token = Shared._CompileUnit(new string[0], new CodeNamespace[] {
                    Shared._Namespace("Rolex", new CodeNamespaceImport[0], new CodeTypeDeclaration[] {
                                Shared._TypeDeclaration("Token", false, false, false, true, false, ((MemberAttributes)(0)), TypeAttributes.NotPublic, new CodeTypeParameter[0], new CodeTypeReference[0], new CodeTypeMember[] {
                                            Shared._MemberField(new CodeTypeReference("System.Int32"), "Line", null, (MemberAttributes.Final | MemberAttributes. Public), new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("<summary>", true)),
                                                        new CodeCommentStatement(new CodeComment("Indicates the line where the token occurs", true)),
                                                        new CodeCommentStatement(new CodeComment("</summary>", true))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberField(new CodeTypeReference("System.Int32"), "Column", null, (MemberAttributes.Final | MemberAttributes. Public), new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("<summary>", true)),
                                                        new CodeCommentStatement(new CodeComment("Indicates the column where the token occurs", true)),
                                                        new CodeCommentStatement(new CodeComment("</summary>", true))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberField(new CodeTypeReference("System.Int64"), "Position", null, (MemberAttributes.Final | MemberAttributes. Public), new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("<summary>", true)),
                                                        new CodeCommentStatement(new CodeComment("Indicates the position where the token occurs", true)),
                                                        new CodeCommentStatement(new CodeComment("</summary>", true))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberField(new CodeTypeReference("System.Int32"), "SymbolId", null, (MemberAttributes.Final | MemberAttributes. Public), new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("<summary>", true)),
                                                        new CodeCommentStatement(new CodeComment("Indicates the symbol id or -1 for the error symbol", true)),
                                                        new CodeCommentStatement(new CodeComment("</summary>", true))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberField(new CodeTypeReference("System.String"), "Value", null, (MemberAttributes.Final | MemberAttributes. Public), new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("<summary>", true)),
                                                        new CodeCommentStatement(new CodeComment("Indicates the value of the token", true)),
                                                        new CodeCommentStatement(new CodeComment("</summary>", true))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[] {
                                            new CodeCommentStatement(new CodeComment("<summary>", true)),
                                            new CodeCommentStatement(new CodeComment("Reference implementation for generated shared code", true)),
                                            new CodeCommentStatement(new CodeComment("</summary>", true))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0])}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0]);
        private static CodeConstructor _Constructor(MemberAttributes attributes, CodeParameterDeclarationExpression[] parameters, CodeExpression[] chainedConstructorArgs, CodeExpression[] baseConstructorArgs, CodeStatement[] statements, CodeCommentStatement[] comments, CodeAttributeDeclaration[] customAttributes, CodeDirective[] startDirectives, CodeDirective[] endDirectives, CodeLinePragma linePragma) {
            CodeConstructor result = new CodeConstructor();
            result.Attributes = attributes;
            result.Parameters.AddRange(parameters);
            result.ChainedConstructorArgs.AddRange(chainedConstructorArgs);
            result.BaseConstructorArgs.AddRange(baseConstructorArgs);
            result.Statements.AddRange(statements);
            result.Comments.AddRange(comments);
            result.CustomAttributes.AddRange(customAttributes);
            result.StartDirectives.AddRange(startDirectives);
            result.EndDirectives.AddRange(endDirectives);
            result.LinePragma = linePragma;
            return result;
        }
        private static CodeMemberMethod _MemberMethod(CodeTypeReference returnType, string name, MemberAttributes attributes, CodeParameterDeclarationExpression[] parameters, CodeStatement[] statements, CodeTypeReference[] implementationTypes, CodeTypeReference privateImplementationType, CodeCommentStatement[] comments, CodeAttributeDeclaration[] customAttributes, CodeAttributeDeclaration[] returnTypeCustomAttributes, CodeDirective[] startDirectives, CodeDirective[] endDirectives, CodeLinePragma linePragma) {
            CodeMemberMethod result = new CodeMemberMethod();
            result.ReturnType = returnType;
            result.Name = name;
            result.Attributes = attributes;
            result.Parameters.AddRange(parameters);
            result.Statements.AddRange(statements);
            result.ImplementationTypes.AddRange(implementationTypes);
            result.PrivateImplementationType = privateImplementationType;
            result.Comments.AddRange(comments);
            result.CustomAttributes.AddRange(customAttributes);
            result.ReturnTypeCustomAttributes.AddRange(returnTypeCustomAttributes);
            result.StartDirectives.AddRange(startDirectives);
            result.EndDirectives.AddRange(endDirectives);
            result.LinePragma = linePragma;
            return result;
        }
        private static CodeMemberProperty _MemberProperty(CodeTypeReference type, string name, MemberAttributes attributes, CodeParameterDeclarationExpression[] parameters, CodeStatement[] getStatements, CodeStatement[] setStatements, CodeTypeReference[] implementationTypes, CodeTypeReference privateImplementationType, CodeCommentStatement[] comments, CodeAttributeDeclaration[] customAttributes, CodeDirective[] startDirectives, CodeDirective[] endDirectives, CodeLinePragma linePragma) {
            CodeMemberProperty result = new CodeMemberProperty();
            result.Type = type;
            result.Name = name;
            result.Attributes = attributes;
            result.Parameters.AddRange(parameters);
            result.GetStatements.AddRange(getStatements);
            result.SetStatements.AddRange(setStatements);
            result.ImplementationTypes.AddRange(implementationTypes);
            result.PrivateImplementationType = privateImplementationType;
            result.Comments.AddRange(comments);
            result.CustomAttributes.AddRange(customAttributes);
            result.StartDirectives.AddRange(startDirectives);
            result.EndDirectives.AddRange(endDirectives);
            result.LinePragma = linePragma;
            return result;
        }
        public static System.CodeDom.CodeCompileUnit TableTokenizer = Shared._CompileUnit(new string[0], new CodeNamespace[] {
                    Shared._Namespace("", new CodeNamespaceImport[] {
                                new CodeNamespaceImport("System"),
                                new CodeNamespaceImport("System.Collections.Generic"),
                                new CodeNamespaceImport("System.Text")}, new CodeTypeDeclaration[0], new CodeCommentStatement[0]),
                    Shared._Namespace("Rolex", new CodeNamespaceImport[0], new CodeTypeDeclaration[] {
                                Shared._TypeDeclaration("DfaEntry", false, false, false, true, false, ((MemberAttributes)(0)), TypeAttributes.NotPublic, new CodeTypeParameter[0], new CodeTypeReference[0], new CodeTypeMember[] {
                                            Shared._MemberField(new CodeTypeReference(new CodeTypeReference("DfaTransitionEntry"), 1), "Transitions", null, (MemberAttributes.Final | MemberAttributes. Public), new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("<summary>", true)),
                                                        new CodeCommentStatement(new CodeComment("The state transitions", true)),
                                                        new CodeCommentStatement(new CodeComment("</summary>", true))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberField(new CodeTypeReference("System.Int32"), "AcceptSymbolId", null, (MemberAttributes.Final | MemberAttributes. Public), new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("<summary>", true)),
                                                        new CodeCommentStatement(new CodeComment("The accept symbol id or -1 for non-accepting", true)),
                                                        new CodeCommentStatement(new CodeComment("</summary>", true))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._Constructor((MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                        new CodeParameterDeclarationExpression(new CodeTypeReference(new CodeTypeReference("DfaTransitionEntry"), 1), "transitions"),
                                                        new CodeParameterDeclarationExpression(new CodeTypeReference("System.Int32"), "acceptSymbolId")}, new CodeExpression[0], new CodeExpression[0], new CodeStatement[] {
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "Transitions"), new CodeArgumentReferenceExpression("transitions")),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "AcceptSymbolId"), new CodeArgumentReferenceExpression("acceptSymbolId"))}, new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("<summary>", true)),
                                                        new CodeCommentStatement(new CodeComment("Constructs a new instance", true)),
                                                        new CodeCommentStatement(new CodeComment("</summary>", true)),
                                                        new CodeCommentStatement(new CodeComment("<param name=\"transitions\">The state transitions</param>", true)),
                                                        new CodeCommentStatement(new CodeComment("<param name=\"acceptSymbolId\">The accept symbol id</param>", true))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[] {
                                            new CodeCommentStatement(new CodeComment("<summary>", true)),
                                            new CodeCommentStatement(new CodeComment("Reference implementation for a DfaEntry", true)),
                                            new CodeCommentStatement(new CodeComment("</summary>", true))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                Shared._TypeDeclaration("DfaTransitionEntry", false, false, false, true, false, ((MemberAttributes)(0)), TypeAttributes.NotPublic, new CodeTypeParameter[0], new CodeTypeReference[0], new CodeTypeMember[] {
                                            Shared._MemberField(new CodeTypeReference(new CodeTypeReference("System.Char"), 1), "PackedRanges", null, (MemberAttributes.Final | MemberAttributes. Public), new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("<summary>", true)),
                                                        new CodeCommentStatement(new CodeComment("The character ranges, packed as adjacent pairs.", true)),
                                                        new CodeCommentStatement(new CodeComment("</summary>", true))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberField(new CodeTypeReference("System.Int32"), "Destination", null, (MemberAttributes.Final | MemberAttributes. Public), new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("<summary>", true)),
                                                        new CodeCommentStatement(new CodeComment("The destination state", true)),
                                                        new CodeCommentStatement(new CodeComment("</summary>", true))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._Constructor((MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                        new CodeParameterDeclarationExpression(new CodeTypeReference(new CodeTypeReference("System.Char"), 1), "packedRanges"),
                                                        new CodeParameterDeclarationExpression(new CodeTypeReference("System.Int32"), "destination")}, new CodeExpression[0], new CodeExpression[0], new CodeStatement[] {
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "PackedRanges"), new CodeArgumentReferenceExpression("packedRanges")),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "Destination"), new CodeArgumentReferenceExpression("destination"))}, new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("<summary>", true)),
                                                        new CodeCommentStatement(new CodeComment("Constructs a new instance", true)),
                                                        new CodeCommentStatement(new CodeComment("</summary>", true)),
                                                        new CodeCommentStatement(new CodeComment("<param name=\"packedRanges\">The packed character ranges</param>", true)),
                                                        new CodeCommentStatement(new CodeComment("<param name=\"destination\">The destination state</param>", true))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[] {
                                            new CodeCommentStatement(new CodeComment("<summary>", true)),
                                            new CodeCommentStatement(new CodeComment("The state transition entry", true)),
                                            new CodeCommentStatement(new CodeComment("</summary>", true))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                Shared._TypeDeclaration("TableTokenizer", true, false, false, false, false, ((MemberAttributes)(0)), TypeAttributes.NotPublic, new CodeTypeParameter[0], new CodeTypeReference[] {
                                            new CodeTypeReference("IEnumerable`1", new CodeTypeReference[] {
                                                        new CodeTypeReference("Token", CodeTypeReferenceOptions.GenericTypeParameter)})}, new CodeTypeMember[] {
                                            Shared._MemberField(new CodeTypeReference("System.Int32"), "ErrorSymbol", new CodePrimitiveExpression(-1), (MemberAttributes.Const | MemberAttributes. Public), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberField(new CodeTypeReference(new CodeTypeReference("DfaEntry"), 1), "_dfaTable", null, ((MemberAttributes)(0)), new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("our state table", false))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberField(new CodeTypeReference(new CodeTypeReference("System.String"), 1), "_blockEnds", null, ((MemberAttributes)(0)), new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("our block ends (specified like comment<blockEnd=\"*/\">=\"/*\" in a rolex spec file)", false))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberField(new CodeTypeReference(new CodeTypeReference("System.Int32"), 1), "_nodeFlags", null, ((MemberAttributes)(0)), new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("our node flags. Currently only used for the hidden attribute", false))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberField(new CodeTypeReference("IEnumerable`1", new CodeTypeReference[] {
                                                            new CodeTypeReference("System.Char", CodeTypeReferenceOptions.GenericTypeParameter)}), "_input", null, ((MemberAttributes)(0)), new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("the input cursor. We can get this from a string, a char array, or some other sour" +
                                                                    "ce.", false))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberMethod(new CodeTypeReference("IEnumerator`1", new CodeTypeReference[] {
                                                            new CodeTypeReference("Token", CodeTypeReferenceOptions.GenericTypeParameter)}), "GetEnumerator", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                        new CodeCommentStatement(new CodeComment("just create our table tokenizer\'s enumerator, passing all of the relevant stuff", false)),
                                                        new CodeCommentStatement(new CodeComment("it\'s the real workhorse.", false)),
                                                        new CodeMethodReturnStatement(new CodeObjectCreateExpression(new CodeTypeReference("TableTokenizerEnumerator"), new CodeExpression[] {
                                                                        new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_dfaTable"),
                                                                        new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_blockEnds"),
                                                                        new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_nodeFlags"),
                                                                        new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "GetEnumerator"), new CodeExpression[0])}))}, new CodeTypeReference[0], null, new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("<summary>", true)),
                                                        new CodeCommentStatement(new CodeComment("Retrieves an enumerator that can be used to iterate over the tokens", true)),
                                                        new CodeCommentStatement(new CodeComment("</summary>", true)),
                                                        new CodeCommentStatement(new CodeComment("<returns>An enumerator that can be used to iterate over the tokens</returns>", true))}, new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberMethod(new CodeTypeReference("IEnumerator`1", new CodeTypeReference[] {
                                                            new CodeTypeReference("Token", CodeTypeReferenceOptions.GenericTypeParameter)}), "GetEnumerator", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                        new CodeMethodReturnStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "GetEnumerator"), new CodeExpression[0]))}, new CodeTypeReference[0], new CodeTypeReference("IEnumerable`1", new CodeTypeReference[] {
                                                            new CodeTypeReference("Token", CodeTypeReferenceOptions.GenericTypeParameter)}), new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("we have to implement this explicitly for language independence because Slang", false)),
                                                        new CodeCommentStatement(new CodeComment("will not set PublicImplementationTypes on public methods which some languages", false)),
                                                        new CodeCommentStatement(new CodeComment("require", false))}, new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberMethod(new CodeTypeReference("System.Collections.IEnumerator"), "GetEnumerator", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                        new CodeMethodReturnStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "GetEnumerator"), new CodeExpression[0]))}, new CodeTypeReference[0], new CodeTypeReference("System.Collections.IEnumerable"), new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("legacy collection support (required)", false))}, new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._Constructor((MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                        new CodeParameterDeclarationExpression(new CodeTypeReference(new CodeTypeReference("DfaEntry"), 1), "dfaTable"),
                                                        new CodeParameterDeclarationExpression(new CodeTypeReference(new CodeTypeReference("System.String"), 1), "blockEnds"),
                                                        new CodeParameterDeclarationExpression(new CodeTypeReference(new CodeTypeReference("System.Int32"), 1), "nodeFlags"),
                                                        new CodeParameterDeclarationExpression(new CodeTypeReference("IEnumerable`1", new CodeTypeReference[] {
                                                                        new CodeTypeReference("System.Char", CodeTypeReferenceOptions.GenericTypeParameter)}), "input")}, new CodeExpression[0], new CodeExpression[0], new CodeStatement[] {
                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(null), CodeBinaryOperatorType.ValueEquality, new CodeArgumentReferenceExpression("dfaTable")), new CodeStatement[] {
                                                                    new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("ArgumentNullException"), new CodeExpression[] {
                                                                                    new CodePrimitiveExpression("dfaTable")}))}, new CodeStatement[0]),
                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(null), CodeBinaryOperatorType.ValueEquality, new CodeArgumentReferenceExpression("blockEnds")), new CodeStatement[] {
                                                                    new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("ArgumentNullException"), new CodeExpression[] {
                                                                                    new CodePrimitiveExpression("blockEnds")}))}, new CodeStatement[0]),
                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(null), CodeBinaryOperatorType.ValueEquality, new CodeArgumentReferenceExpression("nodeFlags")), new CodeStatement[] {
                                                                    new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("ArgumentNullException"), new CodeExpression[] {
                                                                                    new CodePrimitiveExpression("nodeFlags")}))}, new CodeStatement[0]),
                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(null), CodeBinaryOperatorType.ValueEquality, new CodeArgumentReferenceExpression("input")), new CodeStatement[] {
                                                                    new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("ArgumentNullException"), new CodeExpression[] {
                                                                                    new CodePrimitiveExpression("input")}))}, new CodeStatement[0]),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_dfaTable"), new CodeArgumentReferenceExpression("dfaTable")),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_blockEnds"), new CodeArgumentReferenceExpression("blockEnds")),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_nodeFlags"), new CodeArgumentReferenceExpression("nodeFlags")),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), new CodeArgumentReferenceExpression("input"))}, new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("<summary>", true)),
                                                        new CodeCommentStatement(new CodeComment("Constructs a new instance", true)),
                                                        new CodeCommentStatement(new CodeComment("</summary>", true)),
                                                        new CodeCommentStatement(new CodeComment("<param name=\"dfaTable\">The DFA state table to use</param>", true)),
                                                        new CodeCommentStatement(new CodeComment("<param name=\"blockEnds\">The block ends table</param>", true)),
                                                        new CodeCommentStatement(new CodeComment("<param name=\"nodeFlags\">The node flags table</param>", true)),
                                                        new CodeCommentStatement(new CodeComment("<param name=\"input\">The input character sequence</param>", true))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[] {
                                            new CodeCommentStatement(new CodeComment("<summary>", true)),
                                            new CodeCommentStatement(new CodeComment("Reference Implementation for generated shared code", true)),
                                            new CodeCommentStatement(new CodeComment("</summary>", true))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                Shared._TypeDeclaration("TableTokenizerEnumerator", true, false, false, false, false, ((MemberAttributes)(0)), TypeAttributes.NotPublic, new CodeTypeParameter[0], new CodeTypeReference[] {
                                            new CodeTypeReference("IEnumerator`1", new CodeTypeReference[] {
                                                        new CodeTypeReference("Token", CodeTypeReferenceOptions.GenericTypeParameter)})}, new CodeTypeMember[] {
                                            Shared._MemberField(new CodeTypeReference("System.Int32"), "ErrorSymbol", new CodePrimitiveExpression(-1), (MemberAttributes.Const | MemberAttributes. Public), new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("our error symbol. Always -1", false))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberField(new CodeTypeReference("System.Int32"), "_EosSymbol", new CodePrimitiveExpression(-2), MemberAttributes.Const, new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("our end of stream symbol - returned by _Lex() and used internally but not reporte" +
                                                                    "d", false))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberField(new CodeTypeReference("System.Int32"), "_Disposed", new CodePrimitiveExpression(-4), MemberAttributes.Const, new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("our disposed state indicator", false))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberField(new CodeTypeReference("System.Int32"), "_BeforeBegin", new CodePrimitiveExpression(-3), MemberAttributes.Const, new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("the state indicates the cursor is before the beginning (initial state)", false))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberField(new CodeTypeReference("System.Int32"), "_AfterEnd", new CodePrimitiveExpression(-2), MemberAttributes.Const, new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("the state indicates the cursor is after the end", false))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberField(new CodeTypeReference("System.Int32"), "_InnerFinished", new CodePrimitiveExpression(-1), MemberAttributes.Const, new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("the state indicates that the inner input enumeration has finished (we still have " +
                                                                    "one more token to report)", false))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberField(new CodeTypeReference("System.Int32"), "_Enumerating", new CodePrimitiveExpression(0), MemberAttributes.Const, new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("indicates we\'re currently enumerating. We spend most of our time and effort in th" +
                                                                    "is state", false))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberField(new CodeTypeReference("System.Int32"), "_TabWidth", new CodePrimitiveExpression(4), MemberAttributes.Const, new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("indicates the tab width, used for updating the Column property when we encounter " +
                                                                    "a tab", false))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberField(new CodeTypeReference(new CodeTypeReference("DfaEntry"), 1), "_dfaTable", null, ((MemberAttributes)(0)), new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("the DFA state table to use.", false))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberField(new CodeTypeReference(new CodeTypeReference("System.String"), 1), "_blockEnds", null, ((MemberAttributes)(0)), new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("the blockEnds to use", false))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberField(new CodeTypeReference(new CodeTypeReference("System.Int32"), 1), "_nodeFlags", null, ((MemberAttributes)(0)), new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("the nodeFlags to use", false))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberField(new CodeTypeReference("IEnumerator`1", new CodeTypeReference[] {
                                                            new CodeTypeReference("System.Char", CodeTypeReferenceOptions.GenericTypeParameter)}), "_input", null, ((MemberAttributes)(0)), new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("the input cursor", false))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberField(new CodeTypeReference("System.Int32"), "_state", null, ((MemberAttributes)(0)), new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("our state", false))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberField(new CodeTypeReference("Token"), "_current", null, ((MemberAttributes)(0)), new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("the current token", false))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberField(new CodeTypeReference("StringBuilder"), "_buffer", null, ((MemberAttributes)(0)), new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("a buffer used primarily by _Lex() to capture matched input", false))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberField(new CodeTypeReference("System.Int32"), "_line", null, ((MemberAttributes)(0)), new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("the one based line", false))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberField(new CodeTypeReference("System.Int32"), "_column", null, ((MemberAttributes)(0)), new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("the one based column", false))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberField(new CodeTypeReference("System.Int64"), "_position", null, ((MemberAttributes)(0)), new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("the zero based position", false))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._Constructor((MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                        new CodeParameterDeclarationExpression(new CodeTypeReference(new CodeTypeReference("DfaEntry"), 1), "dfaTable"),
                                                        new CodeParameterDeclarationExpression(new CodeTypeReference(new CodeTypeReference("System.String"), 1), "blockEnds"),
                                                        new CodeParameterDeclarationExpression(new CodeTypeReference(new CodeTypeReference("System.Int32"), 1), "nodeFlags"),
                                                        new CodeParameterDeclarationExpression(new CodeTypeReference("IEnumerator`1", new CodeTypeReference[] {
                                                                        new CodeTypeReference("System.Char", CodeTypeReferenceOptions.GenericTypeParameter)}), "input")}, new CodeExpression[0], new CodeExpression[0], new CodeStatement[] {
                                                        new CodeCommentStatement(new CodeComment("just set up our initial values", false)),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_dfaTable"), new CodeArgumentReferenceExpression("dfaTable")),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_blockEnds"), new CodeArgumentReferenceExpression("blockEnds")),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_nodeFlags"), new CodeArgumentReferenceExpression("nodeFlags")),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), new CodeArgumentReferenceExpression("input")),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_BeforeBegin")),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_buffer"), new CodeObjectCreateExpression(new CodeTypeReference("StringBuilder"), new CodeExpression[0])),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line"), new CodePrimitiveExpression(1)),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), new CodePrimitiveExpression(1)),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_position"), new CodePrimitiveExpression(0))}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberProperty(new CodeTypeReference("Token"), "Current", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                        new CodeCommentStatement(new CodeComment("if we\'re not enumerating, find out what\'s going on", false)),
                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_Enumerating"), CodeBinaryOperatorType.GreaterThan, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state")), new CodeStatement[] {
                                                                    new CodeCommentStatement(new CodeComment("check which state we\'re in, and throw accordingly", false)),
                                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_BeforeBegin"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state")), new CodeStatement[] {
                                                                                new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("InvalidOperationException"), new CodeExpression[] {
                                                                                                new CodePrimitiveExpression("The cursor is before the start of the enumeration")}))}, new CodeStatement[0]),
                                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_AfterEnd"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state")), new CodeStatement[] {
                                                                                new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("InvalidOperationException"), new CodeExpression[] {
                                                                                                new CodePrimitiveExpression("The cursor is after the end of the enumeration")}))}, new CodeStatement[0]),
                                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_Disposed"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state")), new CodeStatement[] {
                                                                                new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_ThrowDisposed"), new CodeExpression[0]))}, new CodeStatement[0])}, new CodeStatement[0]),
                                                        new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberProperty(new CodeTypeReference("Token"), "Current", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                        new CodeMethodReturnStatement(new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Current"))}, new CodeStatement[0], new CodeTypeReference[0], new CodeTypeReference("IEnumerator`1", new CodeTypeReference[] {
                                                            new CodeTypeReference("Token", CodeTypeReferenceOptions.GenericTypeParameter)}), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberProperty(new CodeTypeReference("System.Object"), "Current", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                        new CodeMethodReturnStatement(new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Current"))}, new CodeStatement[0], new CodeTypeReference[0], new CodeTypeReference("System.Collections.IEnumerator"), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberMethod(new CodeTypeReference("System.Void"), "Reset", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_Disposed"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state")), new CodeStatement[] {
                                                                    new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_ThrowDisposed"), new CodeExpression[0]))}, new CodeStatement[0]),
                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_BeforeBegin"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"))), new CodeStatement[] {
                                                                    new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "Reset"), new CodeExpression[0]))}, new CodeStatement[0]),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_BeforeBegin")),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line"), new CodePrimitiveExpression(1)),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), new CodePrimitiveExpression(1)),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_position"), new CodePrimitiveExpression(0))}, new CodeTypeReference[0], new CodeTypeReference("System.Collections.IEnumerator"), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberMethod(new CodeTypeReference("System.Boolean"), "MoveNext", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                        new CodeCommentStatement(new CodeComment("if we\'re not enumerating", false)),
                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_Enumerating"), CodeBinaryOperatorType.GreaterThan, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state")), new CodeStatement[] {
                                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_Disposed"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state")), new CodeStatement[] {
                                                                                new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_ThrowDisposed"), new CodeExpression[0]))}, new CodeStatement[0]),
                                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_AfterEnd"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state")), new CodeStatement[] {
                                                                                new CodeMethodReturnStatement(new CodePrimitiveExpression(false))}, new CodeStatement[0])}, new CodeStatement[0]),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), new CodeDefaultValueExpression(new CodeTypeReference("Token"))),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), "Line"), new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line")),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), "Column"), new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column")),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), "Position"), new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_position")),
                                                        new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_buffer"), "Clear"), new CodeExpression[0])),
                                                        new CodeCommentStatement(new CodeComment("lex the next input", false)),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), "SymbolId"), new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_Lex"), new CodeExpression[0])),
                                                        new CodeCommentStatement(new CodeComment("now look for hiddens and block ends", false)),
                                                        new CodeVariableDeclarationStatement(new CodeTypeReference("System.Boolean"), "done", new CodePrimitiveExpression(false)),
                                                        new CodeIterationStatement(new CodeSnippetStatement(""), new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeVariableReferenceExpression("done")), new CodeSnippetStatement(""), new CodeStatement[] {
                                                                    new CodeAssignStatement(new CodeVariableReferenceExpression("done"), new CodePrimitiveExpression(true)),
                                                                    new CodeCommentStatement(new CodeComment("if we\'re on a valid symbol", false)),
                                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.TableTokenizerEnumerator")), "ErrorSymbol"), CodeBinaryOperatorType.LessThan, new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), "SymbolId")), new CodeStatement[] {
                                                                                new CodeCommentStatement(new CodeComment("get the block end for our symbol", false)),
                                                                                new CodeVariableDeclarationStatement(new CodeTypeReference("System.String"), "be", new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_blockEnds"), new CodeExpression[] {
                                                                                                new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), "SymbolId")})),
                                                                                new CodeCommentStatement(new CodeComment("if it\'s valid", false)),
                                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodePrimitiveExpression(null), CodeBinaryOperatorType.ValueEquality, new CodeVariableReferenceExpression("be"))), CodeBinaryOperatorType.BooleanAnd, new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.ValueEquality, new CodePropertyReferenceExpression(new CodeVariableReferenceExpression("be"), "Length")))), new CodeStatement[] {
                                                                                            new CodeCommentStatement(new CodeComment("read until we find it or end of input", false)),
                                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_TryReadUntilBlockEnd"), new CodeExpression[] {
                                                                                                                new CodeVariableReferenceExpression("be")})), new CodeStatement[] {
                                                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), "SymbolId"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.TableTokenizerEnumerator")), "ErrorSymbol"))}, new CodeStatement[0])}, new CodeStatement[0]),
                                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.TableTokenizerEnumerator")), "ErrorSymbol"), CodeBinaryOperatorType.LessThan, new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), "SymbolId")), CodeBinaryOperatorType.BooleanAnd, new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_nodeFlags"), new CodeExpression[] {
                                                                                                                new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), "SymbolId")}), CodeBinaryOperatorType.BitwiseAnd, new CodePrimitiveExpression(1))))), new CodeStatement[] {
                                                                                            new CodeCommentStatement(new CodeComment("update the cursor position and lex the next input, skipping this one", false)),
                                                                                            new CodeAssignStatement(new CodeVariableReferenceExpression("done"), new CodePrimitiveExpression(false)),
                                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), "Line"), new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line")),
                                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), "Column"), new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column")),
                                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), "Position"), new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_position")),
                                                                                            new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_buffer"), "Clear"), new CodeExpression[0])),
                                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), "SymbolId"), new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_Lex"), new CodeExpression[0]))}, new CodeStatement[0])}, new CodeStatement[0])}),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), "Value"), new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_buffer"), "ToString"), new CodeExpression[0])),
                                                        new CodeCommentStatement(new CodeComment("update our state if we hit the end", false)),
                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_EosSymbol"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), "SymbolId")), new CodeStatement[] {
                                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_AfterEnd"))}, new CodeStatement[0]),
                                                        new CodeMethodReturnStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_AfterEnd"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"))))}, new CodeTypeReference[0], new CodeTypeReference("System.Collections.IEnumerator"), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberMethod(new CodeTypeReference("System.Void"), "Dispose", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                        new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "Dispose"), new CodeExpression[0])),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_Disposed"))}, new CodeTypeReference[0], new CodeTypeReference("IDisposable"), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberMethod(new CodeTypeReference("System.Boolean"), "_MoveNextInput", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                        new CodeConditionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "MoveNext"), new CodeExpression[0]), new CodeStatement[] {
                                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_BeforeBegin"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"))), new CodeStatement[] {
                                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_position"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_position"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression('\n'), CodeBinaryOperatorType.ValueEquality, new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "Current")), new CodeStatement[] {
                                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), new CodePrimitiveExpression(1)),
                                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1)))}, new CodeStatement[] {
                                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression('\t'), CodeBinaryOperatorType.ValueEquality, new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "Current")), new CodeStatement[] {
                                                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), CodeBinaryOperatorType.Add, new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_TabWidth")))}, new CodeStatement[] {
                                                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1)))})})}, new CodeStatement[] {
                                                                                new CodeCommentStatement(new CodeComment("corner case for first move", false)),
                                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression('\n'), CodeBinaryOperatorType.ValueEquality, new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "Current")), new CodeStatement[] {
                                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), new CodePrimitiveExpression(1)),
                                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1)))}, new CodeStatement[] {
                                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression('\t'), CodeBinaryOperatorType.ValueEquality, new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "Current")), new CodeStatement[] {
                                                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), CodeBinaryOperatorType.Add, new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_TabWidth"), CodeBinaryOperatorType.Subtract, new CodePrimitiveExpression(1))))}, new CodeStatement[0])})}),
                                                                    new CodeMethodReturnStatement(new CodePrimitiveExpression(true))}, new CodeStatement[0]),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_InnerFinished")),
                                                        new CodeMethodReturnStatement(new CodePrimitiveExpression(false))}, new CodeTypeReference[0], null, new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("moves to the next position, updates the state accordingly, and tracks the cursor " +
                                                                    "position", false))}, new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberMethod(new CodeTypeReference("System.Boolean"), "_TryReadUntil", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[] {
                                                        new CodeParameterDeclarationExpression(new CodeTypeReference("System.Char"), "character")}, new CodeStatement[] {
                                                        new CodeVariableDeclarationStatement(new CodeTypeReference("System.Char"), "ch", new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "Current")),
                                                        new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_buffer"), "Append"), new CodeExpression[] {
                                                                        new CodeVariableReferenceExpression("ch")})),
                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("ch"), CodeBinaryOperatorType.ValueEquality, new CodeArgumentReferenceExpression("character")), new CodeStatement[] {
                                                                    new CodeMethodReturnStatement(new CodePrimitiveExpression(true))}, new CodeStatement[0]),
                                                        new CodeIterationStatement(new CodeSnippetStatement(""), new CodeBinaryOperatorExpression(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_MoveNextInput"), new CodeExpression[0]), CodeBinaryOperatorType.BooleanAnd, new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "Current"), CodeBinaryOperatorType.ValueEquality, new CodeArgumentReferenceExpression("character")))), new CodeSnippetStatement(""), new CodeStatement[] {
                                                                    new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_buffer"), "Append"), new CodeExpression[] {
                                                                                    new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "Current")}))}),
                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_InnerFinished"))), new CodeStatement[] {
                                                                    new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_buffer"), "Append"), new CodeExpression[] {
                                                                                    new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "Current")})),
                                                                    new CodeMethodReturnStatement(new CodeBinaryOperatorExpression(new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "Current"), CodeBinaryOperatorType.ValueEquality, new CodeArgumentReferenceExpression("character")))}, new CodeStatement[0]),
                                                        new CodeMethodReturnStatement(new CodePrimitiveExpression(false))}, new CodeTypeReference[0], null, new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("reads until the specified character, consuming it, returning false if it wasn\'t f" +
                                                                    "ound", false))}, new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberMethod(new CodeTypeReference("System.Boolean"), "_TryReadUntilBlockEnd", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[] {
                                                        new CodeParameterDeclarationExpression(new CodeTypeReference("System.String"), "blockEnd")}, new CodeStatement[] {
                                                        new CodeIterationStatement(new CodeSnippetStatement(""), new CodeBinaryOperatorExpression(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_InnerFinished"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"))), CodeBinaryOperatorType.BooleanAnd, new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_TryReadUntil"), new CodeExpression[] {
                                                                            new CodeIndexerExpression(new CodeArgumentReferenceExpression("blockEnd"), new CodeExpression[] {
                                                                                        new CodePrimitiveExpression(0)})})), new CodeSnippetStatement(""), new CodeStatement[] {
                                                                    new CodeVariableDeclarationStatement(new CodeTypeReference("System.Boolean"), "found", new CodePrimitiveExpression(true)),
                                                                    new CodeIterationStatement(new CodeVariableDeclarationStatement(new CodeTypeReference("System.Int32"), "i", new CodePrimitiveExpression(1)), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("found"), CodeBinaryOperatorType.BooleanAnd, new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.LessThan, new CodePropertyReferenceExpression(new CodeArgumentReferenceExpression("blockEnd"), "Length"))), new CodeAssignStatement(new CodeVariableReferenceExpression("i"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))), new CodeStatement[] {
                                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_MoveNextInput"), new CodeExpression[0]), CodeBinaryOperatorType.BooleanOr, new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "Current"), CodeBinaryOperatorType.ValueEquality, new CodeIndexerExpression(new CodeArgumentReferenceExpression("blockEnd"), new CodeExpression[] {
                                                                                                                new CodeVariableReferenceExpression("i")}))))), new CodeStatement[] {
                                                                                            new CodeAssignStatement(new CodeVariableReferenceExpression("found"), new CodePrimitiveExpression(false))}, new CodeStatement[] {
                                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_InnerFinished"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"))), new CodeStatement[] {
                                                                                                        new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_buffer"), "Append"), new CodeExpression[] {
                                                                                                                        new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "Current")}))}, new CodeStatement[0])})}),
                                                                    new CodeConditionStatement(new CodeVariableReferenceExpression("found"), new CodeStatement[] {
                                                                                new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_MoveNextInput"), new CodeExpression[0])),
                                                                                new CodeMethodReturnStatement(new CodePrimitiveExpression(true))}, new CodeStatement[0])}),
                                                        new CodeMethodReturnStatement(new CodePrimitiveExpression(false))}, new CodeTypeReference[0], null, new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("reads until the string is encountered, capturing it.", false))}, new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberMethod(new CodeTypeReference("System.Int32"), "_Lex", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                        new CodeCommentStatement(new CodeComment("our accepting symbol id", false)),
                                                        new CodeVariableDeclarationStatement(new CodeTypeReference("System.Int32"), "acceptSymbolId", null),
                                                        new CodeCommentStatement(new CodeComment("the DFA state we\'re currently in (start at zero)", false)),
                                                        new CodeVariableDeclarationStatement(new CodeTypeReference("System.Int32"), "dfaState", new CodePrimitiveExpression(0)),
                                                        new CodeCommentStatement(new CodeComment("corner case for beginning", false)),
                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_BeforeBegin"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state")), new CodeStatement[] {
                                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_MoveNextInput"), new CodeExpression[0])), new CodeStatement[] {
                                                                                new CodeCommentStatement(new CodeComment("if we\'re on an accepting state, return that", false)),
                                                                                new CodeCommentStatement(new CodeComment("otherwise, error", false)),
                                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("acceptSymbolId"), new CodeFieldReferenceExpression(new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_dfaTable"), new CodeExpression[] {
                                                                                                    new CodeVariableReferenceExpression("dfaState")}), "AcceptSymbolId")),
                                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodePrimitiveExpression(-1), CodeBinaryOperatorType.ValueEquality, new CodeVariableReferenceExpression("acceptSymbolId"))), new CodeStatement[] {
                                                                                            new CodeMethodReturnStatement(new CodeVariableReferenceExpression("acceptSymbolId"))}, new CodeStatement[] {
                                                                                            new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.TableTokenizerEnumerator")), "ErrorSymbol"))})}, new CodeStatement[0]),
                                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_Enumerating"))}, new CodeStatement[] {
                                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_InnerFinished"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state")), CodeBinaryOperatorType.BooleanOr, new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_AfterEnd"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"))), new CodeStatement[] {
                                                                                new CodeCommentStatement(new CodeComment("if we\'re at the end just return the end symbol", false)),
                                                                                new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_EosSymbol"))}, new CodeStatement[0])}),
                                                        new CodeVariableDeclarationStatement(new CodeTypeReference("System.Boolean"), "done", new CodePrimitiveExpression(false)),
                                                        new CodeIterationStatement(new CodeSnippetStatement(""), new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeVariableReferenceExpression("done")), new CodeSnippetStatement(""), new CodeStatement[] {
                                                                    new CodeVariableDeclarationStatement(new CodeTypeReference("System.Int32"), "nextDfaState", new CodePrimitiveExpression(-1)),
                                                                    new CodeCommentStatement(new CodeComment("go through all the transitions", false)),
                                                                    new CodeIterationStatement(new CodeVariableDeclarationStatement(new CodeTypeReference("System.Int32"), "i", new CodePrimitiveExpression(0)), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.LessThan, new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_dfaTable"), new CodeExpression[] {
                                                                                                new CodeVariableReferenceExpression("dfaState")}), "Transitions"), "Length")), new CodeAssignStatement(new CodeVariableReferenceExpression("i"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))), new CodeStatement[] {
                                                                                new CodeVariableDeclarationStatement(new CodeTypeReference("DfaTransitionEntry"), "entry", new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_dfaTable"), new CodeExpression[] {
                                                                                                        new CodeVariableReferenceExpression("dfaState")}), "Transitions"), new CodeExpression[] {
                                                                                                new CodeVariableReferenceExpression("i")})),
                                                                                new CodeVariableDeclarationStatement(new CodeTypeReference("System.Boolean"), "found", new CodePrimitiveExpression(false)),
                                                                                new CodeCommentStatement(new CodeComment("go through all the ranges to see if we matched anything.", false)),
                                                                                new CodeIterationStatement(new CodeVariableDeclarationStatement(new CodeTypeReference("System.Int32"), "j", new CodePrimitiveExpression(0)), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("j"), CodeBinaryOperatorType.LessThan, new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeVariableReferenceExpression("entry"), "PackedRanges"), "Length")), new CodeAssignStatement(new CodeVariableReferenceExpression("j"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("j"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))), new CodeStatement[] {
                                                                                            new CodeVariableDeclarationStatement(new CodeTypeReference("System.Char"), "ch", new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "Current")),
                                                                                            new CodeCommentStatement(new CodeComment("grab our range from the packed ranges into first and last", false)),
                                                                                            new CodeVariableDeclarationStatement(new CodeTypeReference("System.Char"), "first", new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeVariableReferenceExpression("entry"), "PackedRanges"), new CodeExpression[] {
                                                                                                            new CodeVariableReferenceExpression("j")})),
                                                                                            new CodeAssignStatement(new CodeVariableReferenceExpression("j"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("j"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                                            new CodeVariableDeclarationStatement(new CodeTypeReference("System.Char"), "last", new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeVariableReferenceExpression("entry"), "PackedRanges"), new CodeExpression[] {
                                                                                                            new CodeVariableReferenceExpression("j")})),
                                                                                            new CodeCommentStatement(new CodeComment("do a quick search through our ranges", false)),
                                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("ch"), CodeBinaryOperatorType.LessThanOrEqual, new CodeVariableReferenceExpression("last")), new CodeStatement[] {
                                                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("first"), CodeBinaryOperatorType.LessThanOrEqual, new CodeVariableReferenceExpression("ch")), new CodeStatement[] {
                                                                                                                    new CodeAssignStatement(new CodeVariableReferenceExpression("found"), new CodePrimitiveExpression(true))}, new CodeStatement[0]),
                                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("j"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("System.Int32")), "MaxValue"), CodeBinaryOperatorType.Subtract, new CodePrimitiveExpression(1))),
                                                                                                        new CodeCommentStatement(new CodeComment("break", false))}, new CodeStatement[0])}),
                                                                                new CodeConditionStatement(new CodeVariableReferenceExpression("found"), new CodeStatement[] {
                                                                                            new CodeCommentStatement(new CodeComment("set the transition destination", false)),
                                                                                            new CodeAssignStatement(new CodeVariableReferenceExpression("nextDfaState"), new CodeFieldReferenceExpression(new CodeVariableReferenceExpression("entry"), "Destination")),
                                                                                            new CodeAssignStatement(new CodeVariableReferenceExpression("i"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("System.Int32")), "MaxValue"), CodeBinaryOperatorType.Subtract, new CodePrimitiveExpression(1))),
                                                                                            new CodeCommentStatement(new CodeComment("break", false))}, new CodeStatement[0])}),
                                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodePrimitiveExpression(-1), CodeBinaryOperatorType.ValueEquality, new CodeVariableReferenceExpression("nextDfaState"))), new CodeStatement[] {
                                                                                new CodeCommentStatement(new CodeComment("capture our character", false)),
                                                                                new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_buffer"), "Append"), new CodeExpression[] {
                                                                                                new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "Current")})),
                                                                                new CodeCommentStatement(new CodeComment("and iterate to our next state", false)),
                                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("dfaState"), new CodeVariableReferenceExpression("nextDfaState")),
                                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_MoveNextInput"), new CodeExpression[0])), new CodeStatement[] {
                                                                                            new CodeCommentStatement(new CodeComment("end of stream, if we\'re on an accepting state,", false)),
                                                                                            new CodeCommentStatement(new CodeComment("return that, just like we do on empty string", false)),
                                                                                            new CodeCommentStatement(new CodeComment("if we\'re not, then we error, just like before", false)),
                                                                                            new CodeAssignStatement(new CodeVariableReferenceExpression("acceptSymbolId"), new CodeFieldReferenceExpression(new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_dfaTable"), new CodeExpression[] {
                                                                                                                new CodeVariableReferenceExpression("dfaState")}), "AcceptSymbolId")),
                                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodePrimitiveExpression(-1), CodeBinaryOperatorType.ValueEquality, new CodeVariableReferenceExpression("acceptSymbolId"))), new CodeStatement[] {
                                                                                                        new CodeMethodReturnStatement(new CodeVariableReferenceExpression("acceptSymbolId"))}, new CodeStatement[] {
                                                                                                        new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.TableTokenizerEnumerator")), "ErrorSymbol"))})}, new CodeStatement[0])}, new CodeStatement[] {
                                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("done"), new CodePrimitiveExpression(true))}),
                                                                    new CodeCommentStatement(new CodeComment("no valid transition, we can exit the loop", false))}),
                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("acceptSymbolId"), new CodeFieldReferenceExpression(new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_dfaTable"), new CodeExpression[] {
                                                                            new CodeVariableReferenceExpression("dfaState")}), "AcceptSymbolId")),
                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodePrimitiveExpression(-1), CodeBinaryOperatorType.ValueEquality, new CodeVariableReferenceExpression("acceptSymbolId"))), new CodeStatement[] {
                                                                    new CodeMethodReturnStatement(new CodeVariableReferenceExpression("acceptSymbolId"))}, new CodeStatement[] {
                                                                    new CodeCommentStatement(new CodeComment("handle the error condition", false)),
                                                                    new CodeCommentStatement(new CodeComment("we have to capture the input", false)),
                                                                    new CodeCommentStatement(new CodeComment("here and then advance or the", false)),
                                                                    new CodeCommentStatement(new CodeComment("machine will never halt", false)),
                                                                    new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_buffer"), "Append"), new CodeExpression[] {
                                                                                    new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "Current")})),
                                                                    new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_MoveNextInput"), new CodeExpression[0])),
                                                                    new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.TableTokenizerEnumerator")), "ErrorSymbol"))})}, new CodeTypeReference[0], null, new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("lex the next token", false))}, new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberMethod(new CodeTypeReference("System.Void"), "_ThrowDisposed", MemberAttributes.Static, new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                        new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("ObjectDisposedException"), new CodeExpression[] {
                                                                        new CodePrimitiveExpression("TableTokenizerEnumerator")}))}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0])}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0]);
        public static System.CodeDom.CodeCompileUnit CompiledTokenizer = Shared._CompileUnit(new string[0], new CodeNamespace[] {
                    Shared._Namespace("", new CodeNamespaceImport[] {
                                new CodeNamespaceImport("System"),
                                new CodeNamespaceImport("System.Collections.Generic"),
                                new CodeNamespaceImport("System.Text")}, new CodeTypeDeclaration[0], new CodeCommentStatement[0]),
                    Shared._Namespace("Rolex", new CodeNamespaceImport[0], new CodeTypeDeclaration[] {
                                Shared._TypeDeclaration("CompiledTokenizer", true, false, false, false, false, MemberAttributes.Abstract, (((TypeAttributes.AutoLayout | TypeAttributes. AnsiClass) 
                                                | TypeAttributes. Class) 
                                                | TypeAttributes. Abstract), new CodeTypeParameter[0], new CodeTypeReference[] {
                                            new CodeTypeReference("IEnumerable`1", new CodeTypeReference[] {
                                                        new CodeTypeReference("Token", CodeTypeReferenceOptions.GenericTypeParameter)})}, new CodeTypeMember[] {
                                            Shared._MemberField(new CodeTypeReference("IEnumerable`1", new CodeTypeReference[] {
                                                            new CodeTypeReference("System.Char", CodeTypeReferenceOptions.GenericTypeParameter)}), "Input", null, MemberAttributes.Family, new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("the input cursor. We can get this from a string, a char array, or some other sour" +
                                                                    "ce.", false))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberMethod(new CodeTypeReference("IEnumerator`1", new CodeTypeReference[] {
                                                            new CodeTypeReference("Token", CodeTypeReferenceOptions.GenericTypeParameter)}), "GetEnumerator", (MemberAttributes.Abstract | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("just create our table tokenizer\'s enumerator, passing all of the relevant stuff", false)),
                                                        new CodeCommentStatement(new CodeComment("it\'s the real workhorse.", false)),
                                                        new CodeCommentStatement(new CodeComment("<summary>", true)),
                                                        new CodeCommentStatement(new CodeComment("Retrieves an enumerator that can be used to iterate over the tokens", true)),
                                                        new CodeCommentStatement(new CodeComment("</summary>", true)),
                                                        new CodeCommentStatement(new CodeComment("<returns>An enumerator that can be used to iterate over the tokens</returns>", true))}, new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberMethod(new CodeTypeReference("IEnumerator`1", new CodeTypeReference[] {
                                                            new CodeTypeReference("Token", CodeTypeReferenceOptions.GenericTypeParameter)}), "GetEnumerator", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                        new CodeMethodReturnStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "GetEnumerator"), new CodeExpression[0]))}, new CodeTypeReference[0], new CodeTypeReference("IEnumerable`1", new CodeTypeReference[] {
                                                            new CodeTypeReference("Token", CodeTypeReferenceOptions.GenericTypeParameter)}), new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("we have to implement this explicitly for language independence because Slang", false)),
                                                        new CodeCommentStatement(new CodeComment("will not set PublicImplementationTypes on public methods which some languages", false)),
                                                        new CodeCommentStatement(new CodeComment("require", false))}, new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberMethod(new CodeTypeReference("System.Collections.IEnumerator"), "GetEnumerator", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                        new CodeMethodReturnStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "GetEnumerator"), new CodeExpression[0]))}, new CodeTypeReference[0], new CodeTypeReference("System.Collections.IEnumerable"), new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("legacy collection support (required)", false))}, new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._Constructor((MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                        new CodeParameterDeclarationExpression(new CodeTypeReference("IEnumerable`1", new CodeTypeReference[] {
                                                                        new CodeTypeReference("System.Char", CodeTypeReferenceOptions.GenericTypeParameter)}), "input")}, new CodeExpression[0], new CodeExpression[0], new CodeStatement[] {
                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(null), CodeBinaryOperatorType.ValueEquality, new CodeArgumentReferenceExpression("input")), new CodeStatement[] {
                                                                    new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("ArgumentNullException"), new CodeExpression[] {
                                                                                    new CodePrimitiveExpression("input")}))}, new CodeStatement[0]),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "Input"), new CodeArgumentReferenceExpression("input"))}, new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("<summary>", true)),
                                                        new CodeCommentStatement(new CodeComment("Constructs a new instance", true)),
                                                        new CodeCommentStatement(new CodeComment("</summary>", true)),
                                                        new CodeCommentStatement(new CodeComment("<param name=\"input\">The input character sequence</param>", true))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[] {
                                            new CodeCommentStatement(new CodeComment("<summary>", true)),
                                            new CodeCommentStatement(new CodeComment("Reference Implementation for generated shared code", true)),
                                            new CodeCommentStatement(new CodeComment("</summary>", true))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                Shared._TypeDeclaration("CompiledTokenizerEnumerator", true, false, false, false, false, MemberAttributes.Abstract, (((TypeAttributes.AutoLayout | TypeAttributes. AnsiClass) 
                                                | TypeAttributes. Class) 
                                                | TypeAttributes. Abstract), new CodeTypeParameter[0], new CodeTypeReference[] {
                                            new CodeTypeReference("IEnumerator`1", new CodeTypeReference[] {
                                                        new CodeTypeReference("Token", CodeTypeReferenceOptions.GenericTypeParameter)})}, new CodeTypeMember[] {
                                            Shared._MemberField(new CodeTypeReference("System.Int32"), "ErrorSymbol", new CodePrimitiveExpression(-1), (MemberAttributes.Const | MemberAttributes. Public), new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("our error symbol. Always -1", false))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberField(new CodeTypeReference("System.Int32"), "EosSymbol", new CodePrimitiveExpression(-2), (MemberAttributes.Const | MemberAttributes. Family), new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("our end of stream symbol - returned by Lex() and used internally but not reported" +
                                                                    "", false))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberField(new CodeTypeReference("System.Int32"), "Disposed", new CodePrimitiveExpression(-4), (MemberAttributes.Const | MemberAttributes. Family), new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("our disposed state indicator", false))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberField(new CodeTypeReference("System.Int32"), "BeforeBegin", new CodePrimitiveExpression(-3), (MemberAttributes.Const | MemberAttributes. Family), new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("the state indicates the cursor is before the beginning (initial state)", false))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberField(new CodeTypeReference("System.Int32"), "AfterEnd", new CodePrimitiveExpression(-2), (MemberAttributes.Const | MemberAttributes. Family), new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("the state indicates the cursor is after the end", false))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberField(new CodeTypeReference("System.Int32"), "InnerFinished", new CodePrimitiveExpression(-1), (MemberAttributes.Const | MemberAttributes. Family), new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("the state indicates that the inner input enumeration has finished (we still have " +
                                                                    "one more token to report)", false))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberField(new CodeTypeReference("System.Int32"), "Enumerating", new CodePrimitiveExpression(0), (MemberAttributes.Const | MemberAttributes. Family), new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("indicates we\'re currently enumerating. We spend most of our time and effort in th" +
                                                                    "is state", false))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberField(new CodeTypeReference("System.Int32"), "_TabWidth", new CodePrimitiveExpression(4), MemberAttributes.Const, new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("indicates the tab width, used for updating the Column property when we encounter " +
                                                                    "a tab", false))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberField(new CodeTypeReference("IEnumerator`1", new CodeTypeReference[] {
                                                            new CodeTypeReference("System.Char", CodeTypeReferenceOptions.GenericTypeParameter)}), "_input", null, ((MemberAttributes)(0)), new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("the input cursor", false))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberField(new CodeTypeReference("System.Int32"), "State", null, MemberAttributes.Family, new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("our state", false))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberField(new CodeTypeReference("Token"), "_current", null, ((MemberAttributes)(0)), new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("the current token", false))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberField(new CodeTypeReference("StringBuilder"), "ValueBuffer", null, MemberAttributes.Family, new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("a buffer used primarily by Lex() to capture matched input", false))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberField(new CodeTypeReference("System.Int32"), "_line", null, ((MemberAttributes)(0)), new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("the one based line", false))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberField(new CodeTypeReference("System.Int32"), "_column", null, ((MemberAttributes)(0)), new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("the one based column", false))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberField(new CodeTypeReference("System.Int64"), "_position", null, ((MemberAttributes)(0)), new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("the zero based position", false))}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._Constructor(MemberAttributes.Family, new CodeParameterDeclarationExpression[] {
                                                        new CodeParameterDeclarationExpression(new CodeTypeReference("IEnumerator`1", new CodeTypeReference[] {
                                                                        new CodeTypeReference("System.Char", CodeTypeReferenceOptions.GenericTypeParameter)}), "input")}, new CodeExpression[0], new CodeExpression[0], new CodeStatement[] {
                                                        new CodeCommentStatement(new CodeComment("just set up our initial values", false)),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), new CodeArgumentReferenceExpression("input")),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "State"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "BeforeBegin")),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "ValueBuffer"), new CodeObjectCreateExpression(new CodeTypeReference("StringBuilder"), new CodeExpression[0])),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line"), new CodePrimitiveExpression(1)),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), new CodePrimitiveExpression(1)),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_position"), new CodePrimitiveExpression(0))}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberProperty(new CodeTypeReference("System.Char"), "CurrentInput", MemberAttributes.Family, new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                        new CodeMethodReturnStatement(new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "Current"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberProperty(new CodeTypeReference("Token"), "Current", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                        new CodeCommentStatement(new CodeComment("if we\'re not enumerating, find out what\'s going on", false)),
                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "Enumerating"), CodeBinaryOperatorType.GreaterThan, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "State")), new CodeStatement[] {
                                                                    new CodeCommentStatement(new CodeComment("check which state we\'re in, and throw accordingly", false)),
                                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "BeforeBegin"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "State")), new CodeStatement[] {
                                                                                new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("InvalidOperationException"), new CodeExpression[] {
                                                                                                new CodePrimitiveExpression("The cursor is before the start of the enumeration")}))}, new CodeStatement[0]),
                                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "AfterEnd"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "State")), new CodeStatement[] {
                                                                                new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("InvalidOperationException"), new CodeExpression[] {
                                                                                                new CodePrimitiveExpression("The cursor is after the end of the enumeration")}))}, new CodeStatement[0]),
                                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "Disposed"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "State")), new CodeStatement[] {
                                                                                new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "_ThrowDisposed"), new CodeExpression[0]))}, new CodeStatement[0])}, new CodeStatement[0]),
                                                        new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberProperty(new CodeTypeReference("Token"), "Current", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                        new CodeMethodReturnStatement(new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Current"))}, new CodeStatement[0], new CodeTypeReference[0], new CodeTypeReference("IEnumerator`1", new CodeTypeReference[] {
                                                            new CodeTypeReference("Token", CodeTypeReferenceOptions.GenericTypeParameter)}), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberProperty(new CodeTypeReference("System.Object"), "Current", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                        new CodeMethodReturnStatement(new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Current"))}, new CodeStatement[0], new CodeTypeReference[0], new CodeTypeReference("System.Collections.IEnumerator"), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberMethod(new CodeTypeReference("System.Void"), "Reset", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "Disposed"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "State")), new CodeStatement[] {
                                                                    new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "_ThrowDisposed"), new CodeExpression[0]))}, new CodeStatement[0]),
                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "BeforeBegin"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "State"))), new CodeStatement[] {
                                                                    new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "Reset"), new CodeExpression[0]))}, new CodeStatement[0]),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "State"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "BeforeBegin")),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line"), new CodePrimitiveExpression(1)),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), new CodePrimitiveExpression(1)),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_position"), new CodePrimitiveExpression(0))}, new CodeTypeReference[0], new CodeTypeReference("System.Collections.IEnumerator"), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberMethod(new CodeTypeReference("System.Boolean"), "IsHidden", (MemberAttributes.Abstract | MemberAttributes. Family), new CodeParameterDeclarationExpression[] {
                                                        new CodeParameterDeclarationExpression(new CodeTypeReference("System.Int32"), "symbolId")}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberMethod(new CodeTypeReference("System.String"), "GetBlockEnd", (MemberAttributes.Abstract | MemberAttributes. Family), new CodeParameterDeclarationExpression[] {
                                                        new CodeParameterDeclarationExpression(new CodeTypeReference("System.Int32"), "symbolId")}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberMethod(new CodeTypeReference("System.Boolean"), "MoveNext", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                        new CodeCommentStatement(new CodeComment("if we\'re not enumerating", false)),
                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "Enumerating"), CodeBinaryOperatorType.GreaterThan, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "State")), new CodeStatement[] {
                                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "Disposed"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "State")), new CodeStatement[] {
                                                                                new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "_ThrowDisposed"), new CodeExpression[0]))}, new CodeStatement[0]),
                                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "AfterEnd"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "State")), new CodeStatement[] {
                                                                                new CodeMethodReturnStatement(new CodePrimitiveExpression(false))}, new CodeStatement[0])}, new CodeStatement[0]),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), new CodeDefaultValueExpression(new CodeTypeReference("Token"))),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), "Line"), new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line")),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), "Column"), new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column")),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), "Position"), new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_position")),
                                                        new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "ValueBuffer"), "Clear"), new CodeExpression[0])),
                                                        new CodeCommentStatement(new CodeComment("lex the next input", false)),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), "SymbolId"), new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "Lex"), new CodeExpression[0])),
                                                        new CodeCommentStatement(new CodeComment("now look for hiddens and block ends", false)),
                                                        new CodeVariableDeclarationStatement(new CodeTypeReference("System.Boolean"), "done", new CodePrimitiveExpression(false)),
                                                        new CodeIterationStatement(new CodeSnippetStatement(""), new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeVariableReferenceExpression("done")), new CodeSnippetStatement(""), new CodeStatement[] {
                                                                    new CodeAssignStatement(new CodeVariableReferenceExpression("done"), new CodePrimitiveExpression(true)),
                                                                    new CodeCommentStatement(new CodeComment("if we\'re on a valid symbol", false)),
                                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "ErrorSymbol"), CodeBinaryOperatorType.LessThan, new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), "SymbolId")), new CodeStatement[] {
                                                                                new CodeCommentStatement(new CodeComment("get the block end for our symbol", false)),
                                                                                new CodeVariableDeclarationStatement(new CodeTypeReference("System.String"), "be", new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "GetBlockEnd"), new CodeExpression[] {
                                                                                                new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), "SymbolId")})),
                                                                                new CodeCommentStatement(new CodeComment("if it\'s valid", false)),
                                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodePrimitiveExpression(null), CodeBinaryOperatorType.ValueEquality, new CodeVariableReferenceExpression("be"))), CodeBinaryOperatorType.BooleanAnd, new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.ValueEquality, new CodePropertyReferenceExpression(new CodeVariableReferenceExpression("be"), "Length")))), new CodeStatement[] {
                                                                                            new CodeCommentStatement(new CodeComment("read until we find it or end of input", false)),
                                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_TryReadUntilBlockEnd"), new CodeExpression[] {
                                                                                                                new CodeVariableReferenceExpression("be")})), new CodeStatement[] {
                                                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), "SymbolId"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "ErrorSymbol"))}, new CodeStatement[0])}, new CodeStatement[0]),
                                                                                new CodeConditionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "IsHidden"), new CodeExpression[] {
                                                                                                new CodeFieldReferenceExpression(new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Current"), "SymbolId")}), new CodeStatement[] {
                                                                                            new CodeCommentStatement(new CodeComment("update the cursor position and lex the next input, skipping this one", false)),
                                                                                            new CodeAssignStatement(new CodeVariableReferenceExpression("done"), new CodePrimitiveExpression(false)),
                                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), "Line"), new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line")),
                                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), "Column"), new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column")),
                                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), "Position"), new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_position")),
                                                                                            new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "ValueBuffer"), "Clear"), new CodeExpression[0])),
                                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), "SymbolId"), new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "Lex"), new CodeExpression[0]))}, new CodeStatement[0])}, new CodeStatement[0])}),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), "Value"), new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "ValueBuffer"), "ToString"), new CodeExpression[0])),
                                                        new CodeCommentStatement(new CodeComment("update our state if we hit the end", false)),
                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "EosSymbol"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), "SymbolId")), new CodeStatement[] {
                                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "State"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "AfterEnd"))}, new CodeStatement[0]),
                                                        new CodeMethodReturnStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "AfterEnd"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "State"))))}, new CodeTypeReference[0], new CodeTypeReference("System.Collections.IEnumerator"), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberMethod(new CodeTypeReference("System.Void"), "Dispose", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                        new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "Dispose"), new CodeExpression[0])),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "State"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "Disposed"))}, new CodeTypeReference[0], new CodeTypeReference("IDisposable"), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberMethod(new CodeTypeReference("System.Boolean"), "MoveNextInput", MemberAttributes.Family, new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                        new CodeConditionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "MoveNext"), new CodeExpression[0]), new CodeStatement[] {
                                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "BeforeBegin"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "State"))), new CodeStatement[] {
                                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_position"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_position"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression('\n'), CodeBinaryOperatorType.ValueEquality, new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "Current")), new CodeStatement[] {
                                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), new CodePrimitiveExpression(1)),
                                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1)))}, new CodeStatement[] {
                                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression('\t'), CodeBinaryOperatorType.ValueEquality, new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "Current")), new CodeStatement[] {
                                                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), CodeBinaryOperatorType.Add, new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "_TabWidth")))}, new CodeStatement[] {
                                                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1)))})})}, new CodeStatement[] {
                                                                                new CodeCommentStatement(new CodeComment("corner case for first move", false)),
                                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression('\n'), CodeBinaryOperatorType.ValueEquality, new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "Current")), new CodeStatement[] {
                                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), new CodePrimitiveExpression(1)),
                                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1)))}, new CodeStatement[] {
                                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression('\t'), CodeBinaryOperatorType.ValueEquality, new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "Current")), new CodeStatement[] {
                                                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), CodeBinaryOperatorType.Add, new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "_TabWidth"), CodeBinaryOperatorType.Subtract, new CodePrimitiveExpression(1))))}, new CodeStatement[0])})}),
                                                                    new CodeMethodReturnStatement(new CodePrimitiveExpression(true))}, new CodeStatement[0]),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "State"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "InnerFinished")),
                                                        new CodeMethodReturnStatement(new CodePrimitiveExpression(false))}, new CodeTypeReference[0], null, new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("moves to the next position, updates the state accordingly, and tracks the cursor " +
                                                                    "position", false))}, new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberMethod(new CodeTypeReference("System.Boolean"), "_TryReadUntil", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[] {
                                                        new CodeParameterDeclarationExpression(new CodeTypeReference("System.Char"), "character")}, new CodeStatement[] {
                                                        new CodeVariableDeclarationStatement(new CodeTypeReference("System.Char"), "ch", new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "Current")),
                                                        new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "ValueBuffer"), "Append"), new CodeExpression[] {
                                                                        new CodeVariableReferenceExpression("ch")})),
                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("ch"), CodeBinaryOperatorType.ValueEquality, new CodeArgumentReferenceExpression("character")), new CodeStatement[] {
                                                                    new CodeMethodReturnStatement(new CodePrimitiveExpression(true))}, new CodeStatement[0]),
                                                        new CodeIterationStatement(new CodeSnippetStatement(""), new CodeBinaryOperatorExpression(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "MoveNextInput"), new CodeExpression[0]), CodeBinaryOperatorType.BooleanAnd, new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "Current"), CodeBinaryOperatorType.ValueEquality, new CodeArgumentReferenceExpression("character")))), new CodeSnippetStatement(""), new CodeStatement[] {
                                                                    new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "ValueBuffer"), "Append"), new CodeExpression[] {
                                                                                    new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "Current")}))}),
                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "State"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "InnerFinished"))), new CodeStatement[] {
                                                                    new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "ValueBuffer"), "Append"), new CodeExpression[] {
                                                                                    new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "Current")})),
                                                                    new CodeMethodReturnStatement(new CodeBinaryOperatorExpression(new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "Current"), CodeBinaryOperatorType.ValueEquality, new CodeArgumentReferenceExpression("character")))}, new CodeStatement[0]),
                                                        new CodeMethodReturnStatement(new CodePrimitiveExpression(false))}, new CodeTypeReference[0], null, new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("reads until the specified character, consuming it, returning false if it wasn\'t f" +
                                                                    "ound", false))}, new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberMethod(new CodeTypeReference("System.Boolean"), "_TryReadUntilBlockEnd", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[] {
                                                        new CodeParameterDeclarationExpression(new CodeTypeReference("System.String"), "blockEnd")}, new CodeStatement[] {
                                                        new CodeIterationStatement(new CodeSnippetStatement(""), new CodeBinaryOperatorExpression(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "InnerFinished"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "State"))), CodeBinaryOperatorType.BooleanAnd, new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_TryReadUntil"), new CodeExpression[] {
                                                                            new CodeIndexerExpression(new CodeArgumentReferenceExpression("blockEnd"), new CodeExpression[] {
                                                                                        new CodePrimitiveExpression(0)})})), new CodeSnippetStatement(""), new CodeStatement[] {
                                                                    new CodeVariableDeclarationStatement(new CodeTypeReference("System.Boolean"), "found", new CodePrimitiveExpression(true)),
                                                                    new CodeIterationStatement(new CodeVariableDeclarationStatement(new CodeTypeReference("System.Int32"), "i", new CodePrimitiveExpression(1)), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("found"), CodeBinaryOperatorType.BooleanAnd, new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.LessThan, new CodePropertyReferenceExpression(new CodeArgumentReferenceExpression("blockEnd"), "Length"))), new CodeAssignStatement(new CodeVariableReferenceExpression("i"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))), new CodeStatement[] {
                                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "MoveNextInput"), new CodeExpression[0]), CodeBinaryOperatorType.BooleanOr, new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "Current"), CodeBinaryOperatorType.ValueEquality, new CodeIndexerExpression(new CodeArgumentReferenceExpression("blockEnd"), new CodeExpression[] {
                                                                                                                new CodeVariableReferenceExpression("i")}))))), new CodeStatement[] {
                                                                                            new CodeAssignStatement(new CodeVariableReferenceExpression("found"), new CodePrimitiveExpression(false))}, new CodeStatement[] {
                                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "InnerFinished"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "State"))), new CodeStatement[] {
                                                                                                        new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "ValueBuffer"), "Append"), new CodeExpression[] {
                                                                                                                        new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "Current")}))}, new CodeStatement[0])})}),
                                                                    new CodeConditionStatement(new CodeVariableReferenceExpression("found"), new CodeStatement[] {
                                                                                new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "MoveNextInput"), new CodeExpression[0])),
                                                                                new CodeMethodReturnStatement(new CodePrimitiveExpression(true))}, new CodeStatement[0])}),
                                                        new CodeMethodReturnStatement(new CodePrimitiveExpression(false))}, new CodeTypeReference[0], null, new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("reads until the string is encountered, capturing it.", false))}, new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberMethod(new CodeTypeReference("System.Int32"), "Lex", (MemberAttributes.Abstract | MemberAttributes. Family), new CodeParameterDeclarationExpression[0], new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[] {
                                                        new CodeCommentStatement(new CodeComment("lex the next token", false))}, new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberMethod(new CodeTypeReference("System.Void"), "_ThrowDisposed", MemberAttributes.Static, new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                        new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("ObjectDisposedException"), new CodeExpression[] {
                                                                        new CodePrimitiveExpression("CompiledTokenizerEnumerator")}))}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0])}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0]);
        public static System.CodeDom.CodeCompileUnit TableTokenizerTemplate = Shared._CompileUnit(new string[0], new CodeNamespace[] {
                    Shared._Namespace("", new CodeNamespaceImport[] {
                                new CodeNamespaceImport("System.Collections.Generic")}, new CodeTypeDeclaration[0], new CodeCommentStatement[0]),
                    Shared._Namespace("Rolex", new CodeNamespaceImport[0], new CodeTypeDeclaration[] {
                                Shared._TypeDeclaration("TableTokenizerTemplate", true, false, false, false, false, ((MemberAttributes)(0)), TypeAttributes.NotPublic, new CodeTypeParameter[0], new CodeTypeReference[] {
                                            new CodeTypeReference("TableTokenizer")}, new CodeTypeMember[] {
                                            Shared._MemberField(new CodeTypeReference(new CodeTypeReference("DfaEntry"), 1), "DfaTable", null, (MemberAttributes.Static | MemberAttributes. FamilyAndAssembly), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberField(new CodeTypeReference(new CodeTypeReference("System.Int32"), 1), "NodeFlags", null, (MemberAttributes.Static | MemberAttributes. FamilyAndAssembly), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._MemberField(new CodeTypeReference(new CodeTypeReference("System.String"), 1), "BlockEnds", null, (MemberAttributes.Static | MemberAttributes. FamilyAndAssembly), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._Constructor((MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                        new CodeParameterDeclarationExpression(new CodeTypeReference("IEnumerable`1", new CodeTypeReference[] {
                                                                        new CodeTypeReference("System.Char", CodeTypeReferenceOptions.GenericTypeParameter)}), "input")}, new CodeExpression[0], new CodeExpression[] {
                                                        new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.TableTokenizerTemplate")), "DfaTable"),
                                                        new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.TableTokenizerTemplate")), "BlockEnds"),
                                                        new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.TableTokenizerTemplate")), "NodeFlags"),
                                                        new CodeArgumentReferenceExpression("input")}, new CodeStatement[0], new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0])}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0]);
        public static System.CodeDom.CodeCompileUnit CompiledTokenizerTemplate = Shared._CompileUnit(new string[0], new CodeNamespace[] {
                    Shared._Namespace("", new CodeNamespaceImport[] {
                                new CodeNamespaceImport("System"),
                                new CodeNamespaceImport("System.Collections.Generic")}, new CodeTypeDeclaration[0], new CodeCommentStatement[0]),
                    Shared._Namespace("Rolex", new CodeNamespaceImport[0], new CodeTypeDeclaration[] {
                                Shared._TypeDeclaration("CompiledTokenizerTemplate", true, false, false, false, false, ((MemberAttributes)(0)), TypeAttributes.NotPublic, new CodeTypeParameter[0], new CodeTypeReference[] {
                                            new CodeTypeReference("CompiledTokenizer")}, new CodeTypeMember[] {
                                            Shared._MemberMethod(new CodeTypeReference("IEnumerator`1", new CodeTypeReference[] {
                                                            new CodeTypeReference("Token", CodeTypeReferenceOptions.GenericTypeParameter)}), "GetEnumerator", (MemberAttributes.Override | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                        new CodeMethodReturnStatement(new CodeObjectCreateExpression(new CodeTypeReference("CompiledTokenizerEnumeratorTemplate"), new CodeExpression[] {
                                                                        new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "Input"), "GetEnumerator"), new CodeExpression[0])}))}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            Shared._Constructor((MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                        new CodeParameterDeclarationExpression(new CodeTypeReference("IEnumerable`1", new CodeTypeReference[] {
                                                                        new CodeTypeReference("System.Char", CodeTypeReferenceOptions.GenericTypeParameter)}), "input")}, new CodeExpression[0], new CodeExpression[] {
                                                        new CodeArgumentReferenceExpression("input")}, new CodeStatement[0], new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                Shared._TypeDeclaration("CompiledTokenizerEnumeratorTemplate", true, false, false, false, false, ((MemberAttributes)(0)), TypeAttributes.NotPublic, new CodeTypeParameter[0], new CodeTypeReference[] {
                                            new CodeTypeReference("CompiledTokenizerEnumerator")}, new CodeTypeMember[] {
                                            Shared._Constructor((MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                        new CodeParameterDeclarationExpression(new CodeTypeReference("IEnumerator`1", new CodeTypeReference[] {
                                                                        new CodeTypeReference("System.Char", CodeTypeReferenceOptions.GenericTypeParameter)}), "input")}, new CodeExpression[0], new CodeExpression[] {
                                                        new CodeArgumentReferenceExpression("input")}, new CodeStatement[0], new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0])}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0]);
    }
}
