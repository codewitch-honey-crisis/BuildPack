//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Rolex {
    using System.CodeDom;
    using System.Reflection;
    
    internal partial class Deslang {
        private static CodeCompileUnit _CompileUnit(string[] referencedAssemblies, CodeNamespace[] namespaces, CodeAttributeDeclaration[] assemblyCustomAttributes, CodeDirective[] startDirectives, CodeDirective[] endDirectives) {
            CodeCompileUnit result = new CodeCompileUnit();
            result.ReferencedAssemblies.AddRange(referencedAssemblies);
            result.Namespaces.AddRange(namespaces);
            result.AssemblyCustomAttributes.AddRange(assemblyCustomAttributes);
            result.StartDirectives.AddRange(startDirectives);
            result.EndDirectives.AddRange(endDirectives);
            return result;
        }
        private static CodeNamespace _Namespace(string name, CodeNamespaceImport[] imports, CodeTypeDeclaration[] types, CodeCommentStatement[] comments) {
            CodeNamespace result = new CodeNamespace();
            result.Imports.AddRange(imports);
            result.Types.AddRange(types);
            result.Comments.AddRange(comments);
            return result;
        }
        private static CodeTypeDeclaration _TypeDeclaration(
                    string name, 
                    bool isClass, 
                    bool isEnum, 
                    bool isInterface, 
                    bool isStruct, 
                    bool isPartial, 
                    MemberAttributes attributes, 
                    TypeAttributes typeAttributes, 
                    CodeTypeParameter[] typeParameters, 
                    CodeTypeReference[] baseTypes, 
                    CodeTypeMember[] members, 
                    CodeCommentStatement[] comments, 
                    CodeAttributeDeclaration[] customAttributes, 
                    CodeDirective[] startDirectives, 
                    CodeDirective[] endDirectives, 
                    CodeLinePragma linePragma) {
            CodeTypeDeclaration result = new CodeTypeDeclaration(name);
            result.IsClass = isClass;
            result.IsEnum = isEnum;
            result.IsInterface = isInterface;
            result.IsStruct = isStruct;
            result.IsPartial = isPartial;
            result.Attributes = attributes;
            result.TypeAttributes = typeAttributes;
            result.TypeParameters.AddRange(typeParameters);
            result.BaseTypes.AddRange(baseTypes);
            result.Members.AddRange(members);
            result.Comments.AddRange(comments);
            result.CustomAttributes.AddRange(customAttributes);
            result.StartDirectives.AddRange(startDirectives);
            result.EndDirectives.AddRange(endDirectives);
            result.LinePragma = linePragma;
            return result;
        }
        private static CodeMemberField _MemberField(CodeTypeReference type, string name, CodeExpression initExpression, MemberAttributes attributes, CodeCommentStatement[] comments, CodeAttributeDeclaration[] customAttributes, CodeDirective[] startDirectives, CodeDirective[] endDirectives, CodeLinePragma linePragma) {
            CodeMemberField result = new CodeMemberField(type, name);
            result.InitExpression = initExpression;
            result.Attributes = attributes;
            result.Comments.AddRange(comments);
            result.CustomAttributes.AddRange(customAttributes);
            result.StartDirectives.AddRange(startDirectives);
            result.EndDirectives.AddRange(endDirectives);
            result.LinePragma = linePragma;
            return result;
        }
        public static System.CodeDom.CodeCompileUnit Token = Deslang._CompileUnit(new string[0], new System.CodeDom.CodeNamespace[] {
                    Deslang._Namespace("Rolex", new System.CodeDom.CodeNamespaceImport[0], new System.CodeDom.CodeTypeDeclaration[] {
                                Deslang._TypeDeclaration("Token", false, false, false, true, false, ((System.CodeDom.MemberAttributes)(0)), System.Reflection.TypeAttributes.NotPublic, new System.CodeDom.CodeTypeParameter[0], new System.CodeDom.CodeTypeReference[0], new System.CodeDom.CodeTypeMember[] {
                                            Deslang._MemberField(new System.CodeDom.CodeTypeReference("System.Int32"), "Line", null, (System.CodeDom.MemberAttributes.Final | System.CodeDom.MemberAttributes. Public), new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("<summary>", true)),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("Indicates the line where the token occurs", true)),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("</summary>", true))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberField(new System.CodeDom.CodeTypeReference("System.Int32"), "Column", null, (System.CodeDom.MemberAttributes.Final | System.CodeDom.MemberAttributes. Public), new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("<summary>", true)),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("Indicates the column where the token occurs", true)),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("</summary>", true))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberField(new System.CodeDom.CodeTypeReference("System.Int64"), "Position", null, (System.CodeDom.MemberAttributes.Final | System.CodeDom.MemberAttributes. Public), new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("<summary>", true)),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("Indicates the position where the token occurs", true)),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("</summary>", true))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberField(new System.CodeDom.CodeTypeReference("System.Int32"), "SymbolId", null, (System.CodeDom.MemberAttributes.Final | System.CodeDom.MemberAttributes. Public), new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("<summary>", true)),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("Indicates the symbol id or -1 for the error symbol", true)),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("</summary>", true))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberField(new System.CodeDom.CodeTypeReference("System.String"), "Value", null, (System.CodeDom.MemberAttributes.Final | System.CodeDom.MemberAttributes. Public), new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("<summary>", true)),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("Indicates the value of the token", true)),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("</summary>", true))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null)}, new System.CodeDom.CodeCommentStatement[] {
                                            new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("<summary>", true)),
                                            new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("Reference implementation for generated shared code", true)),
                                            new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("</summary>", true))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null)}, new System.CodeDom.CodeCommentStatement[0])}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0]);
        private static CodeConstructor _Constructor(MemberAttributes attributes, CodeParameterDeclarationExpression[] parameters, CodeExpression[] chainedConstructorArgs, CodeExpression[] baseConstructorArgs, CodeStatement[] statements, CodeCommentStatement[] comments, CodeAttributeDeclaration[] customAttributes, CodeDirective[] startDirectives, CodeDirective[] endDirectives, CodeLinePragma linePragma) {
            CodeConstructor result = new CodeConstructor();
            result.Attributes = attributes;
            result.Parameters.AddRange(parameters);
            result.ChainedConstructorArgs.AddRange(chainedConstructorArgs);
            result.BaseConstructorArgs.AddRange(baseConstructorArgs);
            result.Statements.AddRange(statements);
            result.Comments.AddRange(comments);
            result.CustomAttributes.AddRange(customAttributes);
            result.StartDirectives.AddRange(startDirectives);
            result.EndDirectives.AddRange(endDirectives);
            result.LinePragma = linePragma;
            return result;
        }
        private static CodeMemberMethod _MemberMethod(CodeTypeReference returnType, string name, MemberAttributes attributes, CodeParameterDeclarationExpression[] parameters, CodeStatement[] statements, CodeTypeReference[] implementationTypes, CodeTypeReference privateImplementationType, CodeCommentStatement[] comments, CodeAttributeDeclaration[] customAttributes, CodeAttributeDeclaration[] returnTypeCustomAttributes, CodeDirective[] startDirectives, CodeDirective[] endDirectives, CodeLinePragma linePragma) {
            CodeMemberMethod result = new CodeMemberMethod();
            result.ReturnType = returnType;
            result.Name = name;
            result.Attributes = attributes;
            result.Parameters.AddRange(parameters);
            result.Statements.AddRange(statements);
            result.ImplementationTypes.AddRange(implementationTypes);
            result.PrivateImplementationType = privateImplementationType;
            result.Comments.AddRange(comments);
            result.CustomAttributes.AddRange(customAttributes);
            result.ReturnTypeCustomAttributes.AddRange(returnTypeCustomAttributes);
            result.StartDirectives.AddRange(startDirectives);
            result.EndDirectives.AddRange(endDirectives);
            result.LinePragma = linePragma;
            return result;
        }
        private static CodeMemberProperty _MemberProperty(CodeTypeReference type, string name, MemberAttributes attributes, CodeParameterDeclarationExpression[] parameters, CodeStatement[] getStatements, CodeStatement[] setStatements, CodeTypeReference[] implementationTypes, CodeTypeReference privateImplementationType, CodeCommentStatement[] comments, CodeAttributeDeclaration[] customAttributes, CodeDirective[] startDirectives, CodeDirective[] endDirectives, CodeLinePragma linePragma) {
            CodeMemberProperty result = new CodeMemberProperty();
            result.Type = type;
            result.Name = name;
            result.Attributes = attributes;
            result.Parameters.AddRange(parameters);
            result.GetStatements.AddRange(getStatements);
            result.SetStatements.AddRange(setStatements);
            result.ImplementationTypes.AddRange(implementationTypes);
            result.PrivateImplementationType = privateImplementationType;
            result.Comments.AddRange(comments);
            result.CustomAttributes.AddRange(customAttributes);
            result.StartDirectives.AddRange(startDirectives);
            result.EndDirectives.AddRange(endDirectives);
            result.LinePragma = linePragma;
            return result;
        }
        public static System.CodeDom.CodeCompileUnit TableTokenizer = Deslang._CompileUnit(new string[0], new System.CodeDom.CodeNamespace[] {
                    Deslang._Namespace("", new System.CodeDom.CodeNamespaceImport[] {
                                new System.CodeDom.CodeNamespaceImport("System"),
                                new System.CodeDom.CodeNamespaceImport("System.Collections.Generic"),
                                new System.CodeDom.CodeNamespaceImport("System.Text")}, new System.CodeDom.CodeTypeDeclaration[0], new System.CodeDom.CodeCommentStatement[0]),
                    Deslang._Namespace("Rolex", new System.CodeDom.CodeNamespaceImport[0], new System.CodeDom.CodeTypeDeclaration[] {
                                Deslang._TypeDeclaration("DfaEntry", false, false, false, true, false, ((System.CodeDom.MemberAttributes)(0)), System.Reflection.TypeAttributes.NotPublic, new System.CodeDom.CodeTypeParameter[0], new System.CodeDom.CodeTypeReference[0], new System.CodeDom.CodeTypeMember[] {
                                            Deslang._MemberField(new System.CodeDom.CodeTypeReference(new System.CodeDom.CodeTypeReference("DfaTransitionEntry"), 1), "Transitions", null, (System.CodeDom.MemberAttributes.Final | System.CodeDom.MemberAttributes. Public), new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("<summary>", true)),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("The state transitions", true)),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("</summary>", true))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberField(new System.CodeDom.CodeTypeReference("System.Int32"), "AcceptSymbolId", null, (System.CodeDom.MemberAttributes.Final | System.CodeDom.MemberAttributes. Public), new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("<summary>", true)),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("The accept symbol id or -1 for non-accepting", true)),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("</summary>", true))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._Constructor((System.CodeDom.MemberAttributes.Final | System.CodeDom.MemberAttributes. Public), new System.CodeDom.CodeParameterDeclarationExpression[] {
                                                        new System.CodeDom.CodeParameterDeclarationExpression(new System.CodeDom.CodeTypeReference(new System.CodeDom.CodeTypeReference("DfaTransitionEntry"), 1), "transitions"),
                                                        new System.CodeDom.CodeParameterDeclarationExpression(new System.CodeDom.CodeTypeReference("System.Int32"), "acceptSymbolId")}, new System.CodeDom.CodeExpression[0], new System.CodeDom.CodeExpression[0], new System.CodeDom.CodeStatement[] {
                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "Transitions"), new System.CodeDom.CodeArgumentReferenceExpression("transitions")),
                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "AcceptSymbolId"), new System.CodeDom.CodeArgumentReferenceExpression("acceptSymbolId"))}, new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("<summary>", true)),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("Constructs a new instance", true)),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("</summary>", true)),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("<param name=\"transitions\">The state transitions</param>", true)),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("<param name=\"acceptSymbolId\">The accept symbol id</param>", true))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null)}, new System.CodeDom.CodeCommentStatement[] {
                                            new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("<summary>", true)),
                                            new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("Reference implementation for a DfaEntry", true)),
                                            new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("</summary>", true))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                Deslang._TypeDeclaration("DfaTransitionEntry", false, false, false, true, false, ((System.CodeDom.MemberAttributes)(0)), System.Reflection.TypeAttributes.NotPublic, new System.CodeDom.CodeTypeParameter[0], new System.CodeDom.CodeTypeReference[0], new System.CodeDom.CodeTypeMember[] {
                                            Deslang._MemberField(new System.CodeDom.CodeTypeReference(new System.CodeDom.CodeTypeReference("System.Char"), 1), "PackedRanges", null, (System.CodeDom.MemberAttributes.Final | System.CodeDom.MemberAttributes. Public), new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("<summary>", true)),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("The character ranges, packed as adjacent pairs.", true)),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("</summary>", true))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberField(new System.CodeDom.CodeTypeReference("System.Int32"), "Destination", null, (System.CodeDom.MemberAttributes.Final | System.CodeDom.MemberAttributes. Public), new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("<summary>", true)),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("The destination state", true)),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("</summary>", true))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._Constructor((System.CodeDom.MemberAttributes.Final | System.CodeDom.MemberAttributes. Public), new System.CodeDom.CodeParameterDeclarationExpression[] {
                                                        new System.CodeDom.CodeParameterDeclarationExpression(new System.CodeDom.CodeTypeReference(new System.CodeDom.CodeTypeReference("System.Char"), 1), "packedRanges"),
                                                        new System.CodeDom.CodeParameterDeclarationExpression(new System.CodeDom.CodeTypeReference("System.Int32"), "destination")}, new System.CodeDom.CodeExpression[0], new System.CodeDom.CodeExpression[0], new System.CodeDom.CodeStatement[] {
                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "PackedRanges"), new System.CodeDom.CodeArgumentReferenceExpression("packedRanges")),
                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "Destination"), new System.CodeDom.CodeArgumentReferenceExpression("destination"))}, new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("<summary>", true)),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("Constructs a new instance", true)),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("</summary>", true)),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("<param name=\"packedRanges\">The packed character ranges</param>", true)),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("<param name=\"destination\">The destination state</param>", true))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null)}, new System.CodeDom.CodeCommentStatement[] {
                                            new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("<summary>", true)),
                                            new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("The state transition entry", true)),
                                            new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("</summary>", true))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                Deslang._TypeDeclaration("TableTokenizer", true, false, false, false, false, ((System.CodeDom.MemberAttributes)(0)), System.Reflection.TypeAttributes.NotPublic, new System.CodeDom.CodeTypeParameter[0], new System.CodeDom.CodeTypeReference[] {
                                            new System.CodeDom.CodeTypeReference("IEnumerable`1", new System.CodeDom.CodeTypeReference[] {
                                                        new System.CodeDom.CodeTypeReference("Token", System.CodeDom.CodeTypeReferenceOptions.GenericTypeParameter)})}, new System.CodeDom.CodeTypeMember[] {
                                            Deslang._MemberField(new System.CodeDom.CodeTypeReference(new System.CodeDom.CodeTypeReference("DfaEntry"), 1), "_dfaTable", null, ((System.CodeDom.MemberAttributes)(0)), new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("our state table", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberField(new System.CodeDom.CodeTypeReference(new System.CodeDom.CodeTypeReference("System.String"), 1), "_blockEnds", null, ((System.CodeDom.MemberAttributes)(0)), new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("our block ends (specified like comment<blockEnd=\"*/\">=\"/*\" in a rolex spec file)", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberField(new System.CodeDom.CodeTypeReference(new System.CodeDom.CodeTypeReference("System.Int32"), 1), "_nodeFlags", null, ((System.CodeDom.MemberAttributes)(0)), new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("our node flags. Currently only used for the hidden attribute", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberField(new System.CodeDom.CodeTypeReference("IEnumerable`1", new System.CodeDom.CodeTypeReference[] {
                                                            new System.CodeDom.CodeTypeReference("System.Char", System.CodeDom.CodeTypeReferenceOptions.GenericTypeParameter)}), "_input", null, ((System.CodeDom.MemberAttributes)(0)), new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("the input cursor. We can get this from a string, a char array, or some other sour" +
                                                                    "ce.", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberMethod(new System.CodeDom.CodeTypeReference("IEnumerator`1", new System.CodeDom.CodeTypeReference[] {
                                                            new System.CodeDom.CodeTypeReference("Token", System.CodeDom.CodeTypeReferenceOptions.GenericTypeParameter)}), "GetEnumerator", (System.CodeDom.MemberAttributes.Final | System.CodeDom.MemberAttributes. Public), new System.CodeDom.CodeParameterDeclarationExpression[0], new System.CodeDom.CodeStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("just create our table tokenizer\'s enumerator, passing all of the relevant stuff", false)),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("it\'s the real workhorse.", false)),
                                                        new System.CodeDom.CodeMethodReturnStatement(new System.CodeDom.CodeObjectCreateExpression(new System.CodeDom.CodeTypeReference("TableTokenizerEnumerator"), new System.CodeDom.CodeExpression[] {
                                                                        new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_dfaTable"),
                                                                        new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_blockEnds"),
                                                                        new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_nodeFlags"),
                                                                        new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_input"), "GetEnumerator"), new System.CodeDom.CodeExpression[0])}))}, new System.CodeDom.CodeTypeReference[0], null, new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("<summary>", true)),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("Retrieves an enumerator that can be used to iterate over the tokens", true)),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("</summary>", true)),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("<returns>An enumerator that can be used to iterate over the tokens</returns>", true))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberMethod(new System.CodeDom.CodeTypeReference("IEnumerator`1", new System.CodeDom.CodeTypeReference[] {
                                                            new System.CodeDom.CodeTypeReference("Token", System.CodeDom.CodeTypeReferenceOptions.GenericTypeParameter)}), "GetEnumerator", ((System.CodeDom.MemberAttributes)(0)), new System.CodeDom.CodeParameterDeclarationExpression[0], new System.CodeDom.CodeStatement[] {
                                                        new System.CodeDom.CodeMethodReturnStatement(new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "GetEnumerator"), new System.CodeDom.CodeExpression[0]))}, new System.CodeDom.CodeTypeReference[0], new System.CodeDom.CodeTypeReference("IEnumerable`1", new System.CodeDom.CodeTypeReference[] {
                                                            new System.CodeDom.CodeTypeReference("Token", System.CodeDom.CodeTypeReferenceOptions.GenericTypeParameter)}), new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("we have to implement this explicitly for language independence because Slang", false)),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("will not set PublicImplementationTypes on public methods which some languages", false)),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("require", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberMethod(new System.CodeDom.CodeTypeReference("System.Collections.IEnumerator"), "GetEnumerator", ((System.CodeDom.MemberAttributes)(0)), new System.CodeDom.CodeParameterDeclarationExpression[0], new System.CodeDom.CodeStatement[] {
                                                        new System.CodeDom.CodeMethodReturnStatement(new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "GetEnumerator"), new System.CodeDom.CodeExpression[0]))}, new System.CodeDom.CodeTypeReference[0], new System.CodeDom.CodeTypeReference("System.Collections.IEnumerable"), new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("legacy collection support (required)", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._Constructor((System.CodeDom.MemberAttributes.Final | System.CodeDom.MemberAttributes. Public), new System.CodeDom.CodeParameterDeclarationExpression[] {
                                                        new System.CodeDom.CodeParameterDeclarationExpression(new System.CodeDom.CodeTypeReference(new System.CodeDom.CodeTypeReference("DfaEntry"), 1), "dfaTable"),
                                                        new System.CodeDom.CodeParameterDeclarationExpression(new System.CodeDom.CodeTypeReference(new System.CodeDom.CodeTypeReference("System.String"), 1), "blockEnds"),
                                                        new System.CodeDom.CodeParameterDeclarationExpression(new System.CodeDom.CodeTypeReference(new System.CodeDom.CodeTypeReference("System.Int32"), 1), "nodeFlags"),
                                                        new System.CodeDom.CodeParameterDeclarationExpression(new System.CodeDom.CodeTypeReference("IEnumerable`1", new System.CodeDom.CodeTypeReference[] {
                                                                        new System.CodeDom.CodeTypeReference("System.Char", System.CodeDom.CodeTypeReferenceOptions.GenericTypeParameter)}), "input")}, new System.CodeDom.CodeExpression[0], new System.CodeDom.CodeExpression[0], new System.CodeDom.CodeStatement[] {
                                                        new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression(null), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeArgumentReferenceExpression("dfaTable")), new System.CodeDom.CodeStatement[] {
                                                                    new System.CodeDom.CodeThrowExceptionStatement(new System.CodeDom.CodeObjectCreateExpression(new System.CodeDom.CodeTypeReference("ArgumentNullException"), new System.CodeDom.CodeExpression[] {
                                                                                    new System.CodeDom.CodePrimitiveExpression("dfaTable")}))}, new System.CodeDom.CodeStatement[0]),
                                                        new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression(null), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeArgumentReferenceExpression("blockEnds")), new System.CodeDom.CodeStatement[] {
                                                                    new System.CodeDom.CodeThrowExceptionStatement(new System.CodeDom.CodeObjectCreateExpression(new System.CodeDom.CodeTypeReference("ArgumentNullException"), new System.CodeDom.CodeExpression[] {
                                                                                    new System.CodeDom.CodePrimitiveExpression("blockEnds")}))}, new System.CodeDom.CodeStatement[0]),
                                                        new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression(null), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeArgumentReferenceExpression("nodeFlags")), new System.CodeDom.CodeStatement[] {
                                                                    new System.CodeDom.CodeThrowExceptionStatement(new System.CodeDom.CodeObjectCreateExpression(new System.CodeDom.CodeTypeReference("ArgumentNullException"), new System.CodeDom.CodeExpression[] {
                                                                                    new System.CodeDom.CodePrimitiveExpression("nodeFlags")}))}, new System.CodeDom.CodeStatement[0]),
                                                        new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression(null), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeArgumentReferenceExpression("input")), new System.CodeDom.CodeStatement[] {
                                                                    new System.CodeDom.CodeThrowExceptionStatement(new System.CodeDom.CodeObjectCreateExpression(new System.CodeDom.CodeTypeReference("ArgumentNullException"), new System.CodeDom.CodeExpression[] {
                                                                                    new System.CodeDom.CodePrimitiveExpression("input")}))}, new System.CodeDom.CodeStatement[0]),
                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_dfaTable"), new System.CodeDom.CodeArgumentReferenceExpression("dfaTable")),
                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_blockEnds"), new System.CodeDom.CodeArgumentReferenceExpression("blockEnds")),
                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_nodeFlags"), new System.CodeDom.CodeArgumentReferenceExpression("nodeFlags")),
                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_input"), new System.CodeDom.CodeArgumentReferenceExpression("input"))}, new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("<summary>", true)),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("Constructs a new instance", true)),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("</summary>", true)),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("<param name=\"dfaTable\">The DFA state table to use</param>", true)),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("<param name=\"blockEnds\">The block ends table</param>", true)),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("<param name=\"nodeFlags\">The node flags table</param>", true)),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("<param name=\"input\">The input character sequence</param>", true))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null)}, new System.CodeDom.CodeCommentStatement[] {
                                            new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("<summary>", true)),
                                            new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("Reference Implementation for generated shared code", true)),
                                            new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("</summary>", true))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                Deslang._TypeDeclaration("TableTokenizerEnumerator", true, false, false, false, false, ((System.CodeDom.MemberAttributes)(0)), System.Reflection.TypeAttributes.NotPublic, new System.CodeDom.CodeTypeParameter[0], new System.CodeDom.CodeTypeReference[] {
                                            new System.CodeDom.CodeTypeReference("IEnumerator`1", new System.CodeDom.CodeTypeReference[] {
                                                        new System.CodeDom.CodeTypeReference("Token", System.CodeDom.CodeTypeReferenceOptions.GenericTypeParameter)})}, new System.CodeDom.CodeTypeMember[] {
                                            Deslang._MemberField(new System.CodeDom.CodeTypeReference("System.Int32"), "ErrorSymbol", new System.CodeDom.CodePrimitiveExpression(-1), (System.CodeDom.MemberAttributes.Const | System.CodeDom.MemberAttributes. Public), new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("our error symbol. Always -1", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberField(new System.CodeDom.CodeTypeReference("System.Int32"), "_EosSymbol", new System.CodeDom.CodePrimitiveExpression(-2), System.CodeDom.MemberAttributes.Const, new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("our end of stream symbol - returned by _Lex() and used internally but not reporte" +
                                                                    "d", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberField(new System.CodeDom.CodeTypeReference("System.Int32"), "_Disposed", new System.CodeDom.CodePrimitiveExpression(-4), System.CodeDom.MemberAttributes.Const, new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("our disposed state indicator", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberField(new System.CodeDom.CodeTypeReference("System.Int32"), "_BeforeBegin", new System.CodeDom.CodePrimitiveExpression(-3), System.CodeDom.MemberAttributes.Const, new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("the state indicates the cursor is before the beginning (initial state)", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberField(new System.CodeDom.CodeTypeReference("System.Int32"), "_AfterEnd", new System.CodeDom.CodePrimitiveExpression(-2), System.CodeDom.MemberAttributes.Const, new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("the state indicates the cursor is after the end", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberField(new System.CodeDom.CodeTypeReference("System.Int32"), "_InnerFinished", new System.CodeDom.CodePrimitiveExpression(-1), System.CodeDom.MemberAttributes.Const, new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("the state indicates that the inner input enumeration has finished (we still have " +
                                                                    "one more token to report)", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberField(new System.CodeDom.CodeTypeReference("System.Int32"), "_Enumerating", new System.CodeDom.CodePrimitiveExpression(0), System.CodeDom.MemberAttributes.Const, new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("indicates we\'re currently enumerating. We spend most of our time and effort in th" +
                                                                    "is state", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberField(new System.CodeDom.CodeTypeReference("System.Int32"), "_TabWidth", new System.CodeDom.CodePrimitiveExpression(4), System.CodeDom.MemberAttributes.Const, new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("indicates the tab width, used for updating the Column property when we encounter " +
                                                                    "a tab", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberField(new System.CodeDom.CodeTypeReference(new System.CodeDom.CodeTypeReference("DfaEntry"), 1), "_dfaTable", null, ((System.CodeDom.MemberAttributes)(0)), new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("the DFA state table to use.", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberField(new System.CodeDom.CodeTypeReference(new System.CodeDom.CodeTypeReference("System.String"), 1), "_blockEnds", null, ((System.CodeDom.MemberAttributes)(0)), new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("the blockEnds to use", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberField(new System.CodeDom.CodeTypeReference(new System.CodeDom.CodeTypeReference("System.Int32"), 1), "_nodeFlags", null, ((System.CodeDom.MemberAttributes)(0)), new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("the nodeFlags to use", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberField(new System.CodeDom.CodeTypeReference("IEnumerator`1", new System.CodeDom.CodeTypeReference[] {
                                                            new System.CodeDom.CodeTypeReference("System.Char", System.CodeDom.CodeTypeReferenceOptions.GenericTypeParameter)}), "_input", null, ((System.CodeDom.MemberAttributes)(0)), new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("the input cursor", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberField(new System.CodeDom.CodeTypeReference("System.Int32"), "_state", null, ((System.CodeDom.MemberAttributes)(0)), new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("our state", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberField(new System.CodeDom.CodeTypeReference("Token"), "_current", null, ((System.CodeDom.MemberAttributes)(0)), new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("the current token", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberField(new System.CodeDom.CodeTypeReference("StringBuilder"), "_buffer", null, ((System.CodeDom.MemberAttributes)(0)), new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("a buffer used primarily by _Lex() to capture matched input", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberField(new System.CodeDom.CodeTypeReference("System.Int32"), "_line", null, ((System.CodeDom.MemberAttributes)(0)), new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("the one based line", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberField(new System.CodeDom.CodeTypeReference("System.Int32"), "_column", null, ((System.CodeDom.MemberAttributes)(0)), new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("the one based column", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberField(new System.CodeDom.CodeTypeReference("System.Int64"), "_position", null, ((System.CodeDom.MemberAttributes)(0)), new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("the zero based position", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._Constructor((System.CodeDom.MemberAttributes.Final | System.CodeDom.MemberAttributes. Public), new System.CodeDom.CodeParameterDeclarationExpression[] {
                                                        new System.CodeDom.CodeParameterDeclarationExpression(new System.CodeDom.CodeTypeReference(new System.CodeDom.CodeTypeReference("DfaEntry"), 1), "dfaTable"),
                                                        new System.CodeDom.CodeParameterDeclarationExpression(new System.CodeDom.CodeTypeReference(new System.CodeDom.CodeTypeReference("System.String"), 1), "blockEnds"),
                                                        new System.CodeDom.CodeParameterDeclarationExpression(new System.CodeDom.CodeTypeReference(new System.CodeDom.CodeTypeReference("System.Int32"), 1), "nodeFlags"),
                                                        new System.CodeDom.CodeParameterDeclarationExpression(new System.CodeDom.CodeTypeReference("IEnumerator`1", new System.CodeDom.CodeTypeReference[] {
                                                                        new System.CodeDom.CodeTypeReference("System.Char", System.CodeDom.CodeTypeReferenceOptions.GenericTypeParameter)}), "input")}, new System.CodeDom.CodeExpression[0], new System.CodeDom.CodeExpression[0], new System.CodeDom.CodeStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("just set up our initial values", false)),
                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_dfaTable"), new System.CodeDom.CodeArgumentReferenceExpression("dfaTable")),
                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_blockEnds"), new System.CodeDom.CodeArgumentReferenceExpression("blockEnds")),
                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_nodeFlags"), new System.CodeDom.CodeArgumentReferenceExpression("nodeFlags")),
                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_input"), new System.CodeDom.CodeArgumentReferenceExpression("input")),
                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_state"), new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_BeforeBegin")),
                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_buffer"), new System.CodeDom.CodeObjectCreateExpression(new System.CodeDom.CodeTypeReference("StringBuilder"), new System.CodeDom.CodeExpression[0])),
                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_line"), new System.CodeDom.CodePrimitiveExpression(1)),
                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_column"), new System.CodeDom.CodePrimitiveExpression(1)),
                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_position"), new System.CodeDom.CodePrimitiveExpression(0))}, new System.CodeDom.CodeCommentStatement[0], new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberProperty(new System.CodeDom.CodeTypeReference("Token"), "Current", (System.CodeDom.MemberAttributes.Final | System.CodeDom.MemberAttributes. Public), new System.CodeDom.CodeParameterDeclarationExpression[0], new System.CodeDom.CodeStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("if we\'re not enumerating, find out what\'s going on", false)),
                                                        new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_Enumerating"), System.CodeDom.CodeBinaryOperatorType.GreaterThan, new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_state")), new System.CodeDom.CodeStatement[] {
                                                                    new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("check which state we\'re in, and throw accordingly", false)),
                                                                    new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_BeforeBegin"), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_state")), new System.CodeDom.CodeStatement[] {
                                                                                new System.CodeDom.CodeThrowExceptionStatement(new System.CodeDom.CodeObjectCreateExpression(new System.CodeDom.CodeTypeReference("InvalidOperationException"), new System.CodeDom.CodeExpression[] {
                                                                                                new System.CodeDom.CodePrimitiveExpression("The cursor is before the start of the enumeration")}))}, new System.CodeDom.CodeStatement[0]),
                                                                    new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_AfterEnd"), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_state")), new System.CodeDom.CodeStatement[] {
                                                                                new System.CodeDom.CodeThrowExceptionStatement(new System.CodeDom.CodeObjectCreateExpression(new System.CodeDom.CodeTypeReference("InvalidOperationException"), new System.CodeDom.CodeExpression[] {
                                                                                                new System.CodeDom.CodePrimitiveExpression("The cursor is after the end of the enumeration")}))}, new System.CodeDom.CodeStatement[0]),
                                                                    new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_Disposed"), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_state")), new System.CodeDom.CodeStatement[] {
                                                                                new System.CodeDom.CodeExpressionStatement(new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_ThrowDisposed"), new System.CodeDom.CodeExpression[0]))}, new System.CodeDom.CodeStatement[0])}, new System.CodeDom.CodeStatement[0]),
                                                        new System.CodeDom.CodeMethodReturnStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_current"))}, new System.CodeDom.CodeStatement[0], new System.CodeDom.CodeTypeReference[0], null, new System.CodeDom.CodeCommentStatement[0], new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberProperty(new System.CodeDom.CodeTypeReference("Token"), "Current", ((System.CodeDom.MemberAttributes)(0)), new System.CodeDom.CodeParameterDeclarationExpression[0], new System.CodeDom.CodeStatement[] {
                                                        new System.CodeDom.CodeMethodReturnStatement(new System.CodeDom.CodePropertyReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "Current"))}, new System.CodeDom.CodeStatement[0], new System.CodeDom.CodeTypeReference[0], new System.CodeDom.CodeTypeReference("IEnumerator`1", new System.CodeDom.CodeTypeReference[] {
                                                            new System.CodeDom.CodeTypeReference("Token", System.CodeDom.CodeTypeReferenceOptions.GenericTypeParameter)}), new System.CodeDom.CodeCommentStatement[0], new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberProperty(new System.CodeDom.CodeTypeReference("System.Object"), "Current", ((System.CodeDom.MemberAttributes)(0)), new System.CodeDom.CodeParameterDeclarationExpression[0], new System.CodeDom.CodeStatement[] {
                                                        new System.CodeDom.CodeMethodReturnStatement(new System.CodeDom.CodePropertyReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "Current"))}, new System.CodeDom.CodeStatement[0], new System.CodeDom.CodeTypeReference[0], new System.CodeDom.CodeTypeReference("System.Collections.IEnumerator"), new System.CodeDom.CodeCommentStatement[0], new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberMethod(new System.CodeDom.CodeTypeReference("System.Void"), "Reset", ((System.CodeDom.MemberAttributes)(0)), new System.CodeDom.CodeParameterDeclarationExpression[0], new System.CodeDom.CodeStatement[] {
                                                        new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_Disposed"), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_state")), new System.CodeDom.CodeStatement[] {
                                                                    new System.CodeDom.CodeExpressionStatement(new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_ThrowDisposed"), new System.CodeDom.CodeExpression[0]))}, new System.CodeDom.CodeStatement[0]),
                                                        new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression(false), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_BeforeBegin"), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_state"))), new System.CodeDom.CodeStatement[] {
                                                                    new System.CodeDom.CodeExpressionStatement(new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_input"), "Reset"), new System.CodeDom.CodeExpression[0]))}, new System.CodeDom.CodeStatement[0]),
                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_state"), new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_BeforeBegin")),
                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_line"), new System.CodeDom.CodePrimitiveExpression(1)),
                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_column"), new System.CodeDom.CodePrimitiveExpression(1)),
                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_position"), new System.CodeDom.CodePrimitiveExpression(0))}, new System.CodeDom.CodeTypeReference[0], new System.CodeDom.CodeTypeReference("System.Collections.IEnumerator"), new System.CodeDom.CodeCommentStatement[0], new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberMethod(new System.CodeDom.CodeTypeReference("System.Boolean"), "MoveNext", ((System.CodeDom.MemberAttributes)(0)), new System.CodeDom.CodeParameterDeclarationExpression[0], new System.CodeDom.CodeStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("if we\'re not enumerating", false)),
                                                        new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_Enumerating"), System.CodeDom.CodeBinaryOperatorType.GreaterThan, new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_state")), new System.CodeDom.CodeStatement[] {
                                                                    new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_Disposed"), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_state")), new System.CodeDom.CodeStatement[] {
                                                                                new System.CodeDom.CodeExpressionStatement(new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_ThrowDisposed"), new System.CodeDom.CodeExpression[0]))}, new System.CodeDom.CodeStatement[0]),
                                                                    new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_AfterEnd"), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_state")), new System.CodeDom.CodeStatement[] {
                                                                                new System.CodeDom.CodeMethodReturnStatement(new System.CodeDom.CodePrimitiveExpression(false))}, new System.CodeDom.CodeStatement[0])}, new System.CodeDom.CodeStatement[0]),
                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_current"), new System.CodeDom.CodeDefaultValueExpression(new System.CodeDom.CodeTypeReference("Token"))),
                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_current"), "Line"), new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_line")),
                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_current"), "Column"), new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_column")),
                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_current"), "Position"), new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_position")),
                                                        new System.CodeDom.CodeExpressionStatement(new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_buffer"), "Clear"), new System.CodeDom.CodeExpression[0])),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("lex the next input", false)),
                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_current"), "SymbolId"), new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_Lex"), new System.CodeDom.CodeExpression[0])),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("now look for hiddens and block ends", false)),
                                                        new System.CodeDom.CodeVariableDeclarationStatement(new System.CodeDom.CodeTypeReference("System.Boolean"), "done", new System.CodeDom.CodePrimitiveExpression(false)),
                                                        new System.CodeDom.CodeIterationStatement(new System.CodeDom.CodeSnippetStatement(""), new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression(false), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeVariableReferenceExpression("done")), new System.CodeDom.CodeSnippetStatement(""), new System.CodeDom.CodeStatement[] {
                                                                    new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeVariableReferenceExpression("done"), new System.CodeDom.CodePrimitiveExpression(true)),
                                                                    new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("if we\'re on a valid symbol", false)),
                                                                    new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.TableTokenizerEnumerator")), "ErrorSymbol"), System.CodeDom.CodeBinaryOperatorType.LessThan, new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_current"), "SymbolId")), new System.CodeDom.CodeStatement[] {
                                                                                new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("get the block end for our symbol", false)),
                                                                                new System.CodeDom.CodeVariableDeclarationStatement(new System.CodeDom.CodeTypeReference("System.String"), "be", new System.CodeDom.CodeArrayIndexerExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_blockEnds"), new System.CodeDom.CodeExpression[] {
                                                                                                new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_current"), "SymbolId")})),
                                                                                new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("if it\'s valid", false)),
                                                                                new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression(false), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression(null), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeVariableReferenceExpression("be"))), System.CodeDom.CodeBinaryOperatorType.BooleanAnd, new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression(false), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression(0), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodePropertyReferenceExpression(new System.CodeDom.CodeVariableReferenceExpression("be"), "Length")))), new System.CodeDom.CodeStatement[] {
                                                                                            new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("read until we find it or end of input", false)),
                                                                                            new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression(false), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_TryReadUntilBlockEnd"), new System.CodeDom.CodeExpression[] {
                                                                                                                new System.CodeDom.CodeVariableReferenceExpression("be")})), new System.CodeDom.CodeStatement[] {
                                                                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_current"), "SymbolId"), new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.TableTokenizerEnumerator")), "ErrorSymbol"))}, new System.CodeDom.CodeStatement[0])}, new System.CodeDom.CodeStatement[0]),
                                                                                new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.TableTokenizerEnumerator")), "ErrorSymbol"), System.CodeDom.CodeBinaryOperatorType.LessThan, new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_current"), "SymbolId")), System.CodeDom.CodeBinaryOperatorType.BooleanAnd, new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression(false), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression(0), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeArrayIndexerExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_nodeFlags"), new System.CodeDom.CodeExpression[] {
                                                                                                                new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_current"), "SymbolId")}), System.CodeDom.CodeBinaryOperatorType.BitwiseAnd, new System.CodeDom.CodePrimitiveExpression(1))))), new System.CodeDom.CodeStatement[] {
                                                                                            new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("update the cursor position and lex the next input, skipping this one", false)),
                                                                                            new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeVariableReferenceExpression("done"), new System.CodeDom.CodePrimitiveExpression(false)),
                                                                                            new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_current"), "Line"), new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_line")),
                                                                                            new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_current"), "Column"), new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_column")),
                                                                                            new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_current"), "Position"), new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_position")),
                                                                                            new System.CodeDom.CodeExpressionStatement(new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_buffer"), "Clear"), new System.CodeDom.CodeExpression[0])),
                                                                                            new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_current"), "SymbolId"), new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_Lex"), new System.CodeDom.CodeExpression[0]))}, new System.CodeDom.CodeStatement[0])}, new System.CodeDom.CodeStatement[0])}),
                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_current"), "Value"), new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_buffer"), "ToString"), new System.CodeDom.CodeExpression[0])),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("update our state if we hit the end", false)),
                                                        new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_EosSymbol"), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_current"), "SymbolId")), new System.CodeDom.CodeStatement[] {
                                                                    new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_state"), new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_AfterEnd"))}, new System.CodeDom.CodeStatement[0]),
                                                        new System.CodeDom.CodeMethodReturnStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression(false), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_AfterEnd"), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_state"))))}, new System.CodeDom.CodeTypeReference[0], new System.CodeDom.CodeTypeReference("System.Collections.IEnumerator"), new System.CodeDom.CodeCommentStatement[0], new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberMethod(new System.CodeDom.CodeTypeReference("System.Void"), "Dispose", ((System.CodeDom.MemberAttributes)(0)), new System.CodeDom.CodeParameterDeclarationExpression[0], new System.CodeDom.CodeStatement[] {
                                                        new System.CodeDom.CodeExpressionStatement(new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_input"), "Dispose"), new System.CodeDom.CodeExpression[0])),
                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_state"), new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_Disposed"))}, new System.CodeDom.CodeTypeReference[0], new System.CodeDom.CodeTypeReference("IDisposable"), new System.CodeDom.CodeCommentStatement[0], new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberMethod(new System.CodeDom.CodeTypeReference("System.Boolean"), "_MoveNextInput", ((System.CodeDom.MemberAttributes)(0)), new System.CodeDom.CodeParameterDeclarationExpression[0], new System.CodeDom.CodeStatement[] {
                                                        new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_input"), "MoveNext"), new System.CodeDom.CodeExpression[0]), new System.CodeDom.CodeStatement[] {
                                                                    new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression(false), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_BeforeBegin"), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_state"))), new System.CodeDom.CodeStatement[] {
                                                                                new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_position"), new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_position"), System.CodeDom.CodeBinaryOperatorType.Add, new System.CodeDom.CodePrimitiveExpression(1))),
                                                                                new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression('\n'), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodePropertyReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_input"), "Current")), new System.CodeDom.CodeStatement[] {
                                                                                            new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_column"), new System.CodeDom.CodePrimitiveExpression(1)),
                                                                                            new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_line"), new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_line"), System.CodeDom.CodeBinaryOperatorType.Add, new System.CodeDom.CodePrimitiveExpression(1)))}, new System.CodeDom.CodeStatement[] {
                                                                                            new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression('\t'), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodePropertyReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_input"), "Current")), new System.CodeDom.CodeStatement[] {
                                                                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_column"), new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_column"), System.CodeDom.CodeBinaryOperatorType.Add, new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_TabWidth")))}, new System.CodeDom.CodeStatement[] {
                                                                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_column"), new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_column"), System.CodeDom.CodeBinaryOperatorType.Add, new System.CodeDom.CodePrimitiveExpression(1)))})})}, new System.CodeDom.CodeStatement[] {
                                                                                new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("corner case for first move", false)),
                                                                                new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression('\n'), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodePropertyReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_input"), "Current")), new System.CodeDom.CodeStatement[] {
                                                                                            new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_column"), new System.CodeDom.CodePrimitiveExpression(1)),
                                                                                            new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_line"), new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_line"), System.CodeDom.CodeBinaryOperatorType.Add, new System.CodeDom.CodePrimitiveExpression(1)))}, new System.CodeDom.CodeStatement[] {
                                                                                            new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression('\t'), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodePropertyReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_input"), "Current")), new System.CodeDom.CodeStatement[] {
                                                                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_column"), new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_column"), System.CodeDom.CodeBinaryOperatorType.Add, new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_TabWidth"), System.CodeDom.CodeBinaryOperatorType.Subtract, new System.CodeDom.CodePrimitiveExpression(1))))}, new System.CodeDom.CodeStatement[0])})}),
                                                                    new System.CodeDom.CodeMethodReturnStatement(new System.CodeDom.CodePrimitiveExpression(true))}, new System.CodeDom.CodeStatement[0]),
                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_state"), new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_InnerFinished")),
                                                        new System.CodeDom.CodeMethodReturnStatement(new System.CodeDom.CodePrimitiveExpression(false))}, new System.CodeDom.CodeTypeReference[0], null, new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("moves to the next position, updates the state accordingly, and tracks the cursor " +
                                                                    "position", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberMethod(new System.CodeDom.CodeTypeReference("System.Boolean"), "_TryReadUntil", ((System.CodeDom.MemberAttributes)(0)), new System.CodeDom.CodeParameterDeclarationExpression[] {
                                                        new System.CodeDom.CodeParameterDeclarationExpression(new System.CodeDom.CodeTypeReference("System.Char"), "character")}, new System.CodeDom.CodeStatement[] {
                                                        new System.CodeDom.CodeVariableDeclarationStatement(new System.CodeDom.CodeTypeReference("System.Char"), "ch", new System.CodeDom.CodePropertyReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_input"), "Current")),
                                                        new System.CodeDom.CodeExpressionStatement(new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_buffer"), "Append"), new System.CodeDom.CodeExpression[] {
                                                                        new System.CodeDom.CodeVariableReferenceExpression("ch")})),
                                                        new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeVariableReferenceExpression("ch"), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeArgumentReferenceExpression("character")), new System.CodeDom.CodeStatement[] {
                                                                    new System.CodeDom.CodeMethodReturnStatement(new System.CodeDom.CodePrimitiveExpression(true))}, new System.CodeDom.CodeStatement[0]),
                                                        new System.CodeDom.CodeIterationStatement(new System.CodeDom.CodeSnippetStatement(""), new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_MoveNextInput"), new System.CodeDom.CodeExpression[0]), System.CodeDom.CodeBinaryOperatorType.BooleanAnd, new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression(false), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePropertyReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_input"), "Current"), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeArgumentReferenceExpression("character")))), new System.CodeDom.CodeSnippetStatement(""), new System.CodeDom.CodeStatement[] {
                                                                    new System.CodeDom.CodeExpressionStatement(new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_buffer"), "Append"), new System.CodeDom.CodeExpression[] {
                                                                                    new System.CodeDom.CodePropertyReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_input"), "Current")}))}),
                                                        new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression(false), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_state"), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_InnerFinished"))), new System.CodeDom.CodeStatement[] {
                                                                    new System.CodeDom.CodeExpressionStatement(new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_buffer"), "Append"), new System.CodeDom.CodeExpression[] {
                                                                                    new System.CodeDom.CodePropertyReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_input"), "Current")})),
                                                                    new System.CodeDom.CodeMethodReturnStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePropertyReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_input"), "Current"), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeArgumentReferenceExpression("character")))}, new System.CodeDom.CodeStatement[0]),
                                                        new System.CodeDom.CodeMethodReturnStatement(new System.CodeDom.CodePrimitiveExpression(false))}, new System.CodeDom.CodeTypeReference[0], null, new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("reads until the specified character, consuming it, returning false if it wasn\'t f" +
                                                                    "ound", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberMethod(new System.CodeDom.CodeTypeReference("System.Boolean"), "_TryReadUntilBlockEnd", ((System.CodeDom.MemberAttributes)(0)), new System.CodeDom.CodeParameterDeclarationExpression[] {
                                                        new System.CodeDom.CodeParameterDeclarationExpression(new System.CodeDom.CodeTypeReference("System.String"), "blockEnd")}, new System.CodeDom.CodeStatement[] {
                                                        new System.CodeDom.CodeIterationStatement(new System.CodeDom.CodeSnippetStatement(""), new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression(false), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_InnerFinished"), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_state"))), System.CodeDom.CodeBinaryOperatorType.BooleanAnd, new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_TryReadUntil"), new System.CodeDom.CodeExpression[] {
                                                                            new System.CodeDom.CodeIndexerExpression(new System.CodeDom.CodeArgumentReferenceExpression("blockEnd"), new System.CodeDom.CodeExpression[] {
                                                                                        new System.CodeDom.CodePrimitiveExpression(0)})})), new System.CodeDom.CodeSnippetStatement(""), new System.CodeDom.CodeStatement[] {
                                                                    new System.CodeDom.CodeVariableDeclarationStatement(new System.CodeDom.CodeTypeReference("System.Boolean"), "found", new System.CodeDom.CodePrimitiveExpression(true)),
                                                                    new System.CodeDom.CodeIterationStatement(new System.CodeDom.CodeVariableDeclarationStatement(new System.CodeDom.CodeTypeReference("System.Int32"), "i", new System.CodeDom.CodePrimitiveExpression(1)), new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeVariableReferenceExpression("found"), System.CodeDom.CodeBinaryOperatorType.BooleanAnd, new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeVariableReferenceExpression("i"), System.CodeDom.CodeBinaryOperatorType.LessThan, new System.CodeDom.CodePropertyReferenceExpression(new System.CodeDom.CodeArgumentReferenceExpression("blockEnd"), "Length"))), new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeVariableReferenceExpression("i"), new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeVariableReferenceExpression("i"), System.CodeDom.CodeBinaryOperatorType.Add, new System.CodeDom.CodePrimitiveExpression(1))), new System.CodeDom.CodeStatement[] {
                                                                                new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression(false), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_MoveNextInput"), new System.CodeDom.CodeExpression[0]), System.CodeDom.CodeBinaryOperatorType.BooleanOr, new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression(false), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePropertyReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_input"), "Current"), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeIndexerExpression(new System.CodeDom.CodeArgumentReferenceExpression("blockEnd"), new System.CodeDom.CodeExpression[] {
                                                                                                                new System.CodeDom.CodeVariableReferenceExpression("i")}))))), new System.CodeDom.CodeStatement[] {
                                                                                            new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeVariableReferenceExpression("found"), new System.CodeDom.CodePrimitiveExpression(false))}, new System.CodeDom.CodeStatement[] {
                                                                                            new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression(false), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_InnerFinished"), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_state"))), new System.CodeDom.CodeStatement[] {
                                                                                                        new System.CodeDom.CodeExpressionStatement(new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_buffer"), "Append"), new System.CodeDom.CodeExpression[] {
                                                                                                                        new System.CodeDom.CodePropertyReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_input"), "Current")}))}, new System.CodeDom.CodeStatement[0])})}),
                                                                    new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeVariableReferenceExpression("found"), new System.CodeDom.CodeStatement[] {
                                                                                new System.CodeDom.CodeExpressionStatement(new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_MoveNextInput"), new System.CodeDom.CodeExpression[0])),
                                                                                new System.CodeDom.CodeMethodReturnStatement(new System.CodeDom.CodePrimitiveExpression(true))}, new System.CodeDom.CodeStatement[0])}),
                                                        new System.CodeDom.CodeMethodReturnStatement(new System.CodeDom.CodePrimitiveExpression(false))}, new System.CodeDom.CodeTypeReference[0], null, new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("reads until the string is encountered, capturing it.", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberMethod(new System.CodeDom.CodeTypeReference("System.Int32"), "_Lex", ((System.CodeDom.MemberAttributes)(0)), new System.CodeDom.CodeParameterDeclarationExpression[0], new System.CodeDom.CodeStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("our accepting symbol id", false)),
                                                        new System.CodeDom.CodeVariableDeclarationStatement(new System.CodeDom.CodeTypeReference("System.Int32"), "acceptSymbolId", null),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("the DFA state we\'re currently in (start at zero)", false)),
                                                        new System.CodeDom.CodeVariableDeclarationStatement(new System.CodeDom.CodeTypeReference("System.Int32"), "dfaState", new System.CodeDom.CodePrimitiveExpression(0)),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("corner case for beginning", false)),
                                                        new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_BeforeBegin"), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_state")), new System.CodeDom.CodeStatement[] {
                                                                    new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression(false), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_MoveNextInput"), new System.CodeDom.CodeExpression[0])), new System.CodeDom.CodeStatement[] {
                                                                                new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("if we\'re on an accepting state, return that", false)),
                                                                                new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("otherwise, error", false)),
                                                                                new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeVariableReferenceExpression("acceptSymbolId"), new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeArrayIndexerExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_dfaTable"), new System.CodeDom.CodeExpression[] {
                                                                                                    new System.CodeDom.CodeVariableReferenceExpression("dfaState")}), "AcceptSymbolId")),
                                                                                new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression(false), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression(-1), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeVariableReferenceExpression("acceptSymbolId"))), new System.CodeDom.CodeStatement[] {
                                                                                            new System.CodeDom.CodeMethodReturnStatement(new System.CodeDom.CodeVariableReferenceExpression("acceptSymbolId"))}, new System.CodeDom.CodeStatement[] {
                                                                                            new System.CodeDom.CodeMethodReturnStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.TableTokenizerEnumerator")), "ErrorSymbol"))})}, new System.CodeDom.CodeStatement[0]),
                                                                    new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_state"), new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_Enumerating"))}, new System.CodeDom.CodeStatement[] {
                                                                    new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_InnerFinished"), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_state")), System.CodeDom.CodeBinaryOperatorType.BooleanOr, new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_AfterEnd"), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_state"))), new System.CodeDom.CodeStatement[] {
                                                                                new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("if we\'re at the end just return the end symbol", false)),
                                                                                new System.CodeDom.CodeMethodReturnStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.TableTokenizerEnumerator")), "_EosSymbol"))}, new System.CodeDom.CodeStatement[0])}),
                                                        new System.CodeDom.CodeVariableDeclarationStatement(new System.CodeDom.CodeTypeReference("System.Boolean"), "done", new System.CodeDom.CodePrimitiveExpression(false)),
                                                        new System.CodeDom.CodeIterationStatement(new System.CodeDom.CodeSnippetStatement(""), new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression(false), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeVariableReferenceExpression("done")), new System.CodeDom.CodeSnippetStatement(""), new System.CodeDom.CodeStatement[] {
                                                                    new System.CodeDom.CodeVariableDeclarationStatement(new System.CodeDom.CodeTypeReference("System.Int32"), "nextDfaState", new System.CodeDom.CodePrimitiveExpression(-1)),
                                                                    new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("go through all the transitions", false)),
                                                                    new System.CodeDom.CodeIterationStatement(new System.CodeDom.CodeVariableDeclarationStatement(new System.CodeDom.CodeTypeReference("System.Int32"), "i", new System.CodeDom.CodePrimitiveExpression(0)), new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeVariableReferenceExpression("i"), System.CodeDom.CodeBinaryOperatorType.LessThan, new System.CodeDom.CodePropertyReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeArrayIndexerExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_dfaTable"), new System.CodeDom.CodeExpression[] {
                                                                                                new System.CodeDom.CodeVariableReferenceExpression("dfaState")}), "Transitions"), "Length")), new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeVariableReferenceExpression("i"), new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeVariableReferenceExpression("i"), System.CodeDom.CodeBinaryOperatorType.Add, new System.CodeDom.CodePrimitiveExpression(1))), new System.CodeDom.CodeStatement[] {
                                                                                new System.CodeDom.CodeVariableDeclarationStatement(new System.CodeDom.CodeTypeReference("DfaTransitionEntry"), "entry", new System.CodeDom.CodeArrayIndexerExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeArrayIndexerExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_dfaTable"), new System.CodeDom.CodeExpression[] {
                                                                                                        new System.CodeDom.CodeVariableReferenceExpression("dfaState")}), "Transitions"), new System.CodeDom.CodeExpression[] {
                                                                                                new System.CodeDom.CodeVariableReferenceExpression("i")})),
                                                                                new System.CodeDom.CodeVariableDeclarationStatement(new System.CodeDom.CodeTypeReference("System.Boolean"), "found", new System.CodeDom.CodePrimitiveExpression(false)),
                                                                                new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("go through all the ranges to see if we matched anything.", false)),
                                                                                new System.CodeDom.CodeIterationStatement(new System.CodeDom.CodeVariableDeclarationStatement(new System.CodeDom.CodeTypeReference("System.Int32"), "j", new System.CodeDom.CodePrimitiveExpression(0)), new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeVariableReferenceExpression("j"), System.CodeDom.CodeBinaryOperatorType.LessThan, new System.CodeDom.CodePropertyReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeVariableReferenceExpression("entry"), "PackedRanges"), "Length")), new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeVariableReferenceExpression("j"), new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeVariableReferenceExpression("j"), System.CodeDom.CodeBinaryOperatorType.Add, new System.CodeDom.CodePrimitiveExpression(1))), new System.CodeDom.CodeStatement[] {
                                                                                            new System.CodeDom.CodeVariableDeclarationStatement(new System.CodeDom.CodeTypeReference("System.Char"), "ch", new System.CodeDom.CodePropertyReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_input"), "Current")),
                                                                                            new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("grab our range from the packed ranges into first and last", false)),
                                                                                            new System.CodeDom.CodeVariableDeclarationStatement(new System.CodeDom.CodeTypeReference("System.Char"), "first", new System.CodeDom.CodeArrayIndexerExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeVariableReferenceExpression("entry"), "PackedRanges"), new System.CodeDom.CodeExpression[] {
                                                                                                            new System.CodeDom.CodeVariableReferenceExpression("j")})),
                                                                                            new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeVariableReferenceExpression("j"), new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeVariableReferenceExpression("j"), System.CodeDom.CodeBinaryOperatorType.Add, new System.CodeDom.CodePrimitiveExpression(1))),
                                                                                            new System.CodeDom.CodeVariableDeclarationStatement(new System.CodeDom.CodeTypeReference("System.Char"), "last", new System.CodeDom.CodeArrayIndexerExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeVariableReferenceExpression("entry"), "PackedRanges"), new System.CodeDom.CodeExpression[] {
                                                                                                            new System.CodeDom.CodeVariableReferenceExpression("j")})),
                                                                                            new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("do a quick search through our ranges", false)),
                                                                                            new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeVariableReferenceExpression("ch"), System.CodeDom.CodeBinaryOperatorType.LessThanOrEqual, new System.CodeDom.CodeVariableReferenceExpression("last")), new System.CodeDom.CodeStatement[] {
                                                                                                        new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeVariableReferenceExpression("first"), System.CodeDom.CodeBinaryOperatorType.LessThanOrEqual, new System.CodeDom.CodeVariableReferenceExpression("ch")), new System.CodeDom.CodeStatement[] {
                                                                                                                    new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeVariableReferenceExpression("found"), new System.CodeDom.CodePrimitiveExpression(true))}, new System.CodeDom.CodeStatement[0]),
                                                                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeVariableReferenceExpression("j"), new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("System.Int32")), "MaxValue"), System.CodeDom.CodeBinaryOperatorType.Subtract, new System.CodeDom.CodePrimitiveExpression(1))),
                                                                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("break", false))}, new System.CodeDom.CodeStatement[0])}),
                                                                                new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeVariableReferenceExpression("found"), new System.CodeDom.CodeStatement[] {
                                                                                            new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("set the transition destination", false)),
                                                                                            new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeVariableReferenceExpression("nextDfaState"), new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeVariableReferenceExpression("entry"), "Destination")),
                                                                                            new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeVariableReferenceExpression("i"), new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("System.Int32")), "MaxValue"), System.CodeDom.CodeBinaryOperatorType.Subtract, new System.CodeDom.CodePrimitiveExpression(1))),
                                                                                            new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("break", false))}, new System.CodeDom.CodeStatement[0])}),
                                                                    new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression(false), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression(-1), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeVariableReferenceExpression("nextDfaState"))), new System.CodeDom.CodeStatement[] {
                                                                                new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("capture our character", false)),
                                                                                new System.CodeDom.CodeExpressionStatement(new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_buffer"), "Append"), new System.CodeDom.CodeExpression[] {
                                                                                                new System.CodeDom.CodePropertyReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_input"), "Current")})),
                                                                                new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("and iterate to our next state", false)),
                                                                                new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeVariableReferenceExpression("dfaState"), new System.CodeDom.CodeVariableReferenceExpression("nextDfaState")),
                                                                                new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression(false), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_MoveNextInput"), new System.CodeDom.CodeExpression[0])), new System.CodeDom.CodeStatement[] {
                                                                                            new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("end of stream, if we\'re on an accepting state,", false)),
                                                                                            new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("return that, just like we do on empty string", false)),
                                                                                            new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("if we\'re not, then we error, just like before", false)),
                                                                                            new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeVariableReferenceExpression("acceptSymbolId"), new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeArrayIndexerExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_dfaTable"), new System.CodeDom.CodeExpression[] {
                                                                                                                new System.CodeDom.CodeVariableReferenceExpression("dfaState")}), "AcceptSymbolId")),
                                                                                            new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression(false), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression(-1), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeVariableReferenceExpression("acceptSymbolId"))), new System.CodeDom.CodeStatement[] {
                                                                                                        new System.CodeDom.CodeMethodReturnStatement(new System.CodeDom.CodeVariableReferenceExpression("acceptSymbolId"))}, new System.CodeDom.CodeStatement[] {
                                                                                                        new System.CodeDom.CodeMethodReturnStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.TableTokenizerEnumerator")), "ErrorSymbol"))})}, new System.CodeDom.CodeStatement[0])}, new System.CodeDom.CodeStatement[] {
                                                                                new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeVariableReferenceExpression("done"), new System.CodeDom.CodePrimitiveExpression(true))}),
                                                                    new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("no valid transition, we can exit the loop", false))}),
                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeVariableReferenceExpression("acceptSymbolId"), new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeArrayIndexerExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_dfaTable"), new System.CodeDom.CodeExpression[] {
                                                                            new System.CodeDom.CodeVariableReferenceExpression("dfaState")}), "AcceptSymbolId")),
                                                        new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression(false), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression(-1), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeVariableReferenceExpression("acceptSymbolId"))), new System.CodeDom.CodeStatement[] {
                                                                    new System.CodeDom.CodeMethodReturnStatement(new System.CodeDom.CodeVariableReferenceExpression("acceptSymbolId"))}, new System.CodeDom.CodeStatement[] {
                                                                    new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("handle the error condition", false)),
                                                                    new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("we have to capture the input", false)),
                                                                    new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("here and then advance or the", false)),
                                                                    new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("machine will never halt", false)),
                                                                    new System.CodeDom.CodeExpressionStatement(new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_buffer"), "Append"), new System.CodeDom.CodeExpression[] {
                                                                                    new System.CodeDom.CodePropertyReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_input"), "Current")})),
                                                                    new System.CodeDom.CodeExpressionStatement(new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_MoveNextInput"), new System.CodeDom.CodeExpression[0])),
                                                                    new System.CodeDom.CodeMethodReturnStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.TableTokenizerEnumerator")), "ErrorSymbol"))})}, new System.CodeDom.CodeTypeReference[0], null, new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("lex the next token", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberMethod(new System.CodeDom.CodeTypeReference("System.Void"), "_ThrowDisposed", System.CodeDom.MemberAttributes.Static, new System.CodeDom.CodeParameterDeclarationExpression[0], new System.CodeDom.CodeStatement[] {
                                                        new System.CodeDom.CodeThrowExceptionStatement(new System.CodeDom.CodeObjectCreateExpression(new System.CodeDom.CodeTypeReference("ObjectDisposedException"), new System.CodeDom.CodeExpression[] {
                                                                        new System.CodeDom.CodePrimitiveExpression("TableTokenizerEnumerator")}))}, new System.CodeDom.CodeTypeReference[0], null, new System.CodeDom.CodeCommentStatement[0], new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null)}, new System.CodeDom.CodeCommentStatement[0], new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null)}, new System.CodeDom.CodeCommentStatement[0])}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0]);
        public static System.CodeDom.CodeCompileUnit CompiledTokenizer = Deslang._CompileUnit(new string[0], new System.CodeDom.CodeNamespace[] {
                    Deslang._Namespace("", new System.CodeDom.CodeNamespaceImport[] {
                                new System.CodeDom.CodeNamespaceImport("System"),
                                new System.CodeDom.CodeNamespaceImport("System.Collections.Generic"),
                                new System.CodeDom.CodeNamespaceImport("System.Text")}, new System.CodeDom.CodeTypeDeclaration[0], new System.CodeDom.CodeCommentStatement[0]),
                    Deslang._Namespace("Rolex", new System.CodeDom.CodeNamespaceImport[0], new System.CodeDom.CodeTypeDeclaration[] {
                                Deslang._TypeDeclaration("CompiledTokenizer", true, false, false, false, false, System.CodeDom.MemberAttributes.Abstract, (((System.Reflection.TypeAttributes.AutoLayout | System.Reflection.TypeAttributes. AnsiClass) 
                                                | System.Reflection.TypeAttributes. Class) 
                                                | System.Reflection.TypeAttributes. Abstract), new System.CodeDom.CodeTypeParameter[0], new System.CodeDom.CodeTypeReference[] {
                                            new System.CodeDom.CodeTypeReference("IEnumerable`1", new System.CodeDom.CodeTypeReference[] {
                                                        new System.CodeDom.CodeTypeReference("Token", System.CodeDom.CodeTypeReferenceOptions.GenericTypeParameter)})}, new System.CodeDom.CodeTypeMember[] {
                                            Deslang._MemberField(new System.CodeDom.CodeTypeReference("IEnumerable`1", new System.CodeDom.CodeTypeReference[] {
                                                            new System.CodeDom.CodeTypeReference("System.Char", System.CodeDom.CodeTypeReferenceOptions.GenericTypeParameter)}), "Input", null, System.CodeDom.MemberAttributes.Family, new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("the input cursor. We can get this from a string, a char array, or some other sour" +
                                                                    "ce.", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberMethod(new System.CodeDom.CodeTypeReference("IEnumerator`1", new System.CodeDom.CodeTypeReference[] {
                                                            new System.CodeDom.CodeTypeReference("Token", System.CodeDom.CodeTypeReferenceOptions.GenericTypeParameter)}), "GetEnumerator", (System.CodeDom.MemberAttributes.Abstract | System.CodeDom.MemberAttributes. Public), new System.CodeDom.CodeParameterDeclarationExpression[0], new System.CodeDom.CodeStatement[0], new System.CodeDom.CodeTypeReference[0], null, new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("just create our table tokenizer\'s enumerator, passing all of the relevant stuff", false)),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("it\'s the real workhorse.", false)),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("<summary>", true)),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("Retrieves an enumerator that can be used to iterate over the tokens", true)),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("</summary>", true)),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("<returns>An enumerator that can be used to iterate over the tokens</returns>", true))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberMethod(new System.CodeDom.CodeTypeReference("IEnumerator`1", new System.CodeDom.CodeTypeReference[] {
                                                            new System.CodeDom.CodeTypeReference("Token", System.CodeDom.CodeTypeReferenceOptions.GenericTypeParameter)}), "GetEnumerator", ((System.CodeDom.MemberAttributes)(0)), new System.CodeDom.CodeParameterDeclarationExpression[0], new System.CodeDom.CodeStatement[] {
                                                        new System.CodeDom.CodeMethodReturnStatement(new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "GetEnumerator"), new System.CodeDom.CodeExpression[0]))}, new System.CodeDom.CodeTypeReference[0], new System.CodeDom.CodeTypeReference("IEnumerable`1", new System.CodeDom.CodeTypeReference[] {
                                                            new System.CodeDom.CodeTypeReference("Token", System.CodeDom.CodeTypeReferenceOptions.GenericTypeParameter)}), new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("we have to implement this explicitly for language independence because Slang", false)),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("will not set PublicImplementationTypes on public methods which some languages", false)),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("require", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberMethod(new System.CodeDom.CodeTypeReference("System.Collections.IEnumerator"), "GetEnumerator", ((System.CodeDom.MemberAttributes)(0)), new System.CodeDom.CodeParameterDeclarationExpression[0], new System.CodeDom.CodeStatement[] {
                                                        new System.CodeDom.CodeMethodReturnStatement(new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "GetEnumerator"), new System.CodeDom.CodeExpression[0]))}, new System.CodeDom.CodeTypeReference[0], new System.CodeDom.CodeTypeReference("System.Collections.IEnumerable"), new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("legacy collection support (required)", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._Constructor((System.CodeDom.MemberAttributes.Final | System.CodeDom.MemberAttributes. Public), new System.CodeDom.CodeParameterDeclarationExpression[] {
                                                        new System.CodeDom.CodeParameterDeclarationExpression(new System.CodeDom.CodeTypeReference("IEnumerable`1", new System.CodeDom.CodeTypeReference[] {
                                                                        new System.CodeDom.CodeTypeReference("System.Char", System.CodeDom.CodeTypeReferenceOptions.GenericTypeParameter)}), "input")}, new System.CodeDom.CodeExpression[0], new System.CodeDom.CodeExpression[0], new System.CodeDom.CodeStatement[] {
                                                        new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression(null), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeArgumentReferenceExpression("input")), new System.CodeDom.CodeStatement[] {
                                                                    new System.CodeDom.CodeThrowExceptionStatement(new System.CodeDom.CodeObjectCreateExpression(new System.CodeDom.CodeTypeReference("ArgumentNullException"), new System.CodeDom.CodeExpression[] {
                                                                                    new System.CodeDom.CodePrimitiveExpression("input")}))}, new System.CodeDom.CodeStatement[0]),
                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "Input"), new System.CodeDom.CodeArgumentReferenceExpression("input"))}, new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("<summary>", true)),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("Constructs a new instance", true)),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("</summary>", true)),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("<param name=\"input\">The input character sequence</param>", true))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null)}, new System.CodeDom.CodeCommentStatement[] {
                                            new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("<summary>", true)),
                                            new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("Reference Implementation for generated shared code", true)),
                                            new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("</summary>", true))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                Deslang._TypeDeclaration("CompiledTokenizerEnumerator", true, false, false, false, false, System.CodeDom.MemberAttributes.Abstract, (((System.Reflection.TypeAttributes.AutoLayout | System.Reflection.TypeAttributes. AnsiClass) 
                                                | System.Reflection.TypeAttributes. Class) 
                                                | System.Reflection.TypeAttributes. Abstract), new System.CodeDom.CodeTypeParameter[0], new System.CodeDom.CodeTypeReference[] {
                                            new System.CodeDom.CodeTypeReference("IEnumerator`1", new System.CodeDom.CodeTypeReference[] {
                                                        new System.CodeDom.CodeTypeReference("Token", System.CodeDom.CodeTypeReferenceOptions.GenericTypeParameter)})}, new System.CodeDom.CodeTypeMember[] {
                                            Deslang._MemberField(new System.CodeDom.CodeTypeReference("System.Int32"), "ErrorSymbol", new System.CodeDom.CodePrimitiveExpression(-1), (System.CodeDom.MemberAttributes.Const | System.CodeDom.MemberAttributes. Family), new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("our error symbol. Always -1", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberField(new System.CodeDom.CodeTypeReference("System.Int32"), "EosSymbol", new System.CodeDom.CodePrimitiveExpression(-2), (System.CodeDom.MemberAttributes.Const | System.CodeDom.MemberAttributes. Family), new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("our end of stream symbol - returned by Lex() and used internally but not reported" +
                                                                    "", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberField(new System.CodeDom.CodeTypeReference("System.Int32"), "Disposed", new System.CodeDom.CodePrimitiveExpression(-4), (System.CodeDom.MemberAttributes.Const | System.CodeDom.MemberAttributes. Family), new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("our disposed state indicator", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberField(new System.CodeDom.CodeTypeReference("System.Int32"), "BeforeBegin", new System.CodeDom.CodePrimitiveExpression(-3), (System.CodeDom.MemberAttributes.Const | System.CodeDom.MemberAttributes. Family), new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("the state indicates the cursor is before the beginning (initial state)", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberField(new System.CodeDom.CodeTypeReference("System.Int32"), "AfterEnd", new System.CodeDom.CodePrimitiveExpression(-2), (System.CodeDom.MemberAttributes.Const | System.CodeDom.MemberAttributes. Family), new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("the state indicates the cursor is after the end", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberField(new System.CodeDom.CodeTypeReference("System.Int32"), "InnerFinished", new System.CodeDom.CodePrimitiveExpression(-1), (System.CodeDom.MemberAttributes.Const | System.CodeDom.MemberAttributes. Family), new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("the state indicates that the inner input enumeration has finished (we still have " +
                                                                    "one more token to report)", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberField(new System.CodeDom.CodeTypeReference("System.Int32"), "Enumerating", new System.CodeDom.CodePrimitiveExpression(0), (System.CodeDom.MemberAttributes.Const | System.CodeDom.MemberAttributes. Family), new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("indicates we\'re currently enumerating. We spend most of our time and effort in th" +
                                                                    "is state", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberField(new System.CodeDom.CodeTypeReference("System.Int32"), "_TabWidth", new System.CodeDom.CodePrimitiveExpression(4), System.CodeDom.MemberAttributes.Const, new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("indicates the tab width, used for updating the Column property when we encounter " +
                                                                    "a tab", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberField(new System.CodeDom.CodeTypeReference("IEnumerator`1", new System.CodeDom.CodeTypeReference[] {
                                                            new System.CodeDom.CodeTypeReference("System.Char", System.CodeDom.CodeTypeReferenceOptions.GenericTypeParameter)}), "_input", null, ((System.CodeDom.MemberAttributes)(0)), new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("the input cursor", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberField(new System.CodeDom.CodeTypeReference("System.Int32"), "State", null, System.CodeDom.MemberAttributes.Family, new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("our state", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberField(new System.CodeDom.CodeTypeReference("Token"), "_current", null, ((System.CodeDom.MemberAttributes)(0)), new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("the current token", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberField(new System.CodeDom.CodeTypeReference("StringBuilder"), "ValueBuffer", null, System.CodeDom.MemberAttributes.Family, new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("a buffer used primarily by Lex() to capture matched input", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberField(new System.CodeDom.CodeTypeReference("System.Int32"), "_line", null, ((System.CodeDom.MemberAttributes)(0)), new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("the one based line", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberField(new System.CodeDom.CodeTypeReference("System.Int32"), "_column", null, ((System.CodeDom.MemberAttributes)(0)), new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("the one based column", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberField(new System.CodeDom.CodeTypeReference("System.Int64"), "_position", null, ((System.CodeDom.MemberAttributes)(0)), new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("the zero based position", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._Constructor(System.CodeDom.MemberAttributes.Family, new System.CodeDom.CodeParameterDeclarationExpression[] {
                                                        new System.CodeDom.CodeParameterDeclarationExpression(new System.CodeDom.CodeTypeReference("IEnumerator`1", new System.CodeDom.CodeTypeReference[] {
                                                                        new System.CodeDom.CodeTypeReference("System.Char", System.CodeDom.CodeTypeReferenceOptions.GenericTypeParameter)}), "input")}, new System.CodeDom.CodeExpression[0], new System.CodeDom.CodeExpression[0], new System.CodeDom.CodeStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("just set up our initial values", false)),
                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_input"), new System.CodeDom.CodeArgumentReferenceExpression("input")),
                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "State"), new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "BeforeBegin")),
                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "ValueBuffer"), new System.CodeDom.CodeObjectCreateExpression(new System.CodeDom.CodeTypeReference("StringBuilder"), new System.CodeDom.CodeExpression[0])),
                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_line"), new System.CodeDom.CodePrimitiveExpression(1)),
                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_column"), new System.CodeDom.CodePrimitiveExpression(1)),
                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_position"), new System.CodeDom.CodePrimitiveExpression(0))}, new System.CodeDom.CodeCommentStatement[0], new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberProperty(new System.CodeDom.CodeTypeReference("System.Char"), "CurrentInput", System.CodeDom.MemberAttributes.Family, new System.CodeDom.CodeParameterDeclarationExpression[0], new System.CodeDom.CodeStatement[] {
                                                        new System.CodeDom.CodeMethodReturnStatement(new System.CodeDom.CodePropertyReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_input"), "Current"))}, new System.CodeDom.CodeStatement[0], new System.CodeDom.CodeTypeReference[0], null, new System.CodeDom.CodeCommentStatement[0], new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberProperty(new System.CodeDom.CodeTypeReference("Token"), "Current", (System.CodeDom.MemberAttributes.Final | System.CodeDom.MemberAttributes. Public), new System.CodeDom.CodeParameterDeclarationExpression[0], new System.CodeDom.CodeStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("if we\'re not enumerating, find out what\'s going on", false)),
                                                        new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "Enumerating"), System.CodeDom.CodeBinaryOperatorType.GreaterThan, new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "State")), new System.CodeDom.CodeStatement[] {
                                                                    new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("check which state we\'re in, and throw accordingly", false)),
                                                                    new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "BeforeBegin"), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "State")), new System.CodeDom.CodeStatement[] {
                                                                                new System.CodeDom.CodeThrowExceptionStatement(new System.CodeDom.CodeObjectCreateExpression(new System.CodeDom.CodeTypeReference("InvalidOperationException"), new System.CodeDom.CodeExpression[] {
                                                                                                new System.CodeDom.CodePrimitiveExpression("The cursor is before the start of the enumeration")}))}, new System.CodeDom.CodeStatement[0]),
                                                                    new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "AfterEnd"), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "State")), new System.CodeDom.CodeStatement[] {
                                                                                new System.CodeDom.CodeThrowExceptionStatement(new System.CodeDom.CodeObjectCreateExpression(new System.CodeDom.CodeTypeReference("InvalidOperationException"), new System.CodeDom.CodeExpression[] {
                                                                                                new System.CodeDom.CodePrimitiveExpression("The cursor is after the end of the enumeration")}))}, new System.CodeDom.CodeStatement[0]),
                                                                    new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "Disposed"), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "State")), new System.CodeDom.CodeStatement[] {
                                                                                new System.CodeDom.CodeExpressionStatement(new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "_ThrowDisposed"), new System.CodeDom.CodeExpression[0]))}, new System.CodeDom.CodeStatement[0])}, new System.CodeDom.CodeStatement[0]),
                                                        new System.CodeDom.CodeMethodReturnStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_current"))}, new System.CodeDom.CodeStatement[0], new System.CodeDom.CodeTypeReference[0], null, new System.CodeDom.CodeCommentStatement[0], new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberProperty(new System.CodeDom.CodeTypeReference("Token"), "Current", ((System.CodeDom.MemberAttributes)(0)), new System.CodeDom.CodeParameterDeclarationExpression[0], new System.CodeDom.CodeStatement[] {
                                                        new System.CodeDom.CodeMethodReturnStatement(new System.CodeDom.CodePropertyReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "Current"))}, new System.CodeDom.CodeStatement[0], new System.CodeDom.CodeTypeReference[0], new System.CodeDom.CodeTypeReference("IEnumerator`1", new System.CodeDom.CodeTypeReference[] {
                                                            new System.CodeDom.CodeTypeReference("Token", System.CodeDom.CodeTypeReferenceOptions.GenericTypeParameter)}), new System.CodeDom.CodeCommentStatement[0], new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberProperty(new System.CodeDom.CodeTypeReference("System.Object"), "Current", ((System.CodeDom.MemberAttributes)(0)), new System.CodeDom.CodeParameterDeclarationExpression[0], new System.CodeDom.CodeStatement[] {
                                                        new System.CodeDom.CodeMethodReturnStatement(new System.CodeDom.CodePropertyReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "Current"))}, new System.CodeDom.CodeStatement[0], new System.CodeDom.CodeTypeReference[0], new System.CodeDom.CodeTypeReference("System.Collections.IEnumerator"), new System.CodeDom.CodeCommentStatement[0], new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberMethod(new System.CodeDom.CodeTypeReference("System.Void"), "Reset", ((System.CodeDom.MemberAttributes)(0)), new System.CodeDom.CodeParameterDeclarationExpression[0], new System.CodeDom.CodeStatement[] {
                                                        new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "Disposed"), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "State")), new System.CodeDom.CodeStatement[] {
                                                                    new System.CodeDom.CodeExpressionStatement(new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "_ThrowDisposed"), new System.CodeDom.CodeExpression[0]))}, new System.CodeDom.CodeStatement[0]),
                                                        new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression(false), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "BeforeBegin"), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "State"))), new System.CodeDom.CodeStatement[] {
                                                                    new System.CodeDom.CodeExpressionStatement(new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_input"), "Reset"), new System.CodeDom.CodeExpression[0]))}, new System.CodeDom.CodeStatement[0]),
                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "State"), new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "BeforeBegin")),
                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_line"), new System.CodeDom.CodePrimitiveExpression(1)),
                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_column"), new System.CodeDom.CodePrimitiveExpression(1)),
                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_position"), new System.CodeDom.CodePrimitiveExpression(0))}, new System.CodeDom.CodeTypeReference[0], new System.CodeDom.CodeTypeReference("System.Collections.IEnumerator"), new System.CodeDom.CodeCommentStatement[0], new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberMethod(new System.CodeDom.CodeTypeReference("System.Boolean"), "IsHidden", (System.CodeDom.MemberAttributes.Abstract | System.CodeDom.MemberAttributes. Family), new System.CodeDom.CodeParameterDeclarationExpression[] {
                                                        new System.CodeDom.CodeParameterDeclarationExpression(new System.CodeDom.CodeTypeReference("System.Int32"), "symbolId")}, new System.CodeDom.CodeStatement[0], new System.CodeDom.CodeTypeReference[0], null, new System.CodeDom.CodeCommentStatement[0], new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberMethod(new System.CodeDom.CodeTypeReference("System.String"), "GetBlockEnd", (System.CodeDom.MemberAttributes.Abstract | System.CodeDom.MemberAttributes. Family), new System.CodeDom.CodeParameterDeclarationExpression[] {
                                                        new System.CodeDom.CodeParameterDeclarationExpression(new System.CodeDom.CodeTypeReference("System.Int32"), "symbolId")}, new System.CodeDom.CodeStatement[0], new System.CodeDom.CodeTypeReference[0], null, new System.CodeDom.CodeCommentStatement[0], new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberMethod(new System.CodeDom.CodeTypeReference("System.Boolean"), "MoveNext", ((System.CodeDom.MemberAttributes)(0)), new System.CodeDom.CodeParameterDeclarationExpression[0], new System.CodeDom.CodeStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("if we\'re not enumerating", false)),
                                                        new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "Enumerating"), System.CodeDom.CodeBinaryOperatorType.GreaterThan, new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "State")), new System.CodeDom.CodeStatement[] {
                                                                    new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "Disposed"), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "State")), new System.CodeDom.CodeStatement[] {
                                                                                new System.CodeDom.CodeExpressionStatement(new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "_ThrowDisposed"), new System.CodeDom.CodeExpression[0]))}, new System.CodeDom.CodeStatement[0]),
                                                                    new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "AfterEnd"), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "State")), new System.CodeDom.CodeStatement[] {
                                                                                new System.CodeDom.CodeMethodReturnStatement(new System.CodeDom.CodePrimitiveExpression(false))}, new System.CodeDom.CodeStatement[0])}, new System.CodeDom.CodeStatement[0]),
                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_current"), new System.CodeDom.CodeDefaultValueExpression(new System.CodeDom.CodeTypeReference("Token"))),
                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_current"), "Line"), new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_line")),
                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_current"), "Column"), new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_column")),
                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_current"), "Position"), new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_position")),
                                                        new System.CodeDom.CodeExpressionStatement(new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "ValueBuffer"), "Clear"), new System.CodeDom.CodeExpression[0])),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("lex the next input", false)),
                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_current"), "SymbolId"), new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "Lex"), new System.CodeDom.CodeExpression[0])),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("now look for hiddens and block ends", false)),
                                                        new System.CodeDom.CodeVariableDeclarationStatement(new System.CodeDom.CodeTypeReference("System.Boolean"), "done", new System.CodeDom.CodePrimitiveExpression(false)),
                                                        new System.CodeDom.CodeIterationStatement(new System.CodeDom.CodeSnippetStatement(""), new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression(false), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeVariableReferenceExpression("done")), new System.CodeDom.CodeSnippetStatement(""), new System.CodeDom.CodeStatement[] {
                                                                    new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeVariableReferenceExpression("done"), new System.CodeDom.CodePrimitiveExpression(true)),
                                                                    new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("if we\'re on a valid symbol", false)),
                                                                    new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "ErrorSymbol"), System.CodeDom.CodeBinaryOperatorType.LessThan, new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_current"), "SymbolId")), new System.CodeDom.CodeStatement[] {
                                                                                new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("get the block end for our symbol", false)),
                                                                                new System.CodeDom.CodeVariableDeclarationStatement(new System.CodeDom.CodeTypeReference("System.String"), "be", new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "GetBlockEnd"), new System.CodeDom.CodeExpression[] {
                                                                                                new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_current"), "SymbolId")})),
                                                                                new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("if it\'s valid", false)),
                                                                                new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression(false), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression(null), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeVariableReferenceExpression("be"))), System.CodeDom.CodeBinaryOperatorType.BooleanAnd, new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression(false), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression(0), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodePropertyReferenceExpression(new System.CodeDom.CodeVariableReferenceExpression("be"), "Length")))), new System.CodeDom.CodeStatement[] {
                                                                                            new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("read until we find it or end of input", false)),
                                                                                            new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression(false), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_TryReadUntilBlockEnd"), new System.CodeDom.CodeExpression[] {
                                                                                                                new System.CodeDom.CodeVariableReferenceExpression("be")})), new System.CodeDom.CodeStatement[] {
                                                                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_current"), "SymbolId"), new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "ErrorSymbol"))}, new System.CodeDom.CodeStatement[0])}, new System.CodeDom.CodeStatement[0]),
                                                                                new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "IsHidden"), new System.CodeDom.CodeExpression[] {
                                                                                                new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodePropertyReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "Current"), "SymbolId")}), new System.CodeDom.CodeStatement[] {
                                                                                            new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("update the cursor position and lex the next input, skipping this one", false)),
                                                                                            new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeVariableReferenceExpression("done"), new System.CodeDom.CodePrimitiveExpression(false)),
                                                                                            new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_current"), "Line"), new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_line")),
                                                                                            new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_current"), "Column"), new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_column")),
                                                                                            new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_current"), "Position"), new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_position")),
                                                                                            new System.CodeDom.CodeExpressionStatement(new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "ValueBuffer"), "Clear"), new System.CodeDom.CodeExpression[0])),
                                                                                            new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_current"), "SymbolId"), new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "Lex"), new System.CodeDom.CodeExpression[0]))}, new System.CodeDom.CodeStatement[0])}, new System.CodeDom.CodeStatement[0])}),
                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_current"), "Value"), new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "ValueBuffer"), "ToString"), new System.CodeDom.CodeExpression[0])),
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("update our state if we hit the end", false)),
                                                        new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "EosSymbol"), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_current"), "SymbolId")), new System.CodeDom.CodeStatement[] {
                                                                    new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "State"), new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "AfterEnd"))}, new System.CodeDom.CodeStatement[0]),
                                                        new System.CodeDom.CodeMethodReturnStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression(false), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "AfterEnd"), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "State"))))}, new System.CodeDom.CodeTypeReference[0], new System.CodeDom.CodeTypeReference("System.Collections.IEnumerator"), new System.CodeDom.CodeCommentStatement[0], new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberMethod(new System.CodeDom.CodeTypeReference("System.Void"), "Dispose", ((System.CodeDom.MemberAttributes)(0)), new System.CodeDom.CodeParameterDeclarationExpression[0], new System.CodeDom.CodeStatement[] {
                                                        new System.CodeDom.CodeExpressionStatement(new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_input"), "Dispose"), new System.CodeDom.CodeExpression[0])),
                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "State"), new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "Disposed"))}, new System.CodeDom.CodeTypeReference[0], new System.CodeDom.CodeTypeReference("IDisposable"), new System.CodeDom.CodeCommentStatement[0], new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberMethod(new System.CodeDom.CodeTypeReference("System.Boolean"), "MoveNextInput", System.CodeDom.MemberAttributes.Family, new System.CodeDom.CodeParameterDeclarationExpression[0], new System.CodeDom.CodeStatement[] {
                                                        new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_input"), "MoveNext"), new System.CodeDom.CodeExpression[0]), new System.CodeDom.CodeStatement[] {
                                                                    new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression(false), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "BeforeBegin"), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "State"))), new System.CodeDom.CodeStatement[] {
                                                                                new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_position"), new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_position"), System.CodeDom.CodeBinaryOperatorType.Add, new System.CodeDom.CodePrimitiveExpression(1))),
                                                                                new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression('\n'), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodePropertyReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_input"), "Current")), new System.CodeDom.CodeStatement[] {
                                                                                            new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_column"), new System.CodeDom.CodePrimitiveExpression(1)),
                                                                                            new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_line"), new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_line"), System.CodeDom.CodeBinaryOperatorType.Add, new System.CodeDom.CodePrimitiveExpression(1)))}, new System.CodeDom.CodeStatement[] {
                                                                                            new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression('\t'), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodePropertyReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_input"), "Current")), new System.CodeDom.CodeStatement[] {
                                                                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_column"), new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_column"), System.CodeDom.CodeBinaryOperatorType.Add, new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "_TabWidth")))}, new System.CodeDom.CodeStatement[] {
                                                                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_column"), new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_column"), System.CodeDom.CodeBinaryOperatorType.Add, new System.CodeDom.CodePrimitiveExpression(1)))})})}, new System.CodeDom.CodeStatement[] {
                                                                                new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("corner case for first move", false)),
                                                                                new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression('\n'), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodePropertyReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_input"), "Current")), new System.CodeDom.CodeStatement[] {
                                                                                            new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_column"), new System.CodeDom.CodePrimitiveExpression(1)),
                                                                                            new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_line"), new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_line"), System.CodeDom.CodeBinaryOperatorType.Add, new System.CodeDom.CodePrimitiveExpression(1)))}, new System.CodeDom.CodeStatement[] {
                                                                                            new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression('\t'), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodePropertyReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_input"), "Current")), new System.CodeDom.CodeStatement[] {
                                                                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_column"), new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_column"), System.CodeDom.CodeBinaryOperatorType.Add, new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "_TabWidth"), System.CodeDom.CodeBinaryOperatorType.Subtract, new System.CodeDom.CodePrimitiveExpression(1))))}, new System.CodeDom.CodeStatement[0])})}),
                                                                    new System.CodeDom.CodeMethodReturnStatement(new System.CodeDom.CodePrimitiveExpression(true))}, new System.CodeDom.CodeStatement[0]),
                                                        new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "State"), new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "InnerFinished")),
                                                        new System.CodeDom.CodeMethodReturnStatement(new System.CodeDom.CodePrimitiveExpression(false))}, new System.CodeDom.CodeTypeReference[0], null, new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("moves to the next position, updates the state accordingly, and tracks the cursor " +
                                                                    "position", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberMethod(new System.CodeDom.CodeTypeReference("System.Boolean"), "_TryReadUntil", ((System.CodeDom.MemberAttributes)(0)), new System.CodeDom.CodeParameterDeclarationExpression[] {
                                                        new System.CodeDom.CodeParameterDeclarationExpression(new System.CodeDom.CodeTypeReference("System.Char"), "character")}, new System.CodeDom.CodeStatement[] {
                                                        new System.CodeDom.CodeVariableDeclarationStatement(new System.CodeDom.CodeTypeReference("System.Char"), "ch", new System.CodeDom.CodePropertyReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_input"), "Current")),
                                                        new System.CodeDom.CodeExpressionStatement(new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "ValueBuffer"), "Append"), new System.CodeDom.CodeExpression[] {
                                                                        new System.CodeDom.CodeVariableReferenceExpression("ch")})),
                                                        new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeVariableReferenceExpression("ch"), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeArgumentReferenceExpression("character")), new System.CodeDom.CodeStatement[] {
                                                                    new System.CodeDom.CodeMethodReturnStatement(new System.CodeDom.CodePrimitiveExpression(true))}, new System.CodeDom.CodeStatement[0]),
                                                        new System.CodeDom.CodeIterationStatement(new System.CodeDom.CodeSnippetStatement(""), new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "MoveNextInput"), new System.CodeDom.CodeExpression[0]), System.CodeDom.CodeBinaryOperatorType.BooleanAnd, new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression(false), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePropertyReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_input"), "Current"), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeArgumentReferenceExpression("character")))), new System.CodeDom.CodeSnippetStatement(""), new System.CodeDom.CodeStatement[] {
                                                                    new System.CodeDom.CodeExpressionStatement(new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "ValueBuffer"), "Append"), new System.CodeDom.CodeExpression[] {
                                                                                    new System.CodeDom.CodePropertyReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_input"), "Current")}))}),
                                                        new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression(false), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "State"), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "InnerFinished"))), new System.CodeDom.CodeStatement[] {
                                                                    new System.CodeDom.CodeExpressionStatement(new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "ValueBuffer"), "Append"), new System.CodeDom.CodeExpression[] {
                                                                                    new System.CodeDom.CodePropertyReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_input"), "Current")})),
                                                                    new System.CodeDom.CodeMethodReturnStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePropertyReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_input"), "Current"), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeArgumentReferenceExpression("character")))}, new System.CodeDom.CodeStatement[0]),
                                                        new System.CodeDom.CodeMethodReturnStatement(new System.CodeDom.CodePrimitiveExpression(false))}, new System.CodeDom.CodeTypeReference[0], null, new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("reads until the specified character, consuming it, returning false if it wasn\'t f" +
                                                                    "ound", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberMethod(new System.CodeDom.CodeTypeReference("System.Boolean"), "_TryReadUntilBlockEnd", ((System.CodeDom.MemberAttributes)(0)), new System.CodeDom.CodeParameterDeclarationExpression[] {
                                                        new System.CodeDom.CodeParameterDeclarationExpression(new System.CodeDom.CodeTypeReference("System.String"), "blockEnd")}, new System.CodeDom.CodeStatement[] {
                                                        new System.CodeDom.CodeIterationStatement(new System.CodeDom.CodeSnippetStatement(""), new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression(false), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "InnerFinished"), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "State"))), System.CodeDom.CodeBinaryOperatorType.BooleanAnd, new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_TryReadUntil"), new System.CodeDom.CodeExpression[] {
                                                                            new System.CodeDom.CodeIndexerExpression(new System.CodeDom.CodeArgumentReferenceExpression("blockEnd"), new System.CodeDom.CodeExpression[] {
                                                                                        new System.CodeDom.CodePrimitiveExpression(0)})})), new System.CodeDom.CodeSnippetStatement(""), new System.CodeDom.CodeStatement[] {
                                                                    new System.CodeDom.CodeVariableDeclarationStatement(new System.CodeDom.CodeTypeReference("System.Boolean"), "found", new System.CodeDom.CodePrimitiveExpression(true)),
                                                                    new System.CodeDom.CodeIterationStatement(new System.CodeDom.CodeVariableDeclarationStatement(new System.CodeDom.CodeTypeReference("System.Int32"), "i", new System.CodeDom.CodePrimitiveExpression(1)), new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeVariableReferenceExpression("found"), System.CodeDom.CodeBinaryOperatorType.BooleanAnd, new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeVariableReferenceExpression("i"), System.CodeDom.CodeBinaryOperatorType.LessThan, new System.CodeDom.CodePropertyReferenceExpression(new System.CodeDom.CodeArgumentReferenceExpression("blockEnd"), "Length"))), new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeVariableReferenceExpression("i"), new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeVariableReferenceExpression("i"), System.CodeDom.CodeBinaryOperatorType.Add, new System.CodeDom.CodePrimitiveExpression(1))), new System.CodeDom.CodeStatement[] {
                                                                                new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression(false), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "MoveNextInput"), new System.CodeDom.CodeExpression[0]), System.CodeDom.CodeBinaryOperatorType.BooleanOr, new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression(false), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePropertyReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_input"), "Current"), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeIndexerExpression(new System.CodeDom.CodeArgumentReferenceExpression("blockEnd"), new System.CodeDom.CodeExpression[] {
                                                                                                                new System.CodeDom.CodeVariableReferenceExpression("i")}))))), new System.CodeDom.CodeStatement[] {
                                                                                            new System.CodeDom.CodeAssignStatement(new System.CodeDom.CodeVariableReferenceExpression("found"), new System.CodeDom.CodePrimitiveExpression(false))}, new System.CodeDom.CodeStatement[] {
                                                                                            new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodePrimitiveExpression(false), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeBinaryOperatorExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeTypeReferenceExpression(new System.CodeDom.CodeTypeReference("Rolex.CompiledTokenizerEnumerator")), "InnerFinished"), System.CodeDom.CodeBinaryOperatorType.ValueEquality, new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "State"))), new System.CodeDom.CodeStatement[] {
                                                                                                        new System.CodeDom.CodeExpressionStatement(new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "ValueBuffer"), "Append"), new System.CodeDom.CodeExpression[] {
                                                                                                                        new System.CodeDom.CodePropertyReferenceExpression(new System.CodeDom.CodeFieldReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "_input"), "Current")}))}, new System.CodeDom.CodeStatement[0])})}),
                                                                    new System.CodeDom.CodeConditionStatement(new System.CodeDom.CodeVariableReferenceExpression("found"), new System.CodeDom.CodeStatement[] {
                                                                                new System.CodeDom.CodeExpressionStatement(new System.CodeDom.CodeMethodInvokeExpression(new System.CodeDom.CodeMethodReferenceExpression(new System.CodeDom.CodeThisReferenceExpression(), "MoveNextInput"), new System.CodeDom.CodeExpression[0])),
                                                                                new System.CodeDom.CodeMethodReturnStatement(new System.CodeDom.CodePrimitiveExpression(true))}, new System.CodeDom.CodeStatement[0])}),
                                                        new System.CodeDom.CodeMethodReturnStatement(new System.CodeDom.CodePrimitiveExpression(false))}, new System.CodeDom.CodeTypeReference[0], null, new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("reads until the string is encountered, capturing it.", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberMethod(new System.CodeDom.CodeTypeReference("System.Int32"), "Lex", (System.CodeDom.MemberAttributes.Abstract | System.CodeDom.MemberAttributes. Family), new System.CodeDom.CodeParameterDeclarationExpression[0], new System.CodeDom.CodeStatement[0], new System.CodeDom.CodeTypeReference[0], null, new System.CodeDom.CodeCommentStatement[] {
                                                        new System.CodeDom.CodeCommentStatement(new System.CodeDom.CodeComment("lex the next token", false))}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null),
                                            Deslang._MemberMethod(new System.CodeDom.CodeTypeReference("System.Void"), "_ThrowDisposed", System.CodeDom.MemberAttributes.Static, new System.CodeDom.CodeParameterDeclarationExpression[0], new System.CodeDom.CodeStatement[] {
                                                        new System.CodeDom.CodeThrowExceptionStatement(new System.CodeDom.CodeObjectCreateExpression(new System.CodeDom.CodeTypeReference("ObjectDisposedException"), new System.CodeDom.CodeExpression[] {
                                                                        new System.CodeDom.CodePrimitiveExpression("CompiledTokenizerEnumerator")}))}, new System.CodeDom.CodeTypeReference[0], null, new System.CodeDom.CodeCommentStatement[0], new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null)}, new System.CodeDom.CodeCommentStatement[0], new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0], null)}, new System.CodeDom.CodeCommentStatement[0])}, new System.CodeDom.CodeAttributeDeclaration[0], new System.CodeDom.CodeDirective[0], new System.CodeDom.CodeDirective[0]);
    }
}
