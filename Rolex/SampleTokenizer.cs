//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RolexDemo {
    using System;
    using System.Collections.Generic;
    using System.Text;
    
    /// <summary>
    /// Reference implementation for generated shared code
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Rolex", "0.2.0.0")]
    internal struct Token {
        /// <summary>
        /// Indicates the line where the token occurs
        /// </summary>
        public int Line;
        /// <summary>
        /// Indicates the column where the token occurs
        /// </summary>
        public int Column;
        /// <summary>
        /// Indicates the position where the token occurs
        /// </summary>
        public long Position;
        /// <summary>
        /// Indicates the symbol id or -1 for the error symbol
        /// </summary>
        public int SymbolId;
        /// <summary>
        /// Indicates the value of the token
        /// </summary>
        public string Value;
    }
    /// <summary>
    /// Reference Implementation for generated shared code
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Rolex", "0.2.0.0")]
    internal abstract class CompiledTokenizer : IEnumerable<Token> {
        // the input cursor. We can get this from a string, a char array, or some other source.
        protected IEnumerable<char> Input;
        // just create our table tokenizer's enumerator, passing all of the relevant stuff
        // it's the real workhorse.
        /// <summary>
        /// Retrieves an enumerator that can be used to iterate over the tokens
        /// </summary>
        /// <returns>An enumerator that can be used to iterate over the tokens</returns>
        public abstract IEnumerator<Token> GetEnumerator();
        // we have to implement this explicitly for language independence because Slang
        // will not set PublicImplementationTypes on public methods which some languages
        // require
        IEnumerator<Token> IEnumerable<Token>.GetEnumerator() {
            return this.GetEnumerator();
        }
        // legacy collection support (required)
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() {
            return this.GetEnumerator();
        }
        /// <summary>
        /// Constructs a new instance
        /// </summary>
        /// <param name="input">The input character sequence</param>
        public CompiledTokenizer(IEnumerable<char> input) {
            if ((null == input)) {
                throw new ArgumentNullException("input");
            }
            this.Input = input;
        }
    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Rolex", "0.2.0.0")]
    internal abstract class CompiledTokenizerEnumerator : IEnumerator<Token> {
        // our error symbol. Always -1
        public const int ErrorSymbol = -1;
        // our end of stream symbol - returned by Lex() and used internally but not reported
        protected const int EosSymbol = -2;
        // our disposed state indicator
        protected const int Disposed = -4;
        // the state indicates the cursor is before the beginning (initial state)
        protected const int BeforeBegin = -3;
        // the state indicates the cursor is after the end
        protected const int AfterEnd = -2;
        // the state indicates that the inner input enumeration has finished (we still have one more token to report)
        protected const int InnerFinished = -1;
        // indicates we're currently enumerating. We spend most of our time and effort in this state
        protected const int Enumerating = 0;
        // indicates the tab width, used for updating the Column property when we encounter a tab
        const int _TabWidth = 4;
        // the input cursor
        IEnumerator<char> _input;
        // our state
        protected int State;
        // the current token
        Token _current;
        // a buffer used primarily by Lex() to capture matched input
        protected StringBuilder ValueBuffer;
        // the one based line
        int _line;
        // the one based column
        int _column;
        // the zero based position
        long _position;
        protected CompiledTokenizerEnumerator(IEnumerator<char> input) {
            // just set up our initial values
            this._input = input;
            this.State = CompiledTokenizerEnumerator.BeforeBegin;
            this.ValueBuffer = new StringBuilder();
            this._line = 1;
            this._column = 1;
            this._position = 0;
        }
        protected virtual char CurrentInput {
            get {
                return this._input.Current;
            }
        }
        public Token Current {
            get {
                // if we're not enumerating, find out what's going on
                if ((CompiledTokenizerEnumerator.Enumerating > this.State)) {
                    // check which state we're in, and throw accordingly
                    if ((CompiledTokenizerEnumerator.BeforeBegin == this.State)) {
                        throw new InvalidOperationException("The cursor is before the start of the enumeration");
                    }
                    if ((CompiledTokenizerEnumerator.AfterEnd == this.State)) {
                        throw new InvalidOperationException("The cursor is after the end of the enumeration");
                    }
                    if ((CompiledTokenizerEnumerator.Disposed == this.State)) {
                        CompiledTokenizerEnumerator._ThrowDisposed();
                    }
                }
                return this._current;
            }
        }
        Token IEnumerator<Token>.Current {
            get {
                return this.Current;
            }
        }
        object System.Collections.IEnumerator.Current {
            get {
                return this.Current;
            }
        }
        void System.Collections.IEnumerator.Reset() {
            if ((CompiledTokenizerEnumerator.Disposed == this.State)) {
                CompiledTokenizerEnumerator._ThrowDisposed();
            }
            if ((false 
                        == (CompiledTokenizerEnumerator.BeforeBegin == this.State))) {
                this._input.Reset();
            }
            this.State = CompiledTokenizerEnumerator.BeforeBegin;
            this._line = 1;
            this._column = 1;
            this._position = 0;
        }
        protected abstract bool IsHidden(int symbolId);
        protected abstract string GetBlockEnd(int symbolId);
        bool System.Collections.IEnumerator.MoveNext() {
            // if we're not enumerating
            if ((CompiledTokenizerEnumerator.Enumerating > this.State)) {
                if ((CompiledTokenizerEnumerator.Disposed == this.State)) {
                    CompiledTokenizerEnumerator._ThrowDisposed();
                }
                if ((CompiledTokenizerEnumerator.AfterEnd == this.State)) {
                    return false;
                }
            }
            this._current = default(Token);
            this._current.Line = this._line;
            this._current.Column = this._column;
            this._current.Position = this._position;
            this.ValueBuffer.Clear();
            // lex the next input
            this._current.SymbolId = this.Lex();
            // now look for hiddens and block ends
            bool done = false;
            for (
            ; (false == done); 
            ) {
                done = true;
                // if we're on a valid symbol
                if ((CompiledTokenizerEnumerator.ErrorSymbol < this._current.SymbolId)) {
                    // get the block end for our symbol
                    string be = this.GetBlockEnd(this._current.SymbolId);
                    // if it's valid
                    if (((false 
                                == (null == be)) 
                                && (false 
                                == (0 == be.Length)))) {
                        // read until we find it or end of input
                        if ((false == this._TryReadUntilBlockEnd(be))) {
                            this._current.SymbolId = CompiledTokenizerEnumerator.ErrorSymbol;
                        }
                    }
                    if (this.IsHidden(this.Current.SymbolId)) {
                        // update the cursor position and lex the next input, skipping this one
                        done = false;
                        this._current.Line = this._line;
                        this._current.Column = this._column;
                        this._current.Position = this._position;
                        this.ValueBuffer.Clear();
                        this._current.SymbolId = this.Lex();
                    }
                }
            }
            this._current.Value = this.ValueBuffer.ToString();
            // update our state if we hit the end
            if ((CompiledTokenizerEnumerator.EosSymbol == this._current.SymbolId)) {
                this.State = CompiledTokenizerEnumerator.AfterEnd;
            }
            return (false 
                        == (CompiledTokenizerEnumerator.AfterEnd == this.State));
        }
        void IDisposable.Dispose() {
            this._input.Dispose();
            this.State = CompiledTokenizerEnumerator.Disposed;
        }
        // moves to the next position, updates the state accordingly, and tracks the cursor position
        protected virtual bool MoveNextInput() {
            if (this._input.MoveNext()) {
                if ((false 
                            == (CompiledTokenizerEnumerator.BeforeBegin == this.State))) {
                    this._position = (this._position + 1);
                    if (('\n' == this._input.Current)) {
                        this._column = 1;
                        this._line = (this._line + 1);
                    }
                    else {
                        if (('\t' == this._input.Current)) {
                            this._column = (this._column + CompiledTokenizerEnumerator._TabWidth);
                        }
                        else {
                            this._column = (this._column + 1);
                        }
                    }
                }
                else {
                    // corner case for first move
                    if (('\n' == this._input.Current)) {
                        this._column = 1;
                        this._line = (this._line + 1);
                    }
                    else {
                        if (('\t' == this._input.Current)) {
                            this._column = (this._column 
                                        + (CompiledTokenizerEnumerator._TabWidth - 1));
                        }
                    }
                }
                return true;
            }
            this.State = CompiledTokenizerEnumerator.InnerFinished;
            return false;
        }
        // reads until the specified character, consuming it, returning false if it wasn't found
        bool _TryReadUntil(char character) {
            char ch = this._input.Current;
            this.ValueBuffer.Append(ch);
            if ((ch == character)) {
                return true;
            }
            for (
            ; (this.MoveNextInput() 
                        && (false 
                        == (this._input.Current == character))); 
            ) {
                this.ValueBuffer.Append(this._input.Current);
            }
            if ((false 
                        == (this.State == CompiledTokenizerEnumerator.InnerFinished))) {
                this.ValueBuffer.Append(this._input.Current);
                return (this._input.Current == character);
            }
            return false;
        }
        // reads until the string is encountered, capturing it.
        bool _TryReadUntilBlockEnd(string blockEnd) {
            for (
            ; ((false 
                        == (CompiledTokenizerEnumerator.InnerFinished == this.State)) 
                        && this._TryReadUntil(blockEnd[0])); 
            ) {
                bool found = true;
                for (int i = 1; (found 
                            && (i < blockEnd.Length)); i = (i + 1)) {
                    if ((false 
                                == (this.MoveNextInput() 
                                || (false 
                                == (this._input.Current == blockEnd[i]))))) {
                        found = false;
                    }
                    else {
                        if ((false 
                                    == (CompiledTokenizerEnumerator.InnerFinished == this.State))) {
                            this.ValueBuffer.Append(this._input.Current);
                        }
                    }
                }
                if (found) {
                    this.MoveNextInput();
                    return true;
                }
            }
            return false;
        }
        // lex the next token
        protected abstract int Lex();
        static void _ThrowDisposed() {
            throw new ObjectDisposedException("CompiledTokenizerEnumerator");
        }
    }
    internal class SampleTokenizer : CompiledTokenizer {
        public override IEnumerator<Token> GetEnumerator() {
            return new SampleTokenizerEnumerator(this.Input.GetEnumerator());
        }
        public SampleTokenizer(IEnumerable<char> input) : 
                base(input) {
        }
        public const int Identifier = 1;
        public const int Integer = 2;
        public const int Plus = 3;
        public const int Minus = 4;
        public const int Multiply = 5;
        public const int Divide = 6;
        public const int LParen = 7;
        public const int RParen = 8;
        public const int Whitespace = 9;
        public const int LineComment = 10;
        public const int BlockComment = 11;
    }
    internal class SampleTokenizerEnumerator : CompiledTokenizerEnumerator {
        public SampleTokenizerEnumerator(IEnumerator<char> input) : 
                base(input) {
        }
        protected override int Lex() {
            char current;
            if ((CompiledTokenizerEnumerator.BeforeBegin == this.State)) {
                if ((false == this.MoveNextInput())) {
                    return CompiledTokenizerEnumerator.ErrorSymbol;
                }
                this.State = CompiledTokenizerEnumerator.Enumerating;
            }
            else {
                if (((this.State == CompiledTokenizerEnumerator.InnerFinished) 
                            || (this.State == CompiledTokenizerEnumerator.AfterEnd))) {
                    return CompiledTokenizerEnumerator.EosSymbol;
                }
            }
            current = this.CurrentInput;
            // q0
            if ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((current >= 'A') 
                        && (current <= 'Z')) 
                        || ((current >= 'a') 
                        && (current <= 'z'))) 
                        || (current == 'ª')) 
                        || (current == 'µ')) 
                        || (current == 'º')) 
                        || ((current >= 'À') 
                        && (current <= 'Ö'))) 
                        || ((current >= 'Ø') 
                        && (current <= 'ö'))) 
                        || ((current >= 'ø') 
                        && (current <= 'ˁ'))) 
                        || ((current >= 'ˆ') 
                        && (current <= 'ˑ'))) 
                        || ((current >= 'ˠ') 
                        && (current <= 'ˤ'))) 
                        || (current == 'ˬ')) 
                        || (current == 'ˮ')) 
                        || ((current >= 'Ͱ') 
                        && (current <= 'ʹ'))) 
                        || ((current >= 'Ͷ') 
                        && (current <= 'ͷ'))) 
                        || ((current >= 'ͺ') 
                        && (current <= 'ͽ'))) 
                        || (current == 'Ϳ')) 
                        || (current == 'Ά')) 
                        || ((current >= 'Έ') 
                        && (current <= 'Ί'))) 
                        || (current == 'Ό')) 
                        || ((current >= 'Ύ') 
                        && (current <= 'Ρ'))) 
                        || ((current >= 'Σ') 
                        && (current <= 'ϵ'))) 
                        || ((current >= 'Ϸ') 
                        && (current <= 'ҁ'))) 
                        || ((current >= 'Ҋ') 
                        && (current <= 'ԯ'))) 
                        || ((current >= 'Ա') 
                        && (current <= 'Ֆ'))) 
                        || (current == 'ՙ')) 
                        || ((current >= 'ա') 
                        && (current <= 'և'))) 
                        || ((current >= 'א') 
                        && (current <= 'ת'))) 
                        || ((current >= 'װ') 
                        && (current <= 'ײ'))) 
                        || ((current >= 'ؠ') 
                        && (current <= 'ي'))) 
                        || ((current >= 'ٮ') 
                        && (current <= 'ٯ'))) 
                        || ((current >= 'ٱ') 
                        && (current <= 'ۓ'))) 
                        || (current == 'ە')) 
                        || ((current >= 'ۥ') 
                        && (current <= 'ۦ'))) 
                        || ((current >= 'ۮ') 
                        && (current <= 'ۯ'))) 
                        || ((current >= 'ۺ') 
                        && (current <= 'ۼ'))) 
                        || (current == 'ۿ')) 
                        || (current == 'ܐ')) 
                        || ((current >= 'ܒ') 
                        && (current <= 'ܯ'))) 
                        || ((current >= 'ݍ') 
                        && (current <= 'ޥ'))) 
                        || (current == 'ޱ')) 
                        || ((current >= 'ߊ') 
                        && (current <= 'ߪ'))) 
                        || ((current >= 'ߴ') 
                        && (current <= 'ߵ'))) 
                        || (current == 'ߺ')) 
                        || ((current >= 'ࠀ') 
                        && (current <= 'ࠕ'))) 
                        || (current == 'ࠚ')) 
                        || (current == 'ࠤ')) 
                        || (current == 'ࠨ')) 
                        || ((current >= 'ࡀ') 
                        && (current <= 'ࡘ'))) 
                        || ((current >= 'ࢠ') 
                        && (current <= 'ࢴ'))) 
                        || ((current >= 'ऄ') 
                        && (current <= 'ह'))) 
                        || (current == 'ऽ')) 
                        || (current == 'ॐ')) 
                        || ((current >= 'क़') 
                        && (current <= 'ॡ'))) 
                        || ((current >= 'ॱ') 
                        && (current <= 'ঀ'))) 
                        || ((current >= 'অ') 
                        && (current <= 'ঌ'))) 
                        || ((current >= 'এ') 
                        && (current <= 'ঐ'))) 
                        || ((current >= 'ও') 
                        && (current <= 'ন'))) 
                        || ((current >= 'প') 
                        && (current <= 'র'))) 
                        || (current == 'ল')) 
                        || ((current >= 'শ') 
                        && (current <= 'হ'))) 
                        || (current == 'ঽ')) 
                        || (current == 'ৎ')) 
                        || ((current >= 'ড়') 
                        && (current <= 'ঢ়'))) 
                        || ((current >= 'য়') 
                        && (current <= 'ৡ'))) 
                        || ((current >= 'ৰ') 
                        && (current <= 'ৱ'))) 
                        || ((current >= 'ਅ') 
                        && (current <= 'ਊ'))) 
                        || ((current >= 'ਏ') 
                        && (current <= 'ਐ'))) 
                        || ((current >= 'ਓ') 
                        && (current <= 'ਨ'))) 
                        || ((current >= 'ਪ') 
                        && (current <= 'ਰ'))) 
                        || ((current >= 'ਲ') 
                        && (current <= 'ਲ਼'))) 
                        || ((current >= 'ਵ') 
                        && (current <= 'ਸ਼'))) 
                        || ((current >= 'ਸ') 
                        && (current <= 'ਹ'))) 
                        || ((current >= 'ਖ਼') 
                        && (current <= 'ੜ'))) 
                        || (current == 'ਫ਼')) 
                        || ((current >= 'ੲ') 
                        && (current <= 'ੴ'))) 
                        || ((current >= 'અ') 
                        && (current <= 'ઍ'))) 
                        || ((current >= 'એ') 
                        && (current <= 'ઑ'))) 
                        || ((current >= 'ઓ') 
                        && (current <= 'ન'))) 
                        || ((current >= 'પ') 
                        && (current <= 'ર'))) 
                        || ((current >= 'લ') 
                        && (current <= 'ળ'))) 
                        || ((current >= 'વ') 
                        && (current <= 'હ'))) 
                        || (current == 'ઽ')) 
                        || (current == 'ૐ')) 
                        || ((current >= 'ૠ') 
                        && (current <= 'ૡ'))) 
                        || (current == 'ૹ')) 
                        || ((current >= 'ଅ') 
                        && (current <= 'ଌ'))) 
                        || ((current >= 'ଏ') 
                        && (current <= 'ଐ'))) 
                        || ((current >= 'ଓ') 
                        && (current <= 'ନ'))) 
                        || ((current >= 'ପ') 
                        && (current <= 'ର'))) 
                        || ((current >= 'ଲ') 
                        && (current <= 'ଳ'))) 
                        || ((current >= 'ଵ') 
                        && (current <= 'ହ'))) 
                        || (current == 'ଽ')) 
                        || ((current >= 'ଡ଼') 
                        && (current <= 'ଢ଼'))) 
                        || ((current >= 'ୟ') 
                        && (current <= 'ୡ'))) 
                        || (current == 'ୱ')) 
                        || (current == 'ஃ')) 
                        || ((current >= 'அ') 
                        && (current <= 'ஊ'))) 
                        || ((current >= 'எ') 
                        && (current <= 'ஐ'))) 
                        || ((current >= 'ஒ') 
                        && (current <= 'க'))) 
                        || ((current >= 'ங') 
                        && (current <= 'ச'))) 
                        || (current == 'ஜ')) 
                        || ((current >= 'ஞ') 
                        && (current <= 'ட'))) 
                        || ((current >= 'ண') 
                        && (current <= 'த'))) 
                        || ((current >= 'ந') 
                        && (current <= 'ப'))) 
                        || ((current >= 'ம') 
                        && (current <= 'ஹ'))) 
                        || (current == 'ௐ')) 
                        || ((current >= 'అ') 
                        && (current <= 'ఌ'))) 
                        || ((current >= 'ఎ') 
                        && (current <= 'ఐ'))) 
                        || ((current >= 'ఒ') 
                        && (current <= 'న'))) 
                        || ((current >= 'ప') 
                        && (current <= 'హ'))) 
                        || (current == 'ఽ')) 
                        || ((current >= 'ౘ') 
                        && (current <= 'ౚ'))) 
                        || ((current >= 'ౠ') 
                        && (current <= 'ౡ'))) 
                        || ((current >= 'ಅ') 
                        && (current <= 'ಌ'))) 
                        || ((current >= 'ಎ') 
                        && (current <= 'ಐ'))) 
                        || ((current >= 'ಒ') 
                        && (current <= 'ನ'))) 
                        || ((current >= 'ಪ') 
                        && (current <= 'ಳ'))) 
                        || ((current >= 'ವ') 
                        && (current <= 'ಹ'))) 
                        || (current == 'ಽ')) 
                        || (current == 'ೞ')) 
                        || ((current >= 'ೠ') 
                        && (current <= 'ೡ'))) 
                        || ((current >= 'ೱ') 
                        && (current <= 'ೲ'))) 
                        || ((current >= 'അ') 
                        && (current <= 'ഌ'))) 
                        || ((current >= 'എ') 
                        && (current <= 'ഐ'))) 
                        || ((current >= 'ഒ') 
                        && (current <= 'ഺ'))) 
                        || (current == 'ഽ')) 
                        || (current == 'ൎ')) 
                        || ((current >= 'ൟ') 
                        && (current <= 'ൡ'))) 
                        || ((current >= 'ൺ') 
                        && (current <= 'ൿ'))) 
                        || ((current >= 'අ') 
                        && (current <= 'ඖ'))) 
                        || ((current >= 'ක') 
                        && (current <= 'න'))) 
                        || ((current >= 'ඳ') 
                        && (current <= 'ර'))) 
                        || (current == 'ල')) 
                        || ((current >= 'ව') 
                        && (current <= 'ෆ'))) 
                        || ((current >= 'ก') 
                        && (current <= 'ะ'))) 
                        || ((current >= 'า') 
                        && (current <= 'ำ'))) 
                        || ((current >= 'เ') 
                        && (current <= 'ๆ'))) 
                        || ((current >= 'ກ') 
                        && (current <= 'ຂ'))) 
                        || (current == 'ຄ')) 
                        || ((current >= 'ງ') 
                        && (current <= 'ຈ'))) 
                        || (current == 'ຊ')) 
                        || (current == 'ຍ')) 
                        || ((current >= 'ດ') 
                        && (current <= 'ທ'))) 
                        || ((current >= 'ນ') 
                        && (current <= 'ຟ'))) 
                        || ((current >= 'ມ') 
                        && (current <= 'ຣ'))) 
                        || (current == 'ລ')) 
                        || (current == 'ວ')) 
                        || ((current >= 'ສ') 
                        && (current <= 'ຫ'))) 
                        || ((current >= 'ອ') 
                        && (current <= 'ະ'))) 
                        || ((current >= 'າ') 
                        && (current <= 'ຳ'))) 
                        || (current == 'ຽ')) 
                        || ((current >= 'ເ') 
                        && (current <= 'ໄ'))) 
                        || (current == 'ໆ')) 
                        || ((current >= 'ໜ') 
                        && (current <= 'ໟ'))) 
                        || (current == 'ༀ')) 
                        || ((current >= 'ཀ') 
                        && (current <= 'ཇ'))) 
                        || ((current >= 'ཉ') 
                        && (current <= 'ཬ'))) 
                        || ((current >= 'ྈ') 
                        && (current <= 'ྌ'))) 
                        || ((current >= 'က') 
                        && (current <= 'ဪ'))) 
                        || (current == 'ဿ')) 
                        || ((current >= 'ၐ') 
                        && (current <= 'ၕ'))) 
                        || ((current >= 'ၚ') 
                        && (current <= 'ၝ'))) 
                        || (current == 'ၡ')) 
                        || ((current >= 'ၥ') 
                        && (current <= 'ၦ'))) 
                        || ((current >= 'ၮ') 
                        && (current <= 'ၰ'))) 
                        || ((current >= 'ၵ') 
                        && (current <= 'ႁ'))) 
                        || (current == 'ႎ')) 
                        || ((current >= 'Ⴀ') 
                        && (current <= 'Ⴥ'))) 
                        || (current == 'Ⴧ')) 
                        || (current == 'Ⴭ')) 
                        || ((current >= 'ა') 
                        && (current <= 'ჺ'))) 
                        || ((current >= 'ჼ') 
                        && (current <= 'ቈ'))) 
                        || ((current >= 'ቊ') 
                        && (current <= 'ቍ'))) 
                        || ((current >= 'ቐ') 
                        && (current <= 'ቖ'))) 
                        || (current == 'ቘ')) 
                        || ((current >= 'ቚ') 
                        && (current <= 'ቝ'))) 
                        || ((current >= 'በ') 
                        && (current <= 'ኈ'))) 
                        || ((current >= 'ኊ') 
                        && (current <= 'ኍ'))) 
                        || ((current >= 'ነ') 
                        && (current <= 'ኰ'))) 
                        || ((current >= 'ኲ') 
                        && (current <= 'ኵ'))) 
                        || ((current >= 'ኸ') 
                        && (current <= 'ኾ'))) 
                        || (current == 'ዀ')) 
                        || ((current >= 'ዂ') 
                        && (current <= 'ዅ'))) 
                        || ((current >= 'ወ') 
                        && (current <= 'ዖ'))) 
                        || ((current >= 'ዘ') 
                        && (current <= 'ጐ'))) 
                        || ((current >= 'ጒ') 
                        && (current <= 'ጕ'))) 
                        || ((current >= 'ጘ') 
                        && (current <= 'ፚ'))) 
                        || ((current >= 'ᎀ') 
                        && (current <= 'ᎏ'))) 
                        || ((current >= 'Ꭰ') 
                        && (current <= 'Ᏽ'))) 
                        || ((current >= 'ᏸ') 
                        && (current <= 'ᏽ'))) 
                        || ((current >= 'ᐁ') 
                        && (current <= 'ᙬ'))) 
                        || ((current >= 'ᙯ') 
                        && (current <= 'ᙿ'))) 
                        || ((current >= 'ᚁ') 
                        && (current <= 'ᚚ'))) 
                        || ((current >= 'ᚠ') 
                        && (current <= 'ᛪ'))) 
                        || ((current >= 'ᛱ') 
                        && (current <= 'ᛸ'))) 
                        || ((current >= 'ᜀ') 
                        && (current <= 'ᜌ'))) 
                        || ((current >= 'ᜎ') 
                        && (current <= 'ᜑ'))) 
                        || ((current >= 'ᜠ') 
                        && (current <= 'ᜱ'))) 
                        || ((current >= 'ᝀ') 
                        && (current <= 'ᝑ'))) 
                        || ((current >= 'ᝠ') 
                        && (current <= 'ᝬ'))) 
                        || ((current >= 'ᝮ') 
                        && (current <= 'ᝰ'))) 
                        || ((current >= 'ក') 
                        && (current <= 'ឳ'))) 
                        || (current == 'ៗ')) 
                        || (current == 'ៜ')) 
                        || ((current >= 'ᠠ') 
                        && (current <= 'ᡷ'))) 
                        || ((current >= 'ᢀ') 
                        && (current <= 'ᢨ'))) 
                        || (current == 'ᢪ')) 
                        || ((current >= 'ᢰ') 
                        && (current <= 'ᣵ'))) 
                        || ((current >= 'ᤀ') 
                        && (current <= 'ᤞ'))) 
                        || ((current >= 'ᥐ') 
                        && (current <= 'ᥭ'))) 
                        || ((current >= 'ᥰ') 
                        && (current <= 'ᥴ'))) 
                        || ((current >= 'ᦀ') 
                        && (current <= 'ᦫ'))) 
                        || ((current >= 'ᦰ') 
                        && (current <= 'ᧉ'))) 
                        || ((current >= 'ᨀ') 
                        && (current <= 'ᨖ'))) 
                        || ((current >= 'ᨠ') 
                        && (current <= 'ᩔ'))) 
                        || (current == 'ᪧ')) 
                        || ((current >= 'ᬅ') 
                        && (current <= 'ᬳ'))) 
                        || ((current >= 'ᭅ') 
                        && (current <= 'ᭋ'))) 
                        || ((current >= 'ᮃ') 
                        && (current <= 'ᮠ'))) 
                        || ((current >= 'ᮮ') 
                        && (current <= 'ᮯ'))) 
                        || ((current >= 'ᮺ') 
                        && (current <= 'ᯥ'))) 
                        || ((current >= 'ᰀ') 
                        && (current <= 'ᰣ'))) 
                        || ((current >= 'ᱍ') 
                        && (current <= 'ᱏ'))) 
                        || ((current >= 'ᱚ') 
                        && (current <= 'ᱽ'))) 
                        || ((current >= 'ᳩ') 
                        && (current <= 'ᳬ'))) 
                        || ((current >= 'ᳮ') 
                        && (current <= 'ᳱ'))) 
                        || ((current >= 'ᳵ') 
                        && (current <= 'ᳶ'))) 
                        || ((current >= 'ᴀ') 
                        && (current <= 'ᶿ'))) 
                        || ((current >= 'Ḁ') 
                        && (current <= 'ἕ'))) 
                        || ((current >= 'Ἐ') 
                        && (current <= 'Ἕ'))) 
                        || ((current >= 'ἠ') 
                        && (current <= 'ὅ'))) 
                        || ((current >= 'Ὀ') 
                        && (current <= 'Ὅ'))) 
                        || ((current >= 'ὐ') 
                        && (current <= 'ὗ'))) 
                        || (current == 'Ὑ')) 
                        || (current == 'Ὓ')) 
                        || (current == 'Ὕ')) 
                        || ((current >= 'Ὗ') 
                        && (current <= 'ώ'))) 
                        || ((current >= 'ᾀ') 
                        && (current <= 'ᾴ'))) 
                        || ((current >= 'ᾶ') 
                        && (current <= 'ᾼ'))) 
                        || (current == 'ι')) 
                        || ((current >= 'ῂ') 
                        && (current <= 'ῄ'))) 
                        || ((current >= 'ῆ') 
                        && (current <= 'ῌ'))) 
                        || ((current >= 'ῐ') 
                        && (current <= 'ΐ'))) 
                        || ((current >= 'ῖ') 
                        && (current <= 'Ί'))) 
                        || ((current >= 'ῠ') 
                        && (current <= 'Ῥ'))) 
                        || ((current >= 'ῲ') 
                        && (current <= 'ῴ'))) 
                        || ((current >= 'ῶ') 
                        && (current <= 'ῼ'))) 
                        || (current == 'ⁱ')) 
                        || (current == 'ⁿ')) 
                        || ((current >= 'ₐ') 
                        && (current <= 'ₜ'))) 
                        || (current == 'ℂ')) 
                        || (current == 'ℇ')) 
                        || ((current >= 'ℊ') 
                        && (current <= 'ℓ'))) 
                        || (current == 'ℕ')) 
                        || ((current >= 'ℙ') 
                        && (current <= 'ℝ'))) 
                        || (current == 'ℤ')) 
                        || (current == 'Ω')) 
                        || (current == 'ℨ')) 
                        || ((current >= 'K') 
                        && (current <= 'ℭ'))) 
                        || ((current >= 'ℯ') 
                        && (current <= 'ℹ'))) 
                        || ((current >= 'ℼ') 
                        && (current <= 'ℿ'))) 
                        || ((current >= 'ⅅ') 
                        && (current <= 'ⅉ'))) 
                        || (current == 'ⅎ')) 
                        || ((current >= 'Ↄ') 
                        && (current <= 'ↄ'))) 
                        || ((current >= 'Ⰰ') 
                        && (current <= 'Ⱞ'))) 
                        || ((current >= 'ⰰ') 
                        && (current <= 'ⱞ'))) 
                        || ((current >= 'Ⱡ') 
                        && (current <= 'ⳤ'))) 
                        || ((current >= 'Ⳬ') 
                        && (current <= 'ⳮ'))) 
                        || ((current >= 'Ⳳ') 
                        && (current <= 'ⳳ'))) 
                        || ((current >= 'ⴀ') 
                        && (current <= 'ⴥ'))) 
                        || (current == 'ⴧ')) 
                        || (current == 'ⴭ')) 
                        || ((current >= 'ⴰ') 
                        && (current <= 'ⵧ'))) 
                        || (current == 'ⵯ')) 
                        || ((current >= 'ⶀ') 
                        && (current <= 'ⶖ'))) 
                        || ((current >= 'ⶠ') 
                        && (current <= 'ⶦ'))) 
                        || ((current >= 'ⶨ') 
                        && (current <= 'ⶮ'))) 
                        || ((current >= 'ⶰ') 
                        && (current <= 'ⶶ'))) 
                        || ((current >= 'ⶸ') 
                        && (current <= 'ⶾ'))) 
                        || ((current >= 'ⷀ') 
                        && (current <= 'ⷆ'))) 
                        || ((current >= 'ⷈ') 
                        && (current <= 'ⷎ'))) 
                        || ((current >= 'ⷐ') 
                        && (current <= 'ⷖ'))) 
                        || ((current >= 'ⷘ') 
                        && (current <= 'ⷞ'))) 
                        || (current == 'ⸯ')) 
                        || ((current >= '々') 
                        && (current <= '〆'))) 
                        || ((current >= '〱') 
                        && (current <= '〵'))) 
                        || ((current >= '〻') 
                        && (current <= '〼'))) 
                        || ((current >= 'ぁ') 
                        && (current <= 'ゖ'))) 
                        || ((current >= 'ゝ') 
                        && (current <= 'ゟ'))) 
                        || ((current >= 'ァ') 
                        && (current <= 'ヺ'))) 
                        || ((current >= 'ー') 
                        && (current <= 'ヿ'))) 
                        || ((current >= 'ㄅ') 
                        && (current <= 'ㄭ'))) 
                        || ((current >= 'ㄱ') 
                        && (current <= 'ㆎ'))) 
                        || ((current >= 'ㆠ') 
                        && (current <= 'ㆺ'))) 
                        || ((current >= 'ㇰ') 
                        && (current <= 'ㇿ'))) 
                        || ((current >= '㐀') 
                        && (current <= '䶵'))) 
                        || ((current >= '一') 
                        && (current <= '鿕'))) 
                        || ((current >= 'ꀀ') 
                        && (current <= 'ꒌ'))) 
                        || ((current >= 'ꓐ') 
                        && (current <= 'ꓽ'))) 
                        || ((current >= 'ꔀ') 
                        && (current <= 'ꘌ'))) 
                        || ((current >= 'ꘐ') 
                        && (current <= 'ꘟ'))) 
                        || ((current >= 'ꘪ') 
                        && (current <= 'ꘫ'))) 
                        || ((current >= 'Ꙁ') 
                        && (current <= 'ꙮ'))) 
                        || ((current >= 'ꙿ') 
                        && (current <= 'ꚝ'))) 
                        || ((current >= 'ꚠ') 
                        && (current <= 'ꛥ'))) 
                        || ((current >= 'ꜗ') 
                        && (current <= 'ꜟ'))) 
                        || ((current >= 'Ꜣ') 
                        && (current <= 'ꞈ'))) 
                        || ((current >= 'Ꞌ') 
                        && (current <= 'Ɬ'))) 
                        || ((current >= 'Ʞ') 
                        && (current <= 'ꞷ'))) 
                        || ((current >= 'ꟷ') 
                        && (current <= 'ꠁ'))) 
                        || ((current >= 'ꠃ') 
                        && (current <= 'ꠅ'))) 
                        || ((current >= 'ꠇ') 
                        && (current <= 'ꠊ'))) 
                        || ((current >= 'ꠌ') 
                        && (current <= 'ꠢ'))) 
                        || ((current >= 'ꡀ') 
                        && (current <= 'ꡳ'))) 
                        || ((current >= 'ꢂ') 
                        && (current <= 'ꢳ'))) 
                        || ((current >= 'ꣲ') 
                        && (current <= 'ꣷ'))) 
                        || (current == 'ꣻ')) 
                        || (current == 'ꣽ')) 
                        || ((current >= 'ꤊ') 
                        && (current <= 'ꤥ'))) 
                        || ((current >= 'ꤰ') 
                        && (current <= 'ꥆ'))) 
                        || ((current >= 'ꥠ') 
                        && (current <= 'ꥼ'))) 
                        || ((current >= 'ꦄ') 
                        && (current <= 'ꦲ'))) 
                        || (current == 'ꧏ')) 
                        || ((current >= 'ꧠ') 
                        && (current <= 'ꧤ'))) 
                        || ((current >= 'ꧦ') 
                        && (current <= 'ꧯ'))) 
                        || ((current >= 'ꧺ') 
                        && (current <= 'ꧾ'))) 
                        || ((current >= 'ꨀ') 
                        && (current <= 'ꨨ'))) 
                        || ((current >= 'ꩀ') 
                        && (current <= 'ꩂ'))) 
                        || ((current >= 'ꩄ') 
                        && (current <= 'ꩋ'))) 
                        || ((current >= 'ꩠ') 
                        && (current <= 'ꩶ'))) 
                        || (current == 'ꩺ')) 
                        || ((current >= 'ꩾ') 
                        && (current <= 'ꪯ'))) 
                        || (current == 'ꪱ')) 
                        || ((current >= 'ꪵ') 
                        && (current <= 'ꪶ'))) 
                        || ((current >= 'ꪹ') 
                        && (current <= 'ꪽ'))) 
                        || (current == 'ꫀ')) 
                        || (current == 'ꫂ')) 
                        || ((current >= 'ꫛ') 
                        && (current <= 'ꫝ'))) 
                        || ((current >= 'ꫠ') 
                        && (current <= 'ꫪ'))) 
                        || ((current >= 'ꫲ') 
                        && (current <= 'ꫴ'))) 
                        || ((current >= 'ꬁ') 
                        && (current <= 'ꬆ'))) 
                        || ((current >= 'ꬉ') 
                        && (current <= 'ꬎ'))) 
                        || ((current >= 'ꬑ') 
                        && (current <= 'ꬖ'))) 
                        || ((current >= 'ꬠ') 
                        && (current <= 'ꬦ'))) 
                        || ((current >= 'ꬨ') 
                        && (current <= 'ꬮ'))) 
                        || ((current >= 'ꬰ') 
                        && (current <= 'ꭚ'))) 
                        || ((current >= 'ꭜ') 
                        && (current <= 'ꭥ'))) 
                        || ((current >= 'ꭰ') 
                        && (current <= 'ꯢ'))) 
                        || ((current >= '가') 
                        && (current <= '힣'))) 
                        || ((current >= 'ힰ') 
                        && (current <= 'ퟆ'))) 
                        || ((current >= 'ퟋ') 
                        && (current <= 'ퟻ'))) 
                        || ((current >= '豈') 
                        && (current <= '舘'))) 
                        || ((current >= '並') 
                        && (current <= '龎'))) 
                        || ((current >= 'ﬀ') 
                        && (current <= 'ﬆ'))) 
                        || ((current >= 'ﬓ') 
                        && (current <= 'ﬗ'))) 
                        || (current == 'יִ')) 
                        || ((current >= 'ײַ') 
                        && (current <= 'ﬨ'))) 
                        || ((current >= 'שׁ') 
                        && (current <= 'זּ'))) 
                        || ((current >= 'טּ') 
                        && (current <= 'לּ'))) 
                        || (current == 'מּ')) 
                        || ((current >= 'נּ') 
                        && (current <= 'סּ'))) 
                        || ((current >= 'ףּ') 
                        && (current <= 'פּ'))) 
                        || ((current >= 'צּ') 
                        && (current <= 'ﮱ'))) 
                        || ((current >= 'ﯓ') 
                        && (current <= 'ﴽ'))) 
                        || ((current >= 'ﵐ') 
                        && (current <= 'ﶏ'))) 
                        || ((current >= 'ﶒ') 
                        && (current <= 'ﷇ'))) 
                        || ((current >= 'ﷰ') 
                        && (current <= 'ﷻ'))) 
                        || ((current >= 'ﹰ') 
                        && (current <= 'ﹴ'))) 
                        || ((current >= 'ﹶ') 
                        && (current <= 'ﻼ'))) 
                        || ((current >= 'Ａ') 
                        && (current <= 'Ｚ'))) 
                        || ((current >= 'ａ') 
                        && (current <= 'ｚ'))) 
                        || ((current >= 'ｦ') 
                        && (current <= 'ﾾ'))) 
                        || ((current >= 'ￂ') 
                        && (current <= 'ￇ'))) 
                        || ((current >= 'ￊ') 
                        && (current <= 'ￏ'))) 
                        || ((current >= 'ￒ') 
                        && (current <= 'ￗ'))) 
                        || ((current >= 'ￚ') 
                        && (current <= 'ￜ')))) {
                this.ValueBuffer.Append(current);
                if ((false == this.MoveNextInput())) {
                    return SampleTokenizer.Identifier;
                }
                current = this.CurrentInput;
                goto q1;
            }
            if ((current == '_')) {
                this.ValueBuffer.Append(current);
                if ((false == this.MoveNextInput())) {
                    return SampleTokenizer.Identifier;
                }
                current = this.CurrentInput;
                goto q3;
            }
            if (((current >= '0') 
                        && (current <= '9'))) {
                this.ValueBuffer.Append(current);
                if ((false == this.MoveNextInput())) {
                    return SampleTokenizer.Integer;
                }
                current = this.CurrentInput;
                goto q4;
            }
            if ((current == '+')) {
                this.ValueBuffer.Append(current);
                if ((false == this.MoveNextInput())) {
                    return SampleTokenizer.Plus;
                }
                current = this.CurrentInput;
                goto q5;
            }
            if ((current == '-')) {
                this.ValueBuffer.Append(current);
                if ((false == this.MoveNextInput())) {
                    return SampleTokenizer.Minus;
                }
                current = this.CurrentInput;
                goto q6;
            }
            if ((current == '*')) {
                this.ValueBuffer.Append(current);
                if ((false == this.MoveNextInput())) {
                    return SampleTokenizer.Multiply;
                }
                current = this.CurrentInput;
                goto q7;
            }
            if ((current == '/')) {
                this.ValueBuffer.Append(current);
                if ((false == this.MoveNextInput())) {
                    return SampleTokenizer.Divide;
                }
                current = this.CurrentInput;
                goto q8;
            }
            if ((current == '(')) {
                this.ValueBuffer.Append(current);
                if ((false == this.MoveNextInput())) {
                    return SampleTokenizer.LParen;
                }
                current = this.CurrentInput;
                goto q11;
            }
            if ((current == ')')) {
                this.ValueBuffer.Append(current);
                if ((false == this.MoveNextInput())) {
                    return SampleTokenizer.RParen;
                }
                current = this.CurrentInput;
                goto q12;
            }
            if ((((current >= '\t') 
                        && (current <= '\r')) 
                        || (current == ' '))) {
                this.ValueBuffer.Append(current);
                if ((false == this.MoveNextInput())) {
                    return SampleTokenizer.Whitespace;
                }
                current = this.CurrentInput;
                goto q13;
            }
            goto error;
        q1:
            if (((((current >= '0') 
                        && (current <= '9')) 
                        || ((current >= 'A') 
                        && (current <= 'Z'))) 
                        || (current == '_'))) {
                this.ValueBuffer.Append(current);
                if ((false == this.MoveNextInput())) {
                    return SampleTokenizer.Identifier;
                }
                current = this.CurrentInput;
                goto q2;
            }
            return SampleTokenizer.Identifier;
        q2:
            if (((((current >= '0') 
                        && (current <= '9')) 
                        || ((current >= 'A') 
                        && (current <= 'Z'))) 
                        || (current == '_'))) {
                this.ValueBuffer.Append(current);
                if ((false == this.MoveNextInput())) {
                    return SampleTokenizer.Identifier;
                }
                current = this.CurrentInput;
                goto q2;
            }
            return SampleTokenizer.Identifier;
        q3:
            if (((((current >= '0') 
                        && (current <= '9')) 
                        || ((current >= 'A') 
                        && (current <= 'Z'))) 
                        || (current == '_'))) {
                this.ValueBuffer.Append(current);
                if ((false == this.MoveNextInput())) {
                    return SampleTokenizer.Identifier;
                }
                current = this.CurrentInput;
                goto q2;
            }
            return SampleTokenizer.Identifier;
        q4:
            if (((current >= '0') 
                        && (current <= '9'))) {
                this.ValueBuffer.Append(current);
                if ((false == this.MoveNextInput())) {
                    return SampleTokenizer.Integer;
                }
                current = this.CurrentInput;
                goto q4;
            }
            return SampleTokenizer.Integer;
        q5:
            return SampleTokenizer.Plus;
        q6:
            return SampleTokenizer.Minus;
        q7:
            return SampleTokenizer.Multiply;
        q8:
            if ((current == '/')) {
                this.ValueBuffer.Append(current);
                if ((false == this.MoveNextInput())) {
                    return SampleTokenizer.LineComment;
                }
                current = this.CurrentInput;
                goto q9;
            }
            if ((current == '*')) {
                this.ValueBuffer.Append(current);
                if ((false == this.MoveNextInput())) {
                    return SampleTokenizer.BlockComment;
                }
                current = this.CurrentInput;
                goto q10;
            }
            return SampleTokenizer.Divide;
        q9:
            if ((((current >= '\0') 
                        && (current <= '\t')) 
                        || ((current >= '') 
                        && (current <= '￿')))) {
                this.ValueBuffer.Append(current);
                if ((false == this.MoveNextInput())) {
                    return SampleTokenizer.LineComment;
                }
                current = this.CurrentInput;
                goto q9;
            }
            return SampleTokenizer.LineComment;
        q10:
            return SampleTokenizer.BlockComment;
        q11:
            return SampleTokenizer.LParen;
        q12:
            return SampleTokenizer.RParen;
        q13:
            return SampleTokenizer.Whitespace;
        error:
            this.ValueBuffer.Append(current);
            this.MoveNextInput();
            return CompiledTokenizerEnumerator.ErrorSymbol;
        }
        protected override string GetBlockEnd(int symbolId) {
            if ((SampleTokenizer.BlockComment == symbolId)) {
                return "*/";
            }
            return null;
        }
        protected override bool IsHidden(int symbolId) {
            return (((SampleTokenizer.Whitespace == symbolId) 
                        || (SampleTokenizer.LineComment == symbolId)) 
                        || (SampleTokenizer.BlockComment == symbolId));
        }
    }
}
