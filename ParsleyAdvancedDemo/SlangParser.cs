//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CD {
    using System;
    using System.Text;
    using System.Collections.Generic;
    
    /// <summary>Parses the indicated grammar. Refer to C:\dev\BuildPack\ParsleyAdvancedDemo\Slang.xbnf</summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Parsley", "0.1.2.0")]
    internal partial class SlangParser {
        internal const int ErrorSymbol = -1;
        internal const int EosSymbol = -2;
        public const int UsingDirective = 0;
        public const int CompileUnit = 1;
        public const int Namespace = 3;
        public const int NamespaceName = 7;
        public const int Identifier = 26;
        public const int namespaceKeyword = 390;
        public const int usingKeyword = 391;
        public const int verbatimIdentifier = 392;
        public const int identifier2 = 418;
        public const int lbrace = 451;
        public const int rbrace = 452;
        public const int dot = 455;
        public const int semi = 469;
        internal static ParseNode ParseUsingDirective(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // UsingDirective -> usingKeyword NamespaceName semi
            if ((SlangParser.usingKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[3];
                if ((false 
                            == (SlangParser.usingKeyword == context.SymbolId))) {
                    context.Error("Expecting usingKeyword");
                }
                children[0] = new ParseNode(SlangParser.usingKeyword, "usingKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[1] = SlangParser.ParseNamespaceName(context);
                if ((false 
                            == (StatementParser.semi == context.SymbolId))) {
                    context.Error("Expecting semi");
                }
                children[2] = new ParseNode(StatementParser.semi, "semi", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(0, "UsingDirective", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting usingKeyword", line__, column__, position__);
        }
        internal static ParseNode ParseCompileUnit(ParserContext context) {
            // CompileUnit
            return _ParseCompileUnit(context);
        }
        /// <summary>
        /// Parses a production of the form:
        /// CompileUnit
        /// </summary>
        /// <remarks>
        /// The production rules are:
        /// CompileUnit ->
        /// </remarks>
        /// <param name="tokenizer">The tokenizer to parse with</param><returns>A <see cref="ParseNode" /> representing the parsed tokens</returns>
        public static ParseNode Parse(System.Collections.Generic.IEnumerable<Token> tokenizer) {
            ParserContext context = new ParserContext(tokenizer);
            context.EnsureStarted();
            ParseNode result = SlangParser.ParseCompileUnit(context);
            if ((false == context.IsEnded)) {
                context.Error("Unexpected remainder in input.");
            }
            return result;
        }
        internal static ParseNode ParseNamespaceNameList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // NamespaceNameList -> dot Identifier NamespaceNameListRightAssoc
            if ((ExpressionParser.dot == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.dot == context.SymbolId))) {
                    context.Error("Expecting dot");
                }
                children.Add(new ParseNode(ExpressionParser.dot, "dot", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                children.AddRange(SlangParser.ParseNamespaceNameListRightAssoc(context).Children);
                return new ParseNode(2, "NamespaceNameList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting dot", line__, column__, position__);
        }
        internal static ParseNode ParseNamespace(ParserContext context) {
            // Namespace
            return _ParseNamespace(context);
        }
        internal static ParseNode ParseNamespaceNameListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // NamespaceNameListRightAssoc -> dot Identifier NamespaceNameListRightAssoc
            if ((ExpressionParser.dot == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.dot == context.SymbolId))) {
                    context.Error("Expecting dot");
                }
                children.Add(new ParseNode(ExpressionParser.dot, "dot", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                children.AddRange(SlangParser.ParseNamespaceNameListRightAssoc(context).Children);
                return new ParseNode(6, "NamespaceNameListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // NamespaceNameListRightAssoc ->
            if (((StatementParser.semi == context.SymbolId) 
                        || (ExpressionParser.lbrace == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(6, "NamespaceNameListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting dot", line__, column__, position__);
        }
        internal static ParseNode ParseNamespaceName(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // NamespaceName -> Identifier NamespaceNamePart
            if (((ExpressionParser.verbatimIdentifier == context.SymbolId) 
                        || (ExpressionParser.identifier2 == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                children.AddRange(SlangParser.ParseNamespaceNamePart(context).Children);
                return new ParseNode(7, "NamespaceName", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting Identifier", line__, column__, position__);
        }
        internal static ParseNode ParseNamespaceNamePart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // NamespaceNamePart -> NamespaceNameList
            if ((ExpressionParser.dot == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(SlangParser.ParseNamespaceNameList(context).Children);
                return new ParseNode(8, "NamespaceNamePart", children.ToArray(), line__, column__, position__);
            }
            // NamespaceNamePart ->
            if (((StatementParser.semi == context.SymbolId) 
                        || (ExpressionParser.lbrace == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(8, "NamespaceNamePart", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting NamespaceNameList", line__, column__, position__);
        }
    }
    /// <summary>Parses the indicated grammar. Refer to C:\dev\BuildPack\ParsleyAdvancedDemo\SlangExpression.xbnf</summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Parsley", "0.1.2.0")]
    internal partial class ExpressionParser {
        internal const int ErrorSymbol = -1;
        internal const int EosSymbol = -2;
        public const int Expression = 9;
        public const int MethodArgList = 10;
        public const int MemberFieldRef = 11;
        public const int MemberInvokeRef = 12;
        public const int MemberIndexerRef = 13;
        public const int MemberAnyRef = 14;
        public const int MethodArg = 15;
        public const int TypeRef = 16;
        public const int IntrinsicType = 17;
        public const int TypeBase = 18;
        public const int TypeArraySpecRank = 19;
        public const int NewArrayPart = 20;
        public const int TypeCastExpressionPart = 21;
        public const int ArraySpecExpressionList = 22;
        public const int SubExpression = 23;
        public const int UnaryExpression = 24;
        public const int PrimaryExpression = 25;
        public const int Identifier = 26;
        public const int CastExpression = 56;
        public const int ArraySpec = 57;
        public const int TypeOrFieldRef = 58;
        public const int RelationalExpression = 105;
        public const int EqualityExpression = 107;
        public const int BitwiseAndExpression = 109;
        public const int BitwiseOrExpression = 111;
        public const int AndExpression = 113;
        public const int OrExpression = 115;
        public const int AssignExpression = 117;
        public const int TermExpression = 119;
        public const int FactorExpression = 121;
        public const int ArgList = 123;
        public const int Type = 127;
        public const int TypeElement = 129;
        public const int TypeArraySpec = 132;
        public const int NewExpression = 134;
        public const int NewObjectPart = 136;
        public const int FieldRef = 139;
        public const int TypeGenericPart = 160;
        public const int ArrayInitializer = 162;
        public const int verbatimIdentifier = 392;
        public const int outKeyword = 393;
        public const int refKeyword = 394;
        public const int typeOf = 395;
        public const int defaultOf = 396;
        public const int newKeyword = 397;
        public const int stringType = 398;
        public const int boolType = 399;
        public const int charType = 400;
        public const int floatType = 401;
        public const int doubleType = 402;
        public const int decimalType = 403;
        public const int sbyteType = 404;
        public const int byteType = 405;
        public const int shortType = 406;
        public const int ushortType = 407;
        public const int intType = 408;
        public const int uintType = 409;
        public const int longType = 410;
        public const int ulongType = 411;
        public const int objectType = 412;
        public const int boolLiteral = 413;
        public const int nullLiteral = 414;
        public const int thisRef = 415;
        public const int baseRef = 416;
        public const int verbatimStringLiteral = 417;
        public const int identifier2 = 418;
        public const int stringLiteral = 419;
        public const int characterLiteral = 420;
        public const int lte = 421;
        public const int lt = 422;
        public const int gte = 423;
        public const int gt = 424;
        public const int eqEq = 425;
        public const int notEq = 426;
        public const int eq = 427;
        public const int inc = 428;
        public const int addAssign = 429;
        public const int add = 430;
        public const int dec = 431;
        public const int subAssign = 432;
        public const int sub = 433;
        public const int mulAssign = 434;
        public const int mul = 435;
        public const int divAssign = 436;
        public const int div = 437;
        public const int modAssign = 438;
        public const int mod = 439;
        public const int and = 440;
        public const int bitwiseAndAssign = 441;
        public const int bitwiseAnd = 442;
        public const int or = 443;
        public const int bitwiseOrAssign = 444;
        public const int bitwiseOr = 445;
        public const int not = 446;
        public const int lbracket = 447;
        public const int rbracket = 448;
        public const int lparen = 449;
        public const int rparen = 450;
        public const int lbrace = 451;
        public const int rbrace = 452;
        public const int comma = 453;
        public const int dot = 455;
        public const int integerLiteral = 456;
        public const int floatLiteral = 457;
        public const int semi = 469;
        public const int whereKeyword = 493;
        internal static ParseNode ParseExpression(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // Expression -> AssignExpression
            if ((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                ParseNode[] children = new ParseNode[1];
                children[0] = ExpressionParser.ParseAssignExpression(context);
                return new ParseNode(9, "Expression", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting AssignExpression", line__, column__, position__);
        }
        /// <summary>
        /// Parses a production of the form:
        /// Expression= AssignExpression
        /// </summary>
        /// <remarks>
        /// The production rules are:
        /// Expression -> AssignExpression
        /// </remarks>
        /// <param name="tokenizer">The tokenizer to parse with</param><returns>A <see cref="ParseNode" /> representing the parsed tokens</returns>
        public static ParseNode Parse(System.Collections.Generic.IEnumerable<Token> tokenizer) {
            ParserContext context = new ParserContext(tokenizer);
            context.EnsureStarted();
            ParseNode result = ExpressionParser.ParseExpression(context);
            if ((false == context.IsEnded)) {
                context.Error("Unexpected remainder in input.");
            }
            return result;
        }
        /// <summary>
        /// Parses a production of the form:
        /// Expression= AssignExpression
        /// </summary>
        /// <remarks>
        /// The production rules are:
        /// Expression -> AssignExpression
        /// </remarks>
        /// <param name="tokenizer">The tokenizer to parse with</param><returns>A <see cref="ParseNode" /> representing the parsed tokens</returns>
        public static ParseNode ParseExpression(System.Collections.Generic.IEnumerable<Token> tokenizer) {
            ParserContext context = new ParserContext(tokenizer);
            context.EnsureStarted();
            ParseNode result = ExpressionParser.ParseExpression(context);
            if ((false == context.IsEnded)) {
                context.Error("Unexpected remainder in input.");
            }
            return result;
        }
        internal static ParseNode ParseMethodArgList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MethodArgList ->
            if ((ExpressionParser.rparen == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(10, "MethodArgList", children, line__, column__, position__);
            }
            // MethodArgList -> MethodArg MethodArgListPart
            if ((((((((((((((((((((((((((((((((((((((ExpressionParser.outKeyword == context.SymbolId) 
                        || (ExpressionParser.refKeyword == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseMethodArg(context));
                children.AddRange(ExpressionParser.ParseMethodArgListPart(context).Children);
                return new ParseNode(10, "MethodArgList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MethodArg", line__, column__, position__);
        }
        internal static ParseNode ParseMemberFieldRef(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberFieldRef -> dot Identifier
            if ((ExpressionParser.dot == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.dot == context.SymbolId))) {
                    context.Error("Expecting dot");
                }
                children.Add(new ParseNode(ExpressionParser.dot, "dot", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                return new ParseNode(11, "MemberFieldRef", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting dot", line__, column__, position__);
        }
        internal static ParseNode ParseMemberInvokeRef(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberInvokeRef -> lparen MethodArgList rparen
            if ((ExpressionParser.lparen == context.SymbolId)) {
                ParseNode[] children = new ParseNode[3];
                if ((false 
                            == (ExpressionParser.lparen == context.SymbolId))) {
                    context.Error("Expecting lparen");
                }
                children[0] = new ParseNode(ExpressionParser.lparen, "lparen", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[1] = ExpressionParser.ParseMethodArgList(context);
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen");
                }
                children[2] = new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(12, "MemberInvokeRef", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting lparen", line__, column__, position__);
        }
        internal static ParseNode ParseMemberIndexerRef(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberIndexerRef -> lbracket ArgList rbracket
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[3];
                if ((false 
                            == (ExpressionParser.lbracket == context.SymbolId))) {
                    context.Error("Expecting lbracket");
                }
                children[0] = new ParseNode(ExpressionParser.lbracket, "lbracket", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[1] = ExpressionParser.ParseArgList(context);
                if ((false 
                            == (ExpressionParser.rbracket == context.SymbolId))) {
                    context.Error("Expecting rbracket");
                }
                children[2] = new ParseNode(ExpressionParser.rbracket, "rbracket", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(13, "MemberIndexerRef", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting lbracket", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRef(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRef -> MemberFieldRef
            if ((ExpressionParser.dot == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                children[0] = ExpressionParser.ParseMemberFieldRef(context);
                return new ParseNode(14, "MemberAnyRef", children, line__, column__, position__);
            }
            // MemberAnyRef -> MemberInvokeRef
            if ((ExpressionParser.lparen == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                children[0] = ExpressionParser.ParseMemberInvokeRef(context);
                return new ParseNode(14, "MemberAnyRef", children, line__, column__, position__);
            }
            // MemberAnyRef -> MemberIndexerRef
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                children[0] = ExpressionParser.ParseMemberIndexerRef(context);
                return new ParseNode(14, "MemberAnyRef", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberFieldRef, MemberInvokeRef, or MemberIndexerRef", line__, column__, position__);
        }
        internal static ParseNode ParseMethodArg(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MethodArg -> outKeyword Expression
            if ((ExpressionParser.outKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.outKeyword == context.SymbolId))) {
                    context.Error("Expecting outKeyword");
                }
                children[0] = new ParseNode(ExpressionParser.outKeyword, "outKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[1] = ExpressionParser.ParseExpression(context);
                return new ParseNode(15, "MethodArg", children, line__, column__, position__);
            }
            // MethodArg -> refKeyword Expression
            if ((ExpressionParser.refKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.refKeyword == context.SymbolId))) {
                    context.Error("Expecting refKeyword");
                }
                children[0] = new ParseNode(ExpressionParser.refKeyword, "refKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[1] = ExpressionParser.ParseExpression(context);
                return new ParseNode(15, "MethodArg", children, line__, column__, position__);
            }
            // MethodArg -> Expression
            if ((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                ParseNode[] children = new ParseNode[1];
                children[0] = ExpressionParser.ParseExpression(context);
                return new ParseNode(15, "MethodArg", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting outKeyword, refKeyword, or Expression", line__, column__, position__);
        }
        internal static ParseNode ParseTypeRef(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeRef -> Type
            if ((((((((((((((((((ExpressionParser.boolType == context.SymbolId) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId))) {
                ParseNode[] children = new ParseNode[1];
                children[0] = ExpressionParser.ParseType(context);
                return new ParseNode(16, "TypeRef", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting Type", line__, column__, position__);
        }
        internal static ParseNode ParseIntrinsicType(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // IntrinsicType -> boolType
            if ((ExpressionParser.boolType == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.boolType == context.SymbolId))) {
                    context.Error("Expecting boolType");
                }
                children[0] = new ParseNode(ExpressionParser.boolType, "boolType", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(17, "IntrinsicType", children, line__, column__, position__);
            }
            // IntrinsicType -> charType
            if ((ExpressionParser.charType == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.charType == context.SymbolId))) {
                    context.Error("Expecting charType");
                }
                children[0] = new ParseNode(ExpressionParser.charType, "charType", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(17, "IntrinsicType", children, line__, column__, position__);
            }
            // IntrinsicType -> stringType
            if ((ExpressionParser.stringType == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.stringType == context.SymbolId))) {
                    context.Error("Expecting stringType");
                }
                children[0] = new ParseNode(ExpressionParser.stringType, "stringType", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(17, "IntrinsicType", children, line__, column__, position__);
            }
            // IntrinsicType -> floatType
            if ((ExpressionParser.floatType == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.floatType == context.SymbolId))) {
                    context.Error("Expecting floatType");
                }
                children[0] = new ParseNode(ExpressionParser.floatType, "floatType", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(17, "IntrinsicType", children, line__, column__, position__);
            }
            // IntrinsicType -> doubleType
            if ((ExpressionParser.doubleType == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.doubleType == context.SymbolId))) {
                    context.Error("Expecting doubleType");
                }
                children[0] = new ParseNode(ExpressionParser.doubleType, "doubleType", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(17, "IntrinsicType", children, line__, column__, position__);
            }
            // IntrinsicType -> decimalType
            if ((ExpressionParser.decimalType == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.decimalType == context.SymbolId))) {
                    context.Error("Expecting decimalType");
                }
                children[0] = new ParseNode(ExpressionParser.decimalType, "decimalType", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(17, "IntrinsicType", children, line__, column__, position__);
            }
            // IntrinsicType -> sbyteType
            if ((ExpressionParser.sbyteType == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.sbyteType == context.SymbolId))) {
                    context.Error("Expecting sbyteType");
                }
                children[0] = new ParseNode(ExpressionParser.sbyteType, "sbyteType", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(17, "IntrinsicType", children, line__, column__, position__);
            }
            // IntrinsicType -> byteType
            if ((ExpressionParser.byteType == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.byteType == context.SymbolId))) {
                    context.Error("Expecting byteType");
                }
                children[0] = new ParseNode(ExpressionParser.byteType, "byteType", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(17, "IntrinsicType", children, line__, column__, position__);
            }
            // IntrinsicType -> shortType
            if ((ExpressionParser.shortType == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.shortType == context.SymbolId))) {
                    context.Error("Expecting shortType");
                }
                children[0] = new ParseNode(ExpressionParser.shortType, "shortType", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(17, "IntrinsicType", children, line__, column__, position__);
            }
            // IntrinsicType -> ushortType
            if ((ExpressionParser.ushortType == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.ushortType == context.SymbolId))) {
                    context.Error("Expecting ushortType");
                }
                children[0] = new ParseNode(ExpressionParser.ushortType, "ushortType", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(17, "IntrinsicType", children, line__, column__, position__);
            }
            // IntrinsicType -> intType
            if ((ExpressionParser.intType == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.intType == context.SymbolId))) {
                    context.Error("Expecting intType");
                }
                children[0] = new ParseNode(ExpressionParser.intType, "intType", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(17, "IntrinsicType", children, line__, column__, position__);
            }
            // IntrinsicType -> uintType
            if ((ExpressionParser.uintType == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.uintType == context.SymbolId))) {
                    context.Error("Expecting uintType");
                }
                children[0] = new ParseNode(ExpressionParser.uintType, "uintType", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(17, "IntrinsicType", children, line__, column__, position__);
            }
            // IntrinsicType -> longType
            if ((ExpressionParser.longType == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.longType == context.SymbolId))) {
                    context.Error("Expecting longType");
                }
                children[0] = new ParseNode(ExpressionParser.longType, "longType", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(17, "IntrinsicType", children, line__, column__, position__);
            }
            // IntrinsicType -> ulongType
            if ((ExpressionParser.ulongType == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.ulongType == context.SymbolId))) {
                    context.Error("Expecting ulongType");
                }
                children[0] = new ParseNode(ExpressionParser.ulongType, "ulongType", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(17, "IntrinsicType", children, line__, column__, position__);
            }
            // IntrinsicType -> objectType
            if ((ExpressionParser.objectType == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.objectType == context.SymbolId))) {
                    context.Error("Expecting objectType");
                }
                children[0] = new ParseNode(ExpressionParser.objectType, "objectType", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(17, "IntrinsicType", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting boolType, charType, stringType, floatType, doubleType, decimalType, sby" +
                    "teType, byteType, shortType, ushortType, intType, uintType, longType, ulongType," +
                    " or objectType", line__, column__, position__);
        }
        internal static ParseNode ParseTypeBase(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeBase -> IntrinsicType
            if ((((((((((((((((ExpressionParser.boolType == context.SymbolId) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                ParseNode[] children = new ParseNode[1];
                children[0] = ExpressionParser.ParseIntrinsicType(context);
                return new ParseNode(18, "TypeBase", children, line__, column__, position__);
            }
            // TypeBase -> Identifier TypeBasePart
            if (((ExpressionParser.verbatimIdentifier == context.SymbolId) 
                        || (ExpressionParser.identifier2 == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                children.AddRange(ExpressionParser.ParseTypeBasePart(context).Children);
                return new ParseNode(18, "TypeBase", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting IntrinsicType or Identifier", line__, column__, position__);
        }
        internal static ParseNode ParseTypeArraySpecRank(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeArraySpecRank -> comma
            if ((ExpressionParser.comma == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma");
                }
                children[0] = new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(19, "TypeArraySpecRank", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting comma", line__, column__, position__);
        }
        internal static ParseNode ParseNewArrayPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // NewArrayPart -> ArraySpec
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                children[0] = ExpressionParser.ParseArraySpec(context);
                return new ParseNode(20, "NewArrayPart", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting ArraySpec", line__, column__, position__);
        }
        internal static ParseNode ParseTypeCastExpressionPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeCastExpressionPart -> Type rparen
            if ((((((((((((((((((ExpressionParser.boolType == context.SymbolId) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = ExpressionParser.ParseType(context);
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen");
                }
                children[1] = new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(21, "TypeCastExpressionPart", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting Type", line__, column__, position__);
        }
        internal static ParseNode ParseArraySpecExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ArraySpecExpressionList -> ArgList rbracket
            if ((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = ExpressionParser.ParseArgList(context);
                if ((false 
                            == (ExpressionParser.rbracket == context.SymbolId))) {
                    context.Error("Expecting rbracket");
                }
                children[1] = new ParseNode(ExpressionParser.rbracket, "rbracket", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(22, "ArraySpecExpressionList", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting ArgList", line__, column__, position__);
        }
        internal static ParseNode ParseSubExpression(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // SubExpression -> lparen Expression rparen
            if (((ExpressionParser.lparen == context.SymbolId) 
                        && ExpressionParser.WhereSubExpression(context.GetLookAhead(true)))) {
                ParseNode[] children = new ParseNode[3];
                if ((false 
                            == (ExpressionParser.lparen == context.SymbolId))) {
                    context.Error("Expecting lparen");
                }
                children[0] = new ParseNode(ExpressionParser.lparen, "lparen", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[1] = ExpressionParser.ParseExpression(context);
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen");
                }
                children[2] = new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(23, "SubExpression", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting lparen", line__, column__, position__);
        }
        internal static bool WhereSubExpression(ParserContext context) {
            return (false == _IsCastExpression(context));
        }
        internal static ParseNode ParseUnaryExpression(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // UnaryExpression -> add UnaryExpression
            if (((ExpressionParser.add == context.SymbolId) 
                        && ExpressionParser.WhereUnaryExpression(context.GetLookAhead(true)))) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.add == context.SymbolId))) {
                    context.Error("Expecting add");
                }
                children[0] = new ParseNode(ExpressionParser.add, "add", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[1] = ExpressionParser.ParseUnaryExpression(context);
                return new ParseNode(24, "UnaryExpression", children, line__, column__, position__);
            }
            // UnaryExpression -> sub UnaryExpression
            if (((ExpressionParser.sub == context.SymbolId) 
                        && ExpressionParser.WhereUnaryExpression(context.GetLookAhead(true)))) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.sub == context.SymbolId))) {
                    context.Error("Expecting sub");
                }
                children[0] = new ParseNode(ExpressionParser.sub, "sub", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[1] = ExpressionParser.ParseUnaryExpression(context);
                return new ParseNode(24, "UnaryExpression", children, line__, column__, position__);
            }
            // UnaryExpression -> not UnaryExpression
            if (((ExpressionParser.not == context.SymbolId) 
                        && ExpressionParser.WhereUnaryExpression(context.GetLookAhead(true)))) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.not == context.SymbolId))) {
                    context.Error("Expecting not");
                }
                children[0] = new ParseNode(ExpressionParser.not, "not", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[1] = ExpressionParser.ParseUnaryExpression(context);
                return new ParseNode(24, "UnaryExpression", children, line__, column__, position__);
            }
            // UnaryExpression -> inc UnaryExpression
            if (((ExpressionParser.inc == context.SymbolId) 
                        && ExpressionParser.WhereUnaryExpression(context.GetLookAhead(true)))) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.inc == context.SymbolId))) {
                    context.Error("Expecting inc");
                }
                children[0] = new ParseNode(ExpressionParser.inc, "inc", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[1] = ExpressionParser.ParseUnaryExpression(context);
                return new ParseNode(24, "UnaryExpression", children, line__, column__, position__);
            }
            // UnaryExpression -> dec UnaryExpression
            if (((ExpressionParser.dec == context.SymbolId) 
                        && ExpressionParser.WhereUnaryExpression(context.GetLookAhead(true)))) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.dec == context.SymbolId))) {
                    context.Error("Expecting dec");
                }
                children[0] = new ParseNode(ExpressionParser.dec, "dec", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[1] = ExpressionParser.ParseUnaryExpression(context);
                return new ParseNode(24, "UnaryExpression", children, line__, column__, position__);
            }
            // UnaryExpression -> SubExpression
            // UnaryExpression -> PrimaryExpression
            if (((ExpressionParser.lparen == context.SymbolId) 
                        && ExpressionParser.WhereUnaryExpression(context.GetLookAhead(true)))) {
                ParserContext context2__;
                int advanceCount__ = 0;
                System.Exception lastExcept = null;
                context2__ = context.GetLookAhead();
                context2__.EnsureStarted();
                // UnaryExpression -> SubExpression
                try {
                    if (((ExpressionParser.lparen == context2__.SymbolId) 
                                && ExpressionParser.WhereUnaryExpression(context2__.GetLookAhead(true)))) {
                        System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                        children.AddRange(ExpressionParser.ParseSubExpression(context2__).Children);
                        ExpressionParser.ParseSubExpression(context);
                        return new ParseNode(24, "UnaryExpression", children.ToArray(), line__, column__, position__);
                    }
                    context.Error("Expecting lparen");
                }
                catch (SyntaxException ex) {
                    if ((context2__.AdvanceCount > advanceCount__)) {
                        lastExcept = ex;
                        advanceCount__ = context2__.AdvanceCount;
                    }
                }
                finally {

                }
                context2__ = context.GetLookAhead();
                context2__.EnsureStarted();
                // UnaryExpression -> PrimaryExpression
                try {
                    if (((ExpressionParser.lparen == context2__.SymbolId) 
                                && ExpressionParser.WhereUnaryExpression(context2__.GetLookAhead(true)))) {
                        ParseNode[] children = new ParseNode[1];
                        children[0] = ExpressionParser.ParsePrimaryExpression(context2__);
                        ExpressionParser.ParsePrimaryExpression(context);
                        return new ParseNode(24, "UnaryExpression", children, line__, column__, position__);
                    }
                    context.Error("Expecting lparen");
                }
                catch (SyntaxException ex) {
                    if ((context2__.AdvanceCount > advanceCount__)) {
                        lastExcept = ex;
                        advanceCount__ = context2__.AdvanceCount;
                    }
                }
                finally {

                }
                throw lastExcept;
            }
            // UnaryExpression -> PrimaryExpression
            if (((((((((((((((((((((((((((((((ExpressionParser.nullLiteral == context.SymbolId) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        && ExpressionParser.WhereUnaryExpression(context.GetLookAhead(true)))) {
                ParseNode[] children = new ParseNode[1];
                children[0] = ExpressionParser.ParsePrimaryExpression(context);
                return new ParseNode(24, "UnaryExpression", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting add, sub, not, inc, dec, SubExpression, or PrimaryExpression", line__, column__, position__);
        }
        internal static bool WhereUnaryExpression(ParserContext context) {
            return true;
        }
        internal static ParseNode ParsePrimaryExpression(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // PrimaryExpression -> nullLiteral
            if ((ExpressionParser.nullLiteral == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.nullLiteral == context.SymbolId))) {
                    context.Error("Expecting nullLiteral");
                }
                children[0] = new ParseNode(ExpressionParser.nullLiteral, "nullLiteral", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(25, "PrimaryExpression", children, line__, column__, position__);
            }
            // PrimaryExpression -> CastExpression
            if ((ExpressionParser.lparen == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                children[0] = ExpressionParser.ParseCastExpression(context);
                return new ParseNode(25, "PrimaryExpression", children, line__, column__, position__);
            }
            // PrimaryExpression -> typeOf lparen Type rparen PrimaryExpressionPart
            if ((ExpressionParser.typeOf == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.typeOf == context.SymbolId))) {
                    context.Error("Expecting typeOf");
                }
                children.Add(new ParseNode(ExpressionParser.typeOf, "typeOf", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.lparen == context.SymbolId))) {
                    context.Error("Expecting lparen");
                }
                children.Add(new ParseNode(ExpressionParser.lparen, "lparen", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseType(context));
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen");
                }
                children.Add(new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParsePrimaryExpressionPart(context).Children);
                return new ParseNode(25, "PrimaryExpression", children.ToArray(), line__, column__, position__);
            }
            // PrimaryExpression -> defaultOf lparen Type rparen PrimaryExpressionPart2
            if ((ExpressionParser.defaultOf == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.defaultOf == context.SymbolId))) {
                    context.Error("Expecting defaultOf");
                }
                children.Add(new ParseNode(ExpressionParser.defaultOf, "defaultOf", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.lparen == context.SymbolId))) {
                    context.Error("Expecting lparen");
                }
                children.Add(new ParseNode(ExpressionParser.lparen, "lparen", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseType(context));
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen");
                }
                children.Add(new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParsePrimaryExpressionPart2(context).Children);
                return new ParseNode(25, "PrimaryExpression", children.ToArray(), line__, column__, position__);
            }
            // PrimaryExpression -> verbatimStringLiteral PrimaryExpressionPart3
            if ((ExpressionParser.verbatimStringLiteral == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.verbatimStringLiteral == context.SymbolId))) {
                    context.Error("Expecting verbatimStringLiteral");
                }
                children.Add(new ParseNode(ExpressionParser.verbatimStringLiteral, "verbatimStringLiteral", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParsePrimaryExpressionPart3(context).Children);
                return new ParseNode(25, "PrimaryExpression", children.ToArray(), line__, column__, position__);
            }
            // PrimaryExpression -> characterLiteral PrimaryExpressionPart4
            if ((ExpressionParser.characterLiteral == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.characterLiteral == context.SymbolId))) {
                    context.Error("Expecting characterLiteral");
                }
                children.Add(new ParseNode(ExpressionParser.characterLiteral, "characterLiteral", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParsePrimaryExpressionPart4(context).Children);
                return new ParseNode(25, "PrimaryExpression", children.ToArray(), line__, column__, position__);
            }
            // PrimaryExpression -> integerLiteral PrimaryExpressionPart5
            if ((ExpressionParser.integerLiteral == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.integerLiteral == context.SymbolId))) {
                    context.Error("Expecting integerLiteral");
                }
                children.Add(new ParseNode(ExpressionParser.integerLiteral, "integerLiteral", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParsePrimaryExpressionPart5(context).Children);
                return new ParseNode(25, "PrimaryExpression", children.ToArray(), line__, column__, position__);
            }
            // PrimaryExpression -> floatLiteral PrimaryExpressionPart6
            if ((ExpressionParser.floatLiteral == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.floatLiteral == context.SymbolId))) {
                    context.Error("Expecting floatLiteral");
                }
                children.Add(new ParseNode(ExpressionParser.floatLiteral, "floatLiteral", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParsePrimaryExpressionPart6(context).Children);
                return new ParseNode(25, "PrimaryExpression", children.ToArray(), line__, column__, position__);
            }
            // PrimaryExpression -> stringLiteral PrimaryExpressionPart7
            if ((ExpressionParser.stringLiteral == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.stringLiteral == context.SymbolId))) {
                    context.Error("Expecting stringLiteral");
                }
                children.Add(new ParseNode(ExpressionParser.stringLiteral, "stringLiteral", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParsePrimaryExpressionPart7(context).Children);
                return new ParseNode(25, "PrimaryExpression", children.ToArray(), line__, column__, position__);
            }
            // PrimaryExpression -> boolLiteral PrimaryExpressionPart8
            if ((ExpressionParser.boolLiteral == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.boolLiteral == context.SymbolId))) {
                    context.Error("Expecting boolLiteral");
                }
                children.Add(new ParseNode(ExpressionParser.boolLiteral, "boolLiteral", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParsePrimaryExpressionPart8(context).Children);
                return new ParseNode(25, "PrimaryExpression", children.ToArray(), line__, column__, position__);
            }
            // PrimaryExpression -> NewExpression PrimaryExpressionPart9
            if ((ExpressionParser.newKeyword == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseNewExpression(context));
                children.AddRange(ExpressionParser.ParsePrimaryExpressionPart9(context).Children);
                return new ParseNode(25, "PrimaryExpression", children.ToArray(), line__, column__, position__);
            }
            // PrimaryExpression -> thisRef PrimaryExpressionPart10
            if ((ExpressionParser.thisRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.thisRef == context.SymbolId))) {
                    context.Error("Expecting thisRef");
                }
                children.Add(new ParseNode(ExpressionParser.thisRef, "thisRef", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParsePrimaryExpressionPart10(context).Children);
                return new ParseNode(25, "PrimaryExpression", children.ToArray(), line__, column__, position__);
            }
            // PrimaryExpression -> baseRef PrimaryExpressionPart11
            if ((ExpressionParser.baseRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.baseRef == context.SymbolId))) {
                    context.Error("Expecting baseRef");
                }
                children.Add(new ParseNode(ExpressionParser.baseRef, "baseRef", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParsePrimaryExpressionPart11(context).Children);
                return new ParseNode(25, "PrimaryExpression", children.ToArray(), line__, column__, position__);
            }
            // PrimaryExpression -> TypeOrFieldRef PrimaryExpressionPart12
            if ((((((((((((((((((ExpressionParser.verbatimIdentifier == context.SymbolId) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseTypeOrFieldRef(context));
                children.AddRange(ExpressionParser.ParsePrimaryExpressionPart12(context).Children);
                return new ParseNode(25, "PrimaryExpression", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting nullLiteral, CastExpression, typeOf, defaultOf, verbatimStringLiteral, " +
                    "characterLiteral, integerLiteral, floatLiteral, stringLiteral, boolLiteral, NewE" +
                    "xpression, thisRef, baseRef, or TypeOrFieldRef", line__, column__, position__);
        }
        internal static ParseNode ParseIdentifier(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // Identifier -> verbatimIdentifier
            if (((ExpressionParser.verbatimIdentifier == context.SymbolId) 
                        && ExpressionParser.WhereIdentifier(context.GetLookAhead(true)))) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.verbatimIdentifier == context.SymbolId))) {
                    context.Error("Expecting verbatimIdentifier");
                }
                children[0] = new ParseNode(ExpressionParser.verbatimIdentifier, "verbatimIdentifier", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(26, "Identifier", children, line__, column__, position__);
            }
            // Identifier -> identifier
            if (((ExpressionParser.identifier2 == context.SymbolId) 
                        && ExpressionParser.WhereIdentifier(context.GetLookAhead(true)))) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.identifier2 == context.SymbolId))) {
                    context.Error("Expecting identifier");
                }
                children[0] = new ParseNode(ExpressionParser.identifier2, "identifier", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(26, "Identifier", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting verbatimIdentifier or identifier", line__, column__, position__);
        }
        internal static bool WhereIdentifier(ParserContext context) {
            return (false == Keywords.Contains(context.Value));
        }
        internal static ParseNode ParseNamespaceNameList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // NamespaceNameList -> dot Identifier NamespaceNameListRightAssoc
            if ((ExpressionParser.dot == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.dot == context.SymbolId))) {
                    context.Error("Expecting dot");
                }
                children.Add(new ParseNode(ExpressionParser.dot, "dot", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                children.AddRange(ExpressionParser.ParseNamespaceNameListRightAssoc(context).Children);
                return new ParseNode(2, "NamespaceNameList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting dot", line__, column__, position__);
        }
        internal static ParseNode ParseRelationalExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // RelationalExpressionList -> lt TermExpression RelationalExpressionListRightAssoc RelationalExpressionListRightAssoc2 RelationalExpressionListRightAssoc3
            if ((ExpressionParser.lt == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.lt == context.SymbolId))) {
                    context.Error("Expecting lt");
                }
                children.Add(new ParseNode(ExpressionParser.lt, "lt", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseTermExpression(context));
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc3(context).Children);
                return new ParseNode(27, "RelationalExpressionList", children.ToArray(), line__, column__, position__);
            }
            // RelationalExpressionList -> lte TermExpression RelationalExpressionListRightAssoc RelationalExpressionListRightAssoc2 RelationalExpressionListRightAssoc3
            if ((ExpressionParser.lte == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.lte == context.SymbolId))) {
                    context.Error("Expecting lte");
                }
                children.Add(new ParseNode(ExpressionParser.lte, "lte", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseTermExpression(context));
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc3(context).Children);
                return new ParseNode(27, "RelationalExpressionList", children.ToArray(), line__, column__, position__);
            }
            // RelationalExpressionList -> gt TermExpression RelationalExpressionListRightAssoc RelationalExpressionListRightAssoc2 RelationalExpressionListRightAssoc3
            if ((ExpressionParser.gt == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.gt == context.SymbolId))) {
                    context.Error("Expecting gt");
                }
                children.Add(new ParseNode(ExpressionParser.gt, "gt", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseTermExpression(context));
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc3(context).Children);
                return new ParseNode(27, "RelationalExpressionList", children.ToArray(), line__, column__, position__);
            }
            // RelationalExpressionList -> gte TermExpression RelationalExpressionListRightAssoc RelationalExpressionListRightAssoc2 RelationalExpressionListRightAssoc3
            if ((ExpressionParser.gte == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.gte == context.SymbolId))) {
                    context.Error("Expecting gte");
                }
                children.Add(new ParseNode(ExpressionParser.gte, "gte", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseTermExpression(context));
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc3(context).Children);
                return new ParseNode(27, "RelationalExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting lt, lte, gt, or gte", line__, column__, position__);
        }
        internal static ParseNode ParseEqualityExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // EqualityExpressionList -> eqEq RelationalExpression EqualityExpressionListRightAssoc EqualityExpressionListRightAssoc2
            if ((ExpressionParser.eqEq == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.eqEq == context.SymbolId))) {
                    context.Error("Expecting eqEq");
                }
                children.Add(new ParseNode(ExpressionParser.eqEq, "eqEq", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseRelationalExpression(context));
                children.AddRange(ExpressionParser.ParseEqualityExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseEqualityExpressionListRightAssoc2(context).Children);
                return new ParseNode(28, "EqualityExpressionList", children.ToArray(), line__, column__, position__);
            }
            // EqualityExpressionList -> notEq RelationalExpression EqualityExpressionListRightAssoc EqualityExpressionListRightAssoc2
            if ((ExpressionParser.notEq == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.notEq == context.SymbolId))) {
                    context.Error("Expecting notEq");
                }
                children.Add(new ParseNode(ExpressionParser.notEq, "notEq", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseRelationalExpression(context));
                children.AddRange(ExpressionParser.ParseEqualityExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseEqualityExpressionListRightAssoc2(context).Children);
                return new ParseNode(28, "EqualityExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting eqEq or notEq", line__, column__, position__);
        }
        internal static ParseNode ParseBitwiseAndExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // BitwiseAndExpressionList -> bitwiseAnd EqualityExpression BitwiseAndExpressionListRightAssoc
            if ((ExpressionParser.bitwiseAnd == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.bitwiseAnd == context.SymbolId))) {
                    context.Error("Expecting bitwiseAnd");
                }
                children.Add(new ParseNode(ExpressionParser.bitwiseAnd, "bitwiseAnd", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseEqualityExpression(context));
                children.AddRange(ExpressionParser.ParseBitwiseAndExpressionListRightAssoc(context).Children);
                return new ParseNode(29, "BitwiseAndExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting bitwiseAnd", line__, column__, position__);
        }
        internal static ParseNode ParseBitwiseOrExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // BitwiseOrExpressionList -> bitwiseOr BitwiseAndExpression BitwiseOrExpressionListRightAssoc
            if ((ExpressionParser.bitwiseOr == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.bitwiseOr == context.SymbolId))) {
                    context.Error("Expecting bitwiseOr");
                }
                children.Add(new ParseNode(ExpressionParser.bitwiseOr, "bitwiseOr", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseBitwiseAndExpression(context));
                children.AddRange(ExpressionParser.ParseBitwiseOrExpressionListRightAssoc(context).Children);
                return new ParseNode(30, "BitwiseOrExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting bitwiseOr", line__, column__, position__);
        }
        internal static ParseNode ParseAndExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AndExpressionList -> and BitwiseOrExpression AndExpressionListRightAssoc
            if ((ExpressionParser.and == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.and == context.SymbolId))) {
                    context.Error("Expecting and");
                }
                children.Add(new ParseNode(ExpressionParser.and, "and", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseBitwiseOrExpression(context));
                children.AddRange(ExpressionParser.ParseAndExpressionListRightAssoc(context).Children);
                return new ParseNode(31, "AndExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting and", line__, column__, position__);
        }
        internal static ParseNode ParseOrExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // OrExpressionList -> or AndExpression OrExpressionListRightAssoc
            if ((ExpressionParser.or == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.or == context.SymbolId))) {
                    context.Error("Expecting or");
                }
                children.Add(new ParseNode(ExpressionParser.or, "or", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseAndExpression(context));
                children.AddRange(ExpressionParser.ParseOrExpressionListRightAssoc(context).Children);
                return new ParseNode(32, "OrExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting or", line__, column__, position__);
        }
        internal static ParseNode ParseAssignExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AssignExpressionList -> eq OrExpression AssignExpressionListRightAssoc AssignExpressionListRightAssoc2 AssignExpressionListRightAssoc3 AssignExpressionListRightAssoc4 AssignExpressionListRightAssoc5
            if ((ExpressionParser.eq == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.eq == context.SymbolId))) {
                    context.Error("Expecting eq");
                }
                children.Add(new ParseNode(ExpressionParser.eq, "eq", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseOrExpression(context));
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(33, "AssignExpressionList", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionList -> addAssign OrExpression AssignExpressionListRightAssoc AssignExpressionListRightAssoc2 AssignExpressionListRightAssoc3 AssignExpressionListRightAssoc4 AssignExpressionListRightAssoc5
            if ((ExpressionParser.addAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.addAssign == context.SymbolId))) {
                    context.Error("Expecting addAssign");
                }
                children.Add(new ParseNode(ExpressionParser.addAssign, "addAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseOrExpression(context));
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(33, "AssignExpressionList", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionList -> subAssign OrExpression AssignExpressionListRightAssoc AssignExpressionListRightAssoc2 AssignExpressionListRightAssoc3 AssignExpressionListRightAssoc4 AssignExpressionListRightAssoc5
            if ((ExpressionParser.subAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.subAssign == context.SymbolId))) {
                    context.Error("Expecting subAssign");
                }
                children.Add(new ParseNode(ExpressionParser.subAssign, "subAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseOrExpression(context));
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(33, "AssignExpressionList", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionList -> mulAssign OrExpression AssignExpressionListRightAssoc AssignExpressionListRightAssoc2 AssignExpressionListRightAssoc3 AssignExpressionListRightAssoc4 AssignExpressionListRightAssoc5
            if ((ExpressionParser.mulAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.mulAssign == context.SymbolId))) {
                    context.Error("Expecting mulAssign");
                }
                children.Add(new ParseNode(ExpressionParser.mulAssign, "mulAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseOrExpression(context));
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(33, "AssignExpressionList", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionList -> divAssign OrExpression AssignExpressionListRightAssoc AssignExpressionListRightAssoc2 AssignExpressionListRightAssoc3 AssignExpressionListRightAssoc4 AssignExpressionListRightAssoc5
            if ((ExpressionParser.divAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.divAssign == context.SymbolId))) {
                    context.Error("Expecting divAssign");
                }
                children.Add(new ParseNode(ExpressionParser.divAssign, "divAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseOrExpression(context));
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(33, "AssignExpressionList", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionList -> modAssign OrExpression AssignExpressionListRightAssoc AssignExpressionListRightAssoc2 AssignExpressionListRightAssoc3 AssignExpressionListRightAssoc4 AssignExpressionListRightAssoc5
            if ((ExpressionParser.modAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.modAssign == context.SymbolId))) {
                    context.Error("Expecting modAssign");
                }
                children.Add(new ParseNode(ExpressionParser.modAssign, "modAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseOrExpression(context));
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(33, "AssignExpressionList", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionList -> bitwiseAndAssign OrExpression AssignExpressionListRightAssoc AssignExpressionListRightAssoc2 AssignExpressionListRightAssoc3 AssignExpressionListRightAssoc4 AssignExpressionListRightAssoc5
            if ((ExpressionParser.bitwiseAndAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.bitwiseAndAssign == context.SymbolId))) {
                    context.Error("Expecting bitwiseAndAssign");
                }
                children.Add(new ParseNode(ExpressionParser.bitwiseAndAssign, "bitwiseAndAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseOrExpression(context));
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(33, "AssignExpressionList", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionList -> bitwiseOrAssign OrExpression AssignExpressionListRightAssoc AssignExpressionListRightAssoc2 AssignExpressionListRightAssoc3 AssignExpressionListRightAssoc4 AssignExpressionListRightAssoc5
            if ((ExpressionParser.bitwiseOrAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.bitwiseOrAssign == context.SymbolId))) {
                    context.Error("Expecting bitwiseOrAssign");
                }
                children.Add(new ParseNode(ExpressionParser.bitwiseOrAssign, "bitwiseOrAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseOrExpression(context));
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(33, "AssignExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting eq, addAssign, subAssign, mulAssign, divAssign, modAssign, bitwiseAndAs" +
                    "sign, or bitwiseOrAssign", line__, column__, position__);
        }
        internal static ParseNode ParseTermExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TermExpressionList -> add FactorExpression TermExpressionListRightAssoc TermExpressionListRightAssoc2
            if ((ExpressionParser.add == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.add == context.SymbolId))) {
                    context.Error("Expecting add");
                }
                children.Add(new ParseNode(ExpressionParser.add, "add", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseFactorExpression(context));
                children.AddRange(ExpressionParser.ParseTermExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseTermExpressionListRightAssoc2(context).Children);
                return new ParseNode(34, "TermExpressionList", children.ToArray(), line__, column__, position__);
            }
            // TermExpressionList -> sub FactorExpression TermExpressionListRightAssoc TermExpressionListRightAssoc2
            if ((ExpressionParser.sub == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.sub == context.SymbolId))) {
                    context.Error("Expecting sub");
                }
                children.Add(new ParseNode(ExpressionParser.sub, "sub", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseFactorExpression(context));
                children.AddRange(ExpressionParser.ParseTermExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseTermExpressionListRightAssoc2(context).Children);
                return new ParseNode(34, "TermExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting add or sub", line__, column__, position__);
        }
        internal static ParseNode ParseFactorExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // FactorExpressionList -> mul UnaryExpression FactorExpressionListRightAssoc FactorExpressionListRightAssoc2 FactorExpressionListRightAssoc3
            if ((ExpressionParser.mul == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.mul == context.SymbolId))) {
                    context.Error("Expecting mul");
                }
                children.Add(new ParseNode(ExpressionParser.mul, "mul", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseUnaryExpression(context));
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc3(context).Children);
                return new ParseNode(35, "FactorExpressionList", children.ToArray(), line__, column__, position__);
            }
            // FactorExpressionList -> div UnaryExpression FactorExpressionListRightAssoc FactorExpressionListRightAssoc2 FactorExpressionListRightAssoc3
            if ((ExpressionParser.div == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.div == context.SymbolId))) {
                    context.Error("Expecting div");
                }
                children.Add(new ParseNode(ExpressionParser.div, "div", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseUnaryExpression(context));
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc3(context).Children);
                return new ParseNode(35, "FactorExpressionList", children.ToArray(), line__, column__, position__);
            }
            // FactorExpressionList -> mod UnaryExpression FactorExpressionListRightAssoc FactorExpressionListRightAssoc2 FactorExpressionListRightAssoc3
            if ((ExpressionParser.mod == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.mod == context.SymbolId))) {
                    context.Error("Expecting mod");
                }
                children.Add(new ParseNode(ExpressionParser.mod, "mod", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseUnaryExpression(context));
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc3(context).Children);
                return new ParseNode(35, "FactorExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting mul, div, or mod", line__, column__, position__);
        }
        internal static ParseNode ParseArgListList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ArgListList -> comma Expression ArgListListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma");
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseExpression(context));
                children.AddRange(ExpressionParser.ParseArgListListRightAssoc(context).Children);
                return new ParseNode(36, "ArgListList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting comma", line__, column__, position__);
        }
        internal static ParseNode ParseMethodArgListList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MethodArgListList -> comma MethodArg MethodArgListListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma");
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseMethodArg(context));
                children.AddRange(ExpressionParser.ParseMethodArgListListRightAssoc(context).Children);
                return new ParseNode(37, "MethodArgListList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting comma", line__, column__, position__);
        }
        internal static ParseNode ParseTypeBaseList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeBaseList -> dot Identifier TypeBaseListRightAssoc
            if ((ExpressionParser.dot == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.dot == context.SymbolId))) {
                    context.Error("Expecting dot");
                }
                children.Add(new ParseNode(ExpressionParser.dot, "dot", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                children.AddRange(ExpressionParser.ParseTypeBaseListRightAssoc(context).Children);
                return new ParseNode(38, "TypeBaseList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting dot", line__, column__, position__);
        }
        internal static ParseNode ParseTypeArraySpecList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeArraySpecList -> TypeArraySpec TypeArraySpecListRightAssoc
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseTypeArraySpec(context));
                children.AddRange(ExpressionParser.ParseTypeArraySpecListRightAssoc(context).Children);
                return new ParseNode(39, "TypeArraySpecList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting TypeArraySpec", line__, column__, position__);
        }
        internal static ParseNode ParseTypeGenericPartList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeGenericPartList -> comma Type TypeGenericPartListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma");
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseType(context));
                children.AddRange(ExpressionParser.ParseTypeGenericPartListRightAssoc(context).Children);
                return new ParseNode(40, "TypeGenericPartList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting comma", line__, column__, position__);
        }
        internal static ParseNode ParseTypeArraySpecRankList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeArraySpecRankList -> TypeArraySpecRank TypeArraySpecRankListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseTypeArraySpecRank(context));
                children.AddRange(ExpressionParser.ParseTypeArraySpecRankListRightAssoc(context).Children);
                return new ParseNode(41, "TypeArraySpecRankList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting TypeArraySpecRank", line__, column__, position__);
        }
        internal static ParseNode ParseArrayInitializerList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ArrayInitializerList -> comma Expression ArrayInitializerListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma");
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseExpression(context));
                children.AddRange(ExpressionParser.ParseArrayInitializerListRightAssoc(context).Children);
                return new ParseNode(42, "ArrayInitializerList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting comma", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList -> MemberAnyRef MemberAnyRefListRightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefListRightAssoc(context).Children);
                return new ParseNode(43, "MemberAnyRefList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList2 -> MemberAnyRef MemberAnyRefList2RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList2RightAssoc(context).Children);
                return new ParseNode(44, "MemberAnyRefList2", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList3(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList3 -> MemberAnyRef MemberAnyRefList3RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList3RightAssoc(context).Children);
                return new ParseNode(45, "MemberAnyRefList3", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList4(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList4 -> MemberAnyRef MemberAnyRefList4RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList4RightAssoc(context).Children);
                return new ParseNode(46, "MemberAnyRefList4", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList5(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList5 -> MemberAnyRef MemberAnyRefList5RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList5RightAssoc(context).Children);
                return new ParseNode(47, "MemberAnyRefList5", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList6(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList6 -> MemberAnyRef MemberAnyRefList6RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList6RightAssoc(context).Children);
                return new ParseNode(48, "MemberAnyRefList6", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList7(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList7 -> MemberAnyRef MemberAnyRefList7RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList7RightAssoc(context).Children);
                return new ParseNode(49, "MemberAnyRefList7", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList8(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList8 -> MemberAnyRef MemberAnyRefList8RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList8RightAssoc(context).Children);
                return new ParseNode(50, "MemberAnyRefList8", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList9(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList9 -> MemberAnyRef MemberAnyRefList9RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList9RightAssoc(context).Children);
                return new ParseNode(51, "MemberAnyRefList9", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList10(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList10 -> MemberAnyRef MemberAnyRefList10RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList10RightAssoc(context).Children);
                return new ParseNode(52, "MemberAnyRefList10", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList11(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList11 -> MemberAnyRef MemberAnyRefList11RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList11RightAssoc(context).Children);
                return new ParseNode(53, "MemberAnyRefList11", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList12(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList12 -> MemberAnyRef MemberAnyRefList12RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList12RightAssoc(context).Children);
                return new ParseNode(54, "MemberAnyRefList12", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList13(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList13 -> MemberAnyRef MemberAnyRefList13RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList13RightAssoc(context).Children);
                return new ParseNode(55, "MemberAnyRefList13", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseCastExpression(ParserContext context) {
            // CastExpression
            return _ParseCastExpression(context);
        }
        internal static ParseNode ParseArraySpec(ParserContext context) {
            // ArraySpec
            return _ParseArraySpec(context);
        }
        internal static ParseNode ParseTypeOrFieldRef(ParserContext context) {
            // TypeOrFieldRef
            return _ParseTypeOrFieldRef(context);
        }
        internal static ParseNode ParseNamespaceNameListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // NamespaceNameListRightAssoc -> dot Identifier NamespaceNameListRightAssoc
            if ((ExpressionParser.dot == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.dot == context.SymbolId))) {
                    context.Error("Expecting dot");
                }
                children.Add(new ParseNode(ExpressionParser.dot, "dot", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                children.AddRange(ExpressionParser.ParseNamespaceNameListRightAssoc(context).Children);
                return new ParseNode(6, "NamespaceNameListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting dot", line__, column__, position__);
        }
        internal static ParseNode ParseRelationalExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // RelationalExpressionListRightAssoc -> lt TermExpression RelationalExpressionListRightAssoc
            if ((ExpressionParser.lt == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.lt == context.SymbolId))) {
                    context.Error("Expecting lt");
                }
                children.Add(new ParseNode(ExpressionParser.lt, "lt", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseTermExpression(context));
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc(context).Children);
                return new ParseNode(71, "RelationalExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // RelationalExpressionListRightAssoc ->
            if ((((((((((((((((((((((((ExpressionParser.gt == context.SymbolId) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(71, "RelationalExpressionListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting lt", line__, column__, position__);
        }
        internal static ParseNode ParseRelationalExpressionListRightAssoc2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // RelationalExpressionListRightAssoc2 -> gt TermExpression RelationalExpressionListRightAssoc2
            if ((ExpressionParser.gt == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.gt == context.SymbolId))) {
                    context.Error("Expecting gt");
                }
                children.Add(new ParseNode(ExpressionParser.gt, "gt", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseTermExpression(context));
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc2(context).Children);
                return new ParseNode(72, "RelationalExpressionListRightAssoc2", children.ToArray(), line__, column__, position__);
            }
            // RelationalExpressionListRightAssoc2 ->
            if (((((((((((((((((((((((ExpressionParser.lte == context.SymbolId) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(72, "RelationalExpressionListRightAssoc2", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting gt", line__, column__, position__);
        }
        internal static ParseNode ParseEqualityExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // EqualityExpressionListRightAssoc -> eqEq RelationalExpression EqualityExpressionListRightAssoc
            if ((ExpressionParser.eqEq == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.eqEq == context.SymbolId))) {
                    context.Error("Expecting eqEq");
                }
                children.Add(new ParseNode(ExpressionParser.eqEq, "eqEq", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseRelationalExpression(context));
                children.AddRange(ExpressionParser.ParseEqualityExpressionListRightAssoc(context).Children);
                return new ParseNode(73, "EqualityExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // EqualityExpressionListRightAssoc ->
            if ((((((((((((((((((((ExpressionParser.notEq == context.SymbolId) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(73, "EqualityExpressionListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting eqEq", line__, column__, position__);
        }
        internal static ParseNode ParseBitwiseAndExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // BitwiseAndExpressionListRightAssoc -> bitwiseAnd EqualityExpression BitwiseAndExpressionListRightAssoc
            if ((ExpressionParser.bitwiseAnd == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.bitwiseAnd == context.SymbolId))) {
                    context.Error("Expecting bitwiseAnd");
                }
                children.Add(new ParseNode(ExpressionParser.bitwiseAnd, "bitwiseAnd", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseEqualityExpression(context));
                children.AddRange(ExpressionParser.ParseBitwiseAndExpressionListRightAssoc(context).Children);
                return new ParseNode(74, "BitwiseAndExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // BitwiseAndExpressionListRightAssoc ->
            if ((((((((((((((((((ExpressionParser.bitwiseOr == context.SymbolId) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(74, "BitwiseAndExpressionListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting bitwiseAnd", line__, column__, position__);
        }
        internal static ParseNode ParseBitwiseOrExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // BitwiseOrExpressionListRightAssoc -> bitwiseOr BitwiseAndExpression BitwiseOrExpressionListRightAssoc
            if ((ExpressionParser.bitwiseOr == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.bitwiseOr == context.SymbolId))) {
                    context.Error("Expecting bitwiseOr");
                }
                children.Add(new ParseNode(ExpressionParser.bitwiseOr, "bitwiseOr", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseBitwiseAndExpression(context));
                children.AddRange(ExpressionParser.ParseBitwiseOrExpressionListRightAssoc(context).Children);
                return new ParseNode(75, "BitwiseOrExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // BitwiseOrExpressionListRightAssoc ->
            if (((((((((((((((((ExpressionParser.and == context.SymbolId) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(75, "BitwiseOrExpressionListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting bitwiseOr", line__, column__, position__);
        }
        internal static ParseNode ParseAndExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AndExpressionListRightAssoc -> and BitwiseOrExpression AndExpressionListRightAssoc
            if ((ExpressionParser.and == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.and == context.SymbolId))) {
                    context.Error("Expecting and");
                }
                children.Add(new ParseNode(ExpressionParser.and, "and", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseBitwiseOrExpression(context));
                children.AddRange(ExpressionParser.ParseAndExpressionListRightAssoc(context).Children);
                return new ParseNode(76, "AndExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // AndExpressionListRightAssoc ->
            if ((((((((((((((((ExpressionParser.or == context.SymbolId) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(76, "AndExpressionListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting and", line__, column__, position__);
        }
        internal static ParseNode ParseOrExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // OrExpressionListRightAssoc -> or AndExpression OrExpressionListRightAssoc
            if ((ExpressionParser.or == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.or == context.SymbolId))) {
                    context.Error("Expecting or");
                }
                children.Add(new ParseNode(ExpressionParser.or, "or", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseAndExpression(context));
                children.AddRange(ExpressionParser.ParseOrExpressionListRightAssoc(context).Children);
                return new ParseNode(77, "OrExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // OrExpressionListRightAssoc ->
            if (((((((((((((((ExpressionParser.eq == context.SymbolId) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(77, "OrExpressionListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting or", line__, column__, position__);
        }
        internal static ParseNode ParseAssignExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AssignExpressionListRightAssoc -> eq OrExpression AssignExpressionListRightAssoc
            if ((ExpressionParser.eq == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.eq == context.SymbolId))) {
                    context.Error("Expecting eq");
                }
                children.Add(new ParseNode(ExpressionParser.eq, "eq", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseOrExpression(context));
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                return new ParseNode(78, "AssignExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionListRightAssoc ->
            if ((((((((((((((ExpressionParser.subAssign == context.SymbolId) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(78, "AssignExpressionListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting eq", line__, column__, position__);
        }
        internal static ParseNode ParseAssignExpressionListRightAssoc2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AssignExpressionListRightAssoc2 -> subAssign OrExpression AssignExpressionListRightAssoc2
            if ((ExpressionParser.subAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.subAssign == context.SymbolId))) {
                    context.Error("Expecting subAssign");
                }
                children.Add(new ParseNode(ExpressionParser.subAssign, "subAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseOrExpression(context));
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                return new ParseNode(79, "AssignExpressionListRightAssoc2", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionListRightAssoc2 ->
            if (((((((((((((ExpressionParser.divAssign == context.SymbolId) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(79, "AssignExpressionListRightAssoc2", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting subAssign", line__, column__, position__);
        }
        internal static ParseNode ParseAssignExpressionListRightAssoc3(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AssignExpressionListRightAssoc3 -> divAssign OrExpression AssignExpressionListRightAssoc3
            if ((ExpressionParser.divAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.divAssign == context.SymbolId))) {
                    context.Error("Expecting divAssign");
                }
                children.Add(new ParseNode(ExpressionParser.divAssign, "divAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseOrExpression(context));
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                return new ParseNode(80, "AssignExpressionListRightAssoc3", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionListRightAssoc3 ->
            if ((((((((((((ExpressionParser.bitwiseAndAssign == context.SymbolId) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(80, "AssignExpressionListRightAssoc3", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting divAssign", line__, column__, position__);
        }
        internal static ParseNode ParseAssignExpressionListRightAssoc4(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AssignExpressionListRightAssoc4 -> bitwiseAndAssign OrExpression AssignExpressionListRightAssoc4
            if ((ExpressionParser.bitwiseAndAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.bitwiseAndAssign == context.SymbolId))) {
                    context.Error("Expecting bitwiseAndAssign");
                }
                children.Add(new ParseNode(ExpressionParser.bitwiseAndAssign, "bitwiseAndAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseOrExpression(context));
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                return new ParseNode(81, "AssignExpressionListRightAssoc4", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionListRightAssoc4 ->
            if (((((((((((ExpressionParser.addAssign == context.SymbolId) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(81, "AssignExpressionListRightAssoc4", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting bitwiseAndAssign", line__, column__, position__);
        }
        internal static ParseNode ParseTermExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TermExpressionListRightAssoc -> add FactorExpression TermExpressionListRightAssoc
            if ((ExpressionParser.add == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.add == context.SymbolId))) {
                    context.Error("Expecting add");
                }
                children.Add(new ParseNode(ExpressionParser.add, "add", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseFactorExpression(context));
                children.AddRange(ExpressionParser.ParseTermExpressionListRightAssoc(context).Children);
                return new ParseNode(82, "TermExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // TermExpressionListRightAssoc ->
            if ((((((((((((((((((((((((((ExpressionParser.sub == context.SymbolId) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(82, "TermExpressionListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting add", line__, column__, position__);
        }
        internal static ParseNode ParseFactorExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // FactorExpressionListRightAssoc -> mul UnaryExpression FactorExpressionListRightAssoc
            if ((ExpressionParser.mul == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.mul == context.SymbolId))) {
                    context.Error("Expecting mul");
                }
                children.Add(new ParseNode(ExpressionParser.mul, "mul", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseUnaryExpression(context));
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc(context).Children);
                return new ParseNode(83, "FactorExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // FactorExpressionListRightAssoc ->
            if (((((((((((((((((((((((((((((ExpressionParser.mod == context.SymbolId) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(83, "FactorExpressionListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting mul", line__, column__, position__);
        }
        internal static ParseNode ParseFactorExpressionListRightAssoc2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // FactorExpressionListRightAssoc2 -> mod UnaryExpression FactorExpressionListRightAssoc2
            if ((ExpressionParser.mod == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.mod == context.SymbolId))) {
                    context.Error("Expecting mod");
                }
                children.Add(new ParseNode(ExpressionParser.mod, "mod", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseUnaryExpression(context));
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc2(context).Children);
                return new ParseNode(84, "FactorExpressionListRightAssoc2", children.ToArray(), line__, column__, position__);
            }
            // FactorExpressionListRightAssoc2 ->
            if ((((((((((((((((((((((((((((ExpressionParser.div == context.SymbolId) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(84, "FactorExpressionListRightAssoc2", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting mod", line__, column__, position__);
        }
        internal static ParseNode ParseArgListListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ArgListListRightAssoc -> comma Expression ArgListListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma");
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseExpression(context));
                children.AddRange(ExpressionParser.ParseArgListListRightAssoc(context).Children);
                return new ParseNode(85, "ArgListListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // ArgListListRightAssoc ->
            if (((ExpressionParser.rbracket == context.SymbolId) 
                        || (ExpressionParser.rparen == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(85, "ArgListListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting comma", line__, column__, position__);
        }
        internal static ParseNode ParseMethodArgListListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MethodArgListListRightAssoc -> comma MethodArg MethodArgListListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma");
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseMethodArg(context));
                children.AddRange(ExpressionParser.ParseMethodArgListListRightAssoc(context).Children);
                return new ParseNode(86, "MethodArgListListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // MethodArgListListRightAssoc ->
            if ((ExpressionParser.rparen == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(86, "MethodArgListListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting comma", line__, column__, position__);
        }
        internal static ParseNode ParseTypeBaseListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeBaseListRightAssoc -> dot Identifier TypeBaseListRightAssoc
            if ((ExpressionParser.dot == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.dot == context.SymbolId))) {
                    context.Error("Expecting dot");
                }
                children.Add(new ParseNode(ExpressionParser.dot, "dot", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                children.AddRange(ExpressionParser.ParseTypeBaseListRightAssoc(context).Children);
                return new ParseNode(87, "TypeBaseListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // TypeBaseListRightAssoc ->
            if ((((((((((((((ExpressionParser.lt == context.SymbolId) 
                        || (ExpressionParser.lbracket == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.lbrace == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (TypeDeclParser.whereKeyword == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(87, "TypeBaseListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting dot", line__, column__, position__);
        }
        internal static ParseNode ParseTypeArraySpecListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeArraySpecListRightAssoc -> TypeArraySpec TypeArraySpecListRightAssoc
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseTypeArraySpec(context));
                children.AddRange(ExpressionParser.ParseTypeArraySpecListRightAssoc(context).Children);
                return new ParseNode(88, "TypeArraySpecListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // TypeArraySpecListRightAssoc ->
            if (((((((((((ExpressionParser.rparen == context.SymbolId) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.lbrace == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (TypeDeclParser.whereKeyword == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(88, "TypeArraySpecListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting TypeArraySpec", line__, column__, position__);
        }
        internal static ParseNode ParseTypeGenericPartListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeGenericPartListRightAssoc -> comma Type TypeGenericPartListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma");
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseType(context));
                children.AddRange(ExpressionParser.ParseTypeGenericPartListRightAssoc(context).Children);
                return new ParseNode(89, "TypeGenericPartListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // TypeGenericPartListRightAssoc ->
            if ((ExpressionParser.gt == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(89, "TypeGenericPartListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting comma", line__, column__, position__);
        }
        internal static ParseNode ParseTypeArraySpecRankListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeArraySpecRankListRightAssoc -> TypeArraySpecRank TypeArraySpecRankListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseTypeArraySpecRank(context));
                children.AddRange(ExpressionParser.ParseTypeArraySpecRankListRightAssoc(context).Children);
                return new ParseNode(90, "TypeArraySpecRankListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // TypeArraySpecRankListRightAssoc ->
            if ((ExpressionParser.rbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(90, "TypeArraySpecRankListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting TypeArraySpecRank", line__, column__, position__);
        }
        internal static ParseNode ParseArrayInitializerListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ArrayInitializerListRightAssoc -> comma Expression ArrayInitializerListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma");
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseExpression(context));
                children.AddRange(ExpressionParser.ParseArrayInitializerListRightAssoc(context).Children);
                return new ParseNode(91, "ArrayInitializerListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // ArrayInitializerListRightAssoc ->
            if ((ExpressionParser.rbrace == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(91, "ArrayInitializerListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting comma", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefListRightAssoc -> MemberAnyRef MemberAnyRefListRightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefListRightAssoc(context).Children);
                return new ParseNode(92, "MemberAnyRefListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList2RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList2RightAssoc -> MemberAnyRef MemberAnyRefList2RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList2RightAssoc(context).Children);
                return new ParseNode(93, "MemberAnyRefList2RightAssoc", children.ToArray(), line__, column__, position__);
            }
            // MemberAnyRefList2RightAssoc ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(93, "MemberAnyRefList2RightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList3RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList3RightAssoc -> MemberAnyRef MemberAnyRefList3RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList3RightAssoc(context).Children);
                return new ParseNode(94, "MemberAnyRefList3RightAssoc", children.ToArray(), line__, column__, position__);
            }
            // MemberAnyRefList3RightAssoc ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(94, "MemberAnyRefList3RightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList4RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList4RightAssoc -> MemberAnyRef MemberAnyRefList4RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList4RightAssoc(context).Children);
                return new ParseNode(95, "MemberAnyRefList4RightAssoc", children.ToArray(), line__, column__, position__);
            }
            // MemberAnyRefList4RightAssoc ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(95, "MemberAnyRefList4RightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList5RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList5RightAssoc -> MemberAnyRef MemberAnyRefList5RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList5RightAssoc(context).Children);
                return new ParseNode(96, "MemberAnyRefList5RightAssoc", children.ToArray(), line__, column__, position__);
            }
            // MemberAnyRefList5RightAssoc ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(96, "MemberAnyRefList5RightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList6RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList6RightAssoc -> MemberAnyRef MemberAnyRefList6RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList6RightAssoc(context).Children);
                return new ParseNode(97, "MemberAnyRefList6RightAssoc", children.ToArray(), line__, column__, position__);
            }
            // MemberAnyRefList6RightAssoc ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(97, "MemberAnyRefList6RightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList7RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList7RightAssoc -> MemberAnyRef MemberAnyRefList7RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList7RightAssoc(context).Children);
                return new ParseNode(98, "MemberAnyRefList7RightAssoc", children.ToArray(), line__, column__, position__);
            }
            // MemberAnyRefList7RightAssoc ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(98, "MemberAnyRefList7RightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList8RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList8RightAssoc -> MemberAnyRef MemberAnyRefList8RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList8RightAssoc(context).Children);
                return new ParseNode(99, "MemberAnyRefList8RightAssoc", children.ToArray(), line__, column__, position__);
            }
            // MemberAnyRefList8RightAssoc ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(99, "MemberAnyRefList8RightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList9RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList9RightAssoc -> MemberAnyRef MemberAnyRefList9RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList9RightAssoc(context).Children);
                return new ParseNode(100, "MemberAnyRefList9RightAssoc", children.ToArray(), line__, column__, position__);
            }
            // MemberAnyRefList9RightAssoc ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(100, "MemberAnyRefList9RightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList10RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList10RightAssoc -> MemberAnyRef MemberAnyRefList10RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList10RightAssoc(context).Children);
                return new ParseNode(101, "MemberAnyRefList10RightAssoc", children.ToArray(), line__, column__, position__);
            }
            // MemberAnyRefList10RightAssoc ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(101, "MemberAnyRefList10RightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList11RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList11RightAssoc -> MemberAnyRef MemberAnyRefList11RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList11RightAssoc(context).Children);
                return new ParseNode(102, "MemberAnyRefList11RightAssoc", children.ToArray(), line__, column__, position__);
            }
            // MemberAnyRefList11RightAssoc ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(102, "MemberAnyRefList11RightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList12RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList12RightAssoc -> MemberAnyRef MemberAnyRefList12RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList12RightAssoc(context).Children);
                return new ParseNode(103, "MemberAnyRefList12RightAssoc", children.ToArray(), line__, column__, position__);
            }
            // MemberAnyRefList12RightAssoc ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(103, "MemberAnyRefList12RightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList13RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList13RightAssoc -> MemberAnyRef MemberAnyRefList13RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList13RightAssoc(context).Children);
                return new ParseNode(104, "MemberAnyRefList13RightAssoc", children.ToArray(), line__, column__, position__);
            }
            // MemberAnyRefList13RightAssoc ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(104, "MemberAnyRefList13RightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseRelationalExpression(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // RelationalExpression -> TermExpression RelationalExpressionPart
            if ((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseTermExpression(context));
                children.AddRange(ExpressionParser.ParseRelationalExpressionPart(context).Children);
                return new ParseNode(105, "RelationalExpression", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting TermExpression", line__, column__, position__);
        }
        internal static ParseNode ParseRelationalExpressionPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // RelationalExpressionPart -> RelationalExpressionList
            if (((((ExpressionParser.lt == context.SymbolId) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseRelationalExpressionList(context).Children);
                return new ParseNode(106, "RelationalExpressionPart", children.ToArray(), line__, column__, position__);
            }
            // RelationalExpressionPart ->
            if (((((((((((((((((((((ExpressionParser.eqEq == context.SymbolId) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(106, "RelationalExpressionPart", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting RelationalExpressionList", line__, column__, position__);
        }
        internal static ParseNode ParseEqualityExpression(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // EqualityExpression -> RelationalExpression EqualityExpressionPart
            if ((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseRelationalExpression(context));
                children.AddRange(ExpressionParser.ParseEqualityExpressionPart(context).Children);
                return new ParseNode(107, "EqualityExpression", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting RelationalExpression", line__, column__, position__);
        }
        internal static ParseNode ParseEqualityExpressionPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // EqualityExpressionPart -> EqualityExpressionList
            if (((ExpressionParser.eqEq == context.SymbolId) 
                        || (ExpressionParser.notEq == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseEqualityExpressionList(context).Children);
                return new ParseNode(108, "EqualityExpressionPart", children.ToArray(), line__, column__, position__);
            }
            // EqualityExpressionPart ->
            if (((((((((((((((((((ExpressionParser.bitwiseAnd == context.SymbolId) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(108, "EqualityExpressionPart", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting EqualityExpressionList", line__, column__, position__);
        }
        internal static ParseNode ParseBitwiseAndExpression(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // BitwiseAndExpression -> EqualityExpression BitwiseAndExpressionPart
            if ((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseEqualityExpression(context));
                children.AddRange(ExpressionParser.ParseBitwiseAndExpressionPart(context).Children);
                return new ParseNode(109, "BitwiseAndExpression", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting EqualityExpression", line__, column__, position__);
        }
        internal static ParseNode ParseBitwiseAndExpressionPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // BitwiseAndExpressionPart -> BitwiseAndExpressionList
            if ((ExpressionParser.bitwiseAnd == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseBitwiseAndExpressionList(context).Children);
                return new ParseNode(110, "BitwiseAndExpressionPart", children.ToArray(), line__, column__, position__);
            }
            // BitwiseAndExpressionPart ->
            if ((((((((((((((((((ExpressionParser.bitwiseOr == context.SymbolId) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(110, "BitwiseAndExpressionPart", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting BitwiseAndExpressionList", line__, column__, position__);
        }
        internal static ParseNode ParseBitwiseOrExpression(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // BitwiseOrExpression -> BitwiseAndExpression BitwiseOrExpressionPart
            if ((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseBitwiseAndExpression(context));
                children.AddRange(ExpressionParser.ParseBitwiseOrExpressionPart(context).Children);
                return new ParseNode(111, "BitwiseOrExpression", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting BitwiseAndExpression", line__, column__, position__);
        }
        internal static ParseNode ParseBitwiseOrExpressionPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // BitwiseOrExpressionPart -> BitwiseOrExpressionList
            if ((ExpressionParser.bitwiseOr == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseBitwiseOrExpressionList(context).Children);
                return new ParseNode(112, "BitwiseOrExpressionPart", children.ToArray(), line__, column__, position__);
            }
            // BitwiseOrExpressionPart ->
            if (((((((((((((((((ExpressionParser.and == context.SymbolId) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(112, "BitwiseOrExpressionPart", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting BitwiseOrExpressionList", line__, column__, position__);
        }
        internal static ParseNode ParseAndExpression(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AndExpression -> BitwiseOrExpression AndExpressionPart
            if ((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseBitwiseOrExpression(context));
                children.AddRange(ExpressionParser.ParseAndExpressionPart(context).Children);
                return new ParseNode(113, "AndExpression", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting BitwiseOrExpression", line__, column__, position__);
        }
        internal static ParseNode ParseAndExpressionPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AndExpressionPart -> AndExpressionList
            if ((ExpressionParser.and == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseAndExpressionList(context).Children);
                return new ParseNode(114, "AndExpressionPart", children.ToArray(), line__, column__, position__);
            }
            // AndExpressionPart ->
            if ((((((((((((((((ExpressionParser.or == context.SymbolId) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(114, "AndExpressionPart", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting AndExpressionList", line__, column__, position__);
        }
        internal static ParseNode ParseOrExpression(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // OrExpression -> AndExpression OrExpressionPart
            if ((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseAndExpression(context));
                children.AddRange(ExpressionParser.ParseOrExpressionPart(context).Children);
                return new ParseNode(115, "OrExpression", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting AndExpression", line__, column__, position__);
        }
        internal static ParseNode ParseOrExpressionPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // OrExpressionPart -> OrExpressionList
            if ((ExpressionParser.or == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseOrExpressionList(context).Children);
                return new ParseNode(116, "OrExpressionPart", children.ToArray(), line__, column__, position__);
            }
            // OrExpressionPart ->
            if (((((((((((((((ExpressionParser.eq == context.SymbolId) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(116, "OrExpressionPart", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting OrExpressionList", line__, column__, position__);
        }
        internal static ParseNode ParseAssignExpression(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AssignExpression -> OrExpression AssignExpressionPart
            if ((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseOrExpression(context));
                children.AddRange(ExpressionParser.ParseAssignExpressionPart(context).Children);
                return new ParseNode(117, "AssignExpression", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting OrExpression", line__, column__, position__);
        }
        internal static ParseNode ParseAssignExpressionPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AssignExpressionPart -> AssignExpressionList
            if (((((((((ExpressionParser.eq == context.SymbolId) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseAssignExpressionList(context).Children);
                return new ParseNode(118, "AssignExpressionPart", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionPart ->
            if (((((((ExpressionParser.EosSymbol == context.SymbolId) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(118, "AssignExpressionPart", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting AssignExpressionList", line__, column__, position__);
        }
        internal static ParseNode ParseTermExpression(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TermExpression -> FactorExpression TermExpressionPart
            if ((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseFactorExpression(context));
                children.AddRange(ExpressionParser.ParseTermExpressionPart(context).Children);
                return new ParseNode(119, "TermExpression", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting FactorExpression", line__, column__, position__);
        }
        internal static ParseNode ParseTermExpressionPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TermExpressionPart -> TermExpressionList
            if (((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseTermExpressionList(context).Children);
                return new ParseNode(120, "TermExpressionPart", children.ToArray(), line__, column__, position__);
            }
            // TermExpressionPart ->
            if (((((((((((((((((((((((((ExpressionParser.lt == context.SymbolId) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(120, "TermExpressionPart", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting TermExpressionList", line__, column__, position__);
        }
        internal static ParseNode ParseFactorExpression(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // FactorExpression -> UnaryExpression FactorExpressionPart
            if ((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseUnaryExpression(context));
                children.AddRange(ExpressionParser.ParseFactorExpressionPart(context).Children);
                return new ParseNode(121, "FactorExpression", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting UnaryExpression", line__, column__, position__);
        }
        internal static ParseNode ParseFactorExpressionPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // FactorExpressionPart -> FactorExpressionList
            if ((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.mod == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseFactorExpressionList(context).Children);
                return new ParseNode(122, "FactorExpressionPart", children.ToArray(), line__, column__, position__);
            }
            // FactorExpressionPart ->
            if (((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(122, "FactorExpressionPart", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting FactorExpressionList", line__, column__, position__);
        }
        internal static ParseNode ParseArgList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ArgList -> Expression ArgListPart
            if ((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseExpression(context));
                children.AddRange(ExpressionParser.ParseArgListPart(context).Children);
                return new ParseNode(123, "ArgList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting Expression", line__, column__, position__);
        }
        internal static ParseNode ParseArgListPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ArgListPart -> ArgListList
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseArgListList(context).Children);
                return new ParseNode(124, "ArgListPart", children.ToArray(), line__, column__, position__);
            }
            // ArgListPart ->
            if (((ExpressionParser.rbracket == context.SymbolId) 
                        || (ExpressionParser.rparen == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(124, "ArgListPart", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting ArgListList", line__, column__, position__);
        }
        internal static ParseNode ParseMethodArgListPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MethodArgListPart -> MethodArgListList
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMethodArgListList(context).Children);
                return new ParseNode(125, "MethodArgListPart", children.ToArray(), line__, column__, position__);
            }
            // MethodArgListPart ->
            if ((ExpressionParser.rparen == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(125, "MethodArgListPart", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting MethodArgListList", line__, column__, position__);
        }
        internal static ParseNode ParseTypeBasePart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeBasePart -> TypeBaseList
            if ((ExpressionParser.dot == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseTypeBaseList(context).Children);
                return new ParseNode(126, "TypeBasePart", children.ToArray(), line__, column__, position__);
            }
            // TypeBasePart ->
            if ((((((((((((((ExpressionParser.lt == context.SymbolId) 
                        || (ExpressionParser.lbracket == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.lbrace == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (TypeDeclParser.whereKeyword == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(126, "TypeBasePart", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting TypeBaseList", line__, column__, position__);
        }
        internal static ParseNode ParseType(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // Type -> TypeElement TypePart
            if ((((((((((((((((((ExpressionParser.boolType == context.SymbolId) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseTypeElement(context));
                children.AddRange(ExpressionParser.ParseTypePart(context).Children);
                return new ParseNode(127, "Type", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting TypeElement", line__, column__, position__);
        }
        /// <summary>
        /// Parses a production of the form:
        /// Type= TypeElement { TypeArraySpec }
        /// </summary>
        /// <remarks>
        /// The production rules are:
        /// Type -> TypeElement TypePart
        /// </remarks>
        /// <param name="tokenizer">The tokenizer to parse with</param><returns>A <see cref="ParseNode" /> representing the parsed tokens</returns>
        public static ParseNode ParseType(System.Collections.Generic.IEnumerable<Token> tokenizer) {
            ParserContext context = new ParserContext(tokenizer);
            context.EnsureStarted();
            ParseNode result = ExpressionParser.ParseType(context);
            if ((false == context.IsEnded)) {
                context.Error("Unexpected remainder in input.");
            }
            return result;
        }
        internal static ParseNode ParseTypePart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypePart -> TypeArraySpecList
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseTypeArraySpecList(context).Children);
                return new ParseNode(128, "TypePart", children.ToArray(), line__, column__, position__);
            }
            // TypePart ->
            if (((((((((((ExpressionParser.rparen == context.SymbolId) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.lbrace == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (TypeDeclParser.whereKeyword == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(128, "TypePart", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting TypeArraySpecList", line__, column__, position__);
        }
        internal static ParseNode ParseTypeElement(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeElement -> TypeBase TypeElementPart
            if ((((((((((((((((((ExpressionParser.boolType == context.SymbolId) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseTypeBase(context));
                children.AddRange(ExpressionParser.ParseTypeElementPart(context).Children);
                return new ParseNode(129, "TypeElement", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting TypeBase", line__, column__, position__);
        }
        internal static ParseNode ParseTypeElementPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeElementPart -> TypeGenericPart
            if ((ExpressionParser.lt == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                children[0] = ExpressionParser.ParseTypeGenericPart(context);
                return new ParseNode(130, "TypeElementPart", children, line__, column__, position__);
            }
            // TypeElementPart ->
            if (((((((((((((ExpressionParser.lbracket == context.SymbolId) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.lbrace == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (TypeDeclParser.whereKeyword == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(130, "TypeElementPart", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting TypeGenericPart", line__, column__, position__);
        }
        internal static ParseNode ParseTypeGenericPartPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeGenericPartPart -> TypeGenericPartList gt
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseTypeGenericPartList(context).Children);
                if ((false 
                            == (ExpressionParser.gt == context.SymbolId))) {
                    context.Error("Expecting gt");
                }
                children.Add(new ParseNode(ExpressionParser.gt, "gt", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                return new ParseNode(131, "TypeGenericPartPart", children.ToArray(), line__, column__, position__);
            }
            // TypeGenericPartPart -> gt
            if ((ExpressionParser.gt == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.gt == context.SymbolId))) {
                    context.Error("Expecting gt");
                }
                children[0] = new ParseNode(ExpressionParser.gt, "gt", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(131, "TypeGenericPartPart", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting TypeGenericPartList or gt", line__, column__, position__);
        }
        internal static ParseNode ParseTypeArraySpec(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeArraySpec -> lbracket TypeArraySpecPart
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.lbracket == context.SymbolId))) {
                    context.Error("Expecting lbracket");
                }
                children.Add(new ParseNode(ExpressionParser.lbracket, "lbracket", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseTypeArraySpecPart(context).Children);
                return new ParseNode(132, "TypeArraySpec", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting lbracket", line__, column__, position__);
        }
        internal static ParseNode ParseTypeArraySpecPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeArraySpecPart -> TypeArraySpecRankList rbracket
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseTypeArraySpecRankList(context).Children);
                if ((false 
                            == (ExpressionParser.rbracket == context.SymbolId))) {
                    context.Error("Expecting rbracket");
                }
                children.Add(new ParseNode(ExpressionParser.rbracket, "rbracket", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                return new ParseNode(133, "TypeArraySpecPart", children.ToArray(), line__, column__, position__);
            }
            // TypeArraySpecPart -> rbracket
            if ((ExpressionParser.rbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.rbracket == context.SymbolId))) {
                    context.Error("Expecting rbracket");
                }
                children[0] = new ParseNode(ExpressionParser.rbracket, "rbracket", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(133, "TypeArraySpecPart", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting TypeArraySpecRankList or rbracket", line__, column__, position__);
        }
        internal static ParseNode ParseNewExpression(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // NewExpression -> newKeyword TypeElement NewExpressionPart
            if ((ExpressionParser.newKeyword == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.newKeyword == context.SymbolId))) {
                    context.Error("Expecting newKeyword");
                }
                children.Add(new ParseNode(ExpressionParser.newKeyword, "newKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseTypeElement(context));
                children.AddRange(ExpressionParser.ParseNewExpressionPart(context).Children);
                return new ParseNode(134, "NewExpression", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting newKeyword", line__, column__, position__);
        }
        internal static ParseNode ParseNewExpressionPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // NewExpressionPart -> NewObjectPart
            if ((ExpressionParser.lparen == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseNewObjectPart(context).Children);
                return new ParseNode(135, "NewExpressionPart", children.ToArray(), line__, column__, position__);
            }
            // NewExpressionPart -> NewArrayPart
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseNewArrayPart(context).Children);
                return new ParseNode(135, "NewExpressionPart", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting NewObjectPart or NewArrayPart", line__, column__, position__);
        }
        internal static ParseNode ParseNewObjectPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // NewObjectPart -> lparen NewObjectPartPart
            if ((ExpressionParser.lparen == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.lparen == context.SymbolId))) {
                    context.Error("Expecting lparen");
                }
                children.Add(new ParseNode(ExpressionParser.lparen, "lparen", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseNewObjectPartPart(context).Children);
                return new ParseNode(136, "NewObjectPart", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting lparen", line__, column__, position__);
        }
        internal static ParseNode ParseNewObjectPartPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // NewObjectPartPart -> ArgList rparen
            if ((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = ExpressionParser.ParseArgList(context);
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen");
                }
                children[1] = new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(137, "NewObjectPartPart", children, line__, column__, position__);
            }
            // NewObjectPartPart -> rparen
            if ((ExpressionParser.rparen == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen");
                }
                children[0] = new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(137, "NewObjectPartPart", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting ArgList or rparen", line__, column__, position__);
        }
        internal static ParseNode ParseArrayInitializerPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ArrayInitializerPart -> ArrayInitializerList rbrace
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseArrayInitializerList(context).Children);
                if ((false 
                            == (ExpressionParser.rbrace == context.SymbolId))) {
                    context.Error("Expecting rbrace");
                }
                children.Add(new ParseNode(ExpressionParser.rbrace, "rbrace", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                return new ParseNode(138, "ArrayInitializerPart", children.ToArray(), line__, column__, position__);
            }
            // ArrayInitializerPart -> rbrace
            if ((ExpressionParser.rbrace == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.rbrace == context.SymbolId))) {
                    context.Error("Expecting rbrace");
                }
                children[0] = new ParseNode(ExpressionParser.rbrace, "rbrace", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(138, "ArrayInitializerPart", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting ArrayInitializerList or rbrace", line__, column__, position__);
        }
        internal static ParseNode ParseFieldRef(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // FieldRef -> Identifier FieldRefPart
            if (((ExpressionParser.verbatimIdentifier == context.SymbolId) 
                        || (ExpressionParser.identifier2 == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                children.AddRange(ExpressionParser.ParseFieldRefPart(context).Children);
                return new ParseNode(139, "FieldRef", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting Identifier", line__, column__, position__);
        }
        internal static ParseNode ParseFieldRefPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // FieldRefPart -> MemberAnyRefList
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList(context).Children);
                return new ParseNode(140, "FieldRefPart", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRefList", line__, column__, position__);
        }
        internal static ParseNode ParsePrimaryExpressionPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // PrimaryExpressionPart -> MemberAnyRefList8
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList8(context).Children);
                return new ParseNode(141, "PrimaryExpressionPart", children.ToArray(), line__, column__, position__);
            }
            // PrimaryExpressionPart ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(141, "PrimaryExpressionPart", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRefList8", line__, column__, position__);
        }
        internal static ParseNode ParsePrimaryExpressionPart2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // PrimaryExpressionPart2 -> MemberAnyRefList9
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList9(context).Children);
                return new ParseNode(142, "PrimaryExpressionPart2", children.ToArray(), line__, column__, position__);
            }
            // PrimaryExpressionPart2 ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(142, "PrimaryExpressionPart2", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRefList9", line__, column__, position__);
        }
        internal static ParseNode ParsePrimaryExpressionPart3(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // PrimaryExpressionPart3 -> MemberAnyRefList2
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList2(context).Children);
                return new ParseNode(143, "PrimaryExpressionPart3", children.ToArray(), line__, column__, position__);
            }
            // PrimaryExpressionPart3 ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(143, "PrimaryExpressionPart3", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRefList2", line__, column__, position__);
        }
        internal static ParseNode ParsePrimaryExpressionPart4(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // PrimaryExpressionPart4 -> MemberAnyRefList3
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList3(context).Children);
                return new ParseNode(144, "PrimaryExpressionPart4", children.ToArray(), line__, column__, position__);
            }
            // PrimaryExpressionPart4 ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(144, "PrimaryExpressionPart4", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRefList3", line__, column__, position__);
        }
        internal static ParseNode ParsePrimaryExpressionPart5(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // PrimaryExpressionPart5 -> MemberAnyRefList4
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList4(context).Children);
                return new ParseNode(145, "PrimaryExpressionPart5", children.ToArray(), line__, column__, position__);
            }
            // PrimaryExpressionPart5 ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(145, "PrimaryExpressionPart5", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRefList4", line__, column__, position__);
        }
        internal static ParseNode ParsePrimaryExpressionPart6(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // PrimaryExpressionPart6 -> MemberAnyRefList5
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList5(context).Children);
                return new ParseNode(146, "PrimaryExpressionPart6", children.ToArray(), line__, column__, position__);
            }
            // PrimaryExpressionPart6 ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(146, "PrimaryExpressionPart6", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRefList5", line__, column__, position__);
        }
        internal static ParseNode ParsePrimaryExpressionPart7(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // PrimaryExpressionPart7 -> MemberAnyRefList6
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList6(context).Children);
                return new ParseNode(147, "PrimaryExpressionPart7", children.ToArray(), line__, column__, position__);
            }
            // PrimaryExpressionPart7 ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(147, "PrimaryExpressionPart7", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRefList6", line__, column__, position__);
        }
        internal static ParseNode ParsePrimaryExpressionPart8(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // PrimaryExpressionPart8 -> MemberAnyRefList7
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList7(context).Children);
                return new ParseNode(148, "PrimaryExpressionPart8", children.ToArray(), line__, column__, position__);
            }
            // PrimaryExpressionPart8 ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(148, "PrimaryExpressionPart8", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRefList7", line__, column__, position__);
        }
        internal static ParseNode ParsePrimaryExpressionPart9(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // PrimaryExpressionPart9 -> MemberAnyRefList10
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList10(context).Children);
                return new ParseNode(149, "PrimaryExpressionPart9", children.ToArray(), line__, column__, position__);
            }
            // PrimaryExpressionPart9 ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(149, "PrimaryExpressionPart9", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRefList10", line__, column__, position__);
        }
        internal static ParseNode ParsePrimaryExpressionPart10(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // PrimaryExpressionPart10 -> MemberAnyRefList11
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList11(context).Children);
                return new ParseNode(150, "PrimaryExpressionPart10", children.ToArray(), line__, column__, position__);
            }
            // PrimaryExpressionPart10 ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(150, "PrimaryExpressionPart10", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRefList11", line__, column__, position__);
        }
        internal static ParseNode ParsePrimaryExpressionPart11(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // PrimaryExpressionPart11 -> MemberAnyRefList12
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList12(context).Children);
                return new ParseNode(151, "PrimaryExpressionPart11", children.ToArray(), line__, column__, position__);
            }
            // PrimaryExpressionPart11 ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(151, "PrimaryExpressionPart11", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRefList12", line__, column__, position__);
        }
        internal static ParseNode ParsePrimaryExpressionPart12(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // PrimaryExpressionPart12 -> MemberAnyRefList13
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList13(context).Children);
                return new ParseNode(152, "PrimaryExpressionPart12", children.ToArray(), line__, column__, position__);
            }
            // PrimaryExpressionPart12 ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(152, "PrimaryExpressionPart12", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRefList13", line__, column__, position__);
        }
        internal static ParseNode ParseRelationalExpressionListPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // RelationalExpressionListPart -> lte TermExpression
            if ((ExpressionParser.lte == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.lte == context.SymbolId))) {
                    context.Error("Expecting lte");
                }
                children[0] = new ParseNode(ExpressionParser.lte, "lte", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[1] = ExpressionParser.ParseTermExpression(context);
                return new ParseNode(153, "RelationalExpressionListPart", children, line__, column__, position__);
            }
            // RelationalExpressionListPart -> gte TermExpression
            if ((ExpressionParser.gte == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.gte == context.SymbolId))) {
                    context.Error("Expecting gte");
                }
                children[0] = new ParseNode(ExpressionParser.gte, "gte", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[1] = ExpressionParser.ParseTermExpression(context);
                return new ParseNode(153, "RelationalExpressionListPart", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting lte or gte", line__, column__, position__);
        }
        internal static ParseNode ParseAssignExpressionListPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AssignExpressionListPart -> addAssign OrExpression
            if ((ExpressionParser.addAssign == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.addAssign == context.SymbolId))) {
                    context.Error("Expecting addAssign");
                }
                children[0] = new ParseNode(ExpressionParser.addAssign, "addAssign", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[1] = ExpressionParser.ParseOrExpression(context);
                return new ParseNode(154, "AssignExpressionListPart", children, line__, column__, position__);
            }
            // AssignExpressionListPart -> mulAssign OrExpression
            if ((ExpressionParser.mulAssign == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.mulAssign == context.SymbolId))) {
                    context.Error("Expecting mulAssign");
                }
                children[0] = new ParseNode(ExpressionParser.mulAssign, "mulAssign", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[1] = ExpressionParser.ParseOrExpression(context);
                return new ParseNode(154, "AssignExpressionListPart", children, line__, column__, position__);
            }
            // AssignExpressionListPart -> modAssign OrExpression
            if ((ExpressionParser.modAssign == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.modAssign == context.SymbolId))) {
                    context.Error("Expecting modAssign");
                }
                children[0] = new ParseNode(ExpressionParser.modAssign, "modAssign", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[1] = ExpressionParser.ParseOrExpression(context);
                return new ParseNode(154, "AssignExpressionListPart", children, line__, column__, position__);
            }
            // AssignExpressionListPart -> bitwiseOrAssign OrExpression
            if ((ExpressionParser.bitwiseOrAssign == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.bitwiseOrAssign == context.SymbolId))) {
                    context.Error("Expecting bitwiseOrAssign");
                }
                children[0] = new ParseNode(ExpressionParser.bitwiseOrAssign, "bitwiseOrAssign", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[1] = ExpressionParser.ParseOrExpression(context);
                return new ParseNode(154, "AssignExpressionListPart", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting addAssign, mulAssign, modAssign, or bitwiseOrAssign", line__, column__, position__);
        }
        internal static ParseNode ParseEqualityExpressionListRightAssoc2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // EqualityExpressionListRightAssoc2 -> notEq RelationalExpression EqualityExpressionListRightAssoc2
            if ((ExpressionParser.notEq == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.notEq == context.SymbolId))) {
                    context.Error("Expecting notEq");
                }
                children.Add(new ParseNode(ExpressionParser.notEq, "notEq", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseRelationalExpression(context));
                children.AddRange(ExpressionParser.ParseEqualityExpressionListRightAssoc2(context).Children);
                return new ParseNode(155, "EqualityExpressionListRightAssoc2", children.ToArray(), line__, column__, position__);
            }
            // EqualityExpressionListRightAssoc2 ->
            if (((((((((((((((((((ExpressionParser.bitwiseAnd == context.SymbolId) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(155, "EqualityExpressionListRightAssoc2", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting notEq", line__, column__, position__);
        }
        internal static ParseNode ParseTermExpressionListRightAssoc2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TermExpressionListRightAssoc2 -> sub FactorExpression TermExpressionListRightAssoc2
            if ((ExpressionParser.sub == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.sub == context.SymbolId))) {
                    context.Error("Expecting sub");
                }
                children.Add(new ParseNode(ExpressionParser.sub, "sub", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseFactorExpression(context));
                children.AddRange(ExpressionParser.ParseTermExpressionListRightAssoc2(context).Children);
                return new ParseNode(156, "TermExpressionListRightAssoc2", children.ToArray(), line__, column__, position__);
            }
            // TermExpressionListRightAssoc2 ->
            if (((((((((((((((((((((((((ExpressionParser.lt == context.SymbolId) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(156, "TermExpressionListRightAssoc2", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting sub", line__, column__, position__);
        }
        internal static ParseNode ParseFactorExpressionListRightAssoc3(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // FactorExpressionListRightAssoc3 -> div UnaryExpression FactorExpressionListRightAssoc3
            if ((ExpressionParser.div == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.div == context.SymbolId))) {
                    context.Error("Expecting div");
                }
                children.Add(new ParseNode(ExpressionParser.div, "div", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseUnaryExpression(context));
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc3(context).Children);
                return new ParseNode(157, "FactorExpressionListRightAssoc3", children.ToArray(), line__, column__, position__);
            }
            // FactorExpressionListRightAssoc3 ->
            if (((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(157, "FactorExpressionListRightAssoc3", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting div", line__, column__, position__);
        }
        internal static ParseNode ParseRelationalExpressionListRightAssoc3(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // RelationalExpressionListRightAssoc3 -> RelationalExpressionListPart RelationalExpressionListRightAssoc3
            if (((ExpressionParser.lte == context.SymbolId) 
                        || (ExpressionParser.gte == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseRelationalExpressionListPart(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc3(context).Children);
                return new ParseNode(158, "RelationalExpressionListRightAssoc3", children.ToArray(), line__, column__, position__);
            }
            // RelationalExpressionListRightAssoc3 ->
            if (((((((((((((((((((((ExpressionParser.eqEq == context.SymbolId) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(158, "RelationalExpressionListRightAssoc3", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting RelationalExpressionListPart", line__, column__, position__);
        }
        internal static ParseNode ParseAssignExpressionListRightAssoc5(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AssignExpressionListRightAssoc5 -> AssignExpressionListPart AssignExpressionListRightAssoc5
            if (((((ExpressionParser.addAssign == context.SymbolId) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseAssignExpressionListPart(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(159, "AssignExpressionListRightAssoc5", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionListRightAssoc5 ->
            if (((((((ExpressionParser.EosSymbol == context.SymbolId) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(159, "AssignExpressionListRightAssoc5", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting AssignExpressionListPart", line__, column__, position__);
        }
        internal static ParseNode ParseTypeGenericPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeGenericPart -> lt TypeGenericPartPart2
            if ((ExpressionParser.lt == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.lt == context.SymbolId))) {
                    context.Error("Expecting lt");
                }
                children.Add(new ParseNode(ExpressionParser.lt, "lt", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseTypeGenericPartPart2(context).Children);
                return new ParseNode(160, "TypeGenericPart", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting lt", line__, column__, position__);
        }
        internal static ParseNode ParseTypeGenericPartPart2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeGenericPartPart2 -> gt
            if ((ExpressionParser.gt == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.gt == context.SymbolId))) {
                    context.Error("Expecting gt");
                }
                children[0] = new ParseNode(ExpressionParser.gt, "gt", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(161, "TypeGenericPartPart2", children, line__, column__, position__);
            }
            // TypeGenericPartPart2 -> Type TypeGenericPartPart
            if ((((((((((((((((((ExpressionParser.boolType == context.SymbolId) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseType(context));
                children.AddRange(ExpressionParser.ParseTypeGenericPartPart(context).Children);
                return new ParseNode(161, "TypeGenericPartPart2", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting gt or Type", line__, column__, position__);
        }
        internal static ParseNode ParseArrayInitializer(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ArrayInitializer -> lbrace ArrayInitializerPart2
            if ((ExpressionParser.lbrace == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.lbrace == context.SymbolId))) {
                    context.Error("Expecting lbrace");
                }
                children.Add(new ParseNode(ExpressionParser.lbrace, "lbrace", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseArrayInitializerPart2(context).Children);
                return new ParseNode(162, "ArrayInitializer", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting lbrace", line__, column__, position__);
        }
        internal static ParseNode ParseArrayInitializerPart2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ArrayInitializerPart2 -> rbrace
            if ((ExpressionParser.rbrace == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.rbrace == context.SymbolId))) {
                    context.Error("Expecting rbrace");
                }
                children[0] = new ParseNode(ExpressionParser.rbrace, "rbrace", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(163, "ArrayInitializerPart2", children, line__, column__, position__);
            }
            // ArrayInitializerPart2 -> Expression ArrayInitializerPart
            if ((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseExpression(context));
                children.AddRange(ExpressionParser.ParseArrayInitializerPart(context).Children);
                return new ParseNode(163, "ArrayInitializerPart2", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting rbrace or Expression", line__, column__, position__);
        }
    }
    /// <summary>Parses the indicated grammar. Refer to C:\dev\BuildPack\ParsleyAdvancedDemo\SlangStatement.xbnf</summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Parsley", "0.1.2.0")]
    internal partial class StatementParser {
        internal const int ErrorSymbol = -1;
        internal const int EosSymbol = -2;
        public const int Expression = 9;
        public const int MemberAnyRef = 14;
        public const int MethodArg = 15;
        public const int TypeArraySpecRank = 19;
        public const int UnaryExpression = 24;
        public const int Identifier = 26;
        public const int RelationalExpression = 105;
        public const int EqualityExpression = 107;
        public const int BitwiseAndExpression = 109;
        public const int BitwiseOrExpression = 111;
        public const int AndExpression = 113;
        public const int OrExpression = 115;
        public const int TermExpression = 119;
        public const int FactorExpression = 121;
        public const int Type = 127;
        public const int TypeArraySpec = 132;
        public const int EmptyStatement = 164;
        public const int VariableDeclarationStatement = 165;
        public const int ExpressionStatement = 166;
        public const int VariableDeclarationOrLabelOrExpressionStatement = 167;
        public const int ElsePart = 168;
        public const int IfStatementPart = 169;
        public const int GotoStatement = 170;
        public const int LocalAssignStatement = 171;
        public const int ForIncPart = 172;
        public const int WhileStatement = 173;
        public const int FinallyClause = 174;
        public const int LabelStatement = 175;
        public const int StatementOrBlock = 176;
        public const int InnerStatement = 177;
        public const int Statements = 178;
        public const int IfStatement = 182;
        public const int ForStatement = 183;
        public const int Statement = 184;
        public const int ReturnStatement = 218;
        public const int ThrowStatement = 220;
        public const int CatchClause = 223;
        public const int StatementBlock = 225;
        public const int TryStatement = 227;
        public const int Comments = 229;
        public const int Directives = 230;
        public const int verbatimIdentifier = 392;
        public const int typeOf = 395;
        public const int defaultOf = 396;
        public const int newKeyword = 397;
        public const int stringType = 398;
        public const int boolType = 399;
        public const int charType = 400;
        public const int floatType = 401;
        public const int doubleType = 402;
        public const int decimalType = 403;
        public const int sbyteType = 404;
        public const int byteType = 405;
        public const int shortType = 406;
        public const int ushortType = 407;
        public const int intType = 408;
        public const int uintType = 409;
        public const int longType = 410;
        public const int ulongType = 411;
        public const int objectType = 412;
        public const int boolLiteral = 413;
        public const int nullLiteral = 414;
        public const int thisRef = 415;
        public const int baseRef = 416;
        public const int verbatimStringLiteral = 417;
        public const int identifier2 = 418;
        public const int stringLiteral = 419;
        public const int characterLiteral = 420;
        public const int lte = 421;
        public const int lt = 422;
        public const int gte = 423;
        public const int gt = 424;
        public const int eqEq = 425;
        public const int notEq = 426;
        public const int eq = 427;
        public const int inc = 428;
        public const int addAssign = 429;
        public const int add = 430;
        public const int dec = 431;
        public const int subAssign = 432;
        public const int sub = 433;
        public const int mulAssign = 434;
        public const int mul = 435;
        public const int divAssign = 436;
        public const int div = 437;
        public const int modAssign = 438;
        public const int mod = 439;
        public const int and = 440;
        public const int bitwiseAndAssign = 441;
        public const int bitwiseAnd = 442;
        public const int or = 443;
        public const int bitwiseOrAssign = 444;
        public const int bitwiseOr = 445;
        public const int not = 446;
        public const int rbracket = 448;
        public const int lparen = 449;
        public const int rparen = 450;
        public const int lbrace = 451;
        public const int rbrace = 452;
        public const int comma = 453;
        public const int dot = 455;
        public const int integerLiteral = 456;
        public const int floatLiteral = 457;
        public const int ifKeyword = 459;
        public const int gotoKeyword = 460;
        public const int elseKeyword = 461;
        public const int forKeyword = 462;
        public const int throwKeyword = 463;
        public const int whileKeyword = 464;
        public const int returnKeyword = 465;
        public const int tryKeyword = 466;
        public const int catchKeyword = 467;
        public const int finallyKeyword = 468;
        public const int semi = 469;
        public const int varType = 470;
        public const int colon = 471;
        public const int lineComment = 473;
        public const int blockComment = 474;
        public const int whereKeyword = 493;
        internal static ParseNode ParseEmptyStatement(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // EmptyStatement -> semi
            if ((StatementParser.semi == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (StatementParser.semi == context.SymbolId))) {
                    context.Error("Expecting semi");
                }
                children[0] = new ParseNode(StatementParser.semi, "semi", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(164, "EmptyStatement", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting semi", line__, column__, position__);
        }
        internal static ParseNode ParseVariableDeclarationStatement(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // VariableDeclarationStatement -> varType Identifier eq Expression semi
            if ((StatementParser.varType == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (StatementParser.varType == context.SymbolId))) {
                    context.Error("Expecting varType");
                }
                children.Add(new ParseNode(StatementParser.varType, "varType", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                if ((false 
                            == (ExpressionParser.eq == context.SymbolId))) {
                    context.Error("Expecting eq");
                }
                children.Add(new ParseNode(ExpressionParser.eq, "eq", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseExpression(context));
                if ((false 
                            == (StatementParser.semi == context.SymbolId))) {
                    context.Error("Expecting semi");
                }
                children.Add(new ParseNode(StatementParser.semi, "semi", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                return new ParseNode(165, "VariableDeclarationStatement", children.ToArray(), line__, column__, position__);
            }
            // VariableDeclarationStatement -> Type Identifier VariableDeclarationStatementPart
            if ((((((((((((((((((ExpressionParser.boolType == context.SymbolId) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseType(context));
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                children.AddRange(StatementParser.ParseVariableDeclarationStatementPart(context).Children);
                return new ParseNode(165, "VariableDeclarationStatement", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting varType or Type", line__, column__, position__);
        }
        internal static ParseNode ParseExpressionStatement(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ExpressionStatement -> Expression semi
            if (((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        && StatementParser.WhereExpressionStatement(context.GetLookAhead(true)))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = ExpressionParser.ParseExpression(context);
                if ((false 
                            == (StatementParser.semi == context.SymbolId))) {
                    context.Error("Expecting semi");
                }
                children[1] = new ParseNode(StatementParser.semi, "semi", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(166, "ExpressionStatement", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting Expression", line__, column__, position__);
        }
        internal static bool WhereExpressionStatement(ParserContext context) {
            return _WhereExpressionStatement(context);
        }
        internal static ParseNode ParseVariableDeclarationOrLabelOrExpressionStatement(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // VariableDeclarationOrLabelOrExpressionStatement -> VariableDeclarationStatement
            if (((StatementParser.varType == context.SymbolId) 
                        && StatementParser.WhereVariableDeclarationOrLabelOrExpressionStatement(context.GetLookAhead(true)))) {
                ParseNode[] children = new ParseNode[1];
                children[0] = StatementParser.ParseVariableDeclarationStatement(context);
                return new ParseNode(167, "VariableDeclarationOrLabelOrExpressionStatement", children, line__, column__, position__);
            }
            // VariableDeclarationOrLabelOrExpressionStatement -> VariableDeclarationStatement
            // VariableDeclarationOrLabelOrExpressionStatement -> ExpressionStatement
            if ((((((((((((((((((ExpressionParser.boolType == context.SymbolId) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        && StatementParser.WhereVariableDeclarationOrLabelOrExpressionStatement(context.GetLookAhead(true)))) {
                ParserContext context2__;
                int advanceCount__ = 0;
                System.Exception lastExcept = null;
                context2__ = context.GetLookAhead();
                context2__.EnsureStarted();
                // VariableDeclarationOrLabelOrExpressionStatement -> VariableDeclarationStatement
                try {
                    if ((((((((((((((((((ExpressionParser.boolType == context2__.SymbolId) 
                                || (ExpressionParser.verbatimIdentifier == context2__.SymbolId)) 
                                || (ExpressionParser.charType == context2__.SymbolId)) 
                                || (ExpressionParser.stringType == context2__.SymbolId)) 
                                || (ExpressionParser.floatType == context2__.SymbolId)) 
                                || (ExpressionParser.doubleType == context2__.SymbolId)) 
                                || (ExpressionParser.decimalType == context2__.SymbolId)) 
                                || (ExpressionParser.sbyteType == context2__.SymbolId)) 
                                || (ExpressionParser.byteType == context2__.SymbolId)) 
                                || (ExpressionParser.shortType == context2__.SymbolId)) 
                                || (ExpressionParser.ushortType == context2__.SymbolId)) 
                                || (ExpressionParser.intType == context2__.SymbolId)) 
                                || (ExpressionParser.uintType == context2__.SymbolId)) 
                                || (ExpressionParser.longType == context2__.SymbolId)) 
                                || (ExpressionParser.ulongType == context2__.SymbolId)) 
                                || (ExpressionParser.objectType == context2__.SymbolId)) 
                                && StatementParser.WhereVariableDeclarationOrLabelOrExpressionStatement(context2__.GetLookAhead(true)))) {
                        ParseNode[] children = new ParseNode[1];
                        children[0] = StatementParser.ParseVariableDeclarationStatement(context2__);
                        StatementParser.ParseVariableDeclarationStatement(context);
                        return new ParseNode(167, "VariableDeclarationOrLabelOrExpressionStatement", children, line__, column__, position__);
                    }
                    context.Error("Expecting boolType, verbatimIdentifier, charType, stringType, floatType, doubleTy" +
                            "pe, decimalType, sbyteType, byteType, shortType, ushortType, intType, uintType, " +
                            "longType, ulongType, or objectType");
                }
                catch (SyntaxException ex) {
                    if ((context2__.AdvanceCount > advanceCount__)) {
                        lastExcept = ex;
                        advanceCount__ = context2__.AdvanceCount;
                    }
                }
                finally {

                }
                context2__ = context.GetLookAhead();
                context2__.EnsureStarted();
                // VariableDeclarationOrLabelOrExpressionStatement -> ExpressionStatement
                try {
                    if ((((((((((((((((((ExpressionParser.boolType == context2__.SymbolId) 
                                || (ExpressionParser.verbatimIdentifier == context2__.SymbolId)) 
                                || (ExpressionParser.charType == context2__.SymbolId)) 
                                || (ExpressionParser.stringType == context2__.SymbolId)) 
                                || (ExpressionParser.floatType == context2__.SymbolId)) 
                                || (ExpressionParser.doubleType == context2__.SymbolId)) 
                                || (ExpressionParser.decimalType == context2__.SymbolId)) 
                                || (ExpressionParser.sbyteType == context2__.SymbolId)) 
                                || (ExpressionParser.byteType == context2__.SymbolId)) 
                                || (ExpressionParser.shortType == context2__.SymbolId)) 
                                || (ExpressionParser.ushortType == context2__.SymbolId)) 
                                || (ExpressionParser.intType == context2__.SymbolId)) 
                                || (ExpressionParser.uintType == context2__.SymbolId)) 
                                || (ExpressionParser.longType == context2__.SymbolId)) 
                                || (ExpressionParser.ulongType == context2__.SymbolId)) 
                                || (ExpressionParser.objectType == context2__.SymbolId)) 
                                && StatementParser.WhereVariableDeclarationOrLabelOrExpressionStatement(context2__.GetLookAhead(true)))) {
                        ParseNode[] children = new ParseNode[1];
                        children[0] = StatementParser.ParseExpressionStatement(context2__);
                        StatementParser.ParseExpressionStatement(context);
                        return new ParseNode(167, "VariableDeclarationOrLabelOrExpressionStatement", children, line__, column__, position__);
                    }
                    context.Error("Expecting boolType, verbatimIdentifier, charType, stringType, floatType, doubleTy" +
                            "pe, decimalType, sbyteType, byteType, shortType, ushortType, intType, uintType, " +
                            "longType, ulongType, or objectType");
                }
                catch (SyntaxException ex) {
                    if ((context2__.AdvanceCount > advanceCount__)) {
                        lastExcept = ex;
                        advanceCount__ = context2__.AdvanceCount;
                    }
                }
                finally {

                }
                throw lastExcept;
            }
            // VariableDeclarationOrLabelOrExpressionStatement -> VariableDeclarationStatement
            // VariableDeclarationOrLabelOrExpressionStatement -> ExpressionStatement
            // VariableDeclarationOrLabelOrExpressionStatement -> LabelStatement
            if (((ExpressionParser.identifier2 == context.SymbolId) 
                        && StatementParser.WhereVariableDeclarationOrLabelOrExpressionStatement(context.GetLookAhead(true)))) {
                ParserContext context2__;
                int advanceCount__ = 0;
                System.Exception lastExcept = null;
                context2__ = context.GetLookAhead();
                context2__.EnsureStarted();
                // VariableDeclarationOrLabelOrExpressionStatement -> VariableDeclarationStatement
                try {
                    if (((ExpressionParser.identifier2 == context2__.SymbolId) 
                                && StatementParser.WhereVariableDeclarationOrLabelOrExpressionStatement(context2__.GetLookAhead(true)))) {
                        ParseNode[] children = new ParseNode[1];
                        children[0] = StatementParser.ParseVariableDeclarationStatement(context2__);
                        StatementParser.ParseVariableDeclarationStatement(context);
                        return new ParseNode(167, "VariableDeclarationOrLabelOrExpressionStatement", children, line__, column__, position__);
                    }
                    context.Error("Expecting identifier");
                }
                catch (SyntaxException ex) {
                    if ((context2__.AdvanceCount > advanceCount__)) {
                        lastExcept = ex;
                        advanceCount__ = context2__.AdvanceCount;
                    }
                }
                finally {

                }
                context2__ = context.GetLookAhead();
                context2__.EnsureStarted();
                // VariableDeclarationOrLabelOrExpressionStatement -> ExpressionStatement
                try {
                    if (((ExpressionParser.identifier2 == context2__.SymbolId) 
                                && StatementParser.WhereVariableDeclarationOrLabelOrExpressionStatement(context2__.GetLookAhead(true)))) {
                        ParseNode[] children = new ParseNode[1];
                        children[0] = StatementParser.ParseExpressionStatement(context2__);
                        StatementParser.ParseExpressionStatement(context);
                        return new ParseNode(167, "VariableDeclarationOrLabelOrExpressionStatement", children, line__, column__, position__);
                    }
                    context.Error("Expecting identifier");
                }
                catch (SyntaxException ex) {
                    if ((context2__.AdvanceCount > advanceCount__)) {
                        lastExcept = ex;
                        advanceCount__ = context2__.AdvanceCount;
                    }
                }
                finally {

                }
                context2__ = context.GetLookAhead();
                context2__.EnsureStarted();
                // VariableDeclarationOrLabelOrExpressionStatement -> LabelStatement
                try {
                    if (((ExpressionParser.identifier2 == context2__.SymbolId) 
                                && StatementParser.WhereVariableDeclarationOrLabelOrExpressionStatement(context2__.GetLookAhead(true)))) {
                        ParseNode[] children = new ParseNode[1];
                        children[0] = StatementParser.ParseLabelStatement(context2__);
                        StatementParser.ParseLabelStatement(context);
                        return new ParseNode(167, "VariableDeclarationOrLabelOrExpressionStatement", children, line__, column__, position__);
                    }
                    context.Error("Expecting identifier");
                }
                catch (SyntaxException ex) {
                    if ((context2__.AdvanceCount > advanceCount__)) {
                        lastExcept = ex;
                        advanceCount__ = context2__.AdvanceCount;
                    }
                }
                finally {

                }
                throw lastExcept;
            }
            // VariableDeclarationOrLabelOrExpressionStatement -> ExpressionStatement
            if ((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        && StatementParser.WhereVariableDeclarationOrLabelOrExpressionStatement(context.GetLookAhead(true)))) {
                ParseNode[] children = new ParseNode[1];
                children[0] = StatementParser.ParseExpressionStatement(context);
                return new ParseNode(167, "VariableDeclarationOrLabelOrExpressionStatement", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting VariableDeclarationStatement, ExpressionStatement, or LabelStatement", line__, column__, position__);
        }
        internal static bool WhereVariableDeclarationOrLabelOrExpressionStatement(ParserContext context) {
            return true;
        }
        internal static ParseNode ParseElsePart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ElsePart -> elseKeyword StatementOrBlock
            if ((StatementParser.elseKeyword == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (StatementParser.elseKeyword == context.SymbolId))) {
                    context.Error("Expecting elseKeyword");
                }
                children.Add(new ParseNode(StatementParser.elseKeyword, "elseKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(StatementParser.ParseStatementOrBlock(context).Children);
                return new ParseNode(168, "ElsePart", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting elseKeyword", line__, column__, position__);
        }
        internal static ParseNode ParseIfStatementPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // IfStatementPart -> ifKeyword lparen Expression rparen StatementOrBlock
            if ((StatementParser.ifKeyword == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (StatementParser.ifKeyword == context.SymbolId))) {
                    context.Error("Expecting ifKeyword");
                }
                children.Add(new ParseNode(StatementParser.ifKeyword, "ifKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.lparen == context.SymbolId))) {
                    context.Error("Expecting lparen");
                }
                children.Add(new ParseNode(ExpressionParser.lparen, "lparen", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseExpression(context));
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen");
                }
                children.Add(new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(StatementParser.ParseStatementOrBlock(context).Children);
                return new ParseNode(169, "IfStatementPart", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting ifKeyword", line__, column__, position__);
        }
        internal static ParseNode ParseGotoStatement(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // GotoStatement -> gotoKeyword identifier semi
            if ((StatementParser.gotoKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[3];
                if ((false 
                            == (StatementParser.gotoKeyword == context.SymbolId))) {
                    context.Error("Expecting gotoKeyword");
                }
                children[0] = new ParseNode(StatementParser.gotoKeyword, "gotoKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                if ((false 
                            == (ExpressionParser.identifier2 == context.SymbolId))) {
                    context.Error("Expecting identifier");
                }
                children[1] = new ParseNode(ExpressionParser.identifier2, "identifier", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                if ((false 
                            == (StatementParser.semi == context.SymbolId))) {
                    context.Error("Expecting semi");
                }
                children[2] = new ParseNode(StatementParser.semi, "semi", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(170, "GotoStatement", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting gotoKeyword", line__, column__, position__);
        }
        internal static ParseNode ParseLocalAssignStatement(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // LocalAssignStatement -> ExpressionStatement
            if ((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        && StatementParser.WhereLocalAssignStatement(context.GetLookAhead(true)))) {
                ParseNode[] children = new ParseNode[1];
                children[0] = StatementParser.ParseExpressionStatement(context);
                return new ParseNode(171, "LocalAssignStatement", children, line__, column__, position__);
            }
            // LocalAssignStatement -> ExpressionStatement
            // LocalAssignStatement -> VariableDeclarationStatement
            if (((((((((((((((((((ExpressionParser.identifier2 == context.SymbolId) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        && StatementParser.WhereLocalAssignStatement(context.GetLookAhead(true)))) {
                ParserContext context2__;
                int advanceCount__ = 0;
                System.Exception lastExcept = null;
                context2__ = context.GetLookAhead();
                context2__.EnsureStarted();
                // LocalAssignStatement -> ExpressionStatement
                try {
                    if (((((((((((((((((((ExpressionParser.identifier2 == context2__.SymbolId) 
                                || (ExpressionParser.verbatimIdentifier == context2__.SymbolId)) 
                                || (ExpressionParser.boolType == context2__.SymbolId)) 
                                || (ExpressionParser.charType == context2__.SymbolId)) 
                                || (ExpressionParser.stringType == context2__.SymbolId)) 
                                || (ExpressionParser.floatType == context2__.SymbolId)) 
                                || (ExpressionParser.doubleType == context2__.SymbolId)) 
                                || (ExpressionParser.decimalType == context2__.SymbolId)) 
                                || (ExpressionParser.sbyteType == context2__.SymbolId)) 
                                || (ExpressionParser.byteType == context2__.SymbolId)) 
                                || (ExpressionParser.shortType == context2__.SymbolId)) 
                                || (ExpressionParser.ushortType == context2__.SymbolId)) 
                                || (ExpressionParser.intType == context2__.SymbolId)) 
                                || (ExpressionParser.uintType == context2__.SymbolId)) 
                                || (ExpressionParser.longType == context2__.SymbolId)) 
                                || (ExpressionParser.ulongType == context2__.SymbolId)) 
                                || (ExpressionParser.objectType == context2__.SymbolId)) 
                                && StatementParser.WhereLocalAssignStatement(context2__.GetLookAhead(true)))) {
                        ParseNode[] children = new ParseNode[1];
                        children[0] = StatementParser.ParseExpressionStatement(context2__);
                        StatementParser.ParseExpressionStatement(context);
                        return new ParseNode(171, "LocalAssignStatement", children, line__, column__, position__);
                    }
                    context.Error("Expecting identifier, verbatimIdentifier, boolType, charType, stringType, floatTy" +
                            "pe, doubleType, decimalType, sbyteType, byteType, shortType, ushortType, intType" +
                            ", uintType, longType, ulongType, or objectType");
                }
                catch (SyntaxException ex) {
                    if ((context2__.AdvanceCount > advanceCount__)) {
                        lastExcept = ex;
                        advanceCount__ = context2__.AdvanceCount;
                    }
                }
                finally {

                }
                context2__ = context.GetLookAhead();
                context2__.EnsureStarted();
                // LocalAssignStatement -> VariableDeclarationStatement
                try {
                    if (((((((((((((((((((ExpressionParser.identifier2 == context2__.SymbolId) 
                                || (ExpressionParser.verbatimIdentifier == context2__.SymbolId)) 
                                || (ExpressionParser.boolType == context2__.SymbolId)) 
                                || (ExpressionParser.charType == context2__.SymbolId)) 
                                || (ExpressionParser.stringType == context2__.SymbolId)) 
                                || (ExpressionParser.floatType == context2__.SymbolId)) 
                                || (ExpressionParser.doubleType == context2__.SymbolId)) 
                                || (ExpressionParser.decimalType == context2__.SymbolId)) 
                                || (ExpressionParser.sbyteType == context2__.SymbolId)) 
                                || (ExpressionParser.byteType == context2__.SymbolId)) 
                                || (ExpressionParser.shortType == context2__.SymbolId)) 
                                || (ExpressionParser.ushortType == context2__.SymbolId)) 
                                || (ExpressionParser.intType == context2__.SymbolId)) 
                                || (ExpressionParser.uintType == context2__.SymbolId)) 
                                || (ExpressionParser.longType == context2__.SymbolId)) 
                                || (ExpressionParser.ulongType == context2__.SymbolId)) 
                                || (ExpressionParser.objectType == context2__.SymbolId)) 
                                && StatementParser.WhereLocalAssignStatement(context2__.GetLookAhead(true)))) {
                        ParseNode[] children = new ParseNode[1];
                        children[0] = StatementParser.ParseVariableDeclarationStatement(context2__);
                        StatementParser.ParseVariableDeclarationStatement(context);
                        return new ParseNode(171, "LocalAssignStatement", children, line__, column__, position__);
                    }
                    context.Error("Expecting identifier, verbatimIdentifier, boolType, charType, stringType, floatTy" +
                            "pe, doubleType, decimalType, sbyteType, byteType, shortType, ushortType, intType" +
                            ", uintType, longType, ulongType, or objectType");
                }
                catch (SyntaxException ex) {
                    if ((context2__.AdvanceCount > advanceCount__)) {
                        lastExcept = ex;
                        advanceCount__ = context2__.AdvanceCount;
                    }
                }
                finally {

                }
                throw lastExcept;
            }
            // LocalAssignStatement -> VariableDeclarationStatement
            if (((StatementParser.varType == context.SymbolId) 
                        && StatementParser.WhereLocalAssignStatement(context.GetLookAhead(true)))) {
                ParseNode[] children = new ParseNode[1];
                children[0] = StatementParser.ParseVariableDeclarationStatement(context);
                return new ParseNode(171, "LocalAssignStatement", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting ExpressionStatement or VariableDeclarationStatement", line__, column__, position__);
        }
        internal static bool WhereLocalAssignStatement(ParserContext context) {
            return true;
        }
        internal static ParseNode ParseForIncPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ForIncPart -> Expression rparen
            if ((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = ExpressionParser.ParseExpression(context);
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen");
                }
                children[1] = new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(172, "ForIncPart", children, line__, column__, position__);
            }
            // ForIncPart -> rparen
            if ((ExpressionParser.rparen == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen");
                }
                children[0] = new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(172, "ForIncPart", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting Expression or rparen", line__, column__, position__);
        }
        internal static ParseNode ParseWhileStatement(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // WhileStatement -> whileKeyword lparen Expression rparen StatementOrBlock
            if ((StatementParser.whileKeyword == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (StatementParser.whileKeyword == context.SymbolId))) {
                    context.Error("Expecting whileKeyword");
                }
                children.Add(new ParseNode(StatementParser.whileKeyword, "whileKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.lparen == context.SymbolId))) {
                    context.Error("Expecting lparen");
                }
                children.Add(new ParseNode(ExpressionParser.lparen, "lparen", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseExpression(context));
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen");
                }
                children.Add(new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(StatementParser.ParseStatementOrBlock(context).Children);
                return new ParseNode(173, "WhileStatement", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting whileKeyword", line__, column__, position__);
        }
        internal static ParseNode ParseFinallyClause(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // FinallyClause -> finallyKeyword StatementBlock
            if ((StatementParser.finallyKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (StatementParser.finallyKeyword == context.SymbolId))) {
                    context.Error("Expecting finallyKeyword");
                }
                children[0] = new ParseNode(StatementParser.finallyKeyword, "finallyKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[1] = StatementParser.ParseStatementBlock(context);
                return new ParseNode(174, "FinallyClause", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting finallyKeyword", line__, column__, position__);
        }
        internal static ParseNode ParseLabelStatement(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // LabelStatement -> identifier colon
            if (((ExpressionParser.identifier2 == context.SymbolId) 
                        && StatementParser.WhereLabelStatement(context.GetLookAhead(true)))) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.identifier2 == context.SymbolId))) {
                    context.Error("Expecting identifier");
                }
                children[0] = new ParseNode(ExpressionParser.identifier2, "identifier", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                if ((false 
                            == (StatementParser.colon == context.SymbolId))) {
                    context.Error("Expecting colon");
                }
                children[1] = new ParseNode(StatementParser.colon, "colon", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(175, "LabelStatement", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting identifier", line__, column__, position__);
        }
        internal static bool WhereLabelStatement(ParserContext context) {
            context.Advance();
            return (colon == context.SymbolId);
        }
        internal static ParseNode ParseStatementOrBlock(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // StatementOrBlock -> Statement
            if (((((((((((((((((((((((((((((((((((((((((((((StatementParser.semi == context.SymbolId) 
                        || (StatementParser.varType == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (StatementParser.ifKeyword == context.SymbolId)) 
                        || (StatementParser.gotoKeyword == context.SymbolId)) 
                        || (StatementParser.forKeyword == context.SymbolId)) 
                        || (StatementParser.whileKeyword == context.SymbolId)) 
                        || (StatementParser.returnKeyword == context.SymbolId)) 
                        || (StatementParser.tryKeyword == context.SymbolId)) 
                        || (StatementParser.throwKeyword == context.SymbolId))) {
                ParseNode[] children = new ParseNode[1];
                children[0] = StatementParser.ParseStatement(context);
                return new ParseNode(176, "StatementOrBlock", children, line__, column__, position__);
            }
            // StatementOrBlock -> StatementBlock
            if ((ExpressionParser.lbrace == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                children[0] = StatementParser.ParseStatementBlock(context);
                return new ParseNode(176, "StatementOrBlock", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting Statement or StatementBlock", line__, column__, position__);
        }
        internal static ParseNode ParseInnerStatement(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // InnerStatement -> EmptyStatement
            if ((StatementParser.semi == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                children[0] = StatementParser.ParseEmptyStatement(context);
                return new ParseNode(177, "InnerStatement", children, line__, column__, position__);
            }
            // InnerStatement -> VariableDeclarationOrLabelOrExpressionStatement
            if (((((((((((((((((((((((((((((((((((((StatementParser.varType == context.SymbolId) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(StatementParser.ParseVariableDeclarationOrLabelOrExpressionStatement(context).Children);
                return new ParseNode(177, "InnerStatement", children.ToArray(), line__, column__, position__);
            }
            // InnerStatement -> IfStatement
            if ((StatementParser.ifKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                children[0] = StatementParser.ParseIfStatement(context);
                return new ParseNode(177, "InnerStatement", children, line__, column__, position__);
            }
            // InnerStatement -> GotoStatement
            if ((StatementParser.gotoKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                children[0] = StatementParser.ParseGotoStatement(context);
                return new ParseNode(177, "InnerStatement", children, line__, column__, position__);
            }
            // InnerStatement -> ForStatement
            if ((StatementParser.forKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                children[0] = StatementParser.ParseForStatement(context);
                return new ParseNode(177, "InnerStatement", children, line__, column__, position__);
            }
            // InnerStatement -> WhileStatement
            if ((StatementParser.whileKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                children[0] = StatementParser.ParseWhileStatement(context);
                return new ParseNode(177, "InnerStatement", children, line__, column__, position__);
            }
            // InnerStatement -> ReturnStatement
            if ((StatementParser.returnKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                children[0] = StatementParser.ParseReturnStatement(context);
                return new ParseNode(177, "InnerStatement", children, line__, column__, position__);
            }
            // InnerStatement -> TryStatement
            if ((StatementParser.tryKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                children[0] = StatementParser.ParseTryStatement(context);
                return new ParseNode(177, "InnerStatement", children, line__, column__, position__);
            }
            // InnerStatement -> ThrowStatement
            if ((StatementParser.throwKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                children[0] = StatementParser.ParseThrowStatement(context);
                return new ParseNode(177, "InnerStatement", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting EmptyStatement, VariableDeclarationOrLabelOrExpressionStatement, IfStat" +
                    "ement, GotoStatement, ForStatement, WhileStatement, ReturnStatement, TryStatemen" +
                    "t, or ThrowStatement", line__, column__, position__);
        }
        internal static ParseNode ParseStatements(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // Statements -> StatementList
            if (((((((((((((((((((((((((((((((((((((((((((((StatementParser.semi == context.SymbolId) 
                        || (StatementParser.varType == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (StatementParser.ifKeyword == context.SymbolId)) 
                        || (StatementParser.gotoKeyword == context.SymbolId)) 
                        || (StatementParser.forKeyword == context.SymbolId)) 
                        || (StatementParser.whileKeyword == context.SymbolId)) 
                        || (StatementParser.returnKeyword == context.SymbolId)) 
                        || (StatementParser.tryKeyword == context.SymbolId)) 
                        || (StatementParser.throwKeyword == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(StatementParser.ParseStatementList(context).Children);
                return new ParseNode(178, "Statements", children.ToArray(), line__, column__, position__);
            }
            // Statements ->
            if ((StatementParser.EosSymbol == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(178, "Statements", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting StatementList", line__, column__, position__);
        }
        /// <summary>
        /// Parses a production of the form:
        /// Statements= { Statement }
        /// </summary>
        /// <remarks>
        /// The production rules are:
        /// Statements -> StatementList
        /// Statements ->
        /// </remarks>
        /// <param name="tokenizer">The tokenizer to parse with</param><returns>A <see cref="ParseNode" /> representing the parsed tokens</returns>
        public static ParseNode ParseStatements(System.Collections.Generic.IEnumerable<Token> tokenizer) {
            ParserContext context = new ParserContext(tokenizer);
            context.EnsureStarted();
            ParseNode result = StatementParser.ParseStatements(context);
            if ((false == context.IsEnded)) {
                context.Error("Unexpected remainder in input.");
            }
            return result;
        }
        internal static ParseNode ParseNamespaceNameList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // NamespaceNameList -> dot Identifier NamespaceNameListRightAssoc
            if ((ExpressionParser.dot == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.dot == context.SymbolId))) {
                    context.Error("Expecting dot");
                }
                children.Add(new ParseNode(ExpressionParser.dot, "dot", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                children.AddRange(StatementParser.ParseNamespaceNameListRightAssoc(context).Children);
                return new ParseNode(2, "NamespaceNameList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting dot", line__, column__, position__);
        }
        internal static ParseNode ParseRelationalExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // RelationalExpressionList -> lt TermExpression RelationalExpressionListRightAssoc RelationalExpressionListRightAssoc2 RelationalExpressionListRightAssoc3
            if ((ExpressionParser.lt == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.lt == context.SymbolId))) {
                    context.Error("Expecting lt");
                }
                children.Add(new ParseNode(ExpressionParser.lt, "lt", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.TermExpression == context.SymbolId))) {
                    context.Error("Expecting TermExpression");
                }
                children.Add(new ParseNode(ExpressionParser.TermExpression, "TermExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc3(context).Children);
                return new ParseNode(27, "RelationalExpressionList", children.ToArray(), line__, column__, position__);
            }
            // RelationalExpressionList -> lte TermExpression RelationalExpressionListRightAssoc RelationalExpressionListRightAssoc2 RelationalExpressionListRightAssoc3
            if ((ExpressionParser.lte == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.lte == context.SymbolId))) {
                    context.Error("Expecting lte");
                }
                children.Add(new ParseNode(ExpressionParser.lte, "lte", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.TermExpression == context.SymbolId))) {
                    context.Error("Expecting TermExpression");
                }
                children.Add(new ParseNode(ExpressionParser.TermExpression, "TermExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc3(context).Children);
                return new ParseNode(27, "RelationalExpressionList", children.ToArray(), line__, column__, position__);
            }
            // RelationalExpressionList -> gt TermExpression RelationalExpressionListRightAssoc RelationalExpressionListRightAssoc2 RelationalExpressionListRightAssoc3
            if ((ExpressionParser.gt == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.gt == context.SymbolId))) {
                    context.Error("Expecting gt");
                }
                children.Add(new ParseNode(ExpressionParser.gt, "gt", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.TermExpression == context.SymbolId))) {
                    context.Error("Expecting TermExpression");
                }
                children.Add(new ParseNode(ExpressionParser.TermExpression, "TermExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc3(context).Children);
                return new ParseNode(27, "RelationalExpressionList", children.ToArray(), line__, column__, position__);
            }
            // RelationalExpressionList -> gte TermExpression RelationalExpressionListRightAssoc RelationalExpressionListRightAssoc2 RelationalExpressionListRightAssoc3
            if ((ExpressionParser.gte == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.gte == context.SymbolId))) {
                    context.Error("Expecting gte");
                }
                children.Add(new ParseNode(ExpressionParser.gte, "gte", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.TermExpression == context.SymbolId))) {
                    context.Error("Expecting TermExpression");
                }
                children.Add(new ParseNode(ExpressionParser.TermExpression, "TermExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc3(context).Children);
                return new ParseNode(27, "RelationalExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting lt, lte, gt, or gte", line__, column__, position__);
        }
        internal static ParseNode ParseEqualityExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // EqualityExpressionList -> eqEq RelationalExpression EqualityExpressionListRightAssoc EqualityExpressionListRightAssoc2
            if ((ExpressionParser.eqEq == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.eqEq == context.SymbolId))) {
                    context.Error("Expecting eqEq");
                }
                children.Add(new ParseNode(ExpressionParser.eqEq, "eqEq", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.RelationalExpression == context.SymbolId))) {
                    context.Error("Expecting RelationalExpression");
                }
                children.Add(new ParseNode(ExpressionParser.RelationalExpression, "RelationalExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseEqualityExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseEqualityExpressionListRightAssoc2(context).Children);
                return new ParseNode(28, "EqualityExpressionList", children.ToArray(), line__, column__, position__);
            }
            // EqualityExpressionList -> notEq RelationalExpression EqualityExpressionListRightAssoc EqualityExpressionListRightAssoc2
            if ((ExpressionParser.notEq == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.notEq == context.SymbolId))) {
                    context.Error("Expecting notEq");
                }
                children.Add(new ParseNode(ExpressionParser.notEq, "notEq", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.RelationalExpression == context.SymbolId))) {
                    context.Error("Expecting RelationalExpression");
                }
                children.Add(new ParseNode(ExpressionParser.RelationalExpression, "RelationalExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseEqualityExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseEqualityExpressionListRightAssoc2(context).Children);
                return new ParseNode(28, "EqualityExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting eqEq or notEq", line__, column__, position__);
        }
        internal static ParseNode ParseBitwiseAndExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // BitwiseAndExpressionList -> bitwiseAnd EqualityExpression BitwiseAndExpressionListRightAssoc
            if ((ExpressionParser.bitwiseAnd == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.bitwiseAnd == context.SymbolId))) {
                    context.Error("Expecting bitwiseAnd");
                }
                children.Add(new ParseNode(ExpressionParser.bitwiseAnd, "bitwiseAnd", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.EqualityExpression == context.SymbolId))) {
                    context.Error("Expecting EqualityExpression");
                }
                children.Add(new ParseNode(ExpressionParser.EqualityExpression, "EqualityExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseBitwiseAndExpressionListRightAssoc(context).Children);
                return new ParseNode(29, "BitwiseAndExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting bitwiseAnd", line__, column__, position__);
        }
        internal static ParseNode ParseBitwiseOrExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // BitwiseOrExpressionList -> bitwiseOr BitwiseAndExpression BitwiseOrExpressionListRightAssoc
            if ((ExpressionParser.bitwiseOr == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.bitwiseOr == context.SymbolId))) {
                    context.Error("Expecting bitwiseOr");
                }
                children.Add(new ParseNode(ExpressionParser.bitwiseOr, "bitwiseOr", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.BitwiseAndExpression == context.SymbolId))) {
                    context.Error("Expecting BitwiseAndExpression");
                }
                children.Add(new ParseNode(ExpressionParser.BitwiseAndExpression, "BitwiseAndExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseBitwiseOrExpressionListRightAssoc(context).Children);
                return new ParseNode(30, "BitwiseOrExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting bitwiseOr", line__, column__, position__);
        }
        internal static ParseNode ParseAndExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AndExpressionList -> and BitwiseOrExpression AndExpressionListRightAssoc
            if ((ExpressionParser.and == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.and == context.SymbolId))) {
                    context.Error("Expecting and");
                }
                children.Add(new ParseNode(ExpressionParser.and, "and", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.BitwiseOrExpression == context.SymbolId))) {
                    context.Error("Expecting BitwiseOrExpression");
                }
                children.Add(new ParseNode(ExpressionParser.BitwiseOrExpression, "BitwiseOrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAndExpressionListRightAssoc(context).Children);
                return new ParseNode(31, "AndExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting and", line__, column__, position__);
        }
        internal static ParseNode ParseOrExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // OrExpressionList -> or AndExpression OrExpressionListRightAssoc
            if ((ExpressionParser.or == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.or == context.SymbolId))) {
                    context.Error("Expecting or");
                }
                children.Add(new ParseNode(ExpressionParser.or, "or", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.AndExpression == context.SymbolId))) {
                    context.Error("Expecting AndExpression");
                }
                children.Add(new ParseNode(ExpressionParser.AndExpression, "AndExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseOrExpressionListRightAssoc(context).Children);
                return new ParseNode(32, "OrExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting or", line__, column__, position__);
        }
        internal static ParseNode ParseAssignExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AssignExpressionList -> eq OrExpression AssignExpressionListRightAssoc AssignExpressionListRightAssoc2 AssignExpressionListRightAssoc3 AssignExpressionListRightAssoc4 AssignExpressionListRightAssoc5
            if ((ExpressionParser.eq == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.eq == context.SymbolId))) {
                    context.Error("Expecting eq");
                }
                children.Add(new ParseNode(ExpressionParser.eq, "eq", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression");
                }
                children.Add(new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(33, "AssignExpressionList", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionList -> addAssign OrExpression AssignExpressionListRightAssoc AssignExpressionListRightAssoc2 AssignExpressionListRightAssoc3 AssignExpressionListRightAssoc4 AssignExpressionListRightAssoc5
            if ((ExpressionParser.addAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.addAssign == context.SymbolId))) {
                    context.Error("Expecting addAssign");
                }
                children.Add(new ParseNode(ExpressionParser.addAssign, "addAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression");
                }
                children.Add(new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(33, "AssignExpressionList", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionList -> subAssign OrExpression AssignExpressionListRightAssoc AssignExpressionListRightAssoc2 AssignExpressionListRightAssoc3 AssignExpressionListRightAssoc4 AssignExpressionListRightAssoc5
            if ((ExpressionParser.subAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.subAssign == context.SymbolId))) {
                    context.Error("Expecting subAssign");
                }
                children.Add(new ParseNode(ExpressionParser.subAssign, "subAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression");
                }
                children.Add(new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(33, "AssignExpressionList", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionList -> mulAssign OrExpression AssignExpressionListRightAssoc AssignExpressionListRightAssoc2 AssignExpressionListRightAssoc3 AssignExpressionListRightAssoc4 AssignExpressionListRightAssoc5
            if ((ExpressionParser.mulAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.mulAssign == context.SymbolId))) {
                    context.Error("Expecting mulAssign");
                }
                children.Add(new ParseNode(ExpressionParser.mulAssign, "mulAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression");
                }
                children.Add(new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(33, "AssignExpressionList", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionList -> divAssign OrExpression AssignExpressionListRightAssoc AssignExpressionListRightAssoc2 AssignExpressionListRightAssoc3 AssignExpressionListRightAssoc4 AssignExpressionListRightAssoc5
            if ((ExpressionParser.divAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.divAssign == context.SymbolId))) {
                    context.Error("Expecting divAssign");
                }
                children.Add(new ParseNode(ExpressionParser.divAssign, "divAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression");
                }
                children.Add(new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(33, "AssignExpressionList", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionList -> modAssign OrExpression AssignExpressionListRightAssoc AssignExpressionListRightAssoc2 AssignExpressionListRightAssoc3 AssignExpressionListRightAssoc4 AssignExpressionListRightAssoc5
            if ((ExpressionParser.modAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.modAssign == context.SymbolId))) {
                    context.Error("Expecting modAssign");
                }
                children.Add(new ParseNode(ExpressionParser.modAssign, "modAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression");
                }
                children.Add(new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(33, "AssignExpressionList", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionList -> bitwiseAndAssign OrExpression AssignExpressionListRightAssoc AssignExpressionListRightAssoc2 AssignExpressionListRightAssoc3 AssignExpressionListRightAssoc4 AssignExpressionListRightAssoc5
            if ((ExpressionParser.bitwiseAndAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.bitwiseAndAssign == context.SymbolId))) {
                    context.Error("Expecting bitwiseAndAssign");
                }
                children.Add(new ParseNode(ExpressionParser.bitwiseAndAssign, "bitwiseAndAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression");
                }
                children.Add(new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(33, "AssignExpressionList", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionList -> bitwiseOrAssign OrExpression AssignExpressionListRightAssoc AssignExpressionListRightAssoc2 AssignExpressionListRightAssoc3 AssignExpressionListRightAssoc4 AssignExpressionListRightAssoc5
            if ((ExpressionParser.bitwiseOrAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.bitwiseOrAssign == context.SymbolId))) {
                    context.Error("Expecting bitwiseOrAssign");
                }
                children.Add(new ParseNode(ExpressionParser.bitwiseOrAssign, "bitwiseOrAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression");
                }
                children.Add(new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(33, "AssignExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting eq, addAssign, subAssign, mulAssign, divAssign, modAssign, bitwiseAndAs" +
                    "sign, or bitwiseOrAssign", line__, column__, position__);
        }
        internal static ParseNode ParseTermExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TermExpressionList -> add FactorExpression TermExpressionListRightAssoc TermExpressionListRightAssoc2
            if ((ExpressionParser.add == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.add == context.SymbolId))) {
                    context.Error("Expecting add");
                }
                children.Add(new ParseNode(ExpressionParser.add, "add", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.FactorExpression == context.SymbolId))) {
                    context.Error("Expecting FactorExpression");
                }
                children.Add(new ParseNode(ExpressionParser.FactorExpression, "FactorExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseTermExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseTermExpressionListRightAssoc2(context).Children);
                return new ParseNode(34, "TermExpressionList", children.ToArray(), line__, column__, position__);
            }
            // TermExpressionList -> sub FactorExpression TermExpressionListRightAssoc TermExpressionListRightAssoc2
            if ((ExpressionParser.sub == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.sub == context.SymbolId))) {
                    context.Error("Expecting sub");
                }
                children.Add(new ParseNode(ExpressionParser.sub, "sub", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.FactorExpression == context.SymbolId))) {
                    context.Error("Expecting FactorExpression");
                }
                children.Add(new ParseNode(ExpressionParser.FactorExpression, "FactorExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseTermExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseTermExpressionListRightAssoc2(context).Children);
                return new ParseNode(34, "TermExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting add or sub", line__, column__, position__);
        }
        internal static ParseNode ParseFactorExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // FactorExpressionList -> mul UnaryExpression FactorExpressionListRightAssoc FactorExpressionListRightAssoc2 FactorExpressionListRightAssoc3
            if ((ExpressionParser.mul == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.mul == context.SymbolId))) {
                    context.Error("Expecting mul");
                }
                children.Add(new ParseNode(ExpressionParser.mul, "mul", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.UnaryExpression == context.SymbolId))) {
                    context.Error("Expecting UnaryExpression");
                }
                children.Add(new ParseNode(ExpressionParser.UnaryExpression, "UnaryExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc3(context).Children);
                return new ParseNode(35, "FactorExpressionList", children.ToArray(), line__, column__, position__);
            }
            // FactorExpressionList -> div UnaryExpression FactorExpressionListRightAssoc FactorExpressionListRightAssoc2 FactorExpressionListRightAssoc3
            if ((ExpressionParser.div == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.div == context.SymbolId))) {
                    context.Error("Expecting div");
                }
                children.Add(new ParseNode(ExpressionParser.div, "div", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.UnaryExpression == context.SymbolId))) {
                    context.Error("Expecting UnaryExpression");
                }
                children.Add(new ParseNode(ExpressionParser.UnaryExpression, "UnaryExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc3(context).Children);
                return new ParseNode(35, "FactorExpressionList", children.ToArray(), line__, column__, position__);
            }
            // FactorExpressionList -> mod UnaryExpression FactorExpressionListRightAssoc FactorExpressionListRightAssoc2 FactorExpressionListRightAssoc3
            if ((ExpressionParser.mod == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.mod == context.SymbolId))) {
                    context.Error("Expecting mod");
                }
                children.Add(new ParseNode(ExpressionParser.mod, "mod", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.UnaryExpression == context.SymbolId))) {
                    context.Error("Expecting UnaryExpression");
                }
                children.Add(new ParseNode(ExpressionParser.UnaryExpression, "UnaryExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc3(context).Children);
                return new ParseNode(35, "FactorExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting mul, div, or mod", line__, column__, position__);
        }
        internal static ParseNode ParseArgListList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ArgListList -> comma Expression ArgListListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma");
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseExpression(context));
                children.AddRange(ExpressionParser.ParseArgListListRightAssoc(context).Children);
                return new ParseNode(36, "ArgListList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting comma", line__, column__, position__);
        }
        internal static ParseNode ParseMethodArgListList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MethodArgListList -> comma MethodArg MethodArgListListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma");
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.MethodArg == context.SymbolId))) {
                    context.Error("Expecting MethodArg");
                }
                children.Add(new ParseNode(ExpressionParser.MethodArg, "MethodArg", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseMethodArgListListRightAssoc(context).Children);
                return new ParseNode(37, "MethodArgListList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting comma", line__, column__, position__);
        }
        internal static ParseNode ParseTypeBaseList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeBaseList -> dot Identifier TypeBaseListRightAssoc
            if ((ExpressionParser.dot == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.dot == context.SymbolId))) {
                    context.Error("Expecting dot");
                }
                children.Add(new ParseNode(ExpressionParser.dot, "dot", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                children.AddRange(ExpressionParser.ParseTypeBaseListRightAssoc(context).Children);
                return new ParseNode(38, "TypeBaseList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting dot", line__, column__, position__);
        }
        internal static ParseNode ParseTypeArraySpecList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeArraySpecList -> TypeArraySpec TypeArraySpecListRightAssoc
            if ((ExpressionParser.TypeArraySpec == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.TypeArraySpec == context.SymbolId))) {
                    context.Error("Expecting TypeArraySpec");
                }
                children.Add(new ParseNode(ExpressionParser.TypeArraySpec, "TypeArraySpec", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseTypeArraySpecListRightAssoc(context).Children);
                return new ParseNode(39, "TypeArraySpecList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting TypeArraySpec", line__, column__, position__);
        }
        internal static ParseNode ParseTypeGenericPartList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeGenericPartList -> comma Type TypeGenericPartListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma");
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseType(context));
                children.AddRange(ExpressionParser.ParseTypeGenericPartListRightAssoc(context).Children);
                return new ParseNode(40, "TypeGenericPartList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting comma", line__, column__, position__);
        }
        internal static ParseNode ParseTypeArraySpecRankList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeArraySpecRankList -> TypeArraySpecRank TypeArraySpecRankListRightAssoc
            if ((ExpressionParser.TypeArraySpecRank == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.TypeArraySpecRank == context.SymbolId))) {
                    context.Error("Expecting TypeArraySpecRank");
                }
                children.Add(new ParseNode(ExpressionParser.TypeArraySpecRank, "TypeArraySpecRank", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseTypeArraySpecRankListRightAssoc(context).Children);
                return new ParseNode(41, "TypeArraySpecRankList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting TypeArraySpecRank", line__, column__, position__);
        }
        internal static ParseNode ParseArrayInitializerList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ArrayInitializerList -> comma Expression ArrayInitializerListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma");
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseExpression(context));
                children.AddRange(ExpressionParser.ParseArrayInitializerListRightAssoc(context).Children);
                return new ParseNode(42, "ArrayInitializerList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting comma", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList -> MemberAnyRef MemberAnyRefListRightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefListRightAssoc(context).Children);
                return new ParseNode(43, "MemberAnyRefList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList2 -> MemberAnyRef MemberAnyRefList2RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList2RightAssoc(context).Children);
                return new ParseNode(44, "MemberAnyRefList2", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList3(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList3 -> MemberAnyRef MemberAnyRefList3RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList3RightAssoc(context).Children);
                return new ParseNode(45, "MemberAnyRefList3", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList4(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList4 -> MemberAnyRef MemberAnyRefList4RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList4RightAssoc(context).Children);
                return new ParseNode(46, "MemberAnyRefList4", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList5(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList5 -> MemberAnyRef MemberAnyRefList5RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList5RightAssoc(context).Children);
                return new ParseNode(47, "MemberAnyRefList5", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList6(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList6 -> MemberAnyRef MemberAnyRefList6RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList6RightAssoc(context).Children);
                return new ParseNode(48, "MemberAnyRefList6", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList7(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList7 -> MemberAnyRef MemberAnyRefList7RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList7RightAssoc(context).Children);
                return new ParseNode(49, "MemberAnyRefList7", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList8(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList8 -> MemberAnyRef MemberAnyRefList8RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList8RightAssoc(context).Children);
                return new ParseNode(50, "MemberAnyRefList8", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList9(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList9 -> MemberAnyRef MemberAnyRefList9RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList9RightAssoc(context).Children);
                return new ParseNode(51, "MemberAnyRefList9", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList10(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList10 -> MemberAnyRef MemberAnyRefList10RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList10RightAssoc(context).Children);
                return new ParseNode(52, "MemberAnyRefList10", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList11(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList11 -> MemberAnyRef MemberAnyRefList11RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList11RightAssoc(context).Children);
                return new ParseNode(53, "MemberAnyRefList11", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList12(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList12 -> MemberAnyRef MemberAnyRefList12RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList12RightAssoc(context).Children);
                return new ParseNode(54, "MemberAnyRefList12", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList13(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList13 -> MemberAnyRef MemberAnyRefList13RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList13RightAssoc(context).Children);
                return new ParseNode(55, "MemberAnyRefList13", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseCatchClauseList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CatchClauseList -> CatchClause CatchClauseListRightAssoc
            if ((StatementParser.catchKeyword == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(StatementParser.ParseCatchClause(context));
                children.AddRange(StatementParser.ParseCatchClauseListRightAssoc(context).Children);
                return new ParseNode(179, "CatchClauseList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting CatchClause", line__, column__, position__);
        }
        internal static ParseNode ParseStatementList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // StatementList -> Statement StatementListRightAssoc
            if (((((((((((((((((((((((((((((((((((((((((((((StatementParser.semi == context.SymbolId) 
                        || (StatementParser.varType == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (StatementParser.ifKeyword == context.SymbolId)) 
                        || (StatementParser.gotoKeyword == context.SymbolId)) 
                        || (StatementParser.forKeyword == context.SymbolId)) 
                        || (StatementParser.whileKeyword == context.SymbolId)) 
                        || (StatementParser.returnKeyword == context.SymbolId)) 
                        || (StatementParser.tryKeyword == context.SymbolId)) 
                        || (StatementParser.throwKeyword == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(StatementParser.ParseStatement(context));
                children.AddRange(StatementParser.ParseStatementListRightAssoc(context).Children);
                return new ParseNode(180, "StatementList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting Statement", line__, column__, position__);
        }
        internal static ParseNode ParseStatementList2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // StatementList2 -> Statement StatementList2RightAssoc
            if (((((((((((((((((((((((((((((((((((((((((((((StatementParser.semi == context.SymbolId) 
                        || (StatementParser.varType == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (StatementParser.ifKeyword == context.SymbolId)) 
                        || (StatementParser.gotoKeyword == context.SymbolId)) 
                        || (StatementParser.forKeyword == context.SymbolId)) 
                        || (StatementParser.whileKeyword == context.SymbolId)) 
                        || (StatementParser.returnKeyword == context.SymbolId)) 
                        || (StatementParser.tryKeyword == context.SymbolId)) 
                        || (StatementParser.throwKeyword == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(StatementParser.ParseStatement(context));
                children.AddRange(StatementParser.ParseStatementList2RightAssoc(context).Children);
                return new ParseNode(181, "StatementList2", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting Statement", line__, column__, position__);
        }
        internal static ParseNode ParseIfStatement(ParserContext context) {
            // IfStatement
            return _ParseIfStatement(context);
        }
        internal static ParseNode ParseForStatement(ParserContext context) {
            // ForStatement
            return _ParseForStatement(context);
        }
        internal static bool WhereForStatement(ParserContext context) {
            return true;
        }
        internal static ParseNode ParseStatement(ParserContext context) {
            // Statement
            return _ParseStatement(context);
        }
        internal static bool WhereStatement(ParserContext context) {
            return true;
        }
        /// <summary>
        /// Parses a production of the form:
        /// Statement
        /// </summary>
        /// <remarks>
        /// The production rules are:
        /// Statement -> semi
        /// Statement -> varType
        /// Statement -> Type
        /// Statement -> Expression
        /// Statement -> identifier
        /// Statement -> IfStatement
        /// Statement -> gotoKeyword
        /// Statement -> ForStatement
        /// Statement -> whileKeyword
        /// Statement -> returnKeyword
        /// Statement -> tryKeyword
        /// Statement -> throwKeyword
        /// </remarks>
        /// <param name="tokenizer">The tokenizer to parse with</param><returns>A <see cref="ParseNode" /> representing the parsed tokens</returns>
        public static ParseNode Parse(System.Collections.Generic.IEnumerable<Token> tokenizer) {
            ParserContext context = new ParserContext(tokenizer);
            context.EnsureStarted();
            ParseNode result = StatementParser.ParseStatement(context);
            if ((false == context.IsEnded)) {
                context.Error("Unexpected remainder in input.");
            }
            return result;
        }
        internal static ParseNode ParseNamespaceNameListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // NamespaceNameListRightAssoc -> dot Identifier NamespaceNameListRightAssoc
            if ((ExpressionParser.dot == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.dot == context.SymbolId))) {
                    context.Error("Expecting dot");
                }
                children.Add(new ParseNode(ExpressionParser.dot, "dot", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                children.AddRange(StatementParser.ParseNamespaceNameListRightAssoc(context).Children);
                return new ParseNode(6, "NamespaceNameListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting dot", line__, column__, position__);
        }
        internal static ParseNode ParseRelationalExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // RelationalExpressionListRightAssoc -> lt TermExpression RelationalExpressionListRightAssoc
            if ((ExpressionParser.lt == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.lt == context.SymbolId))) {
                    context.Error("Expecting lt");
                }
                children.Add(new ParseNode(ExpressionParser.lt, "lt", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.TermExpression == context.SymbolId))) {
                    context.Error("Expecting TermExpression");
                }
                children.Add(new ParseNode(ExpressionParser.TermExpression, "TermExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc(context).Children);
                return new ParseNode(71, "RelationalExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // RelationalExpressionListRightAssoc ->
            if ((((ExpressionParser.gt == context.SymbolId) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(71, "RelationalExpressionListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting lt", line__, column__, position__);
        }
        internal static ParseNode ParseRelationalExpressionListRightAssoc2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // RelationalExpressionListRightAssoc2 -> gt TermExpression RelationalExpressionListRightAssoc2
            if ((ExpressionParser.gt == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.gt == context.SymbolId))) {
                    context.Error("Expecting gt");
                }
                children.Add(new ParseNode(ExpressionParser.gt, "gt", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.TermExpression == context.SymbolId))) {
                    context.Error("Expecting TermExpression");
                }
                children.Add(new ParseNode(ExpressionParser.TermExpression, "TermExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc2(context).Children);
                return new ParseNode(72, "RelationalExpressionListRightAssoc2", children.ToArray(), line__, column__, position__);
            }
            // RelationalExpressionListRightAssoc2 ->
            if (((ExpressionParser.lte == context.SymbolId) 
                        || (ExpressionParser.gte == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(72, "RelationalExpressionListRightAssoc2", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting gt", line__, column__, position__);
        }
        internal static ParseNode ParseEqualityExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // EqualityExpressionListRightAssoc -> eqEq RelationalExpression EqualityExpressionListRightAssoc
            if ((ExpressionParser.eqEq == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.eqEq == context.SymbolId))) {
                    context.Error("Expecting eqEq");
                }
                children.Add(new ParseNode(ExpressionParser.eqEq, "eqEq", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.RelationalExpression == context.SymbolId))) {
                    context.Error("Expecting RelationalExpression");
                }
                children.Add(new ParseNode(ExpressionParser.RelationalExpression, "RelationalExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseEqualityExpressionListRightAssoc(context).Children);
                return new ParseNode(73, "EqualityExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // EqualityExpressionListRightAssoc ->
            if ((ExpressionParser.notEq == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(73, "EqualityExpressionListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting eqEq", line__, column__, position__);
        }
        internal static ParseNode ParseBitwiseAndExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // BitwiseAndExpressionListRightAssoc -> bitwiseAnd EqualityExpression BitwiseAndExpressionListRightAssoc
            if ((ExpressionParser.bitwiseAnd == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.bitwiseAnd == context.SymbolId))) {
                    context.Error("Expecting bitwiseAnd");
                }
                children.Add(new ParseNode(ExpressionParser.bitwiseAnd, "bitwiseAnd", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.EqualityExpression == context.SymbolId))) {
                    context.Error("Expecting EqualityExpression");
                }
                children.Add(new ParseNode(ExpressionParser.EqualityExpression, "EqualityExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseBitwiseAndExpressionListRightAssoc(context).Children);
                return new ParseNode(74, "BitwiseAndExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting bitwiseAnd", line__, column__, position__);
        }
        internal static ParseNode ParseBitwiseOrExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // BitwiseOrExpressionListRightAssoc -> bitwiseOr BitwiseAndExpression BitwiseOrExpressionListRightAssoc
            if ((ExpressionParser.bitwiseOr == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.bitwiseOr == context.SymbolId))) {
                    context.Error("Expecting bitwiseOr");
                }
                children.Add(new ParseNode(ExpressionParser.bitwiseOr, "bitwiseOr", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.BitwiseAndExpression == context.SymbolId))) {
                    context.Error("Expecting BitwiseAndExpression");
                }
                children.Add(new ParseNode(ExpressionParser.BitwiseAndExpression, "BitwiseAndExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseBitwiseOrExpressionListRightAssoc(context).Children);
                return new ParseNode(75, "BitwiseOrExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting bitwiseOr", line__, column__, position__);
        }
        internal static ParseNode ParseAndExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AndExpressionListRightAssoc -> and BitwiseOrExpression AndExpressionListRightAssoc
            if ((ExpressionParser.and == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.and == context.SymbolId))) {
                    context.Error("Expecting and");
                }
                children.Add(new ParseNode(ExpressionParser.and, "and", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.BitwiseOrExpression == context.SymbolId))) {
                    context.Error("Expecting BitwiseOrExpression");
                }
                children.Add(new ParseNode(ExpressionParser.BitwiseOrExpression, "BitwiseOrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAndExpressionListRightAssoc(context).Children);
                return new ParseNode(76, "AndExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting and", line__, column__, position__);
        }
        internal static ParseNode ParseOrExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // OrExpressionListRightAssoc -> or AndExpression OrExpressionListRightAssoc
            if ((ExpressionParser.or == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.or == context.SymbolId))) {
                    context.Error("Expecting or");
                }
                children.Add(new ParseNode(ExpressionParser.or, "or", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.AndExpression == context.SymbolId))) {
                    context.Error("Expecting AndExpression");
                }
                children.Add(new ParseNode(ExpressionParser.AndExpression, "AndExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseOrExpressionListRightAssoc(context).Children);
                return new ParseNode(77, "OrExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting or", line__, column__, position__);
        }
        internal static ParseNode ParseAssignExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AssignExpressionListRightAssoc -> eq OrExpression AssignExpressionListRightAssoc
            if ((ExpressionParser.eq == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.eq == context.SymbolId))) {
                    context.Error("Expecting eq");
                }
                children.Add(new ParseNode(ExpressionParser.eq, "eq", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression");
                }
                children.Add(new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                return new ParseNode(78, "AssignExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionListRightAssoc ->
            if ((((((((ExpressionParser.subAssign == context.SymbolId) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(78, "AssignExpressionListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting eq", line__, column__, position__);
        }
        internal static ParseNode ParseAssignExpressionListRightAssoc2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AssignExpressionListRightAssoc2 -> subAssign OrExpression AssignExpressionListRightAssoc2
            if ((ExpressionParser.subAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.subAssign == context.SymbolId))) {
                    context.Error("Expecting subAssign");
                }
                children.Add(new ParseNode(ExpressionParser.subAssign, "subAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression");
                }
                children.Add(new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                return new ParseNode(79, "AssignExpressionListRightAssoc2", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionListRightAssoc2 ->
            if (((((((ExpressionParser.divAssign == context.SymbolId) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(79, "AssignExpressionListRightAssoc2", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting subAssign", line__, column__, position__);
        }
        internal static ParseNode ParseAssignExpressionListRightAssoc3(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AssignExpressionListRightAssoc3 -> divAssign OrExpression AssignExpressionListRightAssoc3
            if ((ExpressionParser.divAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.divAssign == context.SymbolId))) {
                    context.Error("Expecting divAssign");
                }
                children.Add(new ParseNode(ExpressionParser.divAssign, "divAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression");
                }
                children.Add(new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                return new ParseNode(80, "AssignExpressionListRightAssoc3", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionListRightAssoc3 ->
            if ((((((ExpressionParser.bitwiseAndAssign == context.SymbolId) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(80, "AssignExpressionListRightAssoc3", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting divAssign", line__, column__, position__);
        }
        internal static ParseNode ParseAssignExpressionListRightAssoc4(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AssignExpressionListRightAssoc4 -> bitwiseAndAssign OrExpression AssignExpressionListRightAssoc4
            if ((ExpressionParser.bitwiseAndAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.bitwiseAndAssign == context.SymbolId))) {
                    context.Error("Expecting bitwiseAndAssign");
                }
                children.Add(new ParseNode(ExpressionParser.bitwiseAndAssign, "bitwiseAndAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression");
                }
                children.Add(new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                return new ParseNode(81, "AssignExpressionListRightAssoc4", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionListRightAssoc4 ->
            if (((((ExpressionParser.addAssign == context.SymbolId) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(81, "AssignExpressionListRightAssoc4", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting bitwiseAndAssign", line__, column__, position__);
        }
        internal static ParseNode ParseTermExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TermExpressionListRightAssoc -> add FactorExpression TermExpressionListRightAssoc
            if ((ExpressionParser.add == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.add == context.SymbolId))) {
                    context.Error("Expecting add");
                }
                children.Add(new ParseNode(ExpressionParser.add, "add", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.FactorExpression == context.SymbolId))) {
                    context.Error("Expecting FactorExpression");
                }
                children.Add(new ParseNode(ExpressionParser.FactorExpression, "FactorExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseTermExpressionListRightAssoc(context).Children);
                return new ParseNode(82, "TermExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // TermExpressionListRightAssoc ->
            if ((ExpressionParser.sub == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(82, "TermExpressionListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting add", line__, column__, position__);
        }
        internal static ParseNode ParseFactorExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // FactorExpressionListRightAssoc -> mul UnaryExpression FactorExpressionListRightAssoc
            if ((ExpressionParser.mul == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.mul == context.SymbolId))) {
                    context.Error("Expecting mul");
                }
                children.Add(new ParseNode(ExpressionParser.mul, "mul", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.UnaryExpression == context.SymbolId))) {
                    context.Error("Expecting UnaryExpression");
                }
                children.Add(new ParseNode(ExpressionParser.UnaryExpression, "UnaryExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc(context).Children);
                return new ParseNode(83, "FactorExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // FactorExpressionListRightAssoc ->
            if (((ExpressionParser.mod == context.SymbolId) 
                        || (ExpressionParser.div == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(83, "FactorExpressionListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting mul", line__, column__, position__);
        }
        internal static ParseNode ParseFactorExpressionListRightAssoc2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // FactorExpressionListRightAssoc2 -> mod UnaryExpression FactorExpressionListRightAssoc2
            if ((ExpressionParser.mod == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.mod == context.SymbolId))) {
                    context.Error("Expecting mod");
                }
                children.Add(new ParseNode(ExpressionParser.mod, "mod", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.UnaryExpression == context.SymbolId))) {
                    context.Error("Expecting UnaryExpression");
                }
                children.Add(new ParseNode(ExpressionParser.UnaryExpression, "UnaryExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc2(context).Children);
                return new ParseNode(84, "FactorExpressionListRightAssoc2", children.ToArray(), line__, column__, position__);
            }
            // FactorExpressionListRightAssoc2 ->
            if ((ExpressionParser.div == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(84, "FactorExpressionListRightAssoc2", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting mod", line__, column__, position__);
        }
        internal static ParseNode ParseArgListListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ArgListListRightAssoc -> comma Expression ArgListListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma");
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseExpression(context));
                children.AddRange(ExpressionParser.ParseArgListListRightAssoc(context).Children);
                return new ParseNode(85, "ArgListListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting comma", line__, column__, position__);
        }
        internal static ParseNode ParseMethodArgListListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MethodArgListListRightAssoc -> comma MethodArg MethodArgListListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma");
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.MethodArg == context.SymbolId))) {
                    context.Error("Expecting MethodArg");
                }
                children.Add(new ParseNode(ExpressionParser.MethodArg, "MethodArg", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseMethodArgListListRightAssoc(context).Children);
                return new ParseNode(86, "MethodArgListListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting comma", line__, column__, position__);
        }
        internal static ParseNode ParseTypeBaseListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeBaseListRightAssoc -> dot Identifier TypeBaseListRightAssoc
            if ((ExpressionParser.dot == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.dot == context.SymbolId))) {
                    context.Error("Expecting dot");
                }
                children.Add(new ParseNode(ExpressionParser.dot, "dot", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                children.AddRange(ExpressionParser.ParseTypeBaseListRightAssoc(context).Children);
                return new ParseNode(87, "TypeBaseListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting dot", line__, column__, position__);
        }
        internal static ParseNode ParseTypeArraySpecListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeArraySpecListRightAssoc -> TypeArraySpec TypeArraySpecListRightAssoc
            if ((ExpressionParser.TypeArraySpec == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.TypeArraySpec == context.SymbolId))) {
                    context.Error("Expecting TypeArraySpec");
                }
                children.Add(new ParseNode(ExpressionParser.TypeArraySpec, "TypeArraySpec", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseTypeArraySpecListRightAssoc(context).Children);
                return new ParseNode(88, "TypeArraySpecListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting TypeArraySpec", line__, column__, position__);
        }
        internal static ParseNode ParseTypeGenericPartListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeGenericPartListRightAssoc -> comma Type TypeGenericPartListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma");
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseType(context));
                children.AddRange(ExpressionParser.ParseTypeGenericPartListRightAssoc(context).Children);
                return new ParseNode(89, "TypeGenericPartListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting comma", line__, column__, position__);
        }
        internal static ParseNode ParseTypeArraySpecRankListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeArraySpecRankListRightAssoc -> TypeArraySpecRank TypeArraySpecRankListRightAssoc
            if ((ExpressionParser.TypeArraySpecRank == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.TypeArraySpecRank == context.SymbolId))) {
                    context.Error("Expecting TypeArraySpecRank");
                }
                children.Add(new ParseNode(ExpressionParser.TypeArraySpecRank, "TypeArraySpecRank", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseTypeArraySpecRankListRightAssoc(context).Children);
                return new ParseNode(90, "TypeArraySpecRankListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting TypeArraySpecRank", line__, column__, position__);
        }
        internal static ParseNode ParseArrayInitializerListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ArrayInitializerListRightAssoc -> comma Expression ArrayInitializerListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma");
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseExpression(context));
                children.AddRange(ExpressionParser.ParseArrayInitializerListRightAssoc(context).Children);
                return new ParseNode(91, "ArrayInitializerListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting comma", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefListRightAssoc -> MemberAnyRef MemberAnyRefListRightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefListRightAssoc(context).Children);
                return new ParseNode(92, "MemberAnyRefListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList2RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList2RightAssoc -> MemberAnyRef MemberAnyRefList2RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList2RightAssoc(context).Children);
                return new ParseNode(93, "MemberAnyRefList2RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList3RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList3RightAssoc -> MemberAnyRef MemberAnyRefList3RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList3RightAssoc(context).Children);
                return new ParseNode(94, "MemberAnyRefList3RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList4RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList4RightAssoc -> MemberAnyRef MemberAnyRefList4RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList4RightAssoc(context).Children);
                return new ParseNode(95, "MemberAnyRefList4RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList5RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList5RightAssoc -> MemberAnyRef MemberAnyRefList5RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList5RightAssoc(context).Children);
                return new ParseNode(96, "MemberAnyRefList5RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList6RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList6RightAssoc -> MemberAnyRef MemberAnyRefList6RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList6RightAssoc(context).Children);
                return new ParseNode(97, "MemberAnyRefList6RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList7RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList7RightAssoc -> MemberAnyRef MemberAnyRefList7RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList7RightAssoc(context).Children);
                return new ParseNode(98, "MemberAnyRefList7RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList8RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList8RightAssoc -> MemberAnyRef MemberAnyRefList8RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList8RightAssoc(context).Children);
                return new ParseNode(99, "MemberAnyRefList8RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList9RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList9RightAssoc -> MemberAnyRef MemberAnyRefList9RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList9RightAssoc(context).Children);
                return new ParseNode(100, "MemberAnyRefList9RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList10RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList10RightAssoc -> MemberAnyRef MemberAnyRefList10RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList10RightAssoc(context).Children);
                return new ParseNode(101, "MemberAnyRefList10RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList11RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList11RightAssoc -> MemberAnyRef MemberAnyRefList11RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList11RightAssoc(context).Children);
                return new ParseNode(102, "MemberAnyRefList11RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList12RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList12RightAssoc -> MemberAnyRef MemberAnyRefList12RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList12RightAssoc(context).Children);
                return new ParseNode(103, "MemberAnyRefList12RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList13RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList13RightAssoc -> MemberAnyRef MemberAnyRefList13RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList13RightAssoc(context).Children);
                return new ParseNode(104, "MemberAnyRefList13RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseCatchClauseListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CatchClauseListRightAssoc -> CatchClause CatchClauseListRightAssoc
            if ((StatementParser.catchKeyword == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(StatementParser.ParseCatchClause(context));
                children.AddRange(StatementParser.ParseCatchClauseListRightAssoc(context).Children);
                return new ParseNode(214, "CatchClauseListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // CatchClauseListRightAssoc ->
            if ((((((((((((((((((((((((((((((((((((((((((((((((StatementParser.finallyKeyword == context.SymbolId) 
                        || (StatementParser.semi == context.SymbolId)) 
                        || (StatementParser.varType == context.SymbolId)) 
                        || (StatementParser.ifKeyword == context.SymbolId)) 
                        || (StatementParser.gotoKeyword == context.SymbolId)) 
                        || (StatementParser.forKeyword == context.SymbolId)) 
                        || (StatementParser.whileKeyword == context.SymbolId)) 
                        || (StatementParser.returnKeyword == context.SymbolId)) 
                        || (StatementParser.tryKeyword == context.SymbolId)) 
                        || (StatementParser.throwKeyword == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.EosSymbol == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(214, "CatchClauseListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting CatchClause", line__, column__, position__);
        }
        internal static ParseNode ParseStatementListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // StatementListRightAssoc -> Statement StatementListRightAssoc
            if (((((((((((((((((((((((((((((((((((((((((((((StatementParser.semi == context.SymbolId) 
                        || (StatementParser.varType == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (StatementParser.ifKeyword == context.SymbolId)) 
                        || (StatementParser.gotoKeyword == context.SymbolId)) 
                        || (StatementParser.forKeyword == context.SymbolId)) 
                        || (StatementParser.whileKeyword == context.SymbolId)) 
                        || (StatementParser.returnKeyword == context.SymbolId)) 
                        || (StatementParser.tryKeyword == context.SymbolId)) 
                        || (StatementParser.throwKeyword == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(StatementParser.ParseStatement(context));
                children.AddRange(StatementParser.ParseStatementListRightAssoc(context).Children);
                return new ParseNode(215, "StatementListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // StatementListRightAssoc ->
            if ((StatementParser.EosSymbol == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(215, "StatementListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting Statement", line__, column__, position__);
        }
        internal static ParseNode ParseStatementList2RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // StatementList2RightAssoc -> Statement StatementList2RightAssoc
            if (((((((((((((((((((((((((((((((((((((((((((((StatementParser.semi == context.SymbolId) 
                        || (StatementParser.varType == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (StatementParser.ifKeyword == context.SymbolId)) 
                        || (StatementParser.gotoKeyword == context.SymbolId)) 
                        || (StatementParser.forKeyword == context.SymbolId)) 
                        || (StatementParser.whileKeyword == context.SymbolId)) 
                        || (StatementParser.returnKeyword == context.SymbolId)) 
                        || (StatementParser.tryKeyword == context.SymbolId)) 
                        || (StatementParser.throwKeyword == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(StatementParser.ParseStatement(context));
                children.AddRange(StatementParser.ParseStatementList2RightAssoc(context).Children);
                return new ParseNode(216, "StatementList2RightAssoc", children.ToArray(), line__, column__, position__);
            }
            // StatementList2RightAssoc ->
            if ((ExpressionParser.rbrace == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(216, "StatementList2RightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting Statement", line__, column__, position__);
        }
        internal static ParseNode ParseVariableDeclarationStatementPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // VariableDeclarationStatementPart -> eq Expression semi
            if ((ExpressionParser.eq == context.SymbolId)) {
                ParseNode[] children = new ParseNode[3];
                if ((false 
                            == (ExpressionParser.eq == context.SymbolId))) {
                    context.Error("Expecting eq");
                }
                children[0] = new ParseNode(ExpressionParser.eq, "eq", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[1] = ExpressionParser.ParseExpression(context);
                if ((false 
                            == (StatementParser.semi == context.SymbolId))) {
                    context.Error("Expecting semi");
                }
                children[2] = new ParseNode(StatementParser.semi, "semi", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(217, "VariableDeclarationStatementPart", children, line__, column__, position__);
            }
            // VariableDeclarationStatementPart -> semi
            if ((StatementParser.semi == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (StatementParser.semi == context.SymbolId))) {
                    context.Error("Expecting semi");
                }
                children[0] = new ParseNode(StatementParser.semi, "semi", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(217, "VariableDeclarationStatementPart", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting eq or semi", line__, column__, position__);
        }
        internal static ParseNode ParseReturnStatement(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ReturnStatement -> returnKeyword ReturnStatementPart
            if ((StatementParser.returnKeyword == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (StatementParser.returnKeyword == context.SymbolId))) {
                    context.Error("Expecting returnKeyword");
                }
                children.Add(new ParseNode(StatementParser.returnKeyword, "returnKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(StatementParser.ParseReturnStatementPart(context).Children);
                return new ParseNode(218, "ReturnStatement", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting returnKeyword", line__, column__, position__);
        }
        internal static ParseNode ParseReturnStatementPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ReturnStatementPart -> Expression semi
            if ((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = ExpressionParser.ParseExpression(context);
                if ((false 
                            == (StatementParser.semi == context.SymbolId))) {
                    context.Error("Expecting semi");
                }
                children[1] = new ParseNode(StatementParser.semi, "semi", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(219, "ReturnStatementPart", children, line__, column__, position__);
            }
            // ReturnStatementPart -> semi
            if ((StatementParser.semi == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (StatementParser.semi == context.SymbolId))) {
                    context.Error("Expecting semi");
                }
                children[0] = new ParseNode(StatementParser.semi, "semi", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(219, "ReturnStatementPart", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting Expression or semi", line__, column__, position__);
        }
        internal static ParseNode ParseThrowStatement(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ThrowStatement -> throwKeyword ThrowStatementPart
            if ((StatementParser.throwKeyword == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (StatementParser.throwKeyword == context.SymbolId))) {
                    context.Error("Expecting throwKeyword");
                }
                children.Add(new ParseNode(StatementParser.throwKeyword, "throwKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(StatementParser.ParseThrowStatementPart(context).Children);
                return new ParseNode(220, "ThrowStatement", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting throwKeyword", line__, column__, position__);
        }
        internal static ParseNode ParseThrowStatementPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ThrowStatementPart -> Expression semi
            if ((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = ExpressionParser.ParseExpression(context);
                if ((false 
                            == (StatementParser.semi == context.SymbolId))) {
                    context.Error("Expecting semi");
                }
                children[1] = new ParseNode(StatementParser.semi, "semi", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(221, "ThrowStatementPart", children, line__, column__, position__);
            }
            // ThrowStatementPart -> semi
            if ((StatementParser.semi == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (StatementParser.semi == context.SymbolId))) {
                    context.Error("Expecting semi");
                }
                children[0] = new ParseNode(StatementParser.semi, "semi", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(221, "ThrowStatementPart", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting Expression or semi", line__, column__, position__);
        }
        internal static ParseNode ParseTryStatementPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TryStatementPart -> FinallyClause
            if ((StatementParser.finallyKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                children[0] = StatementParser.ParseFinallyClause(context);
                return new ParseNode(222, "TryStatementPart", children, line__, column__, position__);
            }
            // TryStatementPart ->
            if (((((((((((((((((((((((((((((((((((((((((((((((StatementParser.semi == context.SymbolId) 
                        || (StatementParser.varType == context.SymbolId)) 
                        || (StatementParser.ifKeyword == context.SymbolId)) 
                        || (StatementParser.gotoKeyword == context.SymbolId)) 
                        || (StatementParser.forKeyword == context.SymbolId)) 
                        || (StatementParser.whileKeyword == context.SymbolId)) 
                        || (StatementParser.returnKeyword == context.SymbolId)) 
                        || (StatementParser.tryKeyword == context.SymbolId)) 
                        || (StatementParser.throwKeyword == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.EosSymbol == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(222, "TryStatementPart", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting FinallyClause", line__, column__, position__);
        }
        internal static ParseNode ParseCatchClause(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CatchClause -> catchKeyword lparen Type CatchClausePart
            if ((StatementParser.catchKeyword == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (StatementParser.catchKeyword == context.SymbolId))) {
                    context.Error("Expecting catchKeyword");
                }
                children.Add(new ParseNode(StatementParser.catchKeyword, "catchKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.lparen == context.SymbolId))) {
                    context.Error("Expecting lparen");
                }
                children.Add(new ParseNode(ExpressionParser.lparen, "lparen", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseType(context));
                children.AddRange(StatementParser.ParseCatchClausePart(context).Children);
                return new ParseNode(223, "CatchClause", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting catchKeyword", line__, column__, position__);
        }
        internal static ParseNode ParseCatchClausePart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CatchClausePart -> Identifier rparen StatementBlock
            if (((ExpressionParser.verbatimIdentifier == context.SymbolId) 
                        || (ExpressionParser.identifier2 == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen");
                }
                children.Add(new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(StatementParser.ParseStatementBlock(context));
                return new ParseNode(224, "CatchClausePart", children.ToArray(), line__, column__, position__);
            }
            // CatchClausePart -> rparen StatementBlock
            if ((ExpressionParser.rparen == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen");
                }
                children[0] = new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[1] = StatementParser.ParseStatementBlock(context);
                return new ParseNode(224, "CatchClausePart", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting Identifier or rparen", line__, column__, position__);
        }
        internal static ParseNode ParseStatementBlock(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // StatementBlock -> lbrace StatementBlockPart
            if ((ExpressionParser.lbrace == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.lbrace == context.SymbolId))) {
                    context.Error("Expecting lbrace");
                }
                children.Add(new ParseNode(ExpressionParser.lbrace, "lbrace", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(StatementParser.ParseStatementBlockPart(context).Children);
                return new ParseNode(225, "StatementBlock", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting lbrace", line__, column__, position__);
        }
        internal static ParseNode ParseStatementBlockPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // StatementBlockPart -> StatementList2 rbrace
            if (((((((((((((((((((((((((((((((((((((((((((((StatementParser.semi == context.SymbolId) 
                        || (StatementParser.varType == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (StatementParser.ifKeyword == context.SymbolId)) 
                        || (StatementParser.gotoKeyword == context.SymbolId)) 
                        || (StatementParser.forKeyword == context.SymbolId)) 
                        || (StatementParser.whileKeyword == context.SymbolId)) 
                        || (StatementParser.returnKeyword == context.SymbolId)) 
                        || (StatementParser.tryKeyword == context.SymbolId)) 
                        || (StatementParser.throwKeyword == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(StatementParser.ParseStatementList2(context).Children);
                if ((false 
                            == (ExpressionParser.rbrace == context.SymbolId))) {
                    context.Error("Expecting rbrace");
                }
                children.Add(new ParseNode(ExpressionParser.rbrace, "rbrace", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                return new ParseNode(226, "StatementBlockPart", children.ToArray(), line__, column__, position__);
            }
            // StatementBlockPart -> rbrace
            if ((ExpressionParser.rbrace == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.rbrace == context.SymbolId))) {
                    context.Error("Expecting rbrace");
                }
                children[0] = new ParseNode(ExpressionParser.rbrace, "rbrace", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(226, "StatementBlockPart", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting StatementList2 or rbrace", line__, column__, position__);
        }
        internal static ParseNode ParseRelationalExpressionListPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // RelationalExpressionListPart -> lte TermExpression
            if ((ExpressionParser.lte == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.lte == context.SymbolId))) {
                    context.Error("Expecting lte");
                }
                children[0] = new ParseNode(ExpressionParser.lte, "lte", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                if ((false 
                            == (ExpressionParser.TermExpression == context.SymbolId))) {
                    context.Error("Expecting TermExpression");
                }
                children[1] = new ParseNode(ExpressionParser.TermExpression, "TermExpression", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(153, "RelationalExpressionListPart", children, line__, column__, position__);
            }
            // RelationalExpressionListPart -> gte TermExpression
            if ((ExpressionParser.gte == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.gte == context.SymbolId))) {
                    context.Error("Expecting gte");
                }
                children[0] = new ParseNode(ExpressionParser.gte, "gte", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                if ((false 
                            == (ExpressionParser.TermExpression == context.SymbolId))) {
                    context.Error("Expecting TermExpression");
                }
                children[1] = new ParseNode(ExpressionParser.TermExpression, "TermExpression", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(153, "RelationalExpressionListPart", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting lte or gte", line__, column__, position__);
        }
        internal static ParseNode ParseAssignExpressionListPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AssignExpressionListPart -> addAssign OrExpression
            if ((ExpressionParser.addAssign == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.addAssign == context.SymbolId))) {
                    context.Error("Expecting addAssign");
                }
                children[0] = new ParseNode(ExpressionParser.addAssign, "addAssign", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression");
                }
                children[1] = new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(154, "AssignExpressionListPart", children, line__, column__, position__);
            }
            // AssignExpressionListPart -> mulAssign OrExpression
            if ((ExpressionParser.mulAssign == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.mulAssign == context.SymbolId))) {
                    context.Error("Expecting mulAssign");
                }
                children[0] = new ParseNode(ExpressionParser.mulAssign, "mulAssign", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression");
                }
                children[1] = new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(154, "AssignExpressionListPart", children, line__, column__, position__);
            }
            // AssignExpressionListPart -> modAssign OrExpression
            if ((ExpressionParser.modAssign == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.modAssign == context.SymbolId))) {
                    context.Error("Expecting modAssign");
                }
                children[0] = new ParseNode(ExpressionParser.modAssign, "modAssign", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression");
                }
                children[1] = new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(154, "AssignExpressionListPart", children, line__, column__, position__);
            }
            // AssignExpressionListPart -> bitwiseOrAssign OrExpression
            if ((ExpressionParser.bitwiseOrAssign == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.bitwiseOrAssign == context.SymbolId))) {
                    context.Error("Expecting bitwiseOrAssign");
                }
                children[0] = new ParseNode(ExpressionParser.bitwiseOrAssign, "bitwiseOrAssign", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression");
                }
                children[1] = new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(154, "AssignExpressionListPart", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting addAssign, mulAssign, modAssign, or bitwiseOrAssign", line__, column__, position__);
        }
        internal static ParseNode ParseEqualityExpressionListRightAssoc2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // EqualityExpressionListRightAssoc2 -> notEq RelationalExpression EqualityExpressionListRightAssoc2
            if ((ExpressionParser.notEq == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.notEq == context.SymbolId))) {
                    context.Error("Expecting notEq");
                }
                children.Add(new ParseNode(ExpressionParser.notEq, "notEq", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.RelationalExpression == context.SymbolId))) {
                    context.Error("Expecting RelationalExpression");
                }
                children.Add(new ParseNode(ExpressionParser.RelationalExpression, "RelationalExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseEqualityExpressionListRightAssoc2(context).Children);
                return new ParseNode(155, "EqualityExpressionListRightAssoc2", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting notEq", line__, column__, position__);
        }
        internal static ParseNode ParseTermExpressionListRightAssoc2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TermExpressionListRightAssoc2 -> sub FactorExpression TermExpressionListRightAssoc2
            if ((ExpressionParser.sub == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.sub == context.SymbolId))) {
                    context.Error("Expecting sub");
                }
                children.Add(new ParseNode(ExpressionParser.sub, "sub", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.FactorExpression == context.SymbolId))) {
                    context.Error("Expecting FactorExpression");
                }
                children.Add(new ParseNode(ExpressionParser.FactorExpression, "FactorExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseTermExpressionListRightAssoc2(context).Children);
                return new ParseNode(156, "TermExpressionListRightAssoc2", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting sub", line__, column__, position__);
        }
        internal static ParseNode ParseFactorExpressionListRightAssoc3(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // FactorExpressionListRightAssoc3 -> div UnaryExpression FactorExpressionListRightAssoc3
            if ((ExpressionParser.div == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.div == context.SymbolId))) {
                    context.Error("Expecting div");
                }
                children.Add(new ParseNode(ExpressionParser.div, "div", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.UnaryExpression == context.SymbolId))) {
                    context.Error("Expecting UnaryExpression");
                }
                children.Add(new ParseNode(ExpressionParser.UnaryExpression, "UnaryExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc3(context).Children);
                return new ParseNode(157, "FactorExpressionListRightAssoc3", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting div", line__, column__, position__);
        }
        internal static ParseNode ParseRelationalExpressionListRightAssoc3(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // RelationalExpressionListRightAssoc3 -> RelationalExpressionListPart RelationalExpressionListRightAssoc3
            if (((ExpressionParser.lte == context.SymbolId) 
                        || (ExpressionParser.gte == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseRelationalExpressionListPart(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc3(context).Children);
                return new ParseNode(158, "RelationalExpressionListRightAssoc3", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting RelationalExpressionListPart", line__, column__, position__);
        }
        internal static ParseNode ParseAssignExpressionListRightAssoc5(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AssignExpressionListRightAssoc5 -> AssignExpressionListPart AssignExpressionListRightAssoc5
            if (((((ExpressionParser.addAssign == context.SymbolId) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseAssignExpressionListPart(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(159, "AssignExpressionListRightAssoc5", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting AssignExpressionListPart", line__, column__, position__);
        }
        internal static ParseNode ParseTryStatement(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TryStatement -> tryKeyword StatementBlock TryStatementPart2
            if ((StatementParser.tryKeyword == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (StatementParser.tryKeyword == context.SymbolId))) {
                    context.Error("Expecting tryKeyword");
                }
                children.Add(new ParseNode(StatementParser.tryKeyword, "tryKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(StatementParser.ParseStatementBlock(context));
                children.AddRange(StatementParser.ParseTryStatementPart2(context).Children);
                return new ParseNode(227, "TryStatement", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting tryKeyword", line__, column__, position__);
        }
        internal static ParseNode ParseTryStatementPart2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TryStatementPart2 -> FinallyClause
            if ((StatementParser.finallyKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                children[0] = StatementParser.ParseFinallyClause(context);
                return new ParseNode(228, "TryStatementPart2", children, line__, column__, position__);
            }
            // TryStatementPart2 -> CatchClauseList TryStatementPart
            if ((StatementParser.catchKeyword == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(StatementParser.ParseCatchClauseList(context).Children);
                children.AddRange(StatementParser.ParseTryStatementPart(context).Children);
                return new ParseNode(228, "TryStatementPart2", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting FinallyClause or CatchClauseList", line__, column__, position__);
        }
    }
    /// <summary>Parses the indicated grammar. Refer to C:\dev\BuildPack\ParsleyAdvancedDemo\SlangType.xbnf</summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Parsley", "0.1.2.0")]
    internal partial class TypeDeclParser {
        internal const int ErrorSymbol = -1;
        internal const int EosSymbol = -2;
        public const int Expression = 9;
        public const int MemberAnyRef = 14;
        public const int MethodArg = 15;
        public const int TypeBase = 18;
        public const int TypeArraySpecRank = 19;
        public const int UnaryExpression = 24;
        public const int Identifier = 26;
        public const int RelationalExpression = 105;
        public const int EqualityExpression = 107;
        public const int BitwiseAndExpression = 109;
        public const int BitwiseOrExpression = 111;
        public const int AndExpression = 113;
        public const int OrExpression = 115;
        public const int TermExpression = 119;
        public const int FactorExpression = 121;
        public const int ArgList = 123;
        public const int Type = 127;
        public const int TypeArraySpec = 132;
        public const int InnerStatement = 177;
        public const int Statement = 184;
        public const int CatchClause = 223;
        public const int StatementBlock = 225;
        public const int CustomAttribute = 231;
        public const int CustomAttributeArgList = 232;
        public const int CustomAttributeArg = 233;
        public const int CustomAttributeTarget = 234;
        public const int CustomAttributeGroups = 235;
        public const int TypeAttributes = 236;
        public const int EnumPart = 237;
        public const int EnumFields = 238;
        public const int EnumField = 239;
        public const int WhereClauses = 240;
        public const int WhereConstraints = 241;
        public const int WhereConstraintPart = 242;
        public const int BaseType = 243;
        public const int TypeParams = 244;
        public const int TypeParam = 245;
        public const int Enum = 246;
        public const int Struct = 247;
        public const int Class = 248;
        public const int MemberAttribute = 249;
        public const int MemberAttributes = 250;
        public const int MethodParamList = 251;
        public const int MethodParam = 252;
        public const int Partial = 253;
        public const int ParamList = 254;
        public const int Param = 255;
        public const int TypeDeclPart = 267;
        public const int TypeDecl = 268;
        public const int PrivateImplementationType = 269;
        public const int PropertyAccessors = 270;
        public const int Member = 271;
        public const int Members = 272;
        public const int CustomAttributeGroup = 366;
        public const int WhereConstraintParts = 369;
        public const int Interface = 372;
        public const int PropertyGet = 376;
        public const int PropertySet = 378;
        public const int ConstructorChain = 380;
        public const int BaseTypes = 384;
        public const int Constructor = 385;
        public const int Method = 386;
        public const int Property = 387;
        public const int Event = 388;
        public const int Field = 389;
        public const int namespaceKeyword = 390;
        public const int usingKeyword = 391;
        public const int verbatimIdentifier = 392;
        public const int outKeyword = 393;
        public const int refKeyword = 394;
        public const int typeOf = 395;
        public const int defaultOf = 396;
        public const int newKeyword = 397;
        public const int stringType = 398;
        public const int boolType = 399;
        public const int charType = 400;
        public const int floatType = 401;
        public const int doubleType = 402;
        public const int decimalType = 403;
        public const int sbyteType = 404;
        public const int byteType = 405;
        public const int shortType = 406;
        public const int ushortType = 407;
        public const int intType = 408;
        public const int uintType = 409;
        public const int longType = 410;
        public const int ulongType = 411;
        public const int objectType = 412;
        public const int boolLiteral = 413;
        public const int nullLiteral = 414;
        public const int thisRef = 415;
        public const int baseRef = 416;
        public const int verbatimStringLiteral = 417;
        public const int identifier2 = 418;
        public const int stringLiteral = 419;
        public const int characterLiteral = 420;
        public const int lte = 421;
        public const int lt = 422;
        public const int gte = 423;
        public const int gt = 424;
        public const int eqEq = 425;
        public const int notEq = 426;
        public const int eq = 427;
        public const int inc = 428;
        public const int addAssign = 429;
        public const int add = 430;
        public const int dec = 431;
        public const int subAssign = 432;
        public const int sub = 433;
        public const int mulAssign = 434;
        public const int mul = 435;
        public const int divAssign = 436;
        public const int div = 437;
        public const int modAssign = 438;
        public const int mod = 439;
        public const int and = 440;
        public const int bitwiseAndAssign = 441;
        public const int bitwiseAnd = 442;
        public const int or = 443;
        public const int bitwiseOrAssign = 444;
        public const int bitwiseOr = 445;
        public const int not = 446;
        public const int lbracket = 447;
        public const int rbracket = 448;
        public const int lparen = 449;
        public const int rparen = 450;
        public const int lbrace = 451;
        public const int rbrace = 452;
        public const int comma = 453;
        public const int dot = 455;
        public const int integerLiteral = 456;
        public const int floatLiteral = 457;
        public const int returnKeyword = 465;
        public const int semi = 469;
        public const int colon = 471;
        public const int assemblyKeyword = 475;
        public const int voidType = 476;
        public const int partialKeyword = 477;
        public const int classKeyword = 478;
        public const int enumKeyword = 479;
        public const int structKeyword = 480;
        public const int interfaceKeyword = 481;
        public const int getKeyword = 482;
        public const int setKeyword = 483;
        public const int eventKeyword = 484;
        public const int publicKeyword = 485;
        public const int privateKeyword = 486;
        public const int protectedKeyword = 487;
        public const int internalKeyword = 488;
        public const int staticKeyword = 489;
        public const int abstractKeyword = 490;
        public const int constKeyword = 491;
        public const int overrideKeyword = 492;
        public const int whereKeyword = 493;
        internal static ParseNode ParseCustomAttribute(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttribute -> TypeBase CustomAttributeArgList
            if ((((((((((((((((((ExpressionParser.boolType == context.SymbolId) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = ExpressionParser.ParseTypeBase(context);
                children[1] = TypeDeclParser.ParseCustomAttributeArgList(context);
                return new ParseNode(231, "CustomAttribute", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting TypeBase", line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeArgList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeArgList ->
            if (((ExpressionParser.comma == context.SymbolId) 
                        || (ExpressionParser.rbracket == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(232, "CustomAttributeArgList", children, line__, column__, position__);
            }
            // CustomAttributeArgList -> lparen CustomAttributeArg CustomAttributeArgListPart
            if ((ExpressionParser.lparen == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.lparen == context.SymbolId))) {
                    context.Error("Expecting lparen");
                }
                children.Add(new ParseNode(ExpressionParser.lparen, "lparen", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(TypeDeclParser.ParseCustomAttributeArg(context));
                children.AddRange(TypeDeclParser.ParseCustomAttributeArgListPart(context).Children);
                return new ParseNode(232, "CustomAttributeArgList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting lparen", line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeArg(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeArg -> Identifier eq Expression
            // CustomAttributeArg -> Expression
            if ((((ExpressionParser.verbatimIdentifier == context.SymbolId) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        && TypeDeclParser.WhereCustomAttributeArg(context.GetLookAhead(true)))) {
                ParserContext context2__;
                int advanceCount__ = 0;
                System.Exception lastExcept = null;
                context2__ = context.GetLookAhead();
                context2__.EnsureStarted();
                // CustomAttributeArg -> Identifier eq Expression
                try {
                    if ((((ExpressionParser.verbatimIdentifier == context2__.SymbolId) 
                                || (ExpressionParser.identifier2 == context2__.SymbolId)) 
                                && TypeDeclParser.WhereCustomAttributeArg(context2__.GetLookAhead(true)))) {
                        System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                        children.AddRange(ExpressionParser.ParseIdentifier(context2__).Children);
                        if ((false 
                                    == (ExpressionParser.eq == context2__.SymbolId))) {
                            context2__.Error("Expecting eq");
                        }
                        children.Add(new ParseNode(ExpressionParser.eq, "eq", context2__.Value, context2__.Line, context2__.Column, context2__.Position));
                        context2__.Advance();
                        children.Add(ExpressionParser.ParseExpression(context2__));
                        ExpressionParser.ParseIdentifier(context);
                        context.Advance();
                        ExpressionParser.ParseExpression(context);
                        return new ParseNode(233, "CustomAttributeArg", children.ToArray(), line__, column__, position__);
                    }
                    context.Error("Expecting verbatimIdentifier or identifier");
                }
                catch (SyntaxException ex) {
                    if ((context2__.AdvanceCount > advanceCount__)) {
                        lastExcept = ex;
                        advanceCount__ = context2__.AdvanceCount;
                    }
                }
                finally {

                }
                context2__ = context.GetLookAhead();
                context2__.EnsureStarted();
                // CustomAttributeArg -> Expression
                try {
                    if ((((ExpressionParser.verbatimIdentifier == context2__.SymbolId) 
                                || (ExpressionParser.identifier2 == context2__.SymbolId)) 
                                && TypeDeclParser.WhereCustomAttributeArg(context2__.GetLookAhead(true)))) {
                        ParseNode[] children = new ParseNode[1];
                        children[0] = ExpressionParser.ParseExpression(context2__);
                        ExpressionParser.ParseExpression(context);
                        return new ParseNode(233, "CustomAttributeArg", children, line__, column__, position__);
                    }
                    context.Error("Expecting verbatimIdentifier or identifier");
                }
                catch (SyntaxException ex) {
                    if ((context2__.AdvanceCount > advanceCount__)) {
                        lastExcept = ex;
                        advanceCount__ = context2__.AdvanceCount;
                    }
                }
                finally {

                }
                throw lastExcept;
            }
            // CustomAttributeArg -> Expression
            if (((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        && TypeDeclParser.WhereCustomAttributeArg(context.GetLookAhead(true)))) {
                ParseNode[] children = new ParseNode[1];
                children[0] = ExpressionParser.ParseExpression(context);
                return new ParseNode(233, "CustomAttributeArg", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting Identifier or Expression", line__, column__, position__);
        }
        internal static bool WhereCustomAttributeArg(ParserContext context) {
            return true;
        }
        internal static ParseNode ParseCustomAttributeTarget(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeTarget -> assemblyKeyword colon
            if ((TypeDeclParser.assemblyKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (TypeDeclParser.assemblyKeyword == context.SymbolId))) {
                    context.Error("Expecting assemblyKeyword");
                }
                children[0] = new ParseNode(TypeDeclParser.assemblyKeyword, "assemblyKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                if ((false 
                            == (StatementParser.colon == context.SymbolId))) {
                    context.Error("Expecting colon");
                }
                children[1] = new ParseNode(StatementParser.colon, "colon", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(234, "CustomAttributeTarget", children, line__, column__, position__);
            }
            // CustomAttributeTarget -> returnKeyword colon
            if ((StatementParser.returnKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (StatementParser.returnKeyword == context.SymbolId))) {
                    context.Error("Expecting returnKeyword");
                }
                children[0] = new ParseNode(StatementParser.returnKeyword, "returnKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                if ((false 
                            == (StatementParser.colon == context.SymbolId))) {
                    context.Error("Expecting colon");
                }
                children[1] = new ParseNode(StatementParser.colon, "colon", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(234, "CustomAttributeTarget", children, line__, column__, position__);
            }
            // CustomAttributeTarget ->
            if ((((((((((((((((((ExpressionParser.boolType == context.SymbolId) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(234, "CustomAttributeTarget", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting assemblyKeyword or returnKeyword", line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroups(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroups -> CustomAttributeGroupList2
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(TypeDeclParser.ParseCustomAttributeGroupList2(context).Children);
                return new ParseNode(235, "CustomAttributeGroups", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting CustomAttributeGroupList2", line__, column__, position__);
        }
        internal static ParseNode ParseTypeAttributes(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeAttributes -> TypeAttributesList
            if ((((TypeDeclParser.publicKeyword == context.SymbolId) 
                        || (TypeDeclParser.internalKeyword == context.SymbolId)) 
                        || (TypeDeclParser.privateKeyword == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(TypeDeclParser.ParseTypeAttributesList(context).Children);
                return new ParseNode(236, "TypeAttributes", children.ToArray(), line__, column__, position__);
            }
            // TypeAttributes ->
            if ((((((TypeDeclParser.classKeyword == context.SymbolId) 
                        || (TypeDeclParser.enumKeyword == context.SymbolId)) 
                        || (TypeDeclParser.structKeyword == context.SymbolId)) 
                        || (TypeDeclParser.interfaceKeyword == context.SymbolId)) 
                        || (TypeDeclParser.partialKeyword == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(236, "TypeAttributes", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting TypeAttributesList", line__, column__, position__);
        }
        internal static ParseNode ParseEnumPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // EnumPart -> lbrace EnumFields rbrace
            if ((ExpressionParser.lbrace == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.lbrace == context.SymbolId))) {
                    context.Error("Expecting lbrace");
                }
                children.Add(new ParseNode(ExpressionParser.lbrace, "lbrace", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(TypeDeclParser.ParseEnumFields(context).Children);
                if ((false 
                            == (ExpressionParser.rbrace == context.SymbolId))) {
                    context.Error("Expecting rbrace");
                }
                children.Add(new ParseNode(ExpressionParser.rbrace, "rbrace", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                return new ParseNode(237, "EnumPart", children.ToArray(), line__, column__, position__);
            }
            // EnumPart -> colon Type lbrace EnumFields rbrace
            if ((StatementParser.colon == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (StatementParser.colon == context.SymbolId))) {
                    context.Error("Expecting colon");
                }
                children.Add(new ParseNode(StatementParser.colon, "colon", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseType(context));
                if ((false 
                            == (ExpressionParser.lbrace == context.SymbolId))) {
                    context.Error("Expecting lbrace");
                }
                children.Add(new ParseNode(ExpressionParser.lbrace, "lbrace", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(TypeDeclParser.ParseEnumFields(context).Children);
                if ((false 
                            == (ExpressionParser.rbrace == context.SymbolId))) {
                    context.Error("Expecting rbrace");
                }
                children.Add(new ParseNode(ExpressionParser.rbrace, "rbrace", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                return new ParseNode(237, "EnumPart", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting lbrace or colon", line__, column__, position__);
        }
        internal static ParseNode ParseEnumFields(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // EnumFields ->
            if ((ExpressionParser.rbrace == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(238, "EnumFields", children, line__, column__, position__);
            }
            // EnumFields -> EnumField EnumFieldsPart
            if (((ExpressionParser.verbatimIdentifier == context.SymbolId) 
                        || (ExpressionParser.identifier2 == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(TypeDeclParser.ParseEnumField(context));
                children.AddRange(TypeDeclParser.ParseEnumFieldsPart(context).Children);
                return new ParseNode(238, "EnumFields", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting EnumField", line__, column__, position__);
        }
        internal static ParseNode ParseEnumField(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // EnumField -> Identifier eq Expression
            if (((ExpressionParser.verbatimIdentifier == context.SymbolId) 
                        || (ExpressionParser.identifier2 == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                if ((false 
                            == (ExpressionParser.eq == context.SymbolId))) {
                    context.Error("Expecting eq");
                }
                children.Add(new ParseNode(ExpressionParser.eq, "eq", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseExpression(context));
                return new ParseNode(239, "EnumField", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting Identifier", line__, column__, position__);
        }
        internal static ParseNode ParseWhereClauses(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // WhereClauses -> WhereClausesList
            if ((TypeDeclParser.whereKeyword == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(TypeDeclParser.ParseWhereClausesList(context).Children);
                return new ParseNode(240, "WhereClauses", children.ToArray(), line__, column__, position__);
            }
            // WhereClauses ->
            if ((ExpressionParser.lbrace == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(240, "WhereClauses", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting WhereClausesList", line__, column__, position__);
        }
        internal static ParseNode ParseWhereConstraints(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // WhereConstraints -> Identifier colon WhereConstraintParts
            if (((ExpressionParser.verbatimIdentifier == context.SymbolId) 
                        || (ExpressionParser.identifier2 == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                if ((false 
                            == (StatementParser.colon == context.SymbolId))) {
                    context.Error("Expecting colon");
                }
                children.Add(new ParseNode(StatementParser.colon, "colon", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(TypeDeclParser.ParseWhereConstraintParts(context));
                return new ParseNode(241, "WhereConstraints", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting Identifier", line__, column__, position__);
        }
        internal static ParseNode ParseWhereConstraintPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // WhereConstraintPart -> Type
            if ((((((((((((((((((ExpressionParser.boolType == context.SymbolId) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId))) {
                ParseNode[] children = new ParseNode[1];
                children[0] = ExpressionParser.ParseType(context);
                return new ParseNode(242, "WhereConstraintPart", children, line__, column__, position__);
            }
            // WhereConstraintPart -> newKeyword lparen rparen
            if ((ExpressionParser.newKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[3];
                if ((false 
                            == (ExpressionParser.newKeyword == context.SymbolId))) {
                    context.Error("Expecting newKeyword");
                }
                children[0] = new ParseNode(ExpressionParser.newKeyword, "newKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                if ((false 
                            == (ExpressionParser.lparen == context.SymbolId))) {
                    context.Error("Expecting lparen");
                }
                children[1] = new ParseNode(ExpressionParser.lparen, "lparen", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen");
                }
                children[2] = new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(242, "WhereConstraintPart", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting Type or newKeyword", line__, column__, position__);
        }
        internal static ParseNode ParseBaseType(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // BaseType -> Type
            if ((((((((((((((((((ExpressionParser.boolType == context.SymbolId) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId))) {
                ParseNode[] children = new ParseNode[1];
                children[0] = ExpressionParser.ParseType(context);
                return new ParseNode(243, "BaseType", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting Type", line__, column__, position__);
        }
        internal static ParseNode ParseTypeParams(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeParams ->
            if (((((StatementParser.colon == context.SymbolId) 
                        || (TypeDeclParser.whereKeyword == context.SymbolId)) 
                        || (ExpressionParser.lbrace == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(244, "TypeParams", children, line__, column__, position__);
            }
            // TypeParams -> lt TypeParam TypeParamsPart
            if ((ExpressionParser.lt == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.lt == context.SymbolId))) {
                    context.Error("Expecting lt");
                }
                children.Add(new ParseNode(ExpressionParser.lt, "lt", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(TypeDeclParser.ParseTypeParam(context));
                children.AddRange(TypeDeclParser.ParseTypeParamsPart(context).Children);
                return new ParseNode(244, "TypeParams", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting lt", line__, column__, position__);
        }
        internal static ParseNode ParseTypeParam(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeParam -> CustomAttributeGroups Identifier
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(TypeDeclParser.ParseCustomAttributeGroups(context));
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                return new ParseNode(245, "TypeParam", children.ToArray(), line__, column__, position__);
            }
            // TypeParam -> Identifier
            if (((ExpressionParser.verbatimIdentifier == context.SymbolId) 
                        || (ExpressionParser.identifier2 == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                return new ParseNode(245, "TypeParam", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting CustomAttributeGroups or Identifier", line__, column__, position__);
        }
        internal static ParseNode ParseEnum(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // Enum -> MemberAttributes enumKeyword Identifier EnumPart
            if (((((((((ExpressionParser.newKeyword == context.SymbolId) 
                        || (TypeDeclParser.constKeyword == context.SymbolId)) 
                        || (TypeDeclParser.publicKeyword == context.SymbolId)) 
                        || (TypeDeclParser.protectedKeyword == context.SymbolId)) 
                        || (TypeDeclParser.internalKeyword == context.SymbolId)) 
                        || (TypeDeclParser.privateKeyword == context.SymbolId)) 
                        || (TypeDeclParser.staticKeyword == context.SymbolId)) 
                        || (TypeDeclParser.overrideKeyword == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(TypeDeclParser.ParseMemberAttributes(context));
                if ((false 
                            == (TypeDeclParser.enumKeyword == context.SymbolId))) {
                    context.Error("Expecting enumKeyword");
                }
                children.Add(new ParseNode(TypeDeclParser.enumKeyword, "enumKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                children.AddRange(TypeDeclParser.ParseEnumPart(context).Children);
                return new ParseNode(246, "Enum", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAttributes", line__, column__, position__);
        }
        internal static ParseNode ParseStruct(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // Struct -> MemberAttributes structKeyword Identifier TypeParams TypeDeclPart
            if (((((((((ExpressionParser.newKeyword == context.SymbolId) 
                        || (TypeDeclParser.constKeyword == context.SymbolId)) 
                        || (TypeDeclParser.publicKeyword == context.SymbolId)) 
                        || (TypeDeclParser.protectedKeyword == context.SymbolId)) 
                        || (TypeDeclParser.internalKeyword == context.SymbolId)) 
                        || (TypeDeclParser.privateKeyword == context.SymbolId)) 
                        || (TypeDeclParser.staticKeyword == context.SymbolId)) 
                        || (TypeDeclParser.overrideKeyword == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(TypeDeclParser.ParseMemberAttributes(context));
                if ((false 
                            == (TypeDeclParser.structKeyword == context.SymbolId))) {
                    context.Error("Expecting structKeyword");
                }
                children.Add(new ParseNode(TypeDeclParser.structKeyword, "structKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                children.Add(TypeDeclParser.ParseTypeParams(context));
                children.Add(TypeDeclParser.ParseTypeDeclPart(context));
                return new ParseNode(247, "Struct", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAttributes", line__, column__, position__);
        }
        internal static ParseNode ParseClass(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // Class -> MemberAttributes classKeyword Identifier TypeParams TypeDeclPart
            if (((((((((ExpressionParser.newKeyword == context.SymbolId) 
                        || (TypeDeclParser.constKeyword == context.SymbolId)) 
                        || (TypeDeclParser.publicKeyword == context.SymbolId)) 
                        || (TypeDeclParser.protectedKeyword == context.SymbolId)) 
                        || (TypeDeclParser.internalKeyword == context.SymbolId)) 
                        || (TypeDeclParser.privateKeyword == context.SymbolId)) 
                        || (TypeDeclParser.staticKeyword == context.SymbolId)) 
                        || (TypeDeclParser.overrideKeyword == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(TypeDeclParser.ParseMemberAttributes(context));
                if ((false 
                            == (TypeDeclParser.classKeyword == context.SymbolId))) {
                    context.Error("Expecting classKeyword");
                }
                children.Add(new ParseNode(TypeDeclParser.classKeyword, "classKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                children.Add(TypeDeclParser.ParseTypeParams(context));
                children.Add(TypeDeclParser.ParseTypeDeclPart(context));
                return new ParseNode(248, "Class", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAttributes", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAttribute(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAttribute -> newKeyword
            if ((ExpressionParser.newKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.newKeyword == context.SymbolId))) {
                    context.Error("Expecting newKeyword");
                }
                children[0] = new ParseNode(ExpressionParser.newKeyword, "newKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(249, "MemberAttribute", children, line__, column__, position__);
            }
            // MemberAttribute -> constKeyword
            if ((TypeDeclParser.constKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (TypeDeclParser.constKeyword == context.SymbolId))) {
                    context.Error("Expecting constKeyword");
                }
                children[0] = new ParseNode(TypeDeclParser.constKeyword, "constKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(249, "MemberAttribute", children, line__, column__, position__);
            }
            // MemberAttribute -> publicKeyword
            if ((TypeDeclParser.publicKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (TypeDeclParser.publicKeyword == context.SymbolId))) {
                    context.Error("Expecting publicKeyword");
                }
                children[0] = new ParseNode(TypeDeclParser.publicKeyword, "publicKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(249, "MemberAttribute", children, line__, column__, position__);
            }
            // MemberAttribute -> protectedKeyword
            if ((TypeDeclParser.protectedKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (TypeDeclParser.protectedKeyword == context.SymbolId))) {
                    context.Error("Expecting protectedKeyword");
                }
                children[0] = new ParseNode(TypeDeclParser.protectedKeyword, "protectedKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(249, "MemberAttribute", children, line__, column__, position__);
            }
            // MemberAttribute -> internalKeyword
            if ((TypeDeclParser.internalKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (TypeDeclParser.internalKeyword == context.SymbolId))) {
                    context.Error("Expecting internalKeyword");
                }
                children[0] = new ParseNode(TypeDeclParser.internalKeyword, "internalKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(249, "MemberAttribute", children, line__, column__, position__);
            }
            // MemberAttribute -> privateKeyword
            if ((TypeDeclParser.privateKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (TypeDeclParser.privateKeyword == context.SymbolId))) {
                    context.Error("Expecting privateKeyword");
                }
                children[0] = new ParseNode(TypeDeclParser.privateKeyword, "privateKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(249, "MemberAttribute", children, line__, column__, position__);
            }
            // MemberAttribute -> staticKeyword
            if ((TypeDeclParser.staticKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (TypeDeclParser.staticKeyword == context.SymbolId))) {
                    context.Error("Expecting staticKeyword");
                }
                children[0] = new ParseNode(TypeDeclParser.staticKeyword, "staticKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(249, "MemberAttribute", children, line__, column__, position__);
            }
            // MemberAttribute -> overrideKeyword
            if ((TypeDeclParser.overrideKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (TypeDeclParser.overrideKeyword == context.SymbolId))) {
                    context.Error("Expecting overrideKeyword");
                }
                children[0] = new ParseNode(TypeDeclParser.overrideKeyword, "overrideKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(249, "MemberAttribute", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting newKeyword, constKeyword, publicKeyword, protectedKeyword, internalKeyw" +
                    "ord, privateKeyword, staticKeyword, or overrideKeyword", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAttributes(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAttributes -> MemberAttributeList
            if (((((((((ExpressionParser.newKeyword == context.SymbolId) 
                        || (TypeDeclParser.constKeyword == context.SymbolId)) 
                        || (TypeDeclParser.publicKeyword == context.SymbolId)) 
                        || (TypeDeclParser.protectedKeyword == context.SymbolId)) 
                        || (TypeDeclParser.internalKeyword == context.SymbolId)) 
                        || (TypeDeclParser.privateKeyword == context.SymbolId)) 
                        || (TypeDeclParser.staticKeyword == context.SymbolId)) 
                        || (TypeDeclParser.overrideKeyword == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(TypeDeclParser.ParseMemberAttributeList(context).Children);
                return new ParseNode(250, "MemberAttributes", children.ToArray(), line__, column__, position__);
            }
            // MemberAttributes ->
            if (((((TypeDeclParser.enumKeyword == context.SymbolId) 
                        || (TypeDeclParser.structKeyword == context.SymbolId)) 
                        || (TypeDeclParser.classKeyword == context.SymbolId)) 
                        || (TypeDeclParser.interfaceKeyword == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(250, "MemberAttributes", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAttributeList", line__, column__, position__);
        }
        internal static ParseNode ParseMethodParamList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MethodParamList ->
            if ((ExpressionParser.rparen == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(251, "MethodParamList", children, line__, column__, position__);
            }
            // MethodParamList -> MethodParam MethodParamListPart
            if ((((((((((((((((((((ExpressionParser.outKeyword == context.SymbolId) 
                        || (ExpressionParser.refKeyword == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(TypeDeclParser.ParseMethodParam(context));
                children.AddRange(TypeDeclParser.ParseMethodParamListPart(context).Children);
                return new ParseNode(251, "MethodParamList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MethodParam", line__, column__, position__);
        }
        internal static ParseNode ParseMethodParam(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MethodParam -> outKeyword Type Identifier
            if ((ExpressionParser.outKeyword == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.outKeyword == context.SymbolId))) {
                    context.Error("Expecting outKeyword");
                }
                children.Add(new ParseNode(ExpressionParser.outKeyword, "outKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseType(context));
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                return new ParseNode(252, "MethodParam", children.ToArray(), line__, column__, position__);
            }
            // MethodParam -> refKeyword Type Identifier
            if ((ExpressionParser.refKeyword == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.refKeyword == context.SymbolId))) {
                    context.Error("Expecting refKeyword");
                }
                children.Add(new ParseNode(ExpressionParser.refKeyword, "refKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseType(context));
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                return new ParseNode(252, "MethodParam", children.ToArray(), line__, column__, position__);
            }
            // MethodParam -> Type Identifier
            if ((((((((((((((((((ExpressionParser.boolType == context.SymbolId) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseType(context));
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                return new ParseNode(252, "MethodParam", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting outKeyword, refKeyword, or Type", line__, column__, position__);
        }
        internal static ParseNode ParsePartial(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // Partial -> partialKeyword
            if ((TypeDeclParser.partialKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (TypeDeclParser.partialKeyword == context.SymbolId))) {
                    context.Error("Expecting partialKeyword");
                }
                children[0] = new ParseNode(TypeDeclParser.partialKeyword, "partialKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(253, "Partial", children, line__, column__, position__);
            }
            // Partial ->
            if (((((TypeDeclParser.classKeyword == context.SymbolId) 
                        || (TypeDeclParser.interfaceKeyword == context.SymbolId)) 
                        || (TypeDeclParser.enumKeyword == context.SymbolId)) 
                        || (TypeDeclParser.structKeyword == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(253, "Partial", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting partialKeyword", line__, column__, position__);
        }
        internal static ParseNode ParseParamList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ParamList ->
            if (((ExpressionParser.rparen == context.SymbolId) 
                        || (ExpressionParser.rbracket == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(254, "ParamList", children, line__, column__, position__);
            }
            // ParamList -> Param ParamListPart
            if ((((((((((((((((((ExpressionParser.boolType == context.SymbolId) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(TypeDeclParser.ParseParam(context));
                children.AddRange(TypeDeclParser.ParseParamListPart(context).Children);
                return new ParseNode(254, "ParamList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting Param", line__, column__, position__);
        }
        internal static ParseNode ParseParam(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // Param -> Type Identifier
            if ((((((((((((((((((ExpressionParser.boolType == context.SymbolId) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseType(context));
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                return new ParseNode(255, "Param", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting Type", line__, column__, position__);
        }
        internal static ParseNode ParseNamespaceNameList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // NamespaceNameList -> dot Identifier NamespaceNameListRightAssoc
            if ((ExpressionParser.dot == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.dot == context.SymbolId))) {
                    context.Error("Expecting dot");
                }
                children.Add(new ParseNode(ExpressionParser.dot, "dot", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                children.AddRange(TypeDeclParser.ParseNamespaceNameListRightAssoc(context).Children);
                return new ParseNode(2, "NamespaceNameList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting dot", line__, column__, position__);
        }
        internal static ParseNode ParseRelationalExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // RelationalExpressionList -> lt TermExpression RelationalExpressionListRightAssoc RelationalExpressionListRightAssoc2 RelationalExpressionListRightAssoc3
            if ((ExpressionParser.lt == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.lt == context.SymbolId))) {
                    context.Error("Expecting lt");
                }
                children.Add(new ParseNode(ExpressionParser.lt, "lt", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.TermExpression == context.SymbolId))) {
                    context.Error("Expecting TermExpression");
                }
                children.Add(new ParseNode(ExpressionParser.TermExpression, "TermExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc3(context).Children);
                return new ParseNode(27, "RelationalExpressionList", children.ToArray(), line__, column__, position__);
            }
            // RelationalExpressionList -> lte TermExpression RelationalExpressionListRightAssoc RelationalExpressionListRightAssoc2 RelationalExpressionListRightAssoc3
            if ((ExpressionParser.lte == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.lte == context.SymbolId))) {
                    context.Error("Expecting lte");
                }
                children.Add(new ParseNode(ExpressionParser.lte, "lte", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.TermExpression == context.SymbolId))) {
                    context.Error("Expecting TermExpression");
                }
                children.Add(new ParseNode(ExpressionParser.TermExpression, "TermExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc3(context).Children);
                return new ParseNode(27, "RelationalExpressionList", children.ToArray(), line__, column__, position__);
            }
            // RelationalExpressionList -> gt TermExpression RelationalExpressionListRightAssoc RelationalExpressionListRightAssoc2 RelationalExpressionListRightAssoc3
            if ((ExpressionParser.gt == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.gt == context.SymbolId))) {
                    context.Error("Expecting gt");
                }
                children.Add(new ParseNode(ExpressionParser.gt, "gt", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.TermExpression == context.SymbolId))) {
                    context.Error("Expecting TermExpression");
                }
                children.Add(new ParseNode(ExpressionParser.TermExpression, "TermExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc3(context).Children);
                return new ParseNode(27, "RelationalExpressionList", children.ToArray(), line__, column__, position__);
            }
            // RelationalExpressionList -> gte TermExpression RelationalExpressionListRightAssoc RelationalExpressionListRightAssoc2 RelationalExpressionListRightAssoc3
            if ((ExpressionParser.gte == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.gte == context.SymbolId))) {
                    context.Error("Expecting gte");
                }
                children.Add(new ParseNode(ExpressionParser.gte, "gte", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.TermExpression == context.SymbolId))) {
                    context.Error("Expecting TermExpression");
                }
                children.Add(new ParseNode(ExpressionParser.TermExpression, "TermExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc3(context).Children);
                return new ParseNode(27, "RelationalExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting lt, lte, gt, or gte", line__, column__, position__);
        }
        internal static ParseNode ParseEqualityExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // EqualityExpressionList -> eqEq RelationalExpression EqualityExpressionListRightAssoc EqualityExpressionListRightAssoc2
            if ((ExpressionParser.eqEq == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.eqEq == context.SymbolId))) {
                    context.Error("Expecting eqEq");
                }
                children.Add(new ParseNode(ExpressionParser.eqEq, "eqEq", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.RelationalExpression == context.SymbolId))) {
                    context.Error("Expecting RelationalExpression");
                }
                children.Add(new ParseNode(ExpressionParser.RelationalExpression, "RelationalExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseEqualityExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseEqualityExpressionListRightAssoc2(context).Children);
                return new ParseNode(28, "EqualityExpressionList", children.ToArray(), line__, column__, position__);
            }
            // EqualityExpressionList -> notEq RelationalExpression EqualityExpressionListRightAssoc EqualityExpressionListRightAssoc2
            if ((ExpressionParser.notEq == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.notEq == context.SymbolId))) {
                    context.Error("Expecting notEq");
                }
                children.Add(new ParseNode(ExpressionParser.notEq, "notEq", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.RelationalExpression == context.SymbolId))) {
                    context.Error("Expecting RelationalExpression");
                }
                children.Add(new ParseNode(ExpressionParser.RelationalExpression, "RelationalExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseEqualityExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseEqualityExpressionListRightAssoc2(context).Children);
                return new ParseNode(28, "EqualityExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting eqEq or notEq", line__, column__, position__);
        }
        internal static ParseNode ParseBitwiseAndExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // BitwiseAndExpressionList -> bitwiseAnd EqualityExpression BitwiseAndExpressionListRightAssoc
            if ((ExpressionParser.bitwiseAnd == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.bitwiseAnd == context.SymbolId))) {
                    context.Error("Expecting bitwiseAnd");
                }
                children.Add(new ParseNode(ExpressionParser.bitwiseAnd, "bitwiseAnd", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.EqualityExpression == context.SymbolId))) {
                    context.Error("Expecting EqualityExpression");
                }
                children.Add(new ParseNode(ExpressionParser.EqualityExpression, "EqualityExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseBitwiseAndExpressionListRightAssoc(context).Children);
                return new ParseNode(29, "BitwiseAndExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting bitwiseAnd", line__, column__, position__);
        }
        internal static ParseNode ParseBitwiseOrExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // BitwiseOrExpressionList -> bitwiseOr BitwiseAndExpression BitwiseOrExpressionListRightAssoc
            if ((ExpressionParser.bitwiseOr == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.bitwiseOr == context.SymbolId))) {
                    context.Error("Expecting bitwiseOr");
                }
                children.Add(new ParseNode(ExpressionParser.bitwiseOr, "bitwiseOr", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.BitwiseAndExpression == context.SymbolId))) {
                    context.Error("Expecting BitwiseAndExpression");
                }
                children.Add(new ParseNode(ExpressionParser.BitwiseAndExpression, "BitwiseAndExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseBitwiseOrExpressionListRightAssoc(context).Children);
                return new ParseNode(30, "BitwiseOrExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting bitwiseOr", line__, column__, position__);
        }
        internal static ParseNode ParseAndExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AndExpressionList -> and BitwiseOrExpression AndExpressionListRightAssoc
            if ((ExpressionParser.and == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.and == context.SymbolId))) {
                    context.Error("Expecting and");
                }
                children.Add(new ParseNode(ExpressionParser.and, "and", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.BitwiseOrExpression == context.SymbolId))) {
                    context.Error("Expecting BitwiseOrExpression");
                }
                children.Add(new ParseNode(ExpressionParser.BitwiseOrExpression, "BitwiseOrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAndExpressionListRightAssoc(context).Children);
                return new ParseNode(31, "AndExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting and", line__, column__, position__);
        }
        internal static ParseNode ParseOrExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // OrExpressionList -> or AndExpression OrExpressionListRightAssoc
            if ((ExpressionParser.or == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.or == context.SymbolId))) {
                    context.Error("Expecting or");
                }
                children.Add(new ParseNode(ExpressionParser.or, "or", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.AndExpression == context.SymbolId))) {
                    context.Error("Expecting AndExpression");
                }
                children.Add(new ParseNode(ExpressionParser.AndExpression, "AndExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseOrExpressionListRightAssoc(context).Children);
                return new ParseNode(32, "OrExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting or", line__, column__, position__);
        }
        internal static ParseNode ParseAssignExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AssignExpressionList -> eq OrExpression AssignExpressionListRightAssoc AssignExpressionListRightAssoc2 AssignExpressionListRightAssoc3 AssignExpressionListRightAssoc4 AssignExpressionListRightAssoc5
            if ((ExpressionParser.eq == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.eq == context.SymbolId))) {
                    context.Error("Expecting eq");
                }
                children.Add(new ParseNode(ExpressionParser.eq, "eq", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression");
                }
                children.Add(new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(33, "AssignExpressionList", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionList -> addAssign OrExpression AssignExpressionListRightAssoc AssignExpressionListRightAssoc2 AssignExpressionListRightAssoc3 AssignExpressionListRightAssoc4 AssignExpressionListRightAssoc5
            if ((ExpressionParser.addAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.addAssign == context.SymbolId))) {
                    context.Error("Expecting addAssign");
                }
                children.Add(new ParseNode(ExpressionParser.addAssign, "addAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression");
                }
                children.Add(new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(33, "AssignExpressionList", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionList -> subAssign OrExpression AssignExpressionListRightAssoc AssignExpressionListRightAssoc2 AssignExpressionListRightAssoc3 AssignExpressionListRightAssoc4 AssignExpressionListRightAssoc5
            if ((ExpressionParser.subAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.subAssign == context.SymbolId))) {
                    context.Error("Expecting subAssign");
                }
                children.Add(new ParseNode(ExpressionParser.subAssign, "subAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression");
                }
                children.Add(new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(33, "AssignExpressionList", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionList -> mulAssign OrExpression AssignExpressionListRightAssoc AssignExpressionListRightAssoc2 AssignExpressionListRightAssoc3 AssignExpressionListRightAssoc4 AssignExpressionListRightAssoc5
            if ((ExpressionParser.mulAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.mulAssign == context.SymbolId))) {
                    context.Error("Expecting mulAssign");
                }
                children.Add(new ParseNode(ExpressionParser.mulAssign, "mulAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression");
                }
                children.Add(new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(33, "AssignExpressionList", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionList -> divAssign OrExpression AssignExpressionListRightAssoc AssignExpressionListRightAssoc2 AssignExpressionListRightAssoc3 AssignExpressionListRightAssoc4 AssignExpressionListRightAssoc5
            if ((ExpressionParser.divAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.divAssign == context.SymbolId))) {
                    context.Error("Expecting divAssign");
                }
                children.Add(new ParseNode(ExpressionParser.divAssign, "divAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression");
                }
                children.Add(new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(33, "AssignExpressionList", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionList -> modAssign OrExpression AssignExpressionListRightAssoc AssignExpressionListRightAssoc2 AssignExpressionListRightAssoc3 AssignExpressionListRightAssoc4 AssignExpressionListRightAssoc5
            if ((ExpressionParser.modAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.modAssign == context.SymbolId))) {
                    context.Error("Expecting modAssign");
                }
                children.Add(new ParseNode(ExpressionParser.modAssign, "modAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression");
                }
                children.Add(new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(33, "AssignExpressionList", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionList -> bitwiseAndAssign OrExpression AssignExpressionListRightAssoc AssignExpressionListRightAssoc2 AssignExpressionListRightAssoc3 AssignExpressionListRightAssoc4 AssignExpressionListRightAssoc5
            if ((ExpressionParser.bitwiseAndAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.bitwiseAndAssign == context.SymbolId))) {
                    context.Error("Expecting bitwiseAndAssign");
                }
                children.Add(new ParseNode(ExpressionParser.bitwiseAndAssign, "bitwiseAndAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression");
                }
                children.Add(new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(33, "AssignExpressionList", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionList -> bitwiseOrAssign OrExpression AssignExpressionListRightAssoc AssignExpressionListRightAssoc2 AssignExpressionListRightAssoc3 AssignExpressionListRightAssoc4 AssignExpressionListRightAssoc5
            if ((ExpressionParser.bitwiseOrAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.bitwiseOrAssign == context.SymbolId))) {
                    context.Error("Expecting bitwiseOrAssign");
                }
                children.Add(new ParseNode(ExpressionParser.bitwiseOrAssign, "bitwiseOrAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression");
                }
                children.Add(new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(33, "AssignExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting eq, addAssign, subAssign, mulAssign, divAssign, modAssign, bitwiseAndAs" +
                    "sign, or bitwiseOrAssign", line__, column__, position__);
        }
        internal static ParseNode ParseTermExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TermExpressionList -> add FactorExpression TermExpressionListRightAssoc TermExpressionListRightAssoc2
            if ((ExpressionParser.add == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.add == context.SymbolId))) {
                    context.Error("Expecting add");
                }
                children.Add(new ParseNode(ExpressionParser.add, "add", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.FactorExpression == context.SymbolId))) {
                    context.Error("Expecting FactorExpression");
                }
                children.Add(new ParseNode(ExpressionParser.FactorExpression, "FactorExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseTermExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseTermExpressionListRightAssoc2(context).Children);
                return new ParseNode(34, "TermExpressionList", children.ToArray(), line__, column__, position__);
            }
            // TermExpressionList -> sub FactorExpression TermExpressionListRightAssoc TermExpressionListRightAssoc2
            if ((ExpressionParser.sub == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.sub == context.SymbolId))) {
                    context.Error("Expecting sub");
                }
                children.Add(new ParseNode(ExpressionParser.sub, "sub", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.FactorExpression == context.SymbolId))) {
                    context.Error("Expecting FactorExpression");
                }
                children.Add(new ParseNode(ExpressionParser.FactorExpression, "FactorExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseTermExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseTermExpressionListRightAssoc2(context).Children);
                return new ParseNode(34, "TermExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting add or sub", line__, column__, position__);
        }
        internal static ParseNode ParseFactorExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // FactorExpressionList -> mul UnaryExpression FactorExpressionListRightAssoc FactorExpressionListRightAssoc2 FactorExpressionListRightAssoc3
            if ((ExpressionParser.mul == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.mul == context.SymbolId))) {
                    context.Error("Expecting mul");
                }
                children.Add(new ParseNode(ExpressionParser.mul, "mul", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.UnaryExpression == context.SymbolId))) {
                    context.Error("Expecting UnaryExpression");
                }
                children.Add(new ParseNode(ExpressionParser.UnaryExpression, "UnaryExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc3(context).Children);
                return new ParseNode(35, "FactorExpressionList", children.ToArray(), line__, column__, position__);
            }
            // FactorExpressionList -> div UnaryExpression FactorExpressionListRightAssoc FactorExpressionListRightAssoc2 FactorExpressionListRightAssoc3
            if ((ExpressionParser.div == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.div == context.SymbolId))) {
                    context.Error("Expecting div");
                }
                children.Add(new ParseNode(ExpressionParser.div, "div", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.UnaryExpression == context.SymbolId))) {
                    context.Error("Expecting UnaryExpression");
                }
                children.Add(new ParseNode(ExpressionParser.UnaryExpression, "UnaryExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc3(context).Children);
                return new ParseNode(35, "FactorExpressionList", children.ToArray(), line__, column__, position__);
            }
            // FactorExpressionList -> mod UnaryExpression FactorExpressionListRightAssoc FactorExpressionListRightAssoc2 FactorExpressionListRightAssoc3
            if ((ExpressionParser.mod == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.mod == context.SymbolId))) {
                    context.Error("Expecting mod");
                }
                children.Add(new ParseNode(ExpressionParser.mod, "mod", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.UnaryExpression == context.SymbolId))) {
                    context.Error("Expecting UnaryExpression");
                }
                children.Add(new ParseNode(ExpressionParser.UnaryExpression, "UnaryExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc3(context).Children);
                return new ParseNode(35, "FactorExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting mul, div, or mod", line__, column__, position__);
        }
        internal static ParseNode ParseArgListList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ArgListList -> comma Expression ArgListListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma");
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseExpression(context));
                children.AddRange(ExpressionParser.ParseArgListListRightAssoc(context).Children);
                return new ParseNode(36, "ArgListList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting comma", line__, column__, position__);
        }
        internal static ParseNode ParseMethodArgListList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MethodArgListList -> comma MethodArg MethodArgListListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma");
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.MethodArg == context.SymbolId))) {
                    context.Error("Expecting MethodArg");
                }
                children.Add(new ParseNode(ExpressionParser.MethodArg, "MethodArg", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseMethodArgListListRightAssoc(context).Children);
                return new ParseNode(37, "MethodArgListList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting comma", line__, column__, position__);
        }
        internal static ParseNode ParseTypeBaseList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeBaseList -> dot Identifier TypeBaseListRightAssoc
            if ((ExpressionParser.dot == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.dot == context.SymbolId))) {
                    context.Error("Expecting dot");
                }
                children.Add(new ParseNode(ExpressionParser.dot, "dot", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                children.AddRange(ExpressionParser.ParseTypeBaseListRightAssoc(context).Children);
                return new ParseNode(38, "TypeBaseList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting dot", line__, column__, position__);
        }
        internal static ParseNode ParseTypeArraySpecList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeArraySpecList -> TypeArraySpec TypeArraySpecListRightAssoc
            if ((ExpressionParser.TypeArraySpec == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.TypeArraySpec == context.SymbolId))) {
                    context.Error("Expecting TypeArraySpec");
                }
                children.Add(new ParseNode(ExpressionParser.TypeArraySpec, "TypeArraySpec", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseTypeArraySpecListRightAssoc(context).Children);
                return new ParseNode(39, "TypeArraySpecList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting TypeArraySpec", line__, column__, position__);
        }
        internal static ParseNode ParseTypeGenericPartList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeGenericPartList -> comma Type TypeGenericPartListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma");
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseType(context));
                children.AddRange(ExpressionParser.ParseTypeGenericPartListRightAssoc(context).Children);
                return new ParseNode(40, "TypeGenericPartList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting comma", line__, column__, position__);
        }
        internal static ParseNode ParseTypeArraySpecRankList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeArraySpecRankList -> TypeArraySpecRank TypeArraySpecRankListRightAssoc
            if ((ExpressionParser.TypeArraySpecRank == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.TypeArraySpecRank == context.SymbolId))) {
                    context.Error("Expecting TypeArraySpecRank");
                }
                children.Add(new ParseNode(ExpressionParser.TypeArraySpecRank, "TypeArraySpecRank", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseTypeArraySpecRankListRightAssoc(context).Children);
                return new ParseNode(41, "TypeArraySpecRankList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting TypeArraySpecRank", line__, column__, position__);
        }
        internal static ParseNode ParseArrayInitializerList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ArrayInitializerList -> comma Expression ArrayInitializerListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma");
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseExpression(context));
                children.AddRange(ExpressionParser.ParseArrayInitializerListRightAssoc(context).Children);
                return new ParseNode(42, "ArrayInitializerList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting comma", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList -> MemberAnyRef MemberAnyRefListRightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefListRightAssoc(context).Children);
                return new ParseNode(43, "MemberAnyRefList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList2 -> MemberAnyRef MemberAnyRefList2RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList2RightAssoc(context).Children);
                return new ParseNode(44, "MemberAnyRefList2", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList3(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList3 -> MemberAnyRef MemberAnyRefList3RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList3RightAssoc(context).Children);
                return new ParseNode(45, "MemberAnyRefList3", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList4(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList4 -> MemberAnyRef MemberAnyRefList4RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList4RightAssoc(context).Children);
                return new ParseNode(46, "MemberAnyRefList4", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList5(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList5 -> MemberAnyRef MemberAnyRefList5RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList5RightAssoc(context).Children);
                return new ParseNode(47, "MemberAnyRefList5", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList6(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList6 -> MemberAnyRef MemberAnyRefList6RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList6RightAssoc(context).Children);
                return new ParseNode(48, "MemberAnyRefList6", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList7(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList7 -> MemberAnyRef MemberAnyRefList7RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList7RightAssoc(context).Children);
                return new ParseNode(49, "MemberAnyRefList7", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList8(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList8 -> MemberAnyRef MemberAnyRefList8RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList8RightAssoc(context).Children);
                return new ParseNode(50, "MemberAnyRefList8", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList9(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList9 -> MemberAnyRef MemberAnyRefList9RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList9RightAssoc(context).Children);
                return new ParseNode(51, "MemberAnyRefList9", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList10(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList10 -> MemberAnyRef MemberAnyRefList10RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList10RightAssoc(context).Children);
                return new ParseNode(52, "MemberAnyRefList10", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList11(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList11 -> MemberAnyRef MemberAnyRefList11RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList11RightAssoc(context).Children);
                return new ParseNode(53, "MemberAnyRefList11", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList12(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList12 -> MemberAnyRef MemberAnyRefList12RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList12RightAssoc(context).Children);
                return new ParseNode(54, "MemberAnyRefList12", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList13(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList13 -> MemberAnyRef MemberAnyRefList13RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList13RightAssoc(context).Children);
                return new ParseNode(55, "MemberAnyRefList13", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseCatchClauseList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CatchClauseList -> CatchClause CatchClauseListRightAssoc
            if ((StatementParser.CatchClause == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (StatementParser.CatchClause == context.SymbolId))) {
                    context.Error("Expecting CatchClause");
                }
                children.Add(new ParseNode(StatementParser.CatchClause, "CatchClause", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(StatementParser.ParseCatchClauseListRightAssoc(context).Children);
                return new ParseNode(179, "CatchClauseList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting CatchClause", line__, column__, position__);
        }
        internal static ParseNode ParseStatementList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // StatementList -> Statement StatementListRightAssoc
            if ((StatementParser.InnerStatement == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(StatementParser.ParseStatement(context));
                children.AddRange(StatementParser.ParseStatementListRightAssoc(context).Children);
                return new ParseNode(180, "StatementList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting Statement", line__, column__, position__);
        }
        internal static ParseNode ParseStatementList2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // StatementList2 -> Statement StatementList2RightAssoc
            if ((StatementParser.InnerStatement == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(StatementParser.ParseStatement(context));
                children.AddRange(StatementParser.ParseStatementList2RightAssoc(context).Children);
                return new ParseNode(181, "StatementList2", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting Statement", line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeArgListList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeArgListList -> comma CustomAttributeArg CustomAttributeArgListListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma");
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(TypeDeclParser.ParseCustomAttributeArg(context));
                children.AddRange(TypeDeclParser.ParseCustomAttributeArgListListRightAssoc(context).Children);
                return new ParseNode(256, "CustomAttributeArgListList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting comma", line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupList -> comma CustomAttribute CustomAttributeGroupListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma");
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(TypeDeclParser.ParseCustomAttribute(context));
                children.AddRange(TypeDeclParser.ParseCustomAttributeGroupListRightAssoc(context).Children);
                return new ParseNode(257, "CustomAttributeGroupList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting comma", line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupList2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupList2 -> CustomAttributeGroup CustomAttributeGroupList2RightAssoc
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(TypeDeclParser.ParseCustomAttributeGroup(context));
                children.AddRange(TypeDeclParser.ParseCustomAttributeGroupList2RightAssoc(context).Children);
                return new ParseNode(258, "CustomAttributeGroupList2", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting CustomAttributeGroup", line__, column__, position__);
        }
        internal static ParseNode ParseTypeAttributesList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeAttributesList -> publicKeyword TypeAttributesListRightAssoc TypeAttributesListRightAssoc2 TypeAttributesListRightAssoc3
            if ((TypeDeclParser.publicKeyword == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (TypeDeclParser.publicKeyword == context.SymbolId))) {
                    context.Error("Expecting publicKeyword");
                }
                children.Add(new ParseNode(TypeDeclParser.publicKeyword, "publicKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(TypeDeclParser.ParseTypeAttributesListRightAssoc(context).Children);
                children.AddRange(TypeDeclParser.ParseTypeAttributesListRightAssoc2(context).Children);
                children.AddRange(TypeDeclParser.ParseTypeAttributesListRightAssoc3(context).Children);
                return new ParseNode(259, "TypeAttributesList", children.ToArray(), line__, column__, position__);
            }
            // TypeAttributesList -> internalKeyword TypeAttributesListRightAssoc TypeAttributesListRightAssoc2 TypeAttributesListRightAssoc3
            if ((TypeDeclParser.internalKeyword == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (TypeDeclParser.internalKeyword == context.SymbolId))) {
                    context.Error("Expecting internalKeyword");
                }
                children.Add(new ParseNode(TypeDeclParser.internalKeyword, "internalKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(TypeDeclParser.ParseTypeAttributesListRightAssoc(context).Children);
                children.AddRange(TypeDeclParser.ParseTypeAttributesListRightAssoc2(context).Children);
                children.AddRange(TypeDeclParser.ParseTypeAttributesListRightAssoc3(context).Children);
                return new ParseNode(259, "TypeAttributesList", children.ToArray(), line__, column__, position__);
            }
            // TypeAttributesList -> privateKeyword TypeAttributesListRightAssoc TypeAttributesListRightAssoc2 TypeAttributesListRightAssoc3
            if ((TypeDeclParser.privateKeyword == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (TypeDeclParser.privateKeyword == context.SymbolId))) {
                    context.Error("Expecting privateKeyword");
                }
                children.Add(new ParseNode(TypeDeclParser.privateKeyword, "privateKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(TypeDeclParser.ParseTypeAttributesListRightAssoc(context).Children);
                children.AddRange(TypeDeclParser.ParseTypeAttributesListRightAssoc2(context).Children);
                children.AddRange(TypeDeclParser.ParseTypeAttributesListRightAssoc3(context).Children);
                return new ParseNode(259, "TypeAttributesList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting publicKeyword, internalKeyword, or privateKeyword", line__, column__, position__);
        }
        internal static ParseNode ParseEnumFieldsList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // EnumFieldsList -> comma EnumField EnumFieldsListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma");
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(TypeDeclParser.ParseEnumField(context));
                children.AddRange(TypeDeclParser.ParseEnumFieldsListRightAssoc(context).Children);
                return new ParseNode(260, "EnumFieldsList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting comma", line__, column__, position__);
        }
        internal static ParseNode ParseWhereClausesList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // WhereClausesList -> whereKeyword WhereConstraints WhereClausesListRightAssoc
            if ((TypeDeclParser.whereKeyword == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (TypeDeclParser.whereKeyword == context.SymbolId))) {
                    context.Error("Expecting whereKeyword");
                }
                children.Add(new ParseNode(TypeDeclParser.whereKeyword, "whereKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(TypeDeclParser.ParseWhereConstraints(context));
                children.AddRange(TypeDeclParser.ParseWhereClausesListRightAssoc(context).Children);
                return new ParseNode(261, "WhereClausesList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting whereKeyword", line__, column__, position__);
        }
        internal static ParseNode ParseWhereConstraintPartsList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // WhereConstraintPartsList -> comma WhereConstraintPart WhereConstraintPartsListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma");
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(TypeDeclParser.ParseWhereConstraintPart(context));
                children.AddRange(TypeDeclParser.ParseWhereConstraintPartsListRightAssoc(context).Children);
                return new ParseNode(262, "WhereConstraintPartsList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting comma", line__, column__, position__);
        }
        internal static ParseNode ParseTypeParamsList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeParamsList -> comma TypeParam TypeParamsListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma");
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(TypeDeclParser.ParseTypeParam(context));
                children.AddRange(TypeDeclParser.ParseTypeParamsListRightAssoc(context).Children);
                return new ParseNode(263, "TypeParamsList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting comma", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAttributeList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAttributeList -> MemberAttribute MemberAttributeListRightAssoc
            if (((((((((ExpressionParser.newKeyword == context.SymbolId) 
                        || (TypeDeclParser.constKeyword == context.SymbolId)) 
                        || (TypeDeclParser.publicKeyword == context.SymbolId)) 
                        || (TypeDeclParser.protectedKeyword == context.SymbolId)) 
                        || (TypeDeclParser.internalKeyword == context.SymbolId)) 
                        || (TypeDeclParser.privateKeyword == context.SymbolId)) 
                        || (TypeDeclParser.staticKeyword == context.SymbolId)) 
                        || (TypeDeclParser.overrideKeyword == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(TypeDeclParser.ParseMemberAttribute(context).Children);
                children.AddRange(TypeDeclParser.ParseMemberAttributeListRightAssoc(context).Children);
                return new ParseNode(264, "MemberAttributeList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAttribute", line__, column__, position__);
        }
        internal static ParseNode ParseMethodParamListList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MethodParamListList -> comma MethodParam MethodParamListListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma");
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(TypeDeclParser.ParseMethodParam(context));
                children.AddRange(TypeDeclParser.ParseMethodParamListListRightAssoc(context).Children);
                return new ParseNode(265, "MethodParamListList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting comma", line__, column__, position__);
        }
        internal static ParseNode ParseParamListList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ParamListList -> comma Param ParamListListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma");
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(TypeDeclParser.ParseParam(context));
                children.AddRange(TypeDeclParser.ParseParamListListRightAssoc(context).Children);
                return new ParseNode(266, "ParamListList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting comma", line__, column__, position__);
        }
        internal static ParseNode ParseStatement(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // Statement -> InnerStatement
            if ((StatementParser.InnerStatement == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (StatementParser.InnerStatement == context.SymbolId))) {
                    context.Error("Expecting InnerStatement");
                }
                context.Advance();
                return new ParseNode(184, "Statement", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting InnerStatement", line__, column__, position__);
        }
        internal static ParseNode ParseTypeDeclPart(ParserContext context) {
            // TypeDeclPart
            return _ParseTypeDeclPart(context);
        }
        internal static ParseNode ParseTypeDecl(ParserContext context) {
            // TypeDecl
            return ParseTypeDecl(context, false, null, null, context.Line, context.Column, context.Position, null);
        }
        /// <summary>
        /// Parses a production of the form:
        /// TypeDecl
        /// </summary>
        /// <remarks>
        /// The production rules are:
        /// TypeDecl -> publicKeyword
        /// TypeDecl -> internalKeyword
        /// TypeDecl -> privateKeyword
        /// TypeDecl -> structKeyword
        /// TypeDecl -> classKeyword
        /// TypeDecl -> enumKeyword
        /// TypeDecl -> interfaceKeyword
        /// TypeDecl -> partialKeyword
        /// TypeDecl -> lbracket
        /// </remarks>
        /// <param name="tokenizer">The tokenizer to parse with</param><returns>A <see cref="ParseNode" /> representing the parsed tokens</returns>
        public static ParseNode Parse(System.Collections.Generic.IEnumerable<Token> tokenizer) {
            ParserContext context = new ParserContext(tokenizer);
            context.EnsureStarted();
            ParseNode result = TypeDeclParser.ParseTypeDecl(context);
            if ((false == context.IsEnded)) {
                context.Error("Unexpected remainder in input.");
            }
            return result;
        }
        /// <summary>
        /// Parses a production of the form:
        /// TypeDecl
        /// </summary>
        /// <remarks>
        /// The production rules are:
        /// TypeDecl -> publicKeyword
        /// TypeDecl -> internalKeyword
        /// TypeDecl -> privateKeyword
        /// TypeDecl -> structKeyword
        /// TypeDecl -> classKeyword
        /// TypeDecl -> enumKeyword
        /// TypeDecl -> interfaceKeyword
        /// TypeDecl -> partialKeyword
        /// TypeDecl -> lbracket
        /// </remarks>
        /// <param name="tokenizer">The tokenizer to parse with</param><returns>A <see cref="ParseNode" /> representing the parsed tokens</returns>
        public static ParseNode ParseTypeDecl(System.Collections.Generic.IEnumerable<Token> tokenizer) {
            ParserContext context = new ParserContext(tokenizer);
            context.EnsureStarted();
            ParseNode result = TypeDeclParser.ParseTypeDecl(context);
            if ((false == context.IsEnded)) {
                context.Error("Unexpected remainder in input.");
            }
            return result;
        }
        internal static ParseNode ParsePrivateImplementationType(ParserContext context) {
            // PrivateImplementationType
            return _ParsePrivateImplementationType(context);
        }
        internal static bool WherePrivateImplementationType(ParserContext context) {
            return (false == ExpressionParser.Keywords.Contains(context.Value));
        }
        internal static ParseNode ParsePropertyAccessors(ParserContext context) {
            // PropertyAccessors
            return _ParsePropertyAccessors(context);
        }
        internal static ParseNode ParseMember(ParserContext context) {
            // Member
            return _ParseMember(context);
        }
        internal static bool WhereMember(ParserContext context) {
            return true;
        }
        /// <summary>
        /// Parses a production of the form:
        /// Member
        /// </summary>
        /// <remarks>
        /// The production rules are:
        /// Member -> lbracket
        /// Member -> newKeyword
        /// Member -> constKeyword
        /// Member -> publicKeyword
        /// Member -> protectedKeyword
        /// Member -> internalKeyword
        /// Member -> privateKeyword
        /// Member -> staticKeyword
        /// Member -> overrideKeyword
        /// Member -> Type
        /// Member -> eventKeyword
        /// Member -> Identifier
        /// </remarks>
        /// <param name="tokenizer">The tokenizer to parse with</param><returns>A <see cref="ParseNode" /> representing the parsed tokens</returns>
        public static ParseNode ParseMember(System.Collections.Generic.IEnumerable<Token> tokenizer) {
            ParserContext context = new ParserContext(tokenizer);
            context.EnsureStarted();
            ParseNode result = TypeDeclParser.ParseMember(context);
            if ((false == context.IsEnded)) {
                context.Error("Unexpected remainder in input.");
            }
            return result;
        }
        internal static ParseNode ParseMembers(ParserContext context) {
            // Members
            return _ParseMembers(context);
        }
        internal static bool WhereMembers(ParserContext context) {
            return true;
        }
        /// <summary>
        /// Parses a production of the form:
        /// Members
        /// </summary>
        /// <remarks>
        /// The production rules are:
        /// Members -> lbracket
        /// Members -> newKeyword
        /// Members -> constKeyword
        /// Members -> publicKeyword
        /// Members -> protectedKeyword
        /// Members -> internalKeyword
        /// Members -> privateKeyword
        /// Members -> staticKeyword
        /// Members -> overrideKeyword
        /// Members -> Type
        /// Members -> eventKeyword
        /// Members -> Identifier
        /// </remarks>
        /// <param name="tokenizer">The tokenizer to parse with</param><returns>A <see cref="ParseNode" /> representing the parsed tokens</returns>
        public static ParseNode ParseMembers(System.Collections.Generic.IEnumerable<Token> tokenizer) {
            ParserContext context = new ParserContext(tokenizer);
            context.EnsureStarted();
            ParseNode result = TypeDeclParser.ParseMembers(context);
            if ((false == context.IsEnded)) {
                context.Error("Unexpected remainder in input.");
            }
            return result;
        }
        internal static ParseNode ParseNamespaceNameListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // NamespaceNameListRightAssoc -> dot Identifier NamespaceNameListRightAssoc
            if ((ExpressionParser.dot == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.dot == context.SymbolId))) {
                    context.Error("Expecting dot");
                }
                children.Add(new ParseNode(ExpressionParser.dot, "dot", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                children.AddRange(TypeDeclParser.ParseNamespaceNameListRightAssoc(context).Children);
                return new ParseNode(6, "NamespaceNameListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting dot", line__, column__, position__);
        }
        internal static ParseNode ParseRelationalExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // RelationalExpressionListRightAssoc -> lt TermExpression RelationalExpressionListRightAssoc
            if ((ExpressionParser.lt == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.lt == context.SymbolId))) {
                    context.Error("Expecting lt");
                }
                children.Add(new ParseNode(ExpressionParser.lt, "lt", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.TermExpression == context.SymbolId))) {
                    context.Error("Expecting TermExpression");
                }
                children.Add(new ParseNode(ExpressionParser.TermExpression, "TermExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc(context).Children);
                return new ParseNode(71, "RelationalExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // RelationalExpressionListRightAssoc ->
            if ((((ExpressionParser.gt == context.SymbolId) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(71, "RelationalExpressionListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting lt", line__, column__, position__);
        }
        internal static ParseNode ParseRelationalExpressionListRightAssoc2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // RelationalExpressionListRightAssoc2 -> gt TermExpression RelationalExpressionListRightAssoc2
            if ((ExpressionParser.gt == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.gt == context.SymbolId))) {
                    context.Error("Expecting gt");
                }
                children.Add(new ParseNode(ExpressionParser.gt, "gt", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.TermExpression == context.SymbolId))) {
                    context.Error("Expecting TermExpression");
                }
                children.Add(new ParseNode(ExpressionParser.TermExpression, "TermExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc2(context).Children);
                return new ParseNode(72, "RelationalExpressionListRightAssoc2", children.ToArray(), line__, column__, position__);
            }
            // RelationalExpressionListRightAssoc2 ->
            if (((ExpressionParser.lte == context.SymbolId) 
                        || (ExpressionParser.gte == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(72, "RelationalExpressionListRightAssoc2", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting gt", line__, column__, position__);
        }
        internal static ParseNode ParseEqualityExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // EqualityExpressionListRightAssoc -> eqEq RelationalExpression EqualityExpressionListRightAssoc
            if ((ExpressionParser.eqEq == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.eqEq == context.SymbolId))) {
                    context.Error("Expecting eqEq");
                }
                children.Add(new ParseNode(ExpressionParser.eqEq, "eqEq", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.RelationalExpression == context.SymbolId))) {
                    context.Error("Expecting RelationalExpression");
                }
                children.Add(new ParseNode(ExpressionParser.RelationalExpression, "RelationalExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseEqualityExpressionListRightAssoc(context).Children);
                return new ParseNode(73, "EqualityExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // EqualityExpressionListRightAssoc ->
            if ((ExpressionParser.notEq == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(73, "EqualityExpressionListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting eqEq", line__, column__, position__);
        }
        internal static ParseNode ParseBitwiseAndExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // BitwiseAndExpressionListRightAssoc -> bitwiseAnd EqualityExpression BitwiseAndExpressionListRightAssoc
            if ((ExpressionParser.bitwiseAnd == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.bitwiseAnd == context.SymbolId))) {
                    context.Error("Expecting bitwiseAnd");
                }
                children.Add(new ParseNode(ExpressionParser.bitwiseAnd, "bitwiseAnd", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.EqualityExpression == context.SymbolId))) {
                    context.Error("Expecting EqualityExpression");
                }
                children.Add(new ParseNode(ExpressionParser.EqualityExpression, "EqualityExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseBitwiseAndExpressionListRightAssoc(context).Children);
                return new ParseNode(74, "BitwiseAndExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting bitwiseAnd", line__, column__, position__);
        }
        internal static ParseNode ParseBitwiseOrExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // BitwiseOrExpressionListRightAssoc -> bitwiseOr BitwiseAndExpression BitwiseOrExpressionListRightAssoc
            if ((ExpressionParser.bitwiseOr == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.bitwiseOr == context.SymbolId))) {
                    context.Error("Expecting bitwiseOr");
                }
                children.Add(new ParseNode(ExpressionParser.bitwiseOr, "bitwiseOr", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.BitwiseAndExpression == context.SymbolId))) {
                    context.Error("Expecting BitwiseAndExpression");
                }
                children.Add(new ParseNode(ExpressionParser.BitwiseAndExpression, "BitwiseAndExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseBitwiseOrExpressionListRightAssoc(context).Children);
                return new ParseNode(75, "BitwiseOrExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting bitwiseOr", line__, column__, position__);
        }
        internal static ParseNode ParseAndExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AndExpressionListRightAssoc -> and BitwiseOrExpression AndExpressionListRightAssoc
            if ((ExpressionParser.and == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.and == context.SymbolId))) {
                    context.Error("Expecting and");
                }
                children.Add(new ParseNode(ExpressionParser.and, "and", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.BitwiseOrExpression == context.SymbolId))) {
                    context.Error("Expecting BitwiseOrExpression");
                }
                children.Add(new ParseNode(ExpressionParser.BitwiseOrExpression, "BitwiseOrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAndExpressionListRightAssoc(context).Children);
                return new ParseNode(76, "AndExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting and", line__, column__, position__);
        }
        internal static ParseNode ParseOrExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // OrExpressionListRightAssoc -> or AndExpression OrExpressionListRightAssoc
            if ((ExpressionParser.or == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.or == context.SymbolId))) {
                    context.Error("Expecting or");
                }
                children.Add(new ParseNode(ExpressionParser.or, "or", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.AndExpression == context.SymbolId))) {
                    context.Error("Expecting AndExpression");
                }
                children.Add(new ParseNode(ExpressionParser.AndExpression, "AndExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseOrExpressionListRightAssoc(context).Children);
                return new ParseNode(77, "OrExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting or", line__, column__, position__);
        }
        internal static ParseNode ParseAssignExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AssignExpressionListRightAssoc -> eq OrExpression AssignExpressionListRightAssoc
            if ((ExpressionParser.eq == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.eq == context.SymbolId))) {
                    context.Error("Expecting eq");
                }
                children.Add(new ParseNode(ExpressionParser.eq, "eq", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression");
                }
                children.Add(new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                return new ParseNode(78, "AssignExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionListRightAssoc ->
            if ((((((((ExpressionParser.subAssign == context.SymbolId) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(78, "AssignExpressionListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting eq", line__, column__, position__);
        }
        internal static ParseNode ParseAssignExpressionListRightAssoc2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AssignExpressionListRightAssoc2 -> subAssign OrExpression AssignExpressionListRightAssoc2
            if ((ExpressionParser.subAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.subAssign == context.SymbolId))) {
                    context.Error("Expecting subAssign");
                }
                children.Add(new ParseNode(ExpressionParser.subAssign, "subAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression");
                }
                children.Add(new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                return new ParseNode(79, "AssignExpressionListRightAssoc2", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionListRightAssoc2 ->
            if (((((((ExpressionParser.divAssign == context.SymbolId) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(79, "AssignExpressionListRightAssoc2", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting subAssign", line__, column__, position__);
        }
        internal static ParseNode ParseAssignExpressionListRightAssoc3(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AssignExpressionListRightAssoc3 -> divAssign OrExpression AssignExpressionListRightAssoc3
            if ((ExpressionParser.divAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.divAssign == context.SymbolId))) {
                    context.Error("Expecting divAssign");
                }
                children.Add(new ParseNode(ExpressionParser.divAssign, "divAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression");
                }
                children.Add(new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                return new ParseNode(80, "AssignExpressionListRightAssoc3", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionListRightAssoc3 ->
            if ((((((ExpressionParser.bitwiseAndAssign == context.SymbolId) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(80, "AssignExpressionListRightAssoc3", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting divAssign", line__, column__, position__);
        }
        internal static ParseNode ParseAssignExpressionListRightAssoc4(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AssignExpressionListRightAssoc4 -> bitwiseAndAssign OrExpression AssignExpressionListRightAssoc4
            if ((ExpressionParser.bitwiseAndAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.bitwiseAndAssign == context.SymbolId))) {
                    context.Error("Expecting bitwiseAndAssign");
                }
                children.Add(new ParseNode(ExpressionParser.bitwiseAndAssign, "bitwiseAndAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression");
                }
                children.Add(new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                return new ParseNode(81, "AssignExpressionListRightAssoc4", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionListRightAssoc4 ->
            if (((((ExpressionParser.addAssign == context.SymbolId) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(81, "AssignExpressionListRightAssoc4", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting bitwiseAndAssign", line__, column__, position__);
        }
        internal static ParseNode ParseTermExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TermExpressionListRightAssoc -> add FactorExpression TermExpressionListRightAssoc
            if ((ExpressionParser.add == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.add == context.SymbolId))) {
                    context.Error("Expecting add");
                }
                children.Add(new ParseNode(ExpressionParser.add, "add", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.FactorExpression == context.SymbolId))) {
                    context.Error("Expecting FactorExpression");
                }
                children.Add(new ParseNode(ExpressionParser.FactorExpression, "FactorExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseTermExpressionListRightAssoc(context).Children);
                return new ParseNode(82, "TermExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // TermExpressionListRightAssoc ->
            if ((ExpressionParser.sub == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(82, "TermExpressionListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting add", line__, column__, position__);
        }
        internal static ParseNode ParseFactorExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // FactorExpressionListRightAssoc -> mul UnaryExpression FactorExpressionListRightAssoc
            if ((ExpressionParser.mul == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.mul == context.SymbolId))) {
                    context.Error("Expecting mul");
                }
                children.Add(new ParseNode(ExpressionParser.mul, "mul", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.UnaryExpression == context.SymbolId))) {
                    context.Error("Expecting UnaryExpression");
                }
                children.Add(new ParseNode(ExpressionParser.UnaryExpression, "UnaryExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc(context).Children);
                return new ParseNode(83, "FactorExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // FactorExpressionListRightAssoc ->
            if (((ExpressionParser.mod == context.SymbolId) 
                        || (ExpressionParser.div == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(83, "FactorExpressionListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting mul", line__, column__, position__);
        }
        internal static ParseNode ParseFactorExpressionListRightAssoc2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // FactorExpressionListRightAssoc2 -> mod UnaryExpression FactorExpressionListRightAssoc2
            if ((ExpressionParser.mod == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.mod == context.SymbolId))) {
                    context.Error("Expecting mod");
                }
                children.Add(new ParseNode(ExpressionParser.mod, "mod", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.UnaryExpression == context.SymbolId))) {
                    context.Error("Expecting UnaryExpression");
                }
                children.Add(new ParseNode(ExpressionParser.UnaryExpression, "UnaryExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc2(context).Children);
                return new ParseNode(84, "FactorExpressionListRightAssoc2", children.ToArray(), line__, column__, position__);
            }
            // FactorExpressionListRightAssoc2 ->
            if ((ExpressionParser.div == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(84, "FactorExpressionListRightAssoc2", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting mod", line__, column__, position__);
        }
        internal static ParseNode ParseArgListListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ArgListListRightAssoc -> comma Expression ArgListListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma");
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseExpression(context));
                children.AddRange(ExpressionParser.ParseArgListListRightAssoc(context).Children);
                return new ParseNode(85, "ArgListListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting comma", line__, column__, position__);
        }
        internal static ParseNode ParseMethodArgListListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MethodArgListListRightAssoc -> comma MethodArg MethodArgListListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma");
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.MethodArg == context.SymbolId))) {
                    context.Error("Expecting MethodArg");
                }
                children.Add(new ParseNode(ExpressionParser.MethodArg, "MethodArg", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseMethodArgListListRightAssoc(context).Children);
                return new ParseNode(86, "MethodArgListListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting comma", line__, column__, position__);
        }
        internal static ParseNode ParseTypeBaseListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeBaseListRightAssoc -> dot Identifier TypeBaseListRightAssoc
            if ((ExpressionParser.dot == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.dot == context.SymbolId))) {
                    context.Error("Expecting dot");
                }
                children.Add(new ParseNode(ExpressionParser.dot, "dot", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                children.AddRange(ExpressionParser.ParseTypeBaseListRightAssoc(context).Children);
                return new ParseNode(87, "TypeBaseListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting dot", line__, column__, position__);
        }
        internal static ParseNode ParseTypeArraySpecListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeArraySpecListRightAssoc -> TypeArraySpec TypeArraySpecListRightAssoc
            if ((ExpressionParser.TypeArraySpec == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.TypeArraySpec == context.SymbolId))) {
                    context.Error("Expecting TypeArraySpec");
                }
                children.Add(new ParseNode(ExpressionParser.TypeArraySpec, "TypeArraySpec", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseTypeArraySpecListRightAssoc(context).Children);
                return new ParseNode(88, "TypeArraySpecListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting TypeArraySpec", line__, column__, position__);
        }
        internal static ParseNode ParseTypeGenericPartListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeGenericPartListRightAssoc -> comma Type TypeGenericPartListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma");
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseType(context));
                children.AddRange(ExpressionParser.ParseTypeGenericPartListRightAssoc(context).Children);
                return new ParseNode(89, "TypeGenericPartListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting comma", line__, column__, position__);
        }
        internal static ParseNode ParseTypeArraySpecRankListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeArraySpecRankListRightAssoc -> TypeArraySpecRank TypeArraySpecRankListRightAssoc
            if ((ExpressionParser.TypeArraySpecRank == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.TypeArraySpecRank == context.SymbolId))) {
                    context.Error("Expecting TypeArraySpecRank");
                }
                children.Add(new ParseNode(ExpressionParser.TypeArraySpecRank, "TypeArraySpecRank", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseTypeArraySpecRankListRightAssoc(context).Children);
                return new ParseNode(90, "TypeArraySpecRankListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting TypeArraySpecRank", line__, column__, position__);
        }
        internal static ParseNode ParseArrayInitializerListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ArrayInitializerListRightAssoc -> comma Expression ArrayInitializerListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma");
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseExpression(context));
                children.AddRange(ExpressionParser.ParseArrayInitializerListRightAssoc(context).Children);
                return new ParseNode(91, "ArrayInitializerListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting comma", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefListRightAssoc -> MemberAnyRef MemberAnyRefListRightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefListRightAssoc(context).Children);
                return new ParseNode(92, "MemberAnyRefListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList2RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList2RightAssoc -> MemberAnyRef MemberAnyRefList2RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList2RightAssoc(context).Children);
                return new ParseNode(93, "MemberAnyRefList2RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList3RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList3RightAssoc -> MemberAnyRef MemberAnyRefList3RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList3RightAssoc(context).Children);
                return new ParseNode(94, "MemberAnyRefList3RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList4RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList4RightAssoc -> MemberAnyRef MemberAnyRefList4RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList4RightAssoc(context).Children);
                return new ParseNode(95, "MemberAnyRefList4RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList5RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList5RightAssoc -> MemberAnyRef MemberAnyRefList5RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList5RightAssoc(context).Children);
                return new ParseNode(96, "MemberAnyRefList5RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList6RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList6RightAssoc -> MemberAnyRef MemberAnyRefList6RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList6RightAssoc(context).Children);
                return new ParseNode(97, "MemberAnyRefList6RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList7RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList7RightAssoc -> MemberAnyRef MemberAnyRefList7RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList7RightAssoc(context).Children);
                return new ParseNode(98, "MemberAnyRefList7RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList8RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList8RightAssoc -> MemberAnyRef MemberAnyRefList8RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList8RightAssoc(context).Children);
                return new ParseNode(99, "MemberAnyRefList8RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList9RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList9RightAssoc -> MemberAnyRef MemberAnyRefList9RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList9RightAssoc(context).Children);
                return new ParseNode(100, "MemberAnyRefList9RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList10RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList10RightAssoc -> MemberAnyRef MemberAnyRefList10RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList10RightAssoc(context).Children);
                return new ParseNode(101, "MemberAnyRefList10RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList11RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList11RightAssoc -> MemberAnyRef MemberAnyRefList11RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList11RightAssoc(context).Children);
                return new ParseNode(102, "MemberAnyRefList11RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList12RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList12RightAssoc -> MemberAnyRef MemberAnyRefList12RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList12RightAssoc(context).Children);
                return new ParseNode(103, "MemberAnyRefList12RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList13RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList13RightAssoc -> MemberAnyRef MemberAnyRefList13RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef");
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList13RightAssoc(context).Children);
                return new ParseNode(104, "MemberAnyRefList13RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAnyRef", line__, column__, position__);
        }
        internal static ParseNode ParseCatchClauseListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CatchClauseListRightAssoc -> CatchClause CatchClauseListRightAssoc
            if ((StatementParser.CatchClause == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (StatementParser.CatchClause == context.SymbolId))) {
                    context.Error("Expecting CatchClause");
                }
                children.Add(new ParseNode(StatementParser.CatchClause, "CatchClause", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(StatementParser.ParseCatchClauseListRightAssoc(context).Children);
                return new ParseNode(214, "CatchClauseListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting CatchClause", line__, column__, position__);
        }
        internal static ParseNode ParseStatementListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // StatementListRightAssoc -> Statement StatementListRightAssoc
            if ((StatementParser.InnerStatement == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(StatementParser.ParseStatement(context));
                children.AddRange(StatementParser.ParseStatementListRightAssoc(context).Children);
                return new ParseNode(215, "StatementListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting Statement", line__, column__, position__);
        }
        internal static ParseNode ParseStatementList2RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // StatementList2RightAssoc -> Statement StatementList2RightAssoc
            if ((StatementParser.InnerStatement == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(StatementParser.ParseStatement(context));
                children.AddRange(StatementParser.ParseStatementList2RightAssoc(context).Children);
                return new ParseNode(216, "StatementList2RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting Statement", line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeArgListListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeArgListListRightAssoc -> comma CustomAttributeArg CustomAttributeArgListListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma");
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(TypeDeclParser.ParseCustomAttributeArg(context));
                children.AddRange(TypeDeclParser.ParseCustomAttributeArgListListRightAssoc(context).Children);
                return new ParseNode(353, "CustomAttributeArgListListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // CustomAttributeArgListListRightAssoc ->
            if ((ExpressionParser.rparen == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(353, "CustomAttributeArgListListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting comma", line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupListRightAssoc -> comma CustomAttribute CustomAttributeGroupListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma");
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(TypeDeclParser.ParseCustomAttribute(context));
                children.AddRange(TypeDeclParser.ParseCustomAttributeGroupListRightAssoc(context).Children);
                return new ParseNode(354, "CustomAttributeGroupListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // CustomAttributeGroupListRightAssoc ->
            if ((ExpressionParser.rbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(354, "CustomAttributeGroupListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting comma", line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupList2RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupList2RightAssoc -> CustomAttributeGroup CustomAttributeGroupList2RightAssoc
            // CustomAttributeGroupList2RightAssoc ->
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                ParserContext context2__;
                int advanceCount__ = 0;
                System.Exception lastExcept = null;
                context2__ = context.GetLookAhead();
                context2__.EnsureStarted();
                // CustomAttributeGroupList2RightAssoc -> CustomAttributeGroup CustomAttributeGroupList2RightAssoc
                try {
                    if ((ExpressionParser.lbracket == context2__.SymbolId)) {
                        System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                        children.Add(TypeDeclParser.ParseCustomAttributeGroup(context2__));
                        children.AddRange(TypeDeclParser.ParseCustomAttributeGroupList2RightAssoc(context2__).Children);
                        TypeDeclParser.ParseCustomAttributeGroup(context);
                        TypeDeclParser.ParseCustomAttributeGroupList2RightAssoc(context);
                        return new ParseNode(355, "CustomAttributeGroupList2RightAssoc", children.ToArray(), line__, column__, position__);
                    }
                    context.Error("Expecting lbracket");
                }
                catch (SyntaxException ex) {
                    if ((context2__.AdvanceCount > advanceCount__)) {
                        lastExcept = ex;
                        advanceCount__ = context2__.AdvanceCount;
                    }
                }
                finally {

                }
                if ((ExpressionParser.lbracket == context.SymbolId)) {
                    ParseNode[] children = new ParseNode[0];
                    return new ParseNode(355, "CustomAttributeGroupList2RightAssoc", children, line__, column__, position__);
                }
                throw lastExcept;
            }
            // CustomAttributeGroupList2RightAssoc ->
            if (((((((((((((((((((((((((((((((((ExpressionParser.verbatimIdentifier == context.SymbolId) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (TypeDeclParser.constKeyword == context.SymbolId)) 
                        || (TypeDeclParser.publicKeyword == context.SymbolId)) 
                        || (TypeDeclParser.protectedKeyword == context.SymbolId)) 
                        || (TypeDeclParser.internalKeyword == context.SymbolId)) 
                        || (TypeDeclParser.privateKeyword == context.SymbolId)) 
                        || (TypeDeclParser.staticKeyword == context.SymbolId)) 
                        || (TypeDeclParser.overrideKeyword == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (TypeDeclParser.eventKeyword == context.SymbolId)) 
                        || (TypeDeclParser.structKeyword == context.SymbolId)) 
                        || (TypeDeclParser.classKeyword == context.SymbolId)) 
                        || (TypeDeclParser.enumKeyword == context.SymbolId)) 
                        || (TypeDeclParser.interfaceKeyword == context.SymbolId)) 
                        || (TypeDeclParser.partialKeyword == context.SymbolId)) 
                        || (TypeDeclParser.namespaceKeyword == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(355, "CustomAttributeGroupList2RightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting CustomAttributeGroup", line__, column__, position__);
        }
        internal static ParseNode ParseTypeAttributesListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeAttributesListRightAssoc -> publicKeyword TypeAttributesListRightAssoc
            if ((TypeDeclParser.publicKeyword == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (TypeDeclParser.publicKeyword == context.SymbolId))) {
                    context.Error("Expecting publicKeyword");
                }
                children.Add(new ParseNode(TypeDeclParser.publicKeyword, "publicKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(TypeDeclParser.ParseTypeAttributesListRightAssoc(context).Children);
                return new ParseNode(356, "TypeAttributesListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // TypeAttributesListRightAssoc ->
            if ((((((((TypeDeclParser.privateKeyword == context.SymbolId) 
                        || (TypeDeclParser.internalKeyword == context.SymbolId)) 
                        || (TypeDeclParser.classKeyword == context.SymbolId)) 
                        || (TypeDeclParser.enumKeyword == context.SymbolId)) 
                        || (TypeDeclParser.structKeyword == context.SymbolId)) 
                        || (TypeDeclParser.interfaceKeyword == context.SymbolId)) 
                        || (TypeDeclParser.partialKeyword == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(356, "TypeAttributesListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting publicKeyword", line__, column__, position__);
        }
        internal static ParseNode ParseTypeAttributesListRightAssoc2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeAttributesListRightAssoc2 -> privateKeyword TypeAttributesListRightAssoc2
            if ((TypeDeclParser.privateKeyword == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (TypeDeclParser.privateKeyword == context.SymbolId))) {
                    context.Error("Expecting privateKeyword");
                }
                children.Add(new ParseNode(TypeDeclParser.privateKeyword, "privateKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(TypeDeclParser.ParseTypeAttributesListRightAssoc2(context).Children);
                return new ParseNode(357, "TypeAttributesListRightAssoc2", children.ToArray(), line__, column__, position__);
            }
            // TypeAttributesListRightAssoc2 ->
            if (((((((TypeDeclParser.internalKeyword == context.SymbolId) 
                        || (TypeDeclParser.classKeyword == context.SymbolId)) 
                        || (TypeDeclParser.enumKeyword == context.SymbolId)) 
                        || (TypeDeclParser.structKeyword == context.SymbolId)) 
                        || (TypeDeclParser.interfaceKeyword == context.SymbolId)) 
                        || (TypeDeclParser.partialKeyword == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(357, "TypeAttributesListRightAssoc2", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting privateKeyword", line__, column__, position__);
        }
        internal static ParseNode ParseEnumFieldsListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // EnumFieldsListRightAssoc -> comma EnumField EnumFieldsListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma");
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(TypeDeclParser.ParseEnumField(context));
                children.AddRange(TypeDeclParser.ParseEnumFieldsListRightAssoc(context).Children);
                return new ParseNode(358, "EnumFieldsListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // EnumFieldsListRightAssoc ->
            if ((ExpressionParser.rbrace == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(358, "EnumFieldsListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting comma", line__, column__, position__);
        }
        internal static ParseNode ParseWhereClausesListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // WhereClausesListRightAssoc -> whereKeyword WhereConstraints WhereClausesListRightAssoc
            if ((TypeDeclParser.whereKeyword == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (TypeDeclParser.whereKeyword == context.SymbolId))) {
                    context.Error("Expecting whereKeyword");
                }
                children.Add(new ParseNode(TypeDeclParser.whereKeyword, "whereKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(TypeDeclParser.ParseWhereConstraints(context));
                children.AddRange(TypeDeclParser.ParseWhereClausesListRightAssoc(context).Children);
                return new ParseNode(359, "WhereClausesListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // WhereClausesListRightAssoc ->
            if ((ExpressionParser.lbrace == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(359, "WhereClausesListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting whereKeyword", line__, column__, position__);
        }
        internal static ParseNode ParseWhereConstraintPartsListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // WhereConstraintPartsListRightAssoc -> comma WhereConstraintPart WhereConstraintPartsListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma");
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(TypeDeclParser.ParseWhereConstraintPart(context));
                children.AddRange(TypeDeclParser.ParseWhereConstraintPartsListRightAssoc(context).Children);
                return new ParseNode(360, "WhereConstraintPartsListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // WhereConstraintPartsListRightAssoc ->
            if (((TypeDeclParser.whereKeyword == context.SymbolId) 
                        || (ExpressionParser.lbrace == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(360, "WhereConstraintPartsListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting comma", line__, column__, position__);
        }
        internal static ParseNode ParseTypeParamsListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeParamsListRightAssoc -> comma TypeParam TypeParamsListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma");
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(TypeDeclParser.ParseTypeParam(context));
                children.AddRange(TypeDeclParser.ParseTypeParamsListRightAssoc(context).Children);
                return new ParseNode(361, "TypeParamsListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // TypeParamsListRightAssoc ->
            if ((ExpressionParser.gt == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(361, "TypeParamsListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting comma", line__, column__, position__);
        }
        internal static ParseNode ParseMemberAttributeListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAttributeListRightAssoc -> MemberAttribute MemberAttributeListRightAssoc
            if (((((((((ExpressionParser.newKeyword == context.SymbolId) 
                        || (TypeDeclParser.constKeyword == context.SymbolId)) 
                        || (TypeDeclParser.publicKeyword == context.SymbolId)) 
                        || (TypeDeclParser.protectedKeyword == context.SymbolId)) 
                        || (TypeDeclParser.internalKeyword == context.SymbolId)) 
                        || (TypeDeclParser.privateKeyword == context.SymbolId)) 
                        || (TypeDeclParser.staticKeyword == context.SymbolId)) 
                        || (TypeDeclParser.overrideKeyword == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(TypeDeclParser.ParseMemberAttribute(context).Children);
                children.AddRange(TypeDeclParser.ParseMemberAttributeListRightAssoc(context).Children);
                return new ParseNode(362, "MemberAttributeListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // MemberAttributeListRightAssoc ->
            if (((((TypeDeclParser.enumKeyword == context.SymbolId) 
                        || (TypeDeclParser.structKeyword == context.SymbolId)) 
                        || (TypeDeclParser.classKeyword == context.SymbolId)) 
                        || (TypeDeclParser.interfaceKeyword == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(362, "MemberAttributeListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAttribute", line__, column__, position__);
        }
        internal static ParseNode ParseMethodParamListListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MethodParamListListRightAssoc -> comma MethodParam MethodParamListListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma");
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(TypeDeclParser.ParseMethodParam(context));
                children.AddRange(TypeDeclParser.ParseMethodParamListListRightAssoc(context).Children);
                return new ParseNode(363, "MethodParamListListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // MethodParamListListRightAssoc ->
            if ((ExpressionParser.rparen == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(363, "MethodParamListListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting comma", line__, column__, position__);
        }
        internal static ParseNode ParseParamListListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ParamListListRightAssoc -> comma Param ParamListListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma");
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(TypeDeclParser.ParseParam(context));
                children.AddRange(TypeDeclParser.ParseParamListListRightAssoc(context).Children);
                return new ParseNode(364, "ParamListListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // ParamListListRightAssoc ->
            if (((ExpressionParser.rparen == context.SymbolId) 
                        || (ExpressionParser.rbracket == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(364, "ParamListListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting comma", line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeArgListPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeArgListPart -> CustomAttributeArgListList rparen
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(TypeDeclParser.ParseCustomAttributeArgListList(context).Children);
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen");
                }
                children.Add(new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                return new ParseNode(365, "CustomAttributeArgListPart", children.ToArray(), line__, column__, position__);
            }
            // CustomAttributeArgListPart -> rparen
            if ((ExpressionParser.rparen == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen");
                }
                children[0] = new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(365, "CustomAttributeArgListPart", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting CustomAttributeArgListList or rparen", line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroup(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroup -> lbracket CustomAttributeTarget CustomAttribute CustomAttributeGroupPart
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.lbracket == context.SymbolId))) {
                    context.Error("Expecting lbracket");
                }
                children.Add(new ParseNode(ExpressionParser.lbracket, "lbracket", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(TypeDeclParser.ParseCustomAttributeTarget(context));
                children.Add(TypeDeclParser.ParseCustomAttribute(context));
                children.AddRange(TypeDeclParser.ParseCustomAttributeGroupPart(context).Children);
                return new ParseNode(366, "CustomAttributeGroup", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting lbracket", line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupPart -> CustomAttributeGroupList rbracket
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(TypeDeclParser.ParseCustomAttributeGroupList(context).Children);
                if ((false 
                            == (ExpressionParser.rbracket == context.SymbolId))) {
                    context.Error("Expecting rbracket");
                }
                children.Add(new ParseNode(ExpressionParser.rbracket, "rbracket", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                return new ParseNode(367, "CustomAttributeGroupPart", children.ToArray(), line__, column__, position__);
            }
            // CustomAttributeGroupPart -> rbracket
            if ((ExpressionParser.rbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.rbracket == context.SymbolId))) {
                    context.Error("Expecting rbracket");
                }
                children[0] = new ParseNode(ExpressionParser.rbracket, "rbracket", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(367, "CustomAttributeGroupPart", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting CustomAttributeGroupList or rbracket", line__, column__, position__);
        }
        internal static ParseNode ParseEnumFieldsPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // EnumFieldsPart -> EnumFieldsList
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(TypeDeclParser.ParseEnumFieldsList(context).Children);
                return new ParseNode(368, "EnumFieldsPart", children.ToArray(), line__, column__, position__);
            }
            // EnumFieldsPart ->
            if ((ExpressionParser.rbrace == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(368, "EnumFieldsPart", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting EnumFieldsList", line__, column__, position__);
        }
        internal static ParseNode ParseWhereConstraintParts(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // WhereConstraintParts -> WhereConstraintPart WhereConstraintPartsPart
            if (((((((((((((((((((ExpressionParser.boolType == context.SymbolId) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(TypeDeclParser.ParseWhereConstraintPart(context));
                children.AddRange(TypeDeclParser.ParseWhereConstraintPartsPart(context).Children);
                return new ParseNode(369, "WhereConstraintParts", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting WhereConstraintPart", line__, column__, position__);
        }
        internal static ParseNode ParseWhereConstraintPartsPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // WhereConstraintPartsPart -> WhereConstraintPartsList
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(TypeDeclParser.ParseWhereConstraintPartsList(context).Children);
                return new ParseNode(370, "WhereConstraintPartsPart", children.ToArray(), line__, column__, position__);
            }
            // WhereConstraintPartsPart ->
            if (((TypeDeclParser.whereKeyword == context.SymbolId) 
                        || (ExpressionParser.lbrace == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(370, "WhereConstraintPartsPart", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting WhereConstraintPartsList", line__, column__, position__);
        }
        internal static ParseNode ParseTypeParamsPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeParamsPart -> TypeParamsList gt
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(TypeDeclParser.ParseTypeParamsList(context).Children);
                if ((false 
                            == (ExpressionParser.gt == context.SymbolId))) {
                    context.Error("Expecting gt");
                }
                children.Add(new ParseNode(ExpressionParser.gt, "gt", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                return new ParseNode(371, "TypeParamsPart", children.ToArray(), line__, column__, position__);
            }
            // TypeParamsPart -> gt
            if ((ExpressionParser.gt == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.gt == context.SymbolId))) {
                    context.Error("Expecting gt");
                }
                children[0] = new ParseNode(ExpressionParser.gt, "gt", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(371, "TypeParamsPart", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting TypeParamsList or gt", line__, column__, position__);
        }
        internal static ParseNode ParseInterface(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // Interface -> MemberAttributes interfaceKeyword Identifier InterfacePart
            if (((((((((ExpressionParser.newKeyword == context.SymbolId) 
                        || (TypeDeclParser.constKeyword == context.SymbolId)) 
                        || (TypeDeclParser.publicKeyword == context.SymbolId)) 
                        || (TypeDeclParser.protectedKeyword == context.SymbolId)) 
                        || (TypeDeclParser.internalKeyword == context.SymbolId)) 
                        || (TypeDeclParser.privateKeyword == context.SymbolId)) 
                        || (TypeDeclParser.staticKeyword == context.SymbolId)) 
                        || (TypeDeclParser.overrideKeyword == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(TypeDeclParser.ParseMemberAttributes(context));
                if ((false 
                            == (TypeDeclParser.interfaceKeyword == context.SymbolId))) {
                    context.Error("Expecting interfaceKeyword");
                }
                children.Add(new ParseNode(TypeDeclParser.interfaceKeyword, "interfaceKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                children.AddRange(TypeDeclParser.ParseInterfacePart(context).Children);
                return new ParseNode(372, "Interface", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting MemberAttributes", line__, column__, position__);
        }
        internal static ParseNode ParseInterfacePart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // InterfacePart -> lt TypeParams gt TypeDeclPart
            if ((ExpressionParser.lt == context.SymbolId)) {
                ParseNode[] children = new ParseNode[4];
                if ((false 
                            == (ExpressionParser.lt == context.SymbolId))) {
                    context.Error("Expecting lt");
                }
                children[0] = new ParseNode(ExpressionParser.lt, "lt", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[1] = TypeDeclParser.ParseTypeParams(context);
                if ((false 
                            == (ExpressionParser.gt == context.SymbolId))) {
                    context.Error("Expecting gt");
                }
                children[2] = new ParseNode(ExpressionParser.gt, "gt", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[3] = TypeDeclParser.ParseTypeDeclPart(context);
                return new ParseNode(373, "InterfacePart", children, line__, column__, position__);
            }
            // InterfacePart -> TypeDeclPart
            if ((((StatementParser.colon == context.SymbolId) 
                        || (TypeDeclParser.whereKeyword == context.SymbolId)) 
                        || (ExpressionParser.lbrace == context.SymbolId))) {
                ParseNode[] children = new ParseNode[1];
                children[0] = TypeDeclParser.ParseTypeDeclPart(context);
                return new ParseNode(373, "InterfacePart", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting lt or TypeDeclPart", line__, column__, position__);
        }
        internal static ParseNode ParseMethodParamListPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MethodParamListPart -> MethodParamListList
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(TypeDeclParser.ParseMethodParamListList(context).Children);
                return new ParseNode(374, "MethodParamListPart", children.ToArray(), line__, column__, position__);
            }
            // MethodParamListPart ->
            if ((ExpressionParser.rparen == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(374, "MethodParamListPart", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting MethodParamListList", line__, column__, position__);
        }
        internal static ParseNode ParseParamListPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ParamListPart -> ParamListList
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(TypeDeclParser.ParseParamListList(context).Children);
                return new ParseNode(375, "ParamListPart", children.ToArray(), line__, column__, position__);
            }
            // ParamListPart ->
            if (((ExpressionParser.rparen == context.SymbolId) 
                        || (ExpressionParser.rbracket == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(375, "ParamListPart", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting ParamListList", line__, column__, position__);
        }
        internal static ParseNode ParsePropertyGet(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // PropertyGet -> getKeyword PropertyGetPart
            if ((TypeDeclParser.getKeyword == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (TypeDeclParser.getKeyword == context.SymbolId))) {
                    context.Error("Expecting getKeyword");
                }
                children.Add(new ParseNode(TypeDeclParser.getKeyword, "getKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(TypeDeclParser.ParsePropertyGetPart(context).Children);
                return new ParseNode(376, "PropertyGet", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting getKeyword", line__, column__, position__);
        }
        internal static ParseNode ParsePropertyGetPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // PropertyGetPart -> StatementBlock
            if ((ExpressionParser.lbrace == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                children[0] = StatementParser.ParseStatementBlock(context);
                return new ParseNode(377, "PropertyGetPart", children, line__, column__, position__);
            }
            // PropertyGetPart -> semi
            if ((StatementParser.semi == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (StatementParser.semi == context.SymbolId))) {
                    context.Error("Expecting semi");
                }
                children[0] = new ParseNode(StatementParser.semi, "semi", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(377, "PropertyGetPart", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting StatementBlock or semi", line__, column__, position__);
        }
        internal static ParseNode ParsePropertySet(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // PropertySet -> setKeyword PropertySetPart
            if ((TypeDeclParser.setKeyword == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (TypeDeclParser.setKeyword == context.SymbolId))) {
                    context.Error("Expecting setKeyword");
                }
                children.Add(new ParseNode(TypeDeclParser.setKeyword, "setKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(TypeDeclParser.ParsePropertySetPart(context).Children);
                return new ParseNode(378, "PropertySet", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting setKeyword", line__, column__, position__);
        }
        internal static ParseNode ParsePropertySetPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // PropertySetPart -> StatementBlock
            if ((ExpressionParser.lbrace == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                children[0] = StatementParser.ParseStatementBlock(context);
                return new ParseNode(379, "PropertySetPart", children, line__, column__, position__);
            }
            // PropertySetPart -> semi
            if ((StatementParser.semi == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (StatementParser.semi == context.SymbolId))) {
                    context.Error("Expecting semi");
                }
                children[0] = new ParseNode(StatementParser.semi, "semi", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(379, "PropertySetPart", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting StatementBlock or semi", line__, column__, position__);
        }
        internal static ParseNode ParseConstructorChain(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ConstructorChain -> baseRef lparen ConstructorChainPart
            if ((ExpressionParser.baseRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.baseRef == context.SymbolId))) {
                    context.Error("Expecting baseRef");
                }
                children.Add(new ParseNode(ExpressionParser.baseRef, "baseRef", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.lparen == context.SymbolId))) {
                    context.Error("Expecting lparen");
                }
                children.Add(new ParseNode(ExpressionParser.lparen, "lparen", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(TypeDeclParser.ParseConstructorChainPart(context).Children);
                return new ParseNode(380, "ConstructorChain", children.ToArray(), line__, column__, position__);
            }
            // ConstructorChain -> thisRef lparen ConstructorChainPart2
            if ((ExpressionParser.thisRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.thisRef == context.SymbolId))) {
                    context.Error("Expecting thisRef");
                }
                children.Add(new ParseNode(ExpressionParser.thisRef, "thisRef", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.lparen == context.SymbolId))) {
                    context.Error("Expecting lparen");
                }
                children.Add(new ParseNode(ExpressionParser.lparen, "lparen", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(TypeDeclParser.ParseConstructorChainPart2(context).Children);
                return new ParseNode(380, "ConstructorChain", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting baseRef or thisRef", line__, column__, position__);
        }
        internal static ParseNode ParseConstructorChainPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ConstructorChainPart -> ArgList rparen
            if ((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = ExpressionParser.ParseArgList(context);
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen");
                }
                children[1] = new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(381, "ConstructorChainPart", children, line__, column__, position__);
            }
            // ConstructorChainPart -> rparen
            if ((ExpressionParser.rparen == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen");
                }
                children[0] = new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(381, "ConstructorChainPart", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting ArgList or rparen", line__, column__, position__);
        }
        internal static ParseNode ParseConstructorChainPart2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ConstructorChainPart2 -> ArgList rparen
            if ((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = ExpressionParser.ParseArgList(context);
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen");
                }
                children[1] = new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(382, "ConstructorChainPart2", children, line__, column__, position__);
            }
            // ConstructorChainPart2 -> rparen
            if ((ExpressionParser.rparen == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen");
                }
                children[0] = new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(382, "ConstructorChainPart2", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting ArgList or rparen", line__, column__, position__);
        }
        internal static ParseNode ParseRelationalExpressionListPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // RelationalExpressionListPart -> lte TermExpression
            if ((ExpressionParser.lte == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.lte == context.SymbolId))) {
                    context.Error("Expecting lte");
                }
                children[0] = new ParseNode(ExpressionParser.lte, "lte", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                if ((false 
                            == (ExpressionParser.TermExpression == context.SymbolId))) {
                    context.Error("Expecting TermExpression");
                }
                children[1] = new ParseNode(ExpressionParser.TermExpression, "TermExpression", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(153, "RelationalExpressionListPart", children, line__, column__, position__);
            }
            // RelationalExpressionListPart -> gte TermExpression
            if ((ExpressionParser.gte == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.gte == context.SymbolId))) {
                    context.Error("Expecting gte");
                }
                children[0] = new ParseNode(ExpressionParser.gte, "gte", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                if ((false 
                            == (ExpressionParser.TermExpression == context.SymbolId))) {
                    context.Error("Expecting TermExpression");
                }
                children[1] = new ParseNode(ExpressionParser.TermExpression, "TermExpression", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(153, "RelationalExpressionListPart", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting lte or gte", line__, column__, position__);
        }
        internal static ParseNode ParseAssignExpressionListPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AssignExpressionListPart -> addAssign OrExpression
            if ((ExpressionParser.addAssign == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.addAssign == context.SymbolId))) {
                    context.Error("Expecting addAssign");
                }
                children[0] = new ParseNode(ExpressionParser.addAssign, "addAssign", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression");
                }
                children[1] = new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(154, "AssignExpressionListPart", children, line__, column__, position__);
            }
            // AssignExpressionListPart -> mulAssign OrExpression
            if ((ExpressionParser.mulAssign == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.mulAssign == context.SymbolId))) {
                    context.Error("Expecting mulAssign");
                }
                children[0] = new ParseNode(ExpressionParser.mulAssign, "mulAssign", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression");
                }
                children[1] = new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(154, "AssignExpressionListPart", children, line__, column__, position__);
            }
            // AssignExpressionListPart -> modAssign OrExpression
            if ((ExpressionParser.modAssign == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.modAssign == context.SymbolId))) {
                    context.Error("Expecting modAssign");
                }
                children[0] = new ParseNode(ExpressionParser.modAssign, "modAssign", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression");
                }
                children[1] = new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(154, "AssignExpressionListPart", children, line__, column__, position__);
            }
            // AssignExpressionListPart -> bitwiseOrAssign OrExpression
            if ((ExpressionParser.bitwiseOrAssign == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.bitwiseOrAssign == context.SymbolId))) {
                    context.Error("Expecting bitwiseOrAssign");
                }
                children[0] = new ParseNode(ExpressionParser.bitwiseOrAssign, "bitwiseOrAssign", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression");
                }
                children[1] = new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(154, "AssignExpressionListPart", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting addAssign, mulAssign, modAssign, or bitwiseOrAssign", line__, column__, position__);
        }
        internal static ParseNode ParseEqualityExpressionListRightAssoc2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // EqualityExpressionListRightAssoc2 -> notEq RelationalExpression EqualityExpressionListRightAssoc2
            if ((ExpressionParser.notEq == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.notEq == context.SymbolId))) {
                    context.Error("Expecting notEq");
                }
                children.Add(new ParseNode(ExpressionParser.notEq, "notEq", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.RelationalExpression == context.SymbolId))) {
                    context.Error("Expecting RelationalExpression");
                }
                children.Add(new ParseNode(ExpressionParser.RelationalExpression, "RelationalExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseEqualityExpressionListRightAssoc2(context).Children);
                return new ParseNode(155, "EqualityExpressionListRightAssoc2", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting notEq", line__, column__, position__);
        }
        internal static ParseNode ParseTermExpressionListRightAssoc2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TermExpressionListRightAssoc2 -> sub FactorExpression TermExpressionListRightAssoc2
            if ((ExpressionParser.sub == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.sub == context.SymbolId))) {
                    context.Error("Expecting sub");
                }
                children.Add(new ParseNode(ExpressionParser.sub, "sub", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.FactorExpression == context.SymbolId))) {
                    context.Error("Expecting FactorExpression");
                }
                children.Add(new ParseNode(ExpressionParser.FactorExpression, "FactorExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseTermExpressionListRightAssoc2(context).Children);
                return new ParseNode(156, "TermExpressionListRightAssoc2", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting sub", line__, column__, position__);
        }
        internal static ParseNode ParseFactorExpressionListRightAssoc3(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // FactorExpressionListRightAssoc3 -> div UnaryExpression FactorExpressionListRightAssoc3
            if ((ExpressionParser.div == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.div == context.SymbolId))) {
                    context.Error("Expecting div");
                }
                children.Add(new ParseNode(ExpressionParser.div, "div", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.UnaryExpression == context.SymbolId))) {
                    context.Error("Expecting UnaryExpression");
                }
                children.Add(new ParseNode(ExpressionParser.UnaryExpression, "UnaryExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc3(context).Children);
                return new ParseNode(157, "FactorExpressionListRightAssoc3", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting div", line__, column__, position__);
        }
        internal static ParseNode ParseTypeAttributesListRightAssoc3(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeAttributesListRightAssoc3 -> internalKeyword TypeAttributesListRightAssoc3
            if ((TypeDeclParser.internalKeyword == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (TypeDeclParser.internalKeyword == context.SymbolId))) {
                    context.Error("Expecting internalKeyword");
                }
                children.Add(new ParseNode(TypeDeclParser.internalKeyword, "internalKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(TypeDeclParser.ParseTypeAttributesListRightAssoc3(context).Children);
                return new ParseNode(383, "TypeAttributesListRightAssoc3", children.ToArray(), line__, column__, position__);
            }
            // TypeAttributesListRightAssoc3 ->
            if ((((((TypeDeclParser.classKeyword == context.SymbolId) 
                        || (TypeDeclParser.enumKeyword == context.SymbolId)) 
                        || (TypeDeclParser.structKeyword == context.SymbolId)) 
                        || (TypeDeclParser.interfaceKeyword == context.SymbolId)) 
                        || (TypeDeclParser.partialKeyword == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(383, "TypeAttributesListRightAssoc3", children, line__, column__, position__);
            }
            throw new SyntaxException("Expecting internalKeyword", line__, column__, position__);
        }
        internal static ParseNode ParseRelationalExpressionListRightAssoc3(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // RelationalExpressionListRightAssoc3 -> RelationalExpressionListPart RelationalExpressionListRightAssoc3
            if (((ExpressionParser.lte == context.SymbolId) 
                        || (ExpressionParser.gte == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseRelationalExpressionListPart(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc3(context).Children);
                return new ParseNode(158, "RelationalExpressionListRightAssoc3", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting RelationalExpressionListPart", line__, column__, position__);
        }
        internal static ParseNode ParseAssignExpressionListRightAssoc5(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AssignExpressionListRightAssoc5 -> AssignExpressionListPart AssignExpressionListRightAssoc5
            if (((((ExpressionParser.addAssign == context.SymbolId) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseAssignExpressionListPart(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(159, "AssignExpressionListRightAssoc5", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException("Expecting AssignExpressionListPart", line__, column__, position__);
        }
    }
    /// <summary>
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Parsley", "0.1.2.0")]
    internal class SyntaxException : Exception {
        private int _line;
        private int _column;
        private long _position;
        /// <summary>
        /// Creates a syntax exception with the specified arguments
        /// </summary>
        /// <param name="message">The error message</param>
        /// <param name="line">The line where the error occurred</param>
        /// <param name="column">The column where the error occured</param>
        /// <param name="position">The position where the error occured</param>
        public SyntaxException(string message, int line, int column, long position) : 
                base(SyntaxException._GetMessage(message, line, column, position)) {
            this._line = line;
            this._column = column;
            this._position = position;
        }
        /// <summary>
        /// The line where the error occurred
        /// </summary>
        public int Line {
            get {
                return this._line;
            }
        }
        /// <summary>
        /// The column where the error occurred
        /// </summary>
        public int Column {
            get {
                return this._column;
            }
        }
        /// <summary>
        /// The position where the error occurred
        /// </summary>
        public long Position {
            get {
                return this._position;
            }
        }
        static string _GetMessage(string message, int line, int column, long position) {
            return string.Format("{0} at line {1}, column {2}, position {3}", message, line, column, position);
        }
    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Parsley", "0.1.2.0")]
    internal partial class ParseNode {
        private int _symbolId;
        private string _symbol;
        private string _value;
        private int _line;
        private int _column;
        private long _position;
        private ParseNode[] _children;
        public ParseNode(int symbolId, string symbol, ParseNode[] children, int line, int column, long position) {
            this._symbolId = symbolId;
            this._symbol = symbol;
            this._value = null;
            this._children = children;
            this._line = line;
            this._column = column;
            this._position = position;
        }
        public ParseNode(int symbolId, string symbol, string value, int line, int column, long position) {
            this._symbolId = symbolId;
            this._symbol = symbol;
            this._value = value;
            this._children = null;
            this._line = line;
            this._column = column;
            this._position = position;
        }
        public bool IsNonTerminal {
            get {
                return (null != this._children);
            }
        }
        public ParseNode[] Children {
            get {
                return this._children;
            }
        }
        public int SymbolId {
            get {
                return this._symbolId;
            }
        }
        public string Symbol {
            get {
                return this._symbol;
            }
        }
        public string Value {
            get {
                return this._value;
            }
        }
        public int Line {
            get {
                return this._line;
            }
        }
        public int Column {
            get {
                return this._column;
            }
        }
        public long Position {
            get {
                return this._position;
            }
        }
        public override string ToString() {
            return this.ToString(null);
        }
        public string ToString(string format) {
            if (("t" == format)) {
                StringBuilder sb = new StringBuilder();
                ParseNode._AppendTree(this, sb);
                return sb.ToString();
            }
            if (this.IsNonTerminal) {
                return string.Concat(this.Symbol, ": Count = ", this._children.Length.ToString());
            }
            return string.Concat(this.Symbol, ": ", this.Value);
        }
        static void _AppendTree(ParseNode node, System.Text.StringBuilder builder) {
            // adapted from https://stackoverflow.com/questions/1649027/how-do-i-print-out-a-tree-structure
            List<ParseNode> firstStack = new List<ParseNode>();
            firstStack.Add(node);
            List<List<ParseNode>> childListStack = new List<List<ParseNode>>();
            childListStack.Add(firstStack);
            for (
            ; (childListStack.Count > 0); 
            ) {
                List<ParseNode> childStack = childListStack[(childListStack.Count - 1)];
                if ((childStack.Count == 0)) {
                    childListStack.RemoveAt((childListStack.Count - 1));
                }
                else {
                    node = childStack[0];
                    childStack.RemoveAt(0);
                    string indent = "";
                    for (int i = 0; (i 
                                < (childListStack.Count - 1)); i = (i + 1)) {
                        if ((0 < childListStack[i].Count)) {
                            indent = (indent + "|  ");
                        }
                        else {
                            indent = (indent + "   ");
                        }
                    }
                    string s = node.Symbol;
                    string ns = "";
                    if ((null != node.Value)) {
                        ns = node.Value;
                    }
                    string ss = string.Concat(indent, "+- ", string.Concat(s, " ", ns));
                    ss = ss.TrimEnd();
                    builder.Append(ss);
                    builder.AppendLine();
                    if ((node.IsNonTerminal 
                                && (0 < node.Children.Length))) {
                        List<ParseNode> pnl = new List<ParseNode>(node.Children);
                        childListStack.Add(pnl);
                    }
                }
            }
        }
    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Parsley", "0.1.2.0")]
    internal partial class ParserContext : Object, IDisposable {
        private int _state;
        private IEnumerator<Token> _e;
        private LookAheadEnumerator<Token> _el;
        private Token _t;
        private int _advanceCount;
        private int _line;
        private int _column;
        private long _position;
        private List<Token> _skipped;
        public ParserContext(IEnumerable<Token> tokenizer) : 
                this(tokenizer.GetEnumerator(), true) {
        }
        private ParserContext(IEnumerator<Token> enumerator, bool wrap) {
            this._e = enumerator;
            if (wrap) {
                this._el = new LookAheadEnumerator<Token>(enumerator);
                this._e = this._el;
                // we need both pointers to point to the lookahead
            }
            this._state = -1;
            this._t.SymbolId = -1;
            this._advanceCount = 0;
            this._skipped = new List<Token>();
        }
        public List<Token> Skipped {
            get {
                return this._skipped;
            }
        }
        public void SetLocation(int line, int column, long position) {
            this._line = line;
            this._column = column;
            this._position = position;
        }
        public void EnsureStarted() {
            if ((-1 == this._state)) {
                this.Advance();
            }
        }
        public ParserContext GetLookAhead() {
            if ((null == this._el)) {
                throw new NotSupportedException("This parser context does not support lookahead.");
            }
            ParserContext result = new ParserContext(this._el.LookAhead.GetEnumerator(), true);
            return result;
        }
        public Token Current {
            get {
                return this._t;
            }
        }
        public ParserContext GetLookAhead(bool start) {
            ParserContext result = this.GetLookAhead();
            if (start) {
                result.EnsureStarted();
            }
            return result;
        }
        public int AdvanceCount {
            get {
                return this._advanceCount;
            }
        }
        public void ResetAdvanceCount() {
            this._advanceCount = 0;
        }
        public int SymbolId {
            get {
                return this._t.SymbolId;
            }
        }
        public string Value {
            get {
                return this._t.Value;
            }
        }
        public int Line {
            get {
                return this._t.Line;
            }
        }
        public int Column {
            get {
                return this._t.Column;
            }
        }
        public long Position {
            get {
                return this._t.Position;
            }
        }
        public bool IsEnded {
            get {
                return (-2 == this._state);
            }
        }
        public bool Advance() {
            if ((false == this._e.MoveNext())) {
                this._t.SymbolId = -2;
                this._state = -2;
            }
            else {
                // sanity check. should never happen
                if ((int.MaxValue == this._advanceCount)) {
                    this._advanceCount = -1;
                }
                this._advanceCount = (this._advanceCount + 1);
                this._state = 0;
                this._t = this._e.Current;
                this._t.Line = (this._t.Line + this._line);
                this._t.Column = (this._t.Column + this._column);
                this._t.Position = (this._t.Position + this._position);
                if ((null != this._t.Skipped)) {
                    this._skipped.AddRange(this._t.Skipped);
                }
                return true;
            }
            return false;
        }
        public void Error(string message, int line, int column, long position) {
            throw new SyntaxException(string.Format((message + " at line {0}, column {1}, position"), line, column, position), line, column, position);
        }
        public void Error(string message) {
            this.Error(message, this.Line, this.Column, this.Position);
        }
        public void Dispose() {
            this._e.Dispose();
            this._state = -3;
        }
    }
    /// <summary>
    /// An enumerator that provides lookahead without advancing the cursor
    /// </summary>
    /// <typeparam name="T">The type to enumerate</typeparam>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Parsley", "0.1.2.0")]
    internal class LookAheadEnumerator<T> : object, IEnumerator<T>
     {
        private const int _Enumerating = 0;
        private const int _NotStarted = -2;
        private const int _Ended = -1;
        private const int _Disposed = -3;
        private IEnumerator<T> _inner;
        private int _state;
        // for the lookahead queue
        private const int _DefaultCapacity = 16;
        private const float _GrowthFactor = 0.9F;
        private T[] _queue;
        private int _queueHead;
        private int _queueCount;
        /// <summary>
        /// Creates a new instance. Once this is created, the inner/wrapped enumerator must not be touched.
        /// </summary>
        /// <param name="inner"></param>
        public LookAheadEnumerator(IEnumerator<T> inner) {
            this._inner = inner;
            this._state = LookAheadEnumerator<T>._NotStarted;
            this._queue = new T[LookAheadEnumerator<T>._DefaultCapacity];
            this._queueHead = 0;
            this._queueCount = 0;
        }
        /// <summary>
        /// Discards the lookahead and advances the cursor to the physical position.
        /// </summary>
        public void DiscardLookAhead() {
            for (
            ; (1 < this._queueCount); 
            ) {
                this._Dequeue();
            }
        }
        /// <summary>
        /// Retrieves the value under the cursor
        /// </summary>
        public T Current {
            get {
                if ((0 > this._state)) {
                    if ((LookAheadEnumerator<T>._NotStarted == this._state)) {
                        throw new InvalidOperationException("The cursor is before the start of the enumeration.");
                    }
                    if ((LookAheadEnumerator<T>._Ended == this._state)) {
                        throw new InvalidOperationException("The cursor is after the end of the enumeration.");
                    }
                    throw new ObjectDisposedException(typeof(LookAheadEnumerator<T>).Name);
                }
                return this._queue[this._queueHead];
            }
        }
        // legacy enum support (required)
        object System.Collections.IEnumerator.Current {
            get {
                return this.Current;
            }
        }
        internal int QueueCount {
            get {
                return this._queueCount;
            }
        }
        /// <summary>
        /// Attempts to peek the specified number of positions from the current position without advancing
        /// </summary>
        /// <param name="lookahead">The offset from the current position to peek at</param>
        /// <param name="value">The value returned</param>
        /// <returns>True if the peek could be satisfied, otherwise false</returns>
        public bool TryPeek(int lookahead, out T value) {
            if ((LookAheadEnumerator<T>._Disposed == this._state)) {
                throw new ObjectDisposedException(typeof(LookAheadEnumerator<T>).Name);
            }
            if ((0 > lookahead)) {
                throw new ArgumentOutOfRangeException("lookahead");
            }
            if ((LookAheadEnumerator<T>._Ended == this._state)) {
                value = default(T);
                return false;
            }
            if ((LookAheadEnumerator<T>._NotStarted == this._state)) {
                if ((0 == lookahead)) {
                    value = default(T);
                    return false;
                }
            }
            if ((lookahead < this._queueCount)) {
                value = this._queue[((lookahead + this._queueHead) 
                            % this._queue.Length)];
                return true;
            }
            lookahead = (lookahead - this._queueCount);
            value = default(T);
            for (
            ; ((0 <= lookahead) 
                        && this._inner.MoveNext()); 
            ) {
                value = this._inner.Current;
                this._Enqueue(value);
                lookahead = (lookahead - 1);
            }
            return (-1 == lookahead);
        }
        /// <summary>
        /// Peek the specified number of positions from the current position without advancing
        /// </summary>
        /// <param name="lookahead">The offset from the current position to peek at</param>
        /// <returns>The value at the specified position</returns>
        public T Peek(int lookahead) {
            T value;
            if ((false == this.TryPeek(lookahead, out value))) {
                throw new InvalidOperationException("There were not enough values in the enumeration to satisfy the request");
            }
            return value;
        }
        internal bool IsEnumerating {
            get {
                return (-1 < this._state);
            }
        }
        internal bool IsEnded {
            get {
                return (LookAheadEnumerator<T>._Ended == this._state);
            }
        }
        /// <summary>
        /// Retrieves a lookahead cursor from the current cursor that can be navigated without moving the main cursor
        /// </summary>
        public IEnumerable<T> LookAhead {
            get {
                if ((0 > this._state)) {
                    if ((this._state == LookAheadEnumerator<T>._NotStarted)) {
                        throw new InvalidOperationException("The cursor is before the start of the enumeration.");
                    }
                    if ((this._state == LookAheadEnumerator<T>._Ended)) {
                        throw new InvalidOperationException("The cursor is after the end of the enumeration.");
                    }
                    throw new ObjectDisposedException(typeof(LookAheadEnumerator<T>).Name);
                }
                return new LookAheadEnumeratorEnumerable<T>(this);
            }
        }
        /// <summary>
        /// Advances the cursor
        /// </summary>
        /// <returns>True if more input was read, otherwise false</returns>
        bool System.Collections.IEnumerator.MoveNext() {
            if ((0 > this._state)) {
                if ((LookAheadEnumerator<T>._Disposed == this._state)) {
                    throw new ObjectDisposedException(typeof(LookAheadEnumerator<T>).Name);
                }
                if ((LookAheadEnumerator<T>._Ended == this._state)) {
                    return false;
                }
                if ((LookAheadEnumerator<T>._NotStarted == this._state)) {
                    if ((0 < this._queueCount)) {
                        this._state = LookAheadEnumerator<T>._Enumerating;
                        return true;
                    }
                    if ((false == this._inner.MoveNext())) {
                        this._state = LookAheadEnumerator<T>._Ended;
                        return false;
                    }
                    this._Enqueue(this._inner.Current);
                    this._state = LookAheadEnumerator<T>._Enumerating;
                    return true;
                }
            }
            this._Dequeue();
            if ((0 == this._queueCount)) {
                if ((false == this._inner.MoveNext())) {
                    this._state = LookAheadEnumerator<T>._Ended;
                    return false;
                }
                this._Enqueue(this._inner.Current);
            }
            return true;
        }
        /// <summary>
        /// Resets the cursor, and clears the queue.
        /// </summary>
        void System.Collections.IEnumerator.Reset() {
            this._inner.Reset();
            if (((0 < this._queueCount) 
                        && (null == default(T)))) {
                System.Array.Clear(this._queue, this._queueHead, (this._queue.Length - this._queueHead));
                if (((this._queueHead + this._queueCount) 
                            >= this._queue.Length)) {
                    System.Array.Clear(this._queue, 0, (this._queueHead 
                                    + (this._queueCount % this._queue.Length)));
                }
            }
            this._queueHead = 0;
            this._queueCount = 0;
            this._state = LookAheadEnumerator<T>._NotStarted;
        }
        #region IDisposable Support
        /// <summary>
        /// Disposes of this instance
        /// </summary>
        void System.IDisposable.Dispose() {
            if ((false 
                        == (LookAheadEnumerator<T>._Disposed == this._state))) {
                this._inner.Dispose();
                this._state = LookAheadEnumerator<T>._Disposed;
            }
        }
        void _Enqueue(T item) {
            if ((this._queueCount == this._queue.Length)) {
                T[] arr = new T[((int)((this._queue.Length 
                            * (1 + LookAheadEnumerator<T>._GrowthFactor))))];
                if (((this._queueHead + this._queueCount) 
                            <= this._queue.Length)) {
                    System.Array.Copy(this._queue, arr, this._queueCount);
                    this._queueHead = 0;
                    arr[this._queueCount] = item;
                    this._queueCount = (this._queueCount + 1);
                    this._queue = arr;
                }
                else {
                    System.Array.Copy(this._queue, this._queueHead, arr, 0, (this._queue.Length - this._queueHead));
                    System.Array.Copy(this._queue, 0, arr, (this._queue.Length - this._queueHead), this._queueHead);
                    this._queueHead = 0;
                    arr[this._queueCount] = item;
                    this._queueCount = (this._queueCount + 1);
                    this._queue = arr;
                }
            }
            else {
                this._queue[((this._queueHead + this._queueCount) 
                            % this._queue.Length)] = item;
                this._queueCount = (this._queueCount + 1);
            }
        }
        T _Dequeue() {
            if ((0 == this._queueCount)) {
                throw new InvalidOperationException("The queue is empty");
            }
            T result = this._queue[this._queueHead];
            this._queue[this._queueHead] = default(T);
            this._queueHead = (this._queueHead + 1);
            this._queueHead = (this._queueHead % this._queue.Length);
            this._queueCount = (this._queueCount - 1);
            return result;
        }
        #endregion
    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Parsley", "0.1.2.0")]
    internal class LookAheadEnumeratorEnumerable<T> : object, IEnumerable<T>
     {
        private LookAheadEnumerator<T> _outer;
        public LookAheadEnumeratorEnumerable(LookAheadEnumerator<T> outer) {
            this._outer = outer;
        }
        public IEnumerator<T> GetEnumerator() {
            // for some reason VB was resolving new as AddressOf, so use this.
            LookAheadEnumeratorEnumerator<T> result = ((LookAheadEnumeratorEnumerator<T>)(System.Activator.CreateInstance(typeof(LookAheadEnumeratorEnumerator<T>), this._outer)));
            return result;
        }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() {
            return this.GetEnumerator();
        }
    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Parsley", "0.1.2.0")]
    internal class LookAheadEnumeratorEnumerator<T> : object, IEnumerator<T>
     {
        private const int _NotStarted = -2;
        private const int _Ended = -1;
        private const int _Disposed = -3;
        private LookAheadEnumerator<T> _outer;
        private int _index;
        private T _current;
        public LookAheadEnumeratorEnumerator(LookAheadEnumerator<T> outer) {
            this._outer = outer;
            if (this._outer.IsEnumerating) {
                this._current = this._outer.Current;
            }
            this._index = LookAheadEnumeratorEnumerator<T>._NotStarted;
        }
        public T Current {
            get {
                if ((0 > this._index)) {
                    if ((this._index == LookAheadEnumeratorEnumerator<T>._NotStarted)) {
                        throw new InvalidOperationException("The cursor is before the start of the enumeration.");
                    }
                    if ((this._index == LookAheadEnumeratorEnumerator<T>._Ended)) {
                        throw new InvalidOperationException("The cursor is after the end of the enumeration.");
                    }
                    throw new ObjectDisposedException(typeof(LookAheadEnumeratorEnumerator<T>).Name);
                }
                return this._current;
            }
        }
        object System.Collections.IEnumerator.Current {
            get {
                return this.Current;
            }
        }
        void System.IDisposable.Dispose() {
            this._index = LookAheadEnumeratorEnumerator<T>._Disposed;
        }
        bool System.Collections.IEnumerator.MoveNext() {
            T value;
            if ((0 > this._index)) {
                if ((this._index == LookAheadEnumeratorEnumerator<T>._Disposed)) {
                    throw new ObjectDisposedException(typeof(LookAheadEnumeratorEnumerator<T>).Name);
                }
                if ((this._index == LookAheadEnumeratorEnumerator<T>._Ended)) {
                    return false;
                }
                this._index = -1;
            }
            this._index = (this._index + 1);
            if ((false == this._outer.TryPeek(this._index, out value))) {
                this._index = LookAheadEnumeratorEnumerator<T>._Ended;
                return false;
            }
            this._current = value;
            return true;
        }
        void System.Collections.IEnumerator.Reset() {
            this._index = LookAheadEnumeratorEnumerator<T>._NotStarted;
        }
    }
}
