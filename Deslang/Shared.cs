//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Parsley {
    using System.CodeDom;
    using System.Reflection;
    
    internal partial class DeslangedExport {
        private static CodeCompileUnit _CompileUnit(string[] referencedAssemblies, CodeNamespace[] namespaces, CodeAttributeDeclaration[] assemblyCustomAttributes, CodeDirective[] startDirectives, CodeDirective[] endDirectives) {
            CodeCompileUnit result = new CodeCompileUnit();
            result.ReferencedAssemblies.AddRange(referencedAssemblies);
            result.Namespaces.AddRange(namespaces);
            result.AssemblyCustomAttributes.AddRange(assemblyCustomAttributes);
            result.StartDirectives.AddRange(startDirectives);
            result.EndDirectives.AddRange(endDirectives);
            return result;
        }
        private static CodeNamespace _Namespace(string name, CodeNamespaceImport[] imports, CodeTypeDeclaration[] types, CodeCommentStatement[] comments) {
            CodeNamespace result = new CodeNamespace();
            result.Name = name;
            result.Imports.AddRange(imports);
            result.Types.AddRange(types);
            result.Comments.AddRange(comments);
            return result;
        }
        private static CodeTypeDeclaration _TypeDeclaration(
                    string name, 
                    bool isClass, 
                    bool isEnum, 
                    bool isInterface, 
                    bool isStruct, 
                    bool isPartial, 
                    MemberAttributes attributes, 
                    TypeAttributes typeAttributes, 
                    CodeTypeParameter[] typeParameters, 
                    CodeTypeReference[] baseTypes, 
                    CodeTypeMember[] members, 
                    CodeCommentStatement[] comments, 
                    CodeAttributeDeclaration[] customAttributes, 
                    CodeDirective[] startDirectives, 
                    CodeDirective[] endDirectives, 
                    CodeLinePragma linePragma) {
            CodeTypeDeclaration result = new CodeTypeDeclaration(name);
            result.IsClass = isClass;
            result.IsEnum = isEnum;
            result.IsInterface = isInterface;
            result.IsStruct = isStruct;
            result.IsPartial = isPartial;
            result.Attributes = attributes;
            result.TypeAttributes = typeAttributes;
            result.TypeParameters.AddRange(typeParameters);
            result.BaseTypes.AddRange(baseTypes);
            result.Members.AddRange(members);
            result.Comments.AddRange(comments);
            result.CustomAttributes.AddRange(customAttributes);
            result.StartDirectives.AddRange(startDirectives);
            result.EndDirectives.AddRange(endDirectives);
            result.LinePragma = linePragma;
            return result;
        }
        private static CodeMemberField _MemberField(CodeTypeReference type, string name, CodeExpression initExpression, MemberAttributes attributes, CodeCommentStatement[] comments, CodeAttributeDeclaration[] customAttributes, CodeDirective[] startDirectives, CodeDirective[] endDirectives, CodeLinePragma linePragma) {
            CodeMemberField result = new CodeMemberField(type, name);
            result.InitExpression = initExpression;
            result.Attributes = attributes;
            result.Comments.AddRange(comments);
            result.CustomAttributes.AddRange(customAttributes);
            result.StartDirectives.AddRange(startDirectives);
            result.EndDirectives.AddRange(endDirectives);
            result.LinePragma = linePragma;
            return result;
        }
        private static CodeConstructor _Constructor(MemberAttributes attributes, CodeParameterDeclarationExpression[] parameters, CodeExpression[] chainedConstructorArgs, CodeExpression[] baseConstructorArgs, CodeStatement[] statements, CodeCommentStatement[] comments, CodeAttributeDeclaration[] customAttributes, CodeDirective[] startDirectives, CodeDirective[] endDirectives, CodeLinePragma linePragma) {
            CodeConstructor result = new CodeConstructor();
            result.Attributes = attributes;
            result.Parameters.AddRange(parameters);
            result.ChainedConstructorArgs.AddRange(chainedConstructorArgs);
            result.BaseConstructorArgs.AddRange(baseConstructorArgs);
            result.Statements.AddRange(statements);
            result.Comments.AddRange(comments);
            result.CustomAttributes.AddRange(customAttributes);
            result.StartDirectives.AddRange(startDirectives);
            result.EndDirectives.AddRange(endDirectives);
            result.LinePragma = linePragma;
            return result;
        }
        private static CodeMemberProperty _MemberProperty(CodeTypeReference type, string name, MemberAttributes attributes, CodeParameterDeclarationExpression[] parameters, CodeStatement[] getStatements, CodeStatement[] setStatements, CodeTypeReference[] implementationTypes, CodeTypeReference privateImplementationType, CodeCommentStatement[] comments, CodeAttributeDeclaration[] customAttributes, CodeDirective[] startDirectives, CodeDirective[] endDirectives, CodeLinePragma linePragma) {
            CodeMemberProperty result = new CodeMemberProperty();
            result.Type = type;
            result.Name = name;
            result.Attributes = attributes;
            result.Parameters.AddRange(parameters);
            result.GetStatements.AddRange(getStatements);
            result.SetStatements.AddRange(setStatements);
            result.ImplementationTypes.AddRange(implementationTypes);
            result.PrivateImplementationType = privateImplementationType;
            result.Comments.AddRange(comments);
            result.CustomAttributes.AddRange(customAttributes);
            result.StartDirectives.AddRange(startDirectives);
            result.EndDirectives.AddRange(endDirectives);
            result.LinePragma = linePragma;
            return result;
        }
        private static CodeMemberMethod _MemberMethod(CodeTypeReference returnType, string name, MemberAttributes attributes, CodeParameterDeclarationExpression[] parameters, CodeStatement[] statements, CodeTypeReference[] implementationTypes, CodeTypeReference privateImplementationType, CodeCommentStatement[] comments, CodeAttributeDeclaration[] customAttributes, CodeAttributeDeclaration[] returnTypeCustomAttributes, CodeDirective[] startDirectives, CodeDirective[] endDirectives, CodeLinePragma linePragma) {
            CodeMemberMethod result = new CodeMemberMethod();
            result.ReturnType = returnType;
            result.Name = name;
            result.Attributes = attributes;
            result.Parameters.AddRange(parameters);
            result.Statements.AddRange(statements);
            result.ImplementationTypes.AddRange(implementationTypes);
            result.PrivateImplementationType = privateImplementationType;
            result.Comments.AddRange(comments);
            result.CustomAttributes.AddRange(customAttributes);
            result.ReturnTypeCustomAttributes.AddRange(returnTypeCustomAttributes);
            result.StartDirectives.AddRange(startDirectives);
            result.EndDirectives.AddRange(endDirectives);
            result.LinePragma = linePragma;
            return result;
        }
        private static CodeTypeReference _TypeReference(string baseType, CodeTypeReferenceOptions options, CodeTypeReference[] typeArguments, CodeTypeReference arrayElementType, int arrayRank) {
            CodeTypeReference result = new CodeTypeReference(baseType, options);
            result.ArrayElementType = arrayElementType;
            result.ArrayRank = arrayRank;
            result.TypeArguments.AddRange(typeArguments);
            return result;
        }
        public static System.CodeDom.CodeCompileUnit ParseNode = DeslangedExport._CompileUnit(new string[0], new CodeNamespace[] {
                    DeslangedExport._Namespace("", new CodeNamespaceImport[] {
                                new CodeNamespaceImport("System.Collections.Generic"),
                                new CodeNamespaceImport("System.Text")}, new CodeTypeDeclaration[0], new CodeCommentStatement[0]),
                    DeslangedExport._Namespace("Parsley", new CodeNamespaceImport[0], new CodeTypeDeclaration[] {
                                DeslangedExport._TypeDeclaration("ParseNode", true, false, false, false, true, ((MemberAttributes)(0)), TypeAttributes.NotPublic, new CodeTypeParameter[0], new CodeTypeReference[0], new CodeTypeMember[] {
                                            DeslangedExport._MemberField(new CodeTypeReference(typeof(int)), "_symbolId", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            DeslangedExport._MemberField(new CodeTypeReference(typeof(string)), "_symbol", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            DeslangedExport._MemberField(new CodeTypeReference(typeof(string)), "_value", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            DeslangedExport._MemberField(new CodeTypeReference(typeof(int)), "_line", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            DeslangedExport._MemberField(new CodeTypeReference(typeof(int)), "_column", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            DeslangedExport._MemberField(new CodeTypeReference(typeof(long)), "_position", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            DeslangedExport._MemberField(new CodeTypeReference(new CodeTypeReference("ParseNode"), 1), "_children", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            DeslangedExport._Constructor((MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                        new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "symbolId"),
                                                        new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(string)), "symbol"),
                                                        new CodeParameterDeclarationExpression(new CodeTypeReference(new CodeTypeReference("ParseNode"), 1), "children"),
                                                        new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "line"),
                                                        new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "column"),
                                                        new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(long)), "position")}, new CodeExpression[0], new CodeExpression[0], new CodeStatement[] {
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_symbolId"), new CodeArgumentReferenceExpression("symbolId")),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_symbol"), new CodeArgumentReferenceExpression("symbol")),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_value"), new CodePrimitiveExpression(null)),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_children"), new CodeArgumentReferenceExpression("children")),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line"), new CodeArgumentReferenceExpression("line")),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), new CodeArgumentReferenceExpression("column")),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_position"), new CodeArgumentReferenceExpression("position"))}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            DeslangedExport._Constructor((MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                        new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "symbolId"),
                                                        new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(string)), "symbol"),
                                                        new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(string)), "value"),
                                                        new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "line"),
                                                        new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "column"),
                                                        new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(long)), "position")}, new CodeExpression[0], new CodeExpression[0], new CodeStatement[] {
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_symbolId"), new CodeArgumentReferenceExpression("symbolId")),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_symbol"), new CodeArgumentReferenceExpression("symbol")),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_value"), new CodeArgumentReferenceExpression("value")),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_children"), new CodePrimitiveExpression(null)),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line"), new CodeArgumentReferenceExpression("line")),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), new CodeArgumentReferenceExpression("column")),
                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_position"), new CodeArgumentReferenceExpression("position"))}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            DeslangedExport._MemberProperty(new CodeTypeReference(typeof(bool)), "IsNonTerminal", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                        new CodeMethodReturnStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(null), CodeBinaryOperatorType.IdentityInequality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_children")))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            DeslangedExport._MemberProperty(new CodeTypeReference(new CodeTypeReference("ParseNode"), 1), "Children", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                        new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_children"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            DeslangedExport._MemberProperty(new CodeTypeReference(typeof(int)), "SymbolId", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                        new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_symbolId"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            DeslangedExport._MemberProperty(new CodeTypeReference(typeof(string)), "Symbol", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                        new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_symbol"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            DeslangedExport._MemberProperty(new CodeTypeReference(typeof(string)), "Value", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                        new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_value"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            DeslangedExport._MemberProperty(new CodeTypeReference(typeof(int)), "Line", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                        new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            DeslangedExport._MemberProperty(new CodeTypeReference(typeof(int)), "Column", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                        new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            DeslangedExport._MemberProperty(new CodeTypeReference(typeof(long)), "Position", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                        new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_position"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            DeslangedExport._MemberMethod(new CodeTypeReference(typeof(string)), "ToString", (MemberAttributes.Override | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                        new CodeMethodReturnStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "ToString"), new CodeExpression[] {
                                                                        new CodePrimitiveExpression(null)}))}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            DeslangedExport._MemberMethod(new CodeTypeReference(typeof(string)), "ToString", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                        new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(string)), "format")}, new CodeStatement[] {
                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression("t"), CodeBinaryOperatorType.IdentityEquality, new CodeArgumentReferenceExpression("format")), new CodeStatement[] {
                                                                    new CodeVariableDeclarationStatement(new CodeTypeReference("StringBuilder"), "sb", new CodeObjectCreateExpression(new CodeTypeReference("StringBuilder"), new CodeExpression[0])),
                                                                    new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Parsley.ParseNode")), "_AppendTree"), new CodeExpression[] {
                                                                                    new CodeThisReferenceExpression(),
                                                                                    new CodeVariableReferenceExpression("sb")})),
                                                                    new CodeMethodReturnStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeVariableReferenceExpression("sb"), "ToString"), new CodeExpression[0]))}, new CodeStatement[0]),
                                                        new CodeConditionStatement(new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "IsNonTerminal"), new CodeStatement[] {
                                                                    new CodeMethodReturnStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(string))), "Concat"), new CodeExpression[] {
                                                                                    new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Symbol"),
                                                                                    new CodePrimitiveExpression(": Count = "),
                                                                                    new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_children"), "Length"), "ToString"), new CodeExpression[0])}))}, new CodeStatement[0]),
                                                        new CodeMethodReturnStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(string))), "Concat"), new CodeExpression[] {
                                                                        new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Symbol"),
                                                                        new CodePrimitiveExpression(": "),
                                                                        new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Value")}))}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                            DeslangedExport._MemberMethod(new CodeTypeReference(typeof(void)), "_AppendTree", MemberAttributes.Static, new CodeParameterDeclarationExpression[] {
                                                        new CodeParameterDeclarationExpression(new CodeTypeReference("ParseNode"), "node"),
                                                        new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(System.Text.StringBuilder)), "builder")}, new CodeStatement[] {
                                                        new CodeCommentStatement("adapted from https://stackoverflow.com/questions/1649027/how-do-i-print-out-a-tre" +
                                                                "e-structure"),
                                                        new CodeVariableDeclarationStatement(new CodeTypeReference("List`1", new CodeTypeReference[] {
                                                                        new CodeTypeReference("ParseNode", CodeTypeReferenceOptions.GenericTypeParameter)}), "firstStack", new CodeObjectCreateExpression(new CodeTypeReference("List`1", new CodeTypeReference[] {
                                                                            new CodeTypeReference("ParseNode", CodeTypeReferenceOptions.GenericTypeParameter)}), new CodeExpression[0])),
                                                        new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeVariableReferenceExpression("firstStack"), "Add"), new CodeExpression[] {
                                                                        new CodeArgumentReferenceExpression("node")})),
                                                        new CodeVariableDeclarationStatement(new CodeTypeReference("List`1", new CodeTypeReference[] {
                                                                        DeslangedExport._TypeReference("List`1", CodeTypeReferenceOptions.GenericTypeParameter, new CodeTypeReference[] {
                                                                                    new CodeTypeReference("ParseNode", CodeTypeReferenceOptions.GenericTypeParameter)}, null, 0)}), "childListStack", new CodeObjectCreateExpression(new CodeTypeReference("List`1", new CodeTypeReference[] {
                                                                            DeslangedExport._TypeReference("List`1", CodeTypeReferenceOptions.GenericTypeParameter, new CodeTypeReference[] {
                                                                                        new CodeTypeReference("ParseNode", CodeTypeReferenceOptions.GenericTypeParameter)}, null, 0)}), new CodeExpression[0])),
                                                        new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeVariableReferenceExpression("childListStack"), "Add"), new CodeExpression[] {
                                                                        new CodeVariableReferenceExpression("firstStack")})),
                                                        new CodeIterationStatement(new CodeSnippetStatement(""), new CodeBinaryOperatorExpression(new CodePropertyReferenceExpression(new CodeVariableReferenceExpression("childListStack"), "Count"), CodeBinaryOperatorType.GreaterThan, new CodePrimitiveExpression(0)), new CodeSnippetStatement(""), new CodeStatement[] {
                                                                    new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(System.Collections.Generic.List<>)), "childStack", new CodeIndexerExpression(new CodeVariableReferenceExpression("childListStack"), new CodeExpression[] {
                                                                                    new CodeBinaryOperatorExpression(new CodePropertyReferenceExpression(new CodeVariableReferenceExpression("childListStack"), "Count"), CodeBinaryOperatorType.Subtract, new CodePrimitiveExpression(1))})),
                                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePropertyReferenceExpression(new CodeVariableReferenceExpression("childStack"), "Count"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(0)), new CodeStatement[] {
                                                                                new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeVariableReferenceExpression("childListStack"), "RemoveAt"), new CodeExpression[] {
                                                                                                new CodeBinaryOperatorExpression(new CodePropertyReferenceExpression(new CodeVariableReferenceExpression("childListStack"), "Count"), CodeBinaryOperatorType.Subtract, new CodePrimitiveExpression(1))}))}, new CodeStatement[] {
                                                                                new CodeAssignStatement(new CodeArgumentReferenceExpression("node"), new CodeIndexerExpression(new CodeVariableReferenceExpression("childStack"), new CodeExpression[] {
                                                                                                new CodePrimitiveExpression(0)})),
                                                                                new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeVariableReferenceExpression("childStack"), "RemoveAt"), new CodeExpression[] {
                                                                                                new CodePrimitiveExpression(0)})),
                                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(string)), "indent", new CodePrimitiveExpression("")),
                                                                                new CodeIterationStatement(new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "i", new CodePrimitiveExpression(0)), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.LessThan, new CodeBinaryOperatorExpression(new CodePropertyReferenceExpression(new CodeVariableReferenceExpression("childListStack"), "Count"), CodeBinaryOperatorType.Subtract, new CodePrimitiveExpression(1))), new CodeAssignStatement(new CodeVariableReferenceExpression("i"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))), new CodeStatement[] {
                                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.LessThan, new CodePropertyReferenceExpression(new CodeIndexerExpression(new CodeVariableReferenceExpression("childListStack"), new CodeExpression[] {
                                                                                                                    new CodeVariableReferenceExpression("i")}), "Count")), new CodeStatement[] {
                                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("indent"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("indent"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression("|  ")))}, new CodeStatement[] {
                                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("indent"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("indent"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression("   ")))})}),
                                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(string)), "s", new CodePropertyReferenceExpression(new CodeArgumentReferenceExpression("node"), "Symbol")),
                                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(string)), "ns", new CodePrimitiveExpression("")),
                                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(null), CodeBinaryOperatorType.IdentityInequality, new CodePropertyReferenceExpression(new CodeArgumentReferenceExpression("node"), "Value")), new CodeStatement[] {
                                                                                            new CodeAssignStatement(new CodeVariableReferenceExpression("ns"), new CodePropertyReferenceExpression(new CodeArgumentReferenceExpression("node"), "Value"))}, new CodeStatement[0]),
                                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(string)), "ss", new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(string))), "Concat"), new CodeExpression[] {
                                                                                                new CodeVariableReferenceExpression("indent"),
                                                                                                new CodePrimitiveExpression("+- "),
                                                                                                new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(string))), "Concat"), new CodeExpression[] {
                                                                                                            new CodeVariableReferenceExpression("s"),
                                                                                                            new CodePrimitiveExpression(" "),
                                                                                                            new CodeVariableReferenceExpression("ns")})})),
                                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("ss"), new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeVariableReferenceExpression("ss"), "TrimEnd"), new CodeExpression[0])),
                                                                                new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeArgumentReferenceExpression("builder"), "Append"), new CodeExpression[] {
                                                                                                new CodeVariableReferenceExpression("ss")})),
                                                                                new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeArgumentReferenceExpression("builder"), "AppendLine"), new CodeExpression[0])),
                                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePropertyReferenceExpression(new CodeArgumentReferenceExpression("node"), "IsNonTerminal"), CodeBinaryOperatorType.BooleanAnd, new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.LessThan, new CodePropertyReferenceExpression(new CodePropertyReferenceExpression(new CodeArgumentReferenceExpression("node"), "Children"), "Length"))), new CodeStatement[] {
                                                                                            new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeVariableReferenceExpression("childListStack"), "Add"), new CodeExpression[] {
                                                                                                            new CodeObjectCreateExpression(new CodeTypeReference("List`1", new CodeTypeReference[] {
                                                                                                                            new CodeTypeReference("ParseNode", CodeTypeReferenceOptions.GenericTypeParameter)}), new CodeExpression[] {
                                                                                                                        new CodePropertyReferenceExpression(new CodeArgumentReferenceExpression("node"), "Children")})}))}, new CodeStatement[0])})})}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0])}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0]);
    }
}
