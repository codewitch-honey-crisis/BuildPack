//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Glory {
    using System.CodeDom;
    using System.Reflection;
    
    internal partial class Deslanged {
        private static CodeCompileUnit _CompileUnit(string[] referencedAssemblies, CodeNamespace[] namespaces, CodeAttributeDeclaration[] assemblyCustomAttributes, CodeDirective[] startDirectives, CodeDirective[] endDirectives) {
            CodeCompileUnit result = new CodeCompileUnit();
            result.ReferencedAssemblies.AddRange(referencedAssemblies);
            result.Namespaces.AddRange(namespaces);
            result.AssemblyCustomAttributes.AddRange(assemblyCustomAttributes);
            result.StartDirectives.AddRange(startDirectives);
            result.EndDirectives.AddRange(endDirectives);
            return result;
        }
        private static CodeNamespace _Namespace(string name, CodeNamespaceImport[] imports, CodeTypeDeclaration[] types, CodeCommentStatement[] comments) {
            CodeNamespace result = new CodeNamespace();
            result.Name = name;
            result.Imports.AddRange(imports);
            result.Types.AddRange(types);
            result.Comments.AddRange(comments);
            return result;
        }
        private static CodeTypeDeclaration _TypeDeclaration(
                    string name, 
                    bool isClass, 
                    bool isEnum, 
                    bool isInterface, 
                    bool isStruct, 
                    bool isPartial, 
                    MemberAttributes attributes, 
                    TypeAttributes typeAttributes, 
                    CodeTypeParameter[] typeParameters, 
                    CodeTypeReference[] baseTypes, 
                    CodeTypeMember[] members, 
                    CodeCommentStatement[] comments, 
                    CodeAttributeDeclaration[] customAttributes, 
                    CodeDirective[] startDirectives, 
                    CodeDirective[] endDirectives, 
                    CodeLinePragma linePragma) {
            CodeTypeDeclaration result = new CodeTypeDeclaration(name);
            result.IsClass = isClass;
            result.IsEnum = isEnum;
            result.IsInterface = isInterface;
            result.IsStruct = isStruct;
            result.IsPartial = isPartial;
            result.Attributes = attributes;
            result.TypeAttributes = typeAttributes;
            result.TypeParameters.AddRange(typeParameters);
            result.BaseTypes.AddRange(baseTypes);
            result.Members.AddRange(members);
            result.Comments.AddRange(comments);
            result.CustomAttributes.AddRange(customAttributes);
            result.StartDirectives.AddRange(startDirectives);
            result.EndDirectives.AddRange(endDirectives);
            result.LinePragma = linePragma;
            return result;
        }
        private static CodeMemberField _MemberField(CodeTypeReference type, string name, CodeExpression initExpression, MemberAttributes attributes, CodeCommentStatement[] comments, CodeAttributeDeclaration[] customAttributes, CodeDirective[] startDirectives, CodeDirective[] endDirectives, CodeLinePragma linePragma) {
            CodeMemberField result = new CodeMemberField(type, name);
            result.InitExpression = initExpression;
            result.Attributes = attributes;
            result.Comments.AddRange(comments);
            result.CustomAttributes.AddRange(customAttributes);
            result.StartDirectives.AddRange(startDirectives);
            result.EndDirectives.AddRange(endDirectives);
            result.LinePragma = linePragma;
            return result;
        }
        private static CodeConstructor _Constructor(MemberAttributes attributes, CodeParameterDeclarationExpression[] parameters, CodeExpression[] chainedConstructorArgs, CodeExpression[] baseConstructorArgs, CodeStatement[] statements, CodeCommentStatement[] comments, CodeAttributeDeclaration[] customAttributes, CodeDirective[] startDirectives, CodeDirective[] endDirectives, CodeLinePragma linePragma) {
            CodeConstructor result = new CodeConstructor();
            result.Attributes = attributes;
            result.Parameters.AddRange(parameters);
            result.ChainedConstructorArgs.AddRange(chainedConstructorArgs);
            result.BaseConstructorArgs.AddRange(baseConstructorArgs);
            result.Statements.AddRange(statements);
            result.Comments.AddRange(comments);
            result.CustomAttributes.AddRange(customAttributes);
            result.StartDirectives.AddRange(startDirectives);
            result.EndDirectives.AddRange(endDirectives);
            result.LinePragma = linePragma;
            return result;
        }
        private static CodeMemberProperty _MemberProperty(CodeTypeReference type, string name, MemberAttributes attributes, CodeParameterDeclarationExpression[] parameters, CodeStatement[] getStatements, CodeStatement[] setStatements, CodeTypeReference[] implementationTypes, CodeTypeReference privateImplementationType, CodeCommentStatement[] comments, CodeAttributeDeclaration[] customAttributes, CodeDirective[] startDirectives, CodeDirective[] endDirectives, CodeLinePragma linePragma) {
            CodeMemberProperty result = new CodeMemberProperty();
            result.Type = type;
            result.Name = name;
            result.Attributes = attributes;
            result.Parameters.AddRange(parameters);
            result.GetStatements.AddRange(getStatements);
            result.SetStatements.AddRange(setStatements);
            result.ImplementationTypes.AddRange(implementationTypes);
            result.PrivateImplementationType = privateImplementationType;
            result.Comments.AddRange(comments);
            result.CustomAttributes.AddRange(customAttributes);
            result.StartDirectives.AddRange(startDirectives);
            result.EndDirectives.AddRange(endDirectives);
            result.LinePragma = linePragma;
            return result;
        }
        private static CodeMemberMethod _MemberMethod(CodeTypeReference returnType, string name, MemberAttributes attributes, CodeParameterDeclarationExpression[] parameters, CodeStatement[] statements, CodeTypeReference[] implementationTypes, CodeTypeReference privateImplementationType, CodeCommentStatement[] comments, CodeAttributeDeclaration[] customAttributes, CodeAttributeDeclaration[] returnTypeCustomAttributes, CodeDirective[] startDirectives, CodeDirective[] endDirectives, CodeLinePragma linePragma) {
            CodeMemberMethod result = new CodeMemberMethod();
            result.ReturnType = returnType;
            result.Name = name;
            result.Attributes = attributes;
            result.Parameters.AddRange(parameters);
            result.Statements.AddRange(statements);
            result.ImplementationTypes.AddRange(implementationTypes);
            result.PrivateImplementationType = privateImplementationType;
            result.Comments.AddRange(comments);
            result.CustomAttributes.AddRange(customAttributes);
            result.ReturnTypeCustomAttributes.AddRange(returnTypeCustomAttributes);
            result.StartDirectives.AddRange(startDirectives);
            result.EndDirectives.AddRange(endDirectives);
            result.LinePragma = linePragma;
            return result;
        }
        public static System.CodeDom.CodeCompileUnit GlrTableParser {
            get {
                return Deslanged._CompileUnit(new string[] {
                            "System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"}, new CodeNamespace[] {
                            Deslanged._Namespace("", new CodeNamespaceImport[] {
                                        new CodeNamespaceImport("System"),
                                        new CodeNamespaceImport("System.Collections.Generic")}, new CodeTypeDeclaration[0], new CodeCommentStatement[0]),
                            Deslanged._Namespace("Glory", new CodeNamespaceImport[0], new CodeTypeDeclaration[] {
                                        Deslanged._TypeDeclaration("GlrTableParser", true, false, false, false, false, (MemberAttributes.Final | MemberAttributes. Private), TypeAttributes.NotPublic, new CodeTypeParameter[0], new CodeTypeReference[0], new CodeTypeMember[] {
                                                    Deslanged._MemberField(new CodeTypeReference(new CodeTypeReference(new CodeTypeReference(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), 1), 1), 1), "_parseTable", null, ((MemberAttributes)(0)), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference("List`1", new CodeTypeReference[] {
                                                                    new CodeTypeReference("GlrWorker")}), "_workers", null, ((MemberAttributes)(0)), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference("GlrWorker"), "_worker", null, ((MemberAttributes)(0)), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_workerIndex", null, ((MemberAttributes)(0)), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference("LookAheadEnumerator"), "_tokenEnum", null, ((MemberAttributes)(0)), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(new CodeTypeReference(typeof(string)), 1), "_symbolTable", null, ((MemberAttributes)(0)), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(new CodeTypeReference(new CodeTypeReference("ParseAttribute"), 1), 1), "_attributes", null, ((MemberAttributes)(0)), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), "_errorSentinels", null, ((MemberAttributes)(0)), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(int)), "NextWorkerId", null, MemberAttributes.FamilyAndAssembly, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_eosId", null, ((MemberAttributes)(0)), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_errorId", null, ((MemberAttributes)(0)), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_maxErrorCount", null, ((MemberAttributes)(0)), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._Constructor((MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(new CodeTypeReference(new CodeTypeReference(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), 1), 1), 1), "parseTable"),
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(new CodeTypeReference(typeof(string)), 1), "symbolTable"),
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(new CodeTypeReference(new CodeTypeReference("ParseAttribute"), 1), 1), "attributes"),
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), "errorSentinels"),
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference("IEnumerable`1", new CodeTypeReference[] {
                                                                                new CodeTypeReference("Token")}), "tokenizer")}, new CodeExpression[] {
                                                                new CodeArgumentReferenceExpression("parseTable"),
                                                                new CodeArgumentReferenceExpression("symbolTable"),
                                                                new CodeArgumentReferenceExpression("attributes"),
                                                                new CodeArgumentReferenceExpression("errorSentinels"),
                                                                new CodeArgumentReferenceExpression("tokenizer"),
                                                                new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(int))), "MaxValue")}, new CodeExpression[0], new CodeStatement[0], new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._Constructor((MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(new CodeTypeReference(new CodeTypeReference(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), 1), 1), 1), "parseTable"),
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(new CodeTypeReference(typeof(string)), 1), "symbolTable"),
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(new CodeTypeReference(new CodeTypeReference("ParseAttribute"), 1), 1), "attributes"),
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), "errorSentinels"),
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference("IEnumerable`1", new CodeTypeReference[] {
                                                                                new CodeTypeReference("Token")}), "tokenizer"),
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "maxErrorCount")}, new CodeExpression[0], new CodeExpression[0], new CodeStatement[] {
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_parseTable"), new CodeArgumentReferenceExpression("parseTable")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_symbolTable"), new CodeArgumentReferenceExpression("symbolTable")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_attributes"), new CodeArgumentReferenceExpression("attributes")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_errorSentinels"), new CodeArgumentReferenceExpression("errorSentinels")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_eosId"), new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(System.Array))), "IndexOf"), new CodeExpression[] {
                                                                                new CodeArgumentReferenceExpression("symbolTable"),
                                                                                new CodePrimitiveExpression("#EOS")})),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.GreaterThan, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_eosId")), new CodeStatement[] {
                                                                            new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("ArgumentException"), new CodeExpression[] {
                                                                                            new CodePrimitiveExpression("Error in symbol table"),
                                                                                            new CodePrimitiveExpression("symbolTable")}))}, new CodeStatement[0]),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_errorId"), new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(System.Array))), "IndexOf"), new CodeExpression[] {
                                                                                new CodeArgumentReferenceExpression("symbolTable"),
                                                                                new CodePrimitiveExpression("#ERROR")})),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.GreaterThan, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_errorId")), new CodeStatement[] {
                                                                            new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("ArgumentException"), new CodeExpression[] {
                                                                                            new CodePrimitiveExpression("Error in symbol table"),
                                                                                            new CodePrimitiveExpression("symbolTable")}))}, new CodeStatement[0]),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_tokenEnum"), new CodeObjectCreateExpression(new CodeTypeReference("LookAheadEnumerator"), new CodeExpression[] {
                                                                                new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeArgumentReferenceExpression("tokenizer"), "GetEnumerator"), new CodeExpression[0])})),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_maxErrorCount"), new CodeArgumentReferenceExpression("maxErrorCount")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "NextWorkerId"), new CodePrimitiveExpression(1)),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_workerIndex"), new CodePrimitiveExpression(0)),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_workers"), new CodeObjectCreateExpression(new CodeTypeReference("List`1", new CodeTypeReference[] {
                                                                                    new CodeTypeReference("GlrWorker")}), new CodeExpression[] {
                                                                                new CodePrimitiveExpression(4)})),
                                                                new CodeConditionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_tokenEnum"), "MoveNext"), new CodeExpression[0]), new CodeStatement[] {
                                                                            new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_workers"), "Add"), new CodeExpression[] {
                                                                                            new CodeObjectCreateExpression(new CodeTypeReference("GlrWorker"), new CodeExpression[] {
                                                                                                        new CodeThisReferenceExpression(),
                                                                                                        new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "NextWorkerId"),
                                                                                                        new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_parseTable"),
                                                                                                        new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_errorId"),
                                                                                                        new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_eosId"),
                                                                                                        new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_errorSentinels"),
                                                                                                        new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_workers"),
                                                                                                        new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_tokenEnum")})})),
                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "NextWorkerId"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "NextWorkerId"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1)))}, new CodeStatement[0])}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberProperty(new CodeTypeReference(typeof(int)), "TreeId", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_worker"), "Id"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberProperty(new CodeTypeReference("LRNodeType"), "NodeType", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeConditionStatement(new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_worker"), "HasErrors"), new CodeStatement[] {
                                                                            new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LRNodeType")), "Error"))}, new CodeStatement[0]),
                                                                new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_worker"), "NodeType"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberProperty(new CodeTypeReference(typeof(int)), "Line", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_worker"), "CurrentToken"), "Line"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberProperty(new CodeTypeReference(typeof(int)), "Column", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_worker"), "CurrentToken"), "Column"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberProperty(new CodeTypeReference(typeof(long)), "Position", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_worker"), "CurrentToken"), "Position"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberProperty(new CodeTypeReference(typeof(int)), "SymbolId", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference("LRNodeType"), "n", new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "NodeType")),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LRNodeType")), "Shift"), CodeBinaryOperatorType.ValueEquality, new CodeVariableReferenceExpression("n")), new CodeStatement[] {
                                                                            new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_worker"), "CurrentToken"), "SymbolId"))}, new CodeStatement[0]),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LRNodeType")), "Reduce"), CodeBinaryOperatorType.ValueEquality, new CodeVariableReferenceExpression("n")), new CodeStatement[] {
                                                                            new CodeMethodReturnStatement(new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_worker"), "RuleDefinition"), new CodeExpression[] {
                                                                                            new CodePrimitiveExpression(0)}))}, new CodeStatement[0]),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LRNodeType")), "Error"), CodeBinaryOperatorType.ValueEquality, new CodeVariableReferenceExpression("n")), new CodeStatement[] {
                                                                            new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_errorId"))}, new CodeStatement[0]),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LRNodeType")), "EndDocument"), CodeBinaryOperatorType.ValueEquality, new CodeVariableReferenceExpression("n")), new CodeStatement[] {
                                                                            new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_eosId"))}, new CodeStatement[0]),
                                                                new CodeMethodReturnStatement(new CodePrimitiveExpression(-1))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberProperty(new CodeTypeReference(new CodeTypeReference("ParseAttribute"), 1), "Attributes", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "sid", new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "SymbolId")),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(-1), CodeBinaryOperatorType.LessThan, new CodeVariableReferenceExpression("sid")), CodeBinaryOperatorType.BooleanAnd, new CodeBinaryOperatorExpression(new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_attributes"), "Length"), CodeBinaryOperatorType.GreaterThan, new CodeVariableReferenceExpression("sid"))), new CodeStatement[] {
                                                                            new CodeMethodReturnStatement(new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_attributes"), new CodeExpression[] {
                                                                                            new CodeVariableReferenceExpression("sid")}))}, new CodeStatement[0]),
                                                                new CodeMethodReturnStatement(new CodePrimitiveExpression(null))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberProperty(new CodeTypeReference(new CodeTypeReference(typeof(string)), 1), "RuleDefinition", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LRNodeType")), "Reduce"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_worker"), "NodeType"))), new CodeStatement[] {
                                                                            new CodeMethodReturnStatement(new CodePrimitiveExpression(null))}, new CodeStatement[0]),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(new CodeTypeReference(typeof(string)), 1), "result", new CodeArrayCreateExpression(new CodeTypeReference(new CodeTypeReference(typeof(string)), 1), new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_worker"), "RuleDefinition"), "Length"))),
                                                                new CodeIterationStatement(new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "i", new CodePrimitiveExpression(0)), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.LessThan, new CodePropertyReferenceExpression(new CodeVariableReferenceExpression("result"), "Length")), new CodeAssignStatement(new CodeVariableReferenceExpression("i"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))), new CodeStatement[] {
                                                                            new CodeAssignStatement(new CodeArrayIndexerExpression(new CodeVariableReferenceExpression("result"), new CodeExpression[] {
                                                                                            new CodeVariableReferenceExpression("i")}), new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_symbolTable"), new CodeExpression[] {
                                                                                            new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_worker"), "RuleDefinition"), new CodeExpression[] {
                                                                                                        new CodeVariableReferenceExpression("i")})}))}),
                                                                new CodeMethodReturnStatement(new CodeVariableReferenceExpression("result"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberProperty(new CodeTypeReference(typeof(string)), "Rule", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(new CodeTypeReference(typeof(string)), 1), "def", new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "RuleDefinition")),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(null), CodeBinaryOperatorType.IdentityEquality, new CodeVariableReferenceExpression("def")), new CodeStatement[] {
                                                                            new CodeMethodReturnStatement(new CodePrimitiveExpression(null))}, new CodeStatement[0]),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(string)), "result", new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(string))), "Concat"), new CodeExpression[] {
                                                                                new CodeArrayIndexerExpression(new CodeVariableReferenceExpression("def"), new CodeExpression[] {
                                                                                            new CodePrimitiveExpression(0)}),
                                                                                new CodePrimitiveExpression(" ->")})),
                                                                new CodeIterationStatement(new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "i", new CodePrimitiveExpression(1)), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.LessThan, new CodePropertyReferenceExpression(new CodeVariableReferenceExpression("def"), "Length")), new CodeAssignStatement(new CodeVariableReferenceExpression("i"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))), new CodeStatement[] {
                                                                            new CodeAssignStatement(new CodeVariableReferenceExpression("result"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("result"), CodeBinaryOperatorType.Add, new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(string))), "Concat"), new CodeExpression[] {
                                                                                                new CodePrimitiveExpression(" "),
                                                                                                new CodeArrayIndexerExpression(new CodeVariableReferenceExpression("def"), new CodeExpression[] {
                                                                                                            new CodeVariableReferenceExpression("i")})})))}),
                                                                new CodeMethodReturnStatement(new CodeVariableReferenceExpression("result"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberProperty(new CodeTypeReference(typeof(string)), "Symbol", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "sid", new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "SymbolId")),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.GreaterThan, new CodeVariableReferenceExpression("sid")), new CodeStatement[] {
                                                                            new CodeMethodReturnStatement(new CodePrimitiveExpression(null))}, new CodeStatement[0]),
                                                                new CodeMethodReturnStatement(new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_symbolTable"), new CodeExpression[] {
                                                                                new CodeVariableReferenceExpression("sid")}))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberProperty(new CodeTypeReference(typeof(string)), "Value", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeMethodReturnStatement(new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_worker"), "Value"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberMethod(new CodeTypeReference(typeof(bool)), "Read", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.ValueEquality, new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_workers"), "Count")), new CodeStatement[] {
                                                                            new CodeMethodReturnStatement(new CodePrimitiveExpression(false))}, new CodeStatement[0]),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_workerIndex"), new CodeBinaryOperatorExpression(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_workerIndex"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1)), CodeBinaryOperatorType.Modulus, new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_workers"), "Count"))),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_worker"), new CodeIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_workers"), new CodeExpression[] {
                                                                                new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_workerIndex")})),
                                                                new CodeIterationStatement(new CodeSnippetStatement(""), new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_worker"), "Read"), new CodeExpression[0])), new CodeSnippetStatement(""), new CodeStatement[] {
                                                                            new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_workers"), "RemoveAt"), new CodeExpression[] {
                                                                                            new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_workerIndex")})),
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_workerIndex"), CodeBinaryOperatorType.ValueEquality, new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_workers"), "Count")), new CodeStatement[] {
                                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_workerIndex"), new CodePrimitiveExpression(0))}, new CodeStatement[0]),
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.ValueEquality, new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_workers"), "Count")), new CodeStatement[] {
                                                                                        new CodeMethodReturnStatement(new CodePrimitiveExpression(false))}, new CodeStatement[0]),
                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_worker"), new CodeIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_workers"), new CodeExpression[] {
                                                                                            new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_workerIndex")}))}),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "min", new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(int))), "MaxValue")),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "ic", new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_workers"), "Count")),
                                                                new CodeIterationStatement(new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "i", new CodePrimitiveExpression(0)), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.LessThan, new CodeVariableReferenceExpression("ic")), new CodeAssignStatement(new CodeVariableReferenceExpression("i"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))), new CodeStatement[] {
                                                                            new CodeVariableDeclarationStatement(new CodeTypeReference("GlrWorker"), "w", new CodeIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_workers"), new CodeExpression[] {
                                                                                            new CodeVariableReferenceExpression("i")})),
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.LessThan, new CodeVariableReferenceExpression("i")), CodeBinaryOperatorType.BooleanAnd, new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeVariableReferenceExpression("w"), "ErrorCount"), CodeBinaryOperatorType.GreaterThan, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_maxErrorCount"))), new CodeStatement[] {
                                                                                        new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_workers"), "RemoveAt"), new CodeExpression[] {
                                                                                                        new CodeVariableReferenceExpression("i")})),
                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("i"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.Subtract, new CodePrimitiveExpression(1))),
                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("ic"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("ic"), CodeBinaryOperatorType.Subtract, new CodePrimitiveExpression(1)))}, new CodeStatement[0]),
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("min"), CodeBinaryOperatorType.GreaterThan, new CodeFieldReferenceExpression(new CodeVariableReferenceExpression("w"), "Index")), new CodeStatement[] {
                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("min"), new CodeFieldReferenceExpression(new CodeVariableReferenceExpression("w"), "Index"))}, new CodeStatement[0]),
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.ValueEquality, new CodeVariableReferenceExpression("min")), new CodeStatement[] {
                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("i"), new CodeVariableReferenceExpression("ic"))}, new CodeStatement[0])}),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "j", new CodeVariableReferenceExpression("min")),
                                                                new CodeIterationStatement(new CodeSnippetStatement(""), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("j"), CodeBinaryOperatorType.GreaterThan, new CodePrimitiveExpression(0)), new CodeSnippetStatement(""), new CodeStatement[] {
                                                                            new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_tokenEnum"), "MoveNext"), new CodeExpression[0])),
                                                                            new CodeAssignStatement(new CodeVariableReferenceExpression("j"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("j"), CodeBinaryOperatorType.Subtract, new CodePrimitiveExpression(1)))}),
                                                                new CodeIterationStatement(new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "i", new CodePrimitiveExpression(0)), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.LessThan, new CodeVariableReferenceExpression("ic")), new CodeAssignStatement(new CodeVariableReferenceExpression("i"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))), new CodeStatement[] {
                                                                            new CodeVariableDeclarationStatement(new CodeTypeReference("GlrWorker"), "w", new CodeIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_workers"), new CodeExpression[] {
                                                                                            new CodeVariableReferenceExpression("i")})),
                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeVariableReferenceExpression("w"), "Index"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeVariableReferenceExpression("w"), "Index"), CodeBinaryOperatorType.Subtract, new CodeVariableReferenceExpression("min")))}),
                                                                new CodeMethodReturnStatement(new CodePrimitiveExpression(true))}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberMethod(new CodeTypeReference(new CodeTypeReference("ParseNode"), 1), "ParseReductions", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeMethodReturnStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "ParseReductions"), new CodeExpression[] {
                                                                                new CodePrimitiveExpression(false),
                                                                                new CodePrimitiveExpression(true)}))}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberMethod(new CodeTypeReference(new CodeTypeReference("ParseNode"), 1), "ParseReductions", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(bool)), "trim"),
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(bool)), "transform")}, new CodeStatement[] {
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference("Dictionary`2", new CodeTypeReference[] {
                                                                                new CodeTypeReference(typeof(int)),
                                                                                new CodeTypeReference("Stack`1", new CodeTypeReference[] {
                                                                                            new CodeTypeReference("ParseNode")})}), "map", new CodeObjectCreateExpression(new CodeTypeReference("Dictionary`2", new CodeTypeReference[] {
                                                                                    new CodeTypeReference(typeof(int)),
                                                                                    new CodeTypeReference("Stack`1", new CodeTypeReference[] {
                                                                                                new CodeTypeReference("ParseNode")})}), new CodeExpression[0])),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "oldId", new CodePrimitiveExpression(0)),
                                                                new CodeIterationStatement(new CodeSnippetStatement(""), new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "Read"), new CodeExpression[0]), new CodeSnippetStatement(""), new CodeStatement[] {
                                                                            new CodeVariableDeclarationStatement(new CodeTypeReference("Stack`1", new CodeTypeReference[] {
                                                                                            new CodeTypeReference("ParseNode")}), "rs", null),
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeVariableReferenceExpression("map"), "TryGetValue"), new CodeExpression[] {
                                                                                                new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "TreeId"),
                                                                                                new CodeDirectionExpression(FieldDirection.Out, new CodeVariableReferenceExpression("rs"))})), new CodeStatement[] {
                                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.ValueEquality, new CodeVariableReferenceExpression("oldId"))), new CodeStatement[] {
                                                                                                    new CodeVariableDeclarationStatement(new CodeTypeReference("List`1", new CodeTypeReference[] {
                                                                                                                    new CodeTypeReference("ParseNode")}), "l", new CodeObjectCreateExpression(new CodeTypeReference("List`1", new CodeTypeReference[] {
                                                                                                                        new CodeTypeReference("ParseNode")}), new CodeExpression[] {
                                                                                                                    new CodeIndexerExpression(new CodeVariableReferenceExpression("map"), new CodeExpression[] {
                                                                                                                                new CodeVariableReferenceExpression("oldId")})})),
                                                                                                    new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeVariableReferenceExpression("l"), "Reverse"), new CodeExpression[0])),
                                                                                                    new CodeAssignStatement(new CodeVariableReferenceExpression("rs"), new CodeObjectCreateExpression(new CodeTypeReference("Stack`1", new CodeTypeReference[] {
                                                                                                                        new CodeTypeReference("ParseNode")}), new CodeExpression[] {
                                                                                                                    new CodeVariableReferenceExpression("l")}))}, new CodeStatement[] {
                                                                                                    new CodeAssignStatement(new CodeVariableReferenceExpression("rs"), new CodeObjectCreateExpression(new CodeTypeReference("Stack`1", new CodeTypeReference[] {
                                                                                                                        new CodeTypeReference("ParseNode")}), new CodeExpression[0]))}),
                                                                                        new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeVariableReferenceExpression("map"), "Add"), new CodeExpression[] {
                                                                                                        new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "TreeId"),
                                                                                                        new CodeVariableReferenceExpression("rs")}))}, new CodeStatement[0]),
                                                                            new CodeVariableDeclarationStatement(new CodeTypeReference("ParseNode"), "p", null),
                                                                            new CodeVariableDeclarationStatement(new CodeTypeReference("LRNodeType"), "n", new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "NodeType")),
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LRNodeType")), "Shift"), CodeBinaryOperatorType.ValueEquality, new CodeVariableReferenceExpression("n")), new CodeStatement[] {
                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("p"), new CodeObjectCreateExpression(new CodeTypeReference("ParseNode"), new CodeExpression[] {
                                                                                                        new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "SymbolId"),
                                                                                                        new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Symbol"),
                                                                                                        new CodePrimitiveExpression(null),
                                                                                                        new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Value"),
                                                                                                        new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Attributes"),
                                                                                                        new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Line"),
                                                                                                        new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Column"),
                                                                                                        new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Position")})),
                                                                                        new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeVariableReferenceExpression("rs"), "Push"), new CodeExpression[] {
                                                                                                        new CodeVariableReferenceExpression("p")}))}, new CodeStatement[] {
                                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LRNodeType")), "Reduce"), CodeBinaryOperatorType.ValueEquality, new CodeVariableReferenceExpression("n")), new CodeStatement[] {
                                                                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeArgumentReferenceExpression("trim")), CodeBinaryOperatorType.BooleanOr, new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodePrimitiveExpression(2), CodeBinaryOperatorType.ValueEquality, new CodePropertyReferenceExpression(new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "RuleDefinition"), "Length")))), new CodeStatement[] {
                                                                                                                new CodeVariableDeclarationStatement(new CodeTypeReference("List`1", new CodeTypeReference[] {
                                                                                                                                new CodeTypeReference("ParseNode")}), "cl", new CodeObjectCreateExpression(new CodeTypeReference("List`1", new CodeTypeReference[] {
                                                                                                                                    new CodeTypeReference("ParseNode")}), new CodeExpression[0])),
                                                                                                                new CodeIterationStatement(new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "i", new CodePrimitiveExpression(1)), new CodeBinaryOperatorExpression(new CodePropertyReferenceExpression(new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "RuleDefinition"), "Length"), CodeBinaryOperatorType.GreaterThan, new CodeVariableReferenceExpression("i")), new CodeAssignStatement(new CodeVariableReferenceExpression("i"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))), new CodeStatement[] {
                                                                                                                            new CodeVariableDeclarationStatement(new CodeTypeReference("ParseNode"), "pc", new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeVariableReferenceExpression("rs"), "Pop"), new CodeExpression[0])),
                                                                                                                            new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_AddChildren"), new CodeExpression[] {
                                                                                                                                            new CodeVariableReferenceExpression("pc"),
                                                                                                                                            new CodeArgumentReferenceExpression("transform"),
                                                                                                                                            new CodeVariableReferenceExpression("cl")})),
                                                                                                                            new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(string)), "s", new CodePropertyReferenceExpression(new CodeVariableReferenceExpression("pc"), "Symbol")),
                                                                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression("#ERROR"), CodeBinaryOperatorType.IdentityEquality, new CodeVariableReferenceExpression("s")), new CodeStatement[] {
                                                                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("i"), new CodePropertyReferenceExpression(new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "RuleDefinition"), "Length"))}, new CodeStatement[0])}),
                                                                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("p"), new CodeObjectCreateExpression(new CodeTypeReference("ParseNode"), new CodeExpression[] {
                                                                                                                                new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "SymbolId"),
                                                                                                                                new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Symbol"),
                                                                                                                                new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeVariableReferenceExpression("cl"), "ToArray"), new CodeExpression[0]),
                                                                                                                                new CodePrimitiveExpression(null),
                                                                                                                                new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Attributes"),
                                                                                                                                new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Line"),
                                                                                                                                new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Column"),
                                                                                                                                new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Position")})),
                                                                                                                new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeVariableReferenceExpression("rs"), "Push"), new CodeExpression[] {
                                                                                                                                new CodeVariableReferenceExpression("p")}))}, new CodeStatement[0])}, new CodeStatement[] {
                                                                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LRNodeType")), "Error"), CodeBinaryOperatorType.ValueEquality, new CodeVariableReferenceExpression("n")), new CodeStatement[] {
                                                                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("p"), new CodeObjectCreateExpression(new CodeTypeReference("ParseNode"), new CodeExpression[] {
                                                                                                                                new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_errorId"),
                                                                                                                                new CodePrimitiveExpression("#ERROR"),
                                                                                                                                new CodePrimitiveExpression(null),
                                                                                                                                new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Value"),
                                                                                                                                new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Attributes"),
                                                                                                                                new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Line"),
                                                                                                                                new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Column"),
                                                                                                                                new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Position")})),
                                                                                                                new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeVariableReferenceExpression("rs"), "Push"), new CodeExpression[] {
                                                                                                                                new CodeVariableReferenceExpression("p")}))}, new CodeStatement[0])})}),
                                                                            new CodeAssignStatement(new CodeVariableReferenceExpression("oldId"), new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "TreeId"))}),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference("List`1", new CodeTypeReference[] {
                                                                                new CodeTypeReference("ParseNode")}), "result", new CodeObjectCreateExpression(new CodeTypeReference("List`1", new CodeTypeReference[] {
                                                                                    new CodeTypeReference("ParseNode")}), new CodeExpression[] {
                                                                                new CodePropertyReferenceExpression(new CodeVariableReferenceExpression("map"), "Count")})),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference("IEnumerator`1", new CodeTypeReference[] {
                                                                                new CodeTypeReference("KeyValuePair`2", new CodeTypeReference[] {
                                                                                            new CodeTypeReference(typeof(int)),
                                                                                            new CodeTypeReference("Stack`1", new CodeTypeReference[] {
                                                                                                        new CodeTypeReference("ParseNode")})})}), "e", new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodePropertyReferenceExpression(new CodeVariableReferenceExpression("map"), "Values"), "GetEnumerator"), new CodeExpression[0])),
                                                                new CodeIterationStatement(new CodeSnippetStatement(""), new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeVariableReferenceExpression("e"), "MoveNext"), new CodeExpression[0]), new CodeSnippetStatement(""), new CodeStatement[] {
                                                                            new CodeVariableDeclarationStatement(new CodeTypeReference("Stack`1", new CodeTypeReference[] {
                                                                                            new CodeTypeReference("ParseNode")}), "rs", new CodePropertyReferenceExpression(new CodeVariableReferenceExpression("e"), "Current")),
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.ValueEquality, new CodePropertyReferenceExpression(new CodeVariableReferenceExpression("rs"), "Count"))), new CodeStatement[] {
                                                                                        new CodeVariableDeclarationStatement(new CodeTypeReference("ParseNode"), "n", new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeVariableReferenceExpression("rs"), "Pop"), new CodeExpression[0])),
                                                                                        new CodeVariableDeclarationStatement(new CodeTypeReference("List`1", new CodeTypeReference[] {
                                                                                                        new CodeTypeReference("ParseNode")}), "cl", new CodeObjectCreateExpression(new CodeTypeReference("List`1", new CodeTypeReference[] {
                                                                                                            new CodeTypeReference("ParseNode")}), new CodeExpression[0])),
                                                                                        new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeVariableReferenceExpression("cl"), "AddRange"), new CodeExpression[] {
                                                                                                        new CodePropertyReferenceExpression(new CodeVariableReferenceExpression("n"), "Children")})),
                                                                                        new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(string)), "s", new CodePropertyReferenceExpression(new CodeVariableReferenceExpression("n"), "Symbol")),
                                                                                        new CodeIterationStatement(new CodeSnippetStatement(""), new CodeBinaryOperatorExpression(new CodeBinaryOperatorExpression(new CodePrimitiveExpression("#ERROR"), CodeBinaryOperatorType.IdentityInequality, new CodeVariableReferenceExpression("s")), CodeBinaryOperatorType.BooleanAnd, new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.LessThan, new CodePropertyReferenceExpression(new CodeVariableReferenceExpression("rs"), "Count"))), new CodeSnippetStatement(""), new CodeStatement[] {
                                                                                                    new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_AddChildren"), new CodeExpression[] {
                                                                                                                    new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeVariableReferenceExpression("rs"), "Pop"), new CodeExpression[0]),
                                                                                                                    new CodeArgumentReferenceExpression("transform"),
                                                                                                                    new CodeVariableReferenceExpression("cl")}))}),
                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("n"), new CodeObjectCreateExpression(new CodeTypeReference("ParseNode"), new CodeExpression[] {
                                                                                                        new CodePropertyReferenceExpression(new CodeVariableReferenceExpression("n"), "SymbolId"),
                                                                                                        new CodePropertyReferenceExpression(new CodeVariableReferenceExpression("n"), "Symbol"),
                                                                                                        new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeVariableReferenceExpression("cl"), "ToArray"), new CodeExpression[0]),
                                                                                                        new CodePropertyReferenceExpression(new CodeVariableReferenceExpression("n"), "Value"),
                                                                                                        new CodePropertyReferenceExpression(new CodeVariableReferenceExpression("n"), "Attributes"),
                                                                                                        new CodePropertyReferenceExpression(new CodeVariableReferenceExpression("n"), "Line"),
                                                                                                        new CodePropertyReferenceExpression(new CodeVariableReferenceExpression("n"), "Column"),
                                                                                                        new CodePropertyReferenceExpression(new CodeVariableReferenceExpression("n"), "Position")})),
                                                                                        new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeVariableReferenceExpression("result"), "Add"), new CodeExpression[] {
                                                                                                        new CodeVariableReferenceExpression("n")}))}, new CodeStatement[0])}),
                                                                new CodeMethodReturnStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeVariableReferenceExpression("result"), "ToArray"), new CodeExpression[0]))}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberMethod(new CodeTypeReference(typeof(void)), "_AddChildren", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[] {
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference("ParseNode"), "pc"),
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(bool)), "transform"),
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference("IList`1", new CodeTypeReference[] {
                                                                                new CodeTypeReference("ParseNode")}), "result")}, new CodeStatement[] {
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeArgumentReferenceExpression("transform")), new CodeStatement[] {
                                                                            new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeArgumentReferenceExpression("result"), "Insert"), new CodeExpression[] {
                                                                                            new CodePrimitiveExpression(0),
                                                                                            new CodeArgumentReferenceExpression("pc")})),
                                                                            new CodeMethodReturnStatement(null)}, new CodeStatement[0]),
                                                                new CodeConditionStatement(new CodePropertyReferenceExpression(new CodeArgumentReferenceExpression("pc"), "IsCollapsed"), new CodeStatement[] {
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(null), CodeBinaryOperatorType.IdentityEquality, new CodePropertyReferenceExpression(new CodeArgumentReferenceExpression("pc"), "Value")), new CodeStatement[] {
                                                                                        new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "ic", new CodePropertyReferenceExpression(new CodePropertyReferenceExpression(new CodeArgumentReferenceExpression("pc"), "Children"), "Length")),
                                                                                        new CodeIterationStatement(new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "i", new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("ic"), CodeBinaryOperatorType.Subtract, new CodePrimitiveExpression(1))), new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.LessThanOrEqual, new CodeVariableReferenceExpression("i")), new CodeAssignStatement(new CodeVariableReferenceExpression("i"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.Subtract, new CodePrimitiveExpression(1))), new CodeStatement[] {
                                                                                                    new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_AddChildren"), new CodeExpression[] {
                                                                                                                    new CodeArrayIndexerExpression(new CodePropertyReferenceExpression(new CodeArgumentReferenceExpression("pc"), "Children"), new CodeExpression[] {
                                                                                                                                new CodeVariableReferenceExpression("i")}),
                                                                                                                    new CodeArgumentReferenceExpression("transform"),
                                                                                                                    new CodeArgumentReferenceExpression("result")}))})}, new CodeStatement[0])}, new CodeStatement[] {
                                                                            new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeArgumentReferenceExpression("result"), "Insert"), new CodeExpression[] {
                                                                                            new CodePrimitiveExpression(0),
                                                                                            new CodeArgumentReferenceExpression("pc")}))})}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0])}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0]);
            }
        }
        public static System.CodeDom.CodeCompileUnit GlrWorker {
            get {
                return Deslanged._CompileUnit(new string[0], new CodeNamespace[] {
                            Deslanged._Namespace("", new CodeNamespaceImport[] {
                                        new CodeNamespaceImport("System"),
                                        new CodeNamespaceImport("System.Collections.Generic"),
                                        new CodeNamespaceImport("System.Linq"),
                                        new CodeNamespaceImport("System.Text"),
                                        new CodeNamespaceImport("System.Threading.Tasks")}, new CodeTypeDeclaration[0], new CodeCommentStatement[0]),
                            Deslanged._Namespace("Glory", new CodeNamespaceImport[0], new CodeTypeDeclaration[] {
                                        Deslanged._TypeDeclaration("GlrWorker", true, false, false, false, false, (MemberAttributes.Final | MemberAttributes. Private), TypeAttributes.NotPublic, new CodeTypeParameter[0], new CodeTypeReference[0], new CodeTypeMember[] {
                                                    Deslanged._MemberField(new CodeTypeReference(new CodeTypeReference(new CodeTypeReference(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), 1), 1), 1), "_parseTable", null, ((MemberAttributes)(0)), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference("List`1", new CodeTypeReference[] {
                                                                    new CodeTypeReference(typeof(int))}), "_stack", null, ((MemberAttributes)(0)), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference("LookAheadEnumerator"), "_tokenEnum", null, ((MemberAttributes)(0)), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference("Token"), "CurrentToken", null, (MemberAttributes.Final | MemberAttributes. Public), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference("LRNodeType"), "NodeType", null, (MemberAttributes.Final | MemberAttributes. Public), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), "RuleDefinition", null, (MemberAttributes.Final | MemberAttributes. Public), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(int)), "ErrorCount", null, (MemberAttributes.Final | MemberAttributes. Public), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(int)), "Id", null, (MemberAttributes.Final | MemberAttributes. Public), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(int)), "Index", null, (MemberAttributes.Final | MemberAttributes. Public), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_eosId", null, ((MemberAttributes)(0)), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_errorId", null, ((MemberAttributes)(0)), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), "_errorSentinels", null, ((MemberAttributes)(0)), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_tupleIndex", null, ((MemberAttributes)(0)), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(bool)), "_continuation", null, ((MemberAttributes)(0)), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference("Queue`1", new CodeTypeReference[] {
                                                                    new CodeTypeReference("Token")}), "ErrorTokens", null, (MemberAttributes.Final | MemberAttributes. Public), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference("IList`1", new CodeTypeReference[] {
                                                                    new CodeTypeReference("GlrWorker")}), "_workers", null, ((MemberAttributes)(0)), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference("WeakReference`1", new CodeTypeReference[] {
                                                                    new CodeTypeReference("GlrTableParser")}), "_outer", null, ((MemberAttributes)(0)), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberProperty(new CodeTypeReference("GlrTableParser"), "_Outer", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(null), CodeBinaryOperatorType.IdentityEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_outer")), new CodeStatement[] {
                                                                            new CodeMethodReturnStatement(new CodePrimitiveExpression(null))}, new CodeStatement[0]),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference("GlrTableParser"), "result", null),
                                                                new CodeConditionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_outer"), "TryGetTarget"), new CodeExpression[] {
                                                                                new CodeDirectionExpression(FieldDirection.Out, new CodeVariableReferenceExpression("result"))}), new CodeStatement[] {
                                                                            new CodeMethodReturnStatement(new CodeVariableReferenceExpression("result"))}, new CodeStatement[0]),
                                                                new CodeMethodReturnStatement(new CodePrimitiveExpression(null))}, new CodeStatement[] {
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_outer"), new CodeObjectCreateExpression(new CodeTypeReference("WeakReference`1", new CodeTypeReference[] {
                                                                                    new CodeTypeReference("GlrTableParser")}), new CodeExpression[] {
                                                                                new CodePropertySetValueReferenceExpression()}))}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._Constructor((MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference("GlrTableParser"), "outer"),
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "id"),
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(new CodeTypeReference(new CodeTypeReference(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), 1), 1), 1), "parseTable"),
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "errorId"),
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "eosId"),
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), "errorSentinels"),
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference("IList`1", new CodeTypeReference[] {
                                                                                new CodeTypeReference("GlrWorker")}), "workers"),
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference("LookAheadEnumerator"), "tokenEnum")}, new CodeExpression[0], new CodeExpression[0], new CodeStatement[] {
                                                                new CodeAssignStatement(new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "_Outer"), new CodeArgumentReferenceExpression("outer")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "Id"), new CodeArgumentReferenceExpression("id")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_parseTable"), new CodeArgumentReferenceExpression("parseTable")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_errorId"), new CodeArgumentReferenceExpression("errorId")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_eosId"), new CodeArgumentReferenceExpression("eosId")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_tokenEnum"), new CodeArgumentReferenceExpression("tokenEnum")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_stack"), new CodeObjectCreateExpression(new CodeTypeReference("List`1", new CodeTypeReference[] {
                                                                                    new CodeTypeReference(typeof(int))}), new CodeExpression[0])),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "Index"), new CodePrimitiveExpression(0)),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_tupleIndex"), new CodePrimitiveExpression(0)),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_workers"), new CodeArgumentReferenceExpression("workers")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_errorSentinels"), new CodeArgumentReferenceExpression("errorSentinels")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "ErrorTokens"), new CodeObjectCreateExpression(new CodeTypeReference("Queue`1", new CodeTypeReference[] {
                                                                                    new CodeTypeReference("Token")}), new CodeExpression[0])),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_continuation"), new CodePrimitiveExpression(false)),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "NodeType"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LRNodeType")), "Initial"))}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._Constructor((MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference("GlrTableParser"), "outer"),
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference("GlrWorker"), "worker"),
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "tupleIndex")}, new CodeExpression[0], new CodeExpression[0], new CodeStatement[] {
                                                                new CodeAssignStatement(new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "_Outer"), new CodeArgumentReferenceExpression("outer")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_parseTable"), new CodeFieldReferenceExpression(new CodeArgumentReferenceExpression("worker"), "_parseTable")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_errorId"), new CodeFieldReferenceExpression(new CodeArgumentReferenceExpression("worker"), "_errorId")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_eosId"), new CodeFieldReferenceExpression(new CodeArgumentReferenceExpression("worker"), "_eosId")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_errorSentinels"), new CodeFieldReferenceExpression(new CodeArgumentReferenceExpression("worker"), "_errorSentinels")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "ErrorTokens"), new CodeObjectCreateExpression(new CodeTypeReference("Queue`1", new CodeTypeReference[] {
                                                                                    new CodeTypeReference("Token")}), new CodeExpression[] {
                                                                                new CodeFieldReferenceExpression(new CodeArgumentReferenceExpression("worker"), "ErrorTokens")})),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_tokenEnum"), new CodeFieldReferenceExpression(new CodeArgumentReferenceExpression("worker"), "_tokenEnum")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_stack"), new CodeObjectCreateExpression(new CodeTypeReference("List`1", new CodeTypeReference[] {
                                                                                    new CodeTypeReference(typeof(int))}), new CodeExpression[] {
                                                                                new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeArgumentReferenceExpression("worker"), "_stack"), "Count")})),
                                                                new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_stack"), "AddRange"), new CodeExpression[] {
                                                                                new CodeFieldReferenceExpression(new CodeArgumentReferenceExpression("worker"), "_stack")})),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "Index"), new CodeFieldReferenceExpression(new CodeArgumentReferenceExpression("worker"), "Index")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_tupleIndex"), new CodeArgumentReferenceExpression("tupleIndex")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "NodeType"), new CodeFieldReferenceExpression(new CodeArgumentReferenceExpression("worker"), "NodeType")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "Id"), new CodeFieldReferenceExpression(new CodeArgumentReferenceExpression("outer"), "NextWorkerId")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "CurrentToken"), new CodeFieldReferenceExpression(new CodeArgumentReferenceExpression("worker"), "CurrentToken")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeArgumentReferenceExpression("outer"), "NextWorkerId"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeArgumentReferenceExpression("outer"), "NextWorkerId"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_continuation"), new CodePrimitiveExpression(true)),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_workers"), new CodeFieldReferenceExpression(new CodeArgumentReferenceExpression("worker"), "_workers"))}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberMethod(new CodeTypeReference(typeof(bool)), "Read", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.ValueEquality, new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "ErrorTokens"), "Count"))), new CodeStatement[] {
                                                                            new CodeVariableDeclarationStatement(new CodeTypeReference("Token"), "tok", new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "ErrorTokens"), "Dequeue"), new CodeExpression[0])),
                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeVariableReferenceExpression("tok"), "SymbolId"), new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_errorId")),
                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "CurrentToken"), new CodeVariableReferenceExpression("tok")),
                                                                            new CodeMethodReturnStatement(new CodePrimitiveExpression(true))}, new CodeStatement[0]),
                                                                new CodeConditionStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_continuation"), new CodeStatement[] {
                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_continuation"), new CodePrimitiveExpression(false))}, new CodeStatement[] {
                                                                            new CodeVariableDeclarationStatement(new CodeTypeReference("LRNodeType"), "n", new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "NodeType")),
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LRNodeType")), "Shift"), CodeBinaryOperatorType.ValueEquality, new CodeVariableReferenceExpression("n")), new CodeStatement[] {
                                                                                        new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_ReadNextToken"), new CodeExpression[0]))}, new CodeStatement[] {
                                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LRNodeType")), "Initial"), CodeBinaryOperatorType.ValueEquality, new CodeVariableReferenceExpression("n")), new CodeStatement[] {
                                                                                                    new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_stack"), "Add"), new CodeExpression[] {
                                                                                                                    new CodePrimitiveExpression(0)})),
                                                                                                    new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_ReadNextToken"), new CodeExpression[0])),
                                                                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "NodeType"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LRNodeType")), "Error"))}, new CodeStatement[] {
                                                                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LRNodeType")), "EndDocument"), CodeBinaryOperatorType.ValueEquality, new CodeVariableReferenceExpression("n")), new CodeStatement[] {
                                                                                                                new CodeMethodReturnStatement(new CodePrimitiveExpression(false))}, new CodeStatement[] {
                                                                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LRNodeType")), "Accept"), CodeBinaryOperatorType.ValueEquality, new CodeVariableReferenceExpression("n")), new CodeStatement[] {
                                                                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "NodeType"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LRNodeType")), "EndDocument")),
                                                                                                                            new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_stack"), "Clear"), new CodeExpression[0])),
                                                                                                                            new CodeMethodReturnStatement(new CodePrimitiveExpression(true))}, new CodeStatement[0])})})})}),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.LessThan, new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_stack"), "Count")), new CodeStatement[] {
                                                                            new CodeVariableDeclarationStatement(new CodeTypeReference(new CodeTypeReference(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), 1), 1), "entry", new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_parseTable"), new CodeExpression[] {
                                                                                            new CodeIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_stack"), new CodeExpression[] {
                                                                                                        new CodeBinaryOperatorExpression(new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_stack"), "Count"), CodeBinaryOperatorType.Subtract, new CodePrimitiveExpression(1))})})),
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_errorId"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "CurrentToken"), "SymbolId")), new CodeStatement[] {
                                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_tupleIndex"), new CodePrimitiveExpression(0)),
                                                                                        new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_Panic"), new CodeExpression[0])),
                                                                                        new CodeMethodReturnStatement(new CodePrimitiveExpression(true))}, new CodeStatement[0]),
                                                                            new CodeVariableDeclarationStatement(new CodeTypeReference(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), 1), "tbl", new CodeArrayIndexerExpression(new CodeVariableReferenceExpression("entry"), new CodeExpression[] {
                                                                                            new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "CurrentToken"), "SymbolId")})),
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(null), CodeBinaryOperatorType.IdentityEquality, new CodeVariableReferenceExpression("tbl")), new CodeStatement[] {
                                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_tupleIndex"), new CodePrimitiveExpression(0)),
                                                                                        new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_Panic"), new CodeExpression[0])),
                                                                                        new CodeMethodReturnStatement(new CodePrimitiveExpression(true))}, new CodeStatement[0]),
                                                                            new CodeVariableDeclarationStatement(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), "trns", new CodeArrayIndexerExpression(new CodeVariableReferenceExpression("tbl"), new CodeExpression[] {
                                                                                            new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_tupleIndex")})),
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_tupleIndex")), new CodeStatement[] {
                                                                                        new CodeIterationStatement(new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "i", new CodePrimitiveExpression(1)), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.LessThan, new CodePropertyReferenceExpression(new CodeVariableReferenceExpression("tbl"), "Length")), new CodeAssignStatement(new CodeVariableReferenceExpression("i"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))), new CodeStatement[] {
                                                                                                    new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_workers"), "Add"), new CodeExpression[] {
                                                                                                                    new CodeObjectCreateExpression(new CodeTypeReference("GlrWorker"), new CodeExpression[] {
                                                                                                                                new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "_Outer"),
                                                                                                                                new CodeThisReferenceExpression(),
                                                                                                                                new CodeVariableReferenceExpression("i")})}))})}, new CodeStatement[0]),
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(null), CodeBinaryOperatorType.IdentityEquality, new CodeVariableReferenceExpression("trns")), new CodeStatement[] {
                                                                                        new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_Panic"), new CodeExpression[0])),
                                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_tupleIndex"), new CodePrimitiveExpression(0)),
                                                                                        new CodeMethodReturnStatement(new CodePrimitiveExpression(true))}, new CodeStatement[0]),
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(1), CodeBinaryOperatorType.ValueEquality, new CodePropertyReferenceExpression(new CodeVariableReferenceExpression("trns"), "Length")), new CodeStatement[] {
                                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodePrimitiveExpression(-1), CodeBinaryOperatorType.ValueEquality, new CodeArrayIndexerExpression(new CodeVariableReferenceExpression("trns"), new CodeExpression[] {
                                                                                                                new CodePrimitiveExpression(0)}))), new CodeStatement[] {
                                                                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "NodeType"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LRNodeType")), "Shift")),
                                                                                                    new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_stack"), "Add"), new CodeExpression[] {
                                                                                                                    new CodeArrayIndexerExpression(new CodeVariableReferenceExpression("trns"), new CodeExpression[] {
                                                                                                                                new CodePrimitiveExpression(0)})})),
                                                                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_tupleIndex"), new CodePrimitiveExpression(0)),
                                                                                                    new CodeMethodReturnStatement(new CodePrimitiveExpression(true))}, new CodeStatement[] {
                                                                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_eosId"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "CurrentToken"), "SymbolId"))), new CodeStatement[] {
                                                                                                                new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_Panic"), new CodeExpression[0])),
                                                                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_tupleIndex"), new CodePrimitiveExpression(0)),
                                                                                                                new CodeMethodReturnStatement(new CodePrimitiveExpression(true))}, new CodeStatement[0]),
                                                                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "NodeType"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LRNodeType")), "Accept")),
                                                                                                    new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_stack"), "Clear"), new CodeExpression[0])),
                                                                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_tupleIndex"), new CodePrimitiveExpression(0)),
                                                                                                    new CodeMethodReturnStatement(new CodePrimitiveExpression(true))})}, new CodeStatement[] {
                                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "RuleDefinition"), new CodeArrayCreateExpression(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), new CodeBinaryOperatorExpression(new CodePropertyReferenceExpression(new CodeVariableReferenceExpression("trns"), "Length"), CodeBinaryOperatorType.Subtract, new CodePrimitiveExpression(1)))),
                                                                                        new CodeIterationStatement(new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "i", new CodePrimitiveExpression(1)), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.LessThan, new CodePropertyReferenceExpression(new CodeVariableReferenceExpression("trns"), "Length")), new CodeAssignStatement(new CodeVariableReferenceExpression("i"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))), new CodeStatement[] {
                                                                                                    new CodeAssignStatement(new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "RuleDefinition"), new CodeExpression[] {
                                                                                                                    new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.Subtract, new CodePrimitiveExpression(1))}), new CodeArrayIndexerExpression(new CodeVariableReferenceExpression("trns"), new CodeExpression[] {
                                                                                                                    new CodeVariableReferenceExpression("i")}))}),
                                                                                        new CodeIterationStatement(new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "i", new CodePrimitiveExpression(2)), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.LessThan, new CodePropertyReferenceExpression(new CodeVariableReferenceExpression("trns"), "Length")), new CodeAssignStatement(new CodeVariableReferenceExpression("i"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))), new CodeStatement[] {
                                                                                                    new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_stack"), "RemoveAt"), new CodeExpression[] {
                                                                                                                    new CodeBinaryOperatorExpression(new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_stack"), "Count"), CodeBinaryOperatorType.Subtract, new CodePrimitiveExpression(1))}))}),
                                                                                        new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "state", new CodeIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_stack"), new CodeExpression[] {
                                                                                                        new CodeBinaryOperatorExpression(new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_stack"), "Count"), CodeBinaryOperatorType.Subtract, new CodePrimitiveExpression(1))})),
                                                                                        new CodeVariableDeclarationStatement(new CodeTypeReference(new CodeTypeReference(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), 1), 1), "e", new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_parseTable"), new CodeExpression[] {
                                                                                                        new CodeVariableReferenceExpression("state")})),
                                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(null), CodeBinaryOperatorType.IdentityEquality, new CodeVariableReferenceExpression("e")), new CodeStatement[] {
                                                                                                    new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_Panic"), new CodeExpression[0])),
                                                                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_tupleIndex"), new CodePrimitiveExpression(0)),
                                                                                                    new CodeMethodReturnStatement(new CodePrimitiveExpression(true))}, new CodeStatement[0]),
                                                                                        new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_stack"), "Add"), new CodeExpression[] {
                                                                                                        new CodeArrayIndexerExpression(new CodeArrayIndexerExpression(new CodeArrayIndexerExpression(new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_parseTable"), new CodeExpression[] {
                                                                                                                                new CodeVariableReferenceExpression("state")}), new CodeExpression[] {
                                                                                                                            new CodeArrayIndexerExpression(new CodeVariableReferenceExpression("trns"), new CodeExpression[] {
                                                                                                                                        new CodePrimitiveExpression(1)})}), new CodeExpression[] {
                                                                                                                        new CodePrimitiveExpression(0)}), new CodeExpression[] {
                                                                                                                    new CodePrimitiveExpression(0)})})),
                                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "NodeType"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LRNodeType")), "Reduce")),
                                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_tupleIndex"), new CodePrimitiveExpression(0)),
                                                                                        new CodeMethodReturnStatement(new CodePrimitiveExpression(true))})}, new CodeStatement[] {
                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "NodeType"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LRNodeType")), "EndDocument")),
                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_tupleIndex"), new CodePrimitiveExpression(0)),
                                                                            new CodeMethodReturnStatement(new CodePrimitiveExpression(true))})}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberProperty(new CodeTypeReference(typeof(int)), "SymbolId", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.LessThan, new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "ErrorTokens"), "Count")), new CodeStatement[] {
                                                                            new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_errorId"))}, new CodeStatement[0]),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference("LRNodeType"), "n", new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "NodeType")),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LRNodeType")), "Reduce"), CodeBinaryOperatorType.ValueEquality, new CodeVariableReferenceExpression("n")), new CodeStatement[] {
                                                                            new CodeMethodReturnStatement(new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "RuleDefinition"), new CodeExpression[] {
                                                                                            new CodePrimitiveExpression(0)}))}, new CodeStatement[0]),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LRNodeType")), "Error"), CodeBinaryOperatorType.ValueEquality, new CodeVariableReferenceExpression("n")), new CodeStatement[] {
                                                                            new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_errorId"))}, new CodeStatement[0]),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LRNodeType")), "Shift"), CodeBinaryOperatorType.ValueEquality, new CodeVariableReferenceExpression("n")), new CodeStatement[] {
                                                                            new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "CurrentToken"), "SymbolId"))}, new CodeStatement[0]),
                                                                new CodeMethodReturnStatement(new CodePrimitiveExpression(-1))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberProperty(new CodeTypeReference(typeof(string)), "Value", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.LessThan, new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "ErrorTokens"), "Count")), new CodeStatement[] {
                                                                            new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "CurrentToken"), "Value"))}, new CodeStatement[0]),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference("LRNodeType"), "n", new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "NodeType")),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LRNodeType")), "Shift"), CodeBinaryOperatorType.ValueEquality, new CodeVariableReferenceExpression("n")), CodeBinaryOperatorType.BooleanOr, new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LRNodeType")), "Error"), CodeBinaryOperatorType.ValueEquality, new CodeVariableReferenceExpression("n"))), new CodeStatement[] {
                                                                            new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "CurrentToken"), "Value"))}, new CodeStatement[0]),
                                                                new CodeMethodReturnStatement(new CodePrimitiveExpression(null))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberProperty(new CodeTypeReference(typeof(bool)), "HasErrors", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeMethodReturnStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.LessThan, new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "ErrorTokens"), "Count")))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberMethod(new CodeTypeReference(typeof(void)), "_UpdatePositionFinal", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeIterationStatement(new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "i", new CodePrimitiveExpression(0)), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.LessThan, new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "CurrentToken"), "Value"), "Length")), new CodeAssignStatement(new CodeVariableReferenceExpression("i"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))), new CodeStatement[] {
                                                                            new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(char)), "ch", new CodeIndexerExpression(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "CurrentToken"), "Value"), new CodeExpression[] {
                                                                                            new CodeVariableReferenceExpression("i")})),
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression('\n'), CodeBinaryOperatorType.ValueEquality, new CodeVariableReferenceExpression("ch")), new CodeStatement[] {
                                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "CurrentToken"), "Line"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "CurrentToken"), "Line"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "CurrentToken"), "Column"), new CodePrimitiveExpression(1))}, new CodeStatement[] {
                                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression('\r'), CodeBinaryOperatorType.ValueEquality, new CodeVariableReferenceExpression("ch")), new CodeStatement[] {
                                                                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "CurrentToken"), "Column"), new CodePrimitiveExpression(1))}, new CodeStatement[] {
                                                                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression('\t'), CodeBinaryOperatorType.ValueEquality, new CodeVariableReferenceExpression("ch")), new CodeStatement[] {
                                                                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "CurrentToken"), "Column"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "CurrentToken"), "Column"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(4)))}, new CodeStatement[] {
                                                                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "CurrentToken"), "Column"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "CurrentToken"), "Column"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1)))})})}),
                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "CurrentToken"), "Position"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "CurrentToken"), "Position"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1)))})}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberMethod(new CodeTypeReference(typeof(void)), "_ReadNextToken", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference("Token"), "tok", null),
                                                                new CodeConditionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_tokenEnum"), "TryPeek"), new CodeExpression[] {
                                                                                new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "Index"),
                                                                                new CodeDirectionExpression(FieldDirection.Out, new CodeVariableReferenceExpression("tok"))}), new CodeStatement[] {
                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "CurrentToken"), new CodeVariableReferenceExpression("tok")),
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(-1), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "CurrentToken"), "SymbolId")), new CodeStatement[] {
                                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "CurrentToken"), "SymbolId"), new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_errorId"))}, new CodeStatement[0]),
                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "Index"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "Index"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1)))}, new CodeStatement[] {
                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "CurrentToken"), "SymbolId"), new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_eosId")),
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(null), CodeBinaryOperatorType.IdentityInequality, new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "CurrentToken"), "Value")), new CodeStatement[] {
                                                                                        new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_UpdatePositionFinal"), new CodeExpression[0]))}, new CodeStatement[0])})}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberMethod(new CodeTypeReference(typeof(void)), "_Panic", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), "sa", new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_errorSentinels")),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(null), CodeBinaryOperatorType.IdentityEquality, new CodeVariableReferenceExpression("sa")), new CodeStatement[] {
                                                                            new CodeAssignStatement(new CodeVariableReferenceExpression("sa"), new CodeArrayCreateExpression(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), 0))}, new CodeStatement[0]),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "idx", new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(System.Array))), "IndexOf"), new CodeExpression[] {
                                                                                new CodeVariableReferenceExpression("sa"),
                                                                                new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "CurrentToken"), "SymbolId")})),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(-1), CodeBinaryOperatorType.LessThan, new CodeVariableReferenceExpression("idx")), new CodeStatement[] {
                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "ErrorCount"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "ErrorCount"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                            new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "ErrorTokens"), "Enqueue"), new CodeExpression[] {
                                                                                            new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "CurrentToken")})),
                                                                            new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_ReadNextToken"), new CodeExpression[0]))}, new CodeStatement[0]),
                                                                new CodeIterationStatement(new CodeSnippetStatement(""), new CodeBinaryOperatorExpression(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_eosId"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "CurrentToken"), "SymbolId"))), CodeBinaryOperatorType.BooleanAnd, new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.GreaterThan, new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("idx"), CodeBinaryOperatorType.Assign, new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(System.Array))), "IndexOf"), new CodeExpression[] {
                                                                                            new CodeVariableReferenceExpression("sa"),
                                                                                            new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "CurrentToken"), "SymbolId")})))), new CodeSnippetStatement(""), new CodeStatement[] {
                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "ErrorCount"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "ErrorCount"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                            new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "ErrorTokens"), "Enqueue"), new CodeExpression[] {
                                                                                            new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "CurrentToken")})),
                                                                            new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_ReadNextToken"), new CodeExpression[0]))}),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(-1), CodeBinaryOperatorType.LessThan, new CodeVariableReferenceExpression("idx")), new CodeStatement[] {
                                                                            new CodeIterationStatement(new CodeSnippetStatement(""), new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.LessThan, new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_stack"), "Count")), new CodeSnippetStatement(""), new CodeStatement[] {
                                                                                        new CodeVariableDeclarationStatement(new CodeTypeReference(new CodeTypeReference(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), 1), 1), "entry", new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_parseTable"), new CodeExpression[] {
                                                                                                        new CodeIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_stack"), new CodeExpression[] {
                                                                                                                    new CodeBinaryOperatorExpression(new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_stack"), "Count"), CodeBinaryOperatorType.Subtract, new CodePrimitiveExpression(1))})})),
                                                                                        new CodeVariableDeclarationStatement(new CodeTypeReference(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), 1), "t", new CodeArrayIndexerExpression(new CodeVariableReferenceExpression("entry"), new CodeExpression[] {
                                                                                                        new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "CurrentToken"), "SymbolId")})),
                                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(null), CodeBinaryOperatorType.IdentityInequality, new CodeVariableReferenceExpression("t")), new CodeStatement[] {
                                                                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_continuation"), new CodePrimitiveExpression(true)),
                                                                                                    new CodeMethodReturnStatement(null)}, new CodeStatement[] {
                                                                                                    new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_stack"), "RemoveAt"), new CodeExpression[] {
                                                                                                                    new CodeBinaryOperatorExpression(new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_stack"), "Count"), CodeBinaryOperatorType.Subtract, new CodePrimitiveExpression(1))}))})})}, new CodeStatement[0])}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0])}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0]);
            }
        }
        private static CodeParameterDeclarationExpression _ParameterDeclarationExpression(CodeTypeReference type, string name, FieldDirection direction, CodeAttributeDeclaration[] customAttributes) {
            CodeParameterDeclarationExpression result = new CodeParameterDeclarationExpression(type, name);
            result.Direction = direction;
            result.CustomAttributes.AddRange(customAttributes);
            return result;
        }
        public static System.CodeDom.CodeCompileUnit LookAheadEnumerator {
            get {
                return Deslanged._CompileUnit(new string[0], new CodeNamespace[] {
                            Deslanged._Namespace("", new CodeNamespaceImport[] {
                                        new CodeNamespaceImport("System"),
                                        new CodeNamespaceImport("System.Collections.Generic")}, new CodeTypeDeclaration[0], new CodeCommentStatement[0]),
                            Deslanged._Namespace("Glory", new CodeNamespaceImport[0], new CodeTypeDeclaration[] {
                                        Deslanged._TypeDeclaration("LookAheadEnumerator", true, false, false, false, false, (MemberAttributes.Final | MemberAttributes. Private), TypeAttributes.NotPublic, new CodeTypeParameter[0], new CodeTypeReference[] {
                                                    new CodeTypeReference(typeof(object)),
                                                    new CodeTypeReference("IEnumerator`1", new CodeTypeReference[] {
                                                                new CodeTypeReference("Token")})}, new CodeTypeMember[] {
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_Enumerating", new CodePrimitiveExpression(0), (MemberAttributes.Const | MemberAttributes. Private), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_NotStarted", new CodePrimitiveExpression(-2), (MemberAttributes.Const | MemberAttributes. Private), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_Ended", new CodePrimitiveExpression(-1), (MemberAttributes.Const | MemberAttributes. Private), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_Disposed", new CodePrimitiveExpression(-3), (MemberAttributes.Const | MemberAttributes. Private), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference("IEnumerator`1", new CodeTypeReference[] {
                                                                    new CodeTypeReference("Token")}), "_inner", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_state", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_DefaultCapacity", new CodePrimitiveExpression(16), (MemberAttributes.Const | MemberAttributes. Private), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(float)), "_GrowthFactor", new CodePrimitiveExpression(0.9F), (MemberAttributes.Const | MemberAttributes. Private), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(new CodeTypeReference("Token"), 1), "_queue", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_queueHead", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_queueCount", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._Constructor((MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference("IEnumerator`1", new CodeTypeReference[] {
                                                                                new CodeTypeReference("Token")}), "inner")}, new CodeExpression[0], new CodeExpression[0], new CodeStatement[] {
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_inner"), new CodeArgumentReferenceExpression("inner")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LookAheadEnumerator")), "_NotStarted")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queue"), new CodeArrayCreateExpression(new CodeTypeReference(new CodeTypeReference("Token"), 1), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LookAheadEnumerator")), "_DefaultCapacity"))),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueHead"), new CodePrimitiveExpression(0)),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueCount"), new CodePrimitiveExpression(0))}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberMethod(new CodeTypeReference(typeof(void)), "DiscardLookAhead", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeIterationStatement(new CodeSnippetStatement(""), new CodeBinaryOperatorExpression(new CodePrimitiveExpression(1), CodeBinaryOperatorType.LessThan, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueCount")), new CodeSnippetStatement(""), new CodeStatement[] {
                                                                            new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_Dequeue"), new CodeExpression[0]))})}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberProperty(new CodeTypeReference("Token"), "Current", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.GreaterThan, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state")), new CodeStatement[] {
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LookAheadEnumerator")), "_NotStarted"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state")), new CodeStatement[] {
                                                                                        new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("InvalidOperationException"), new CodeExpression[] {
                                                                                                        new CodePrimitiveExpression("The cursor is before the start of the enumeration.")}))}, new CodeStatement[0]),
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LookAheadEnumerator")), "_Ended"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state")), new CodeStatement[] {
                                                                                        new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("InvalidOperationException"), new CodeExpression[] {
                                                                                                        new CodePrimitiveExpression("The cursor is after the end of the enumeration.")}))}, new CodeStatement[0]),
                                                                            new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("ObjectDisposedException"), new CodeExpression[] {
                                                                                            new CodePropertyReferenceExpression(new CodeTypeOfExpression(new CodeTypeReference("LookAheadEnumerator")), "Name")}))}, new CodeStatement[0]),
                                                                new CodeMethodReturnStatement(new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queue"), new CodeExpression[] {
                                                                                new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueHead")}))}, new CodeStatement[0], new CodeTypeReference[] {
                                                                new CodeTypeReference("IEnumerator`1", new CodeTypeReference[] {
                                                                            new CodeTypeReference("Token")})}, null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberProperty(new CodeTypeReference(typeof(object)), "Current", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeMethodReturnStatement(new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Current"))}, new CodeStatement[0], new CodeTypeReference[0], new CodeTypeReference(typeof(System.Collections.IEnumerator)), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberProperty(new CodeTypeReference(typeof(int)), "QueueCount", MemberAttributes.FamilyAndAssembly, new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueCount"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberMethod(new CodeTypeReference(typeof(bool)), "TryPeek", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "lookahead"),
                                                                Deslanged._ParameterDeclarationExpression(new CodeTypeReference("Token"), "value", FieldDirection.Out, new CodeAttributeDeclaration[0])}, new CodeStatement[] {
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LookAheadEnumerator")), "_Disposed"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state")), new CodeStatement[] {
                                                                            new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("ObjectDisposedException"), new CodeExpression[] {
                                                                                            new CodePropertyReferenceExpression(new CodeTypeOfExpression(new CodeTypeReference("LookAheadEnumerator")), "Name")}))}, new CodeStatement[0]),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.GreaterThan, new CodeArgumentReferenceExpression("lookahead")), new CodeStatement[] {
                                                                            new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("ArgumentOutOfRangeException"), new CodeExpression[] {
                                                                                            new CodePrimitiveExpression("lookahead")}))}, new CodeStatement[0]),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LookAheadEnumerator")), "_Ended"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state")), new CodeStatement[] {
                                                                            new CodeAssignStatement(new CodeArgumentReferenceExpression("value"), new CodeDefaultValueExpression(new CodeTypeReference("Token"))),
                                                                            new CodeMethodReturnStatement(new CodePrimitiveExpression(false))}, new CodeStatement[0]),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LookAheadEnumerator")), "_NotStarted"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state")), new CodeStatement[] {
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.ValueEquality, new CodeArgumentReferenceExpression("lookahead")), new CodeStatement[] {
                                                                                        new CodeAssignStatement(new CodeArgumentReferenceExpression("value"), new CodeDefaultValueExpression(new CodeTypeReference("Token"))),
                                                                                        new CodeMethodReturnStatement(new CodePrimitiveExpression(false))}, new CodeStatement[0])}, new CodeStatement[0]),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeArgumentReferenceExpression("lookahead"), CodeBinaryOperatorType.LessThan, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueCount")), new CodeStatement[] {
                                                                            new CodeAssignStatement(new CodeArgumentReferenceExpression("value"), new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queue"), new CodeExpression[] {
                                                                                            new CodeBinaryOperatorExpression(new CodeBinaryOperatorExpression(new CodeArgumentReferenceExpression("lookahead"), CodeBinaryOperatorType.Add, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueHead")), CodeBinaryOperatorType.Modulus, new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queue"), "Length"))})),
                                                                            new CodeMethodReturnStatement(new CodePrimitiveExpression(true))}, new CodeStatement[0]),
                                                                new CodeAssignStatement(new CodeArgumentReferenceExpression("lookahead"), new CodeBinaryOperatorExpression(new CodeArgumentReferenceExpression("lookahead"), CodeBinaryOperatorType.Subtract, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueCount"))),
                                                                new CodeAssignStatement(new CodeArgumentReferenceExpression("value"), new CodeDefaultValueExpression(new CodeTypeReference("Token"))),
                                                                new CodeIterationStatement(new CodeSnippetStatement(""), new CodeBinaryOperatorExpression(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.LessThanOrEqual, new CodeArgumentReferenceExpression("lookahead")), CodeBinaryOperatorType.BooleanAnd, new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_inner"), "MoveNext"), new CodeExpression[0])), new CodeSnippetStatement(""), new CodeStatement[] {
                                                                            new CodeAssignStatement(new CodeArgumentReferenceExpression("value"), new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_inner"), "Current")),
                                                                            new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_Enqueue"), new CodeExpression[] {
                                                                                            new CodeArgumentReferenceExpression("value")})),
                                                                            new CodeAssignStatement(new CodeArgumentReferenceExpression("lookahead"), new CodeBinaryOperatorExpression(new CodeArgumentReferenceExpression("lookahead"), CodeBinaryOperatorType.Subtract, new CodePrimitiveExpression(1)))}),
                                                                new CodeMethodReturnStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(-1), CodeBinaryOperatorType.ValueEquality, new CodeArgumentReferenceExpression("lookahead")))}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberMethod(new CodeTypeReference("Token"), "Peek", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "lookahead")}, new CodeStatement[] {
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference("Token"), "value", null),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "TryPeek"), new CodeExpression[] {
                                                                                    new CodeArgumentReferenceExpression("lookahead"),
                                                                                    new CodeDirectionExpression(FieldDirection.Out, new CodeVariableReferenceExpression("value"))})), new CodeStatement[] {
                                                                            new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("InvalidOperationException"), new CodeExpression[] {
                                                                                            new CodePrimitiveExpression("There were not enough values in the enumeration to satisfy the request")}))}, new CodeStatement[0]),
                                                                new CodeMethodReturnStatement(new CodeVariableReferenceExpression("value"))}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberProperty(new CodeTypeReference(typeof(bool)), "IsEnumerating", MemberAttributes.FamilyAndAssembly, new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeMethodReturnStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(-1), CodeBinaryOperatorType.LessThan, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state")))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberProperty(new CodeTypeReference(typeof(bool)), "IsEnded", MemberAttributes.FamilyAndAssembly, new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeMethodReturnStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LookAheadEnumerator")), "_Ended"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state")))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberProperty(new CodeTypeReference("IEnumerable`1", new CodeTypeReference[] {
                                                                    new CodeTypeReference("Token")}), "LookAhead", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.GreaterThan, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state")), new CodeStatement[] {
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LookAheadEnumerator")), "_NotStarted")), new CodeStatement[] {
                                                                                        new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("InvalidOperationException"), new CodeExpression[] {
                                                                                                        new CodePrimitiveExpression("The cursor is before the start of the enumeration.")}))}, new CodeStatement[0]),
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LookAheadEnumerator")), "_Ended")), new CodeStatement[] {
                                                                                        new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("InvalidOperationException"), new CodeExpression[] {
                                                                                                        new CodePrimitiveExpression("The cursor is after the end of the enumeration.")}))}, new CodeStatement[0]),
                                                                            new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("ObjectDisposedException"), new CodeExpression[] {
                                                                                            new CodePropertyReferenceExpression(new CodeTypeOfExpression(new CodeTypeReference("LookAheadEnumerator")), "Name")}))}, new CodeStatement[0]),
                                                                new CodeMethodReturnStatement(new CodeObjectCreateExpression(new CodeTypeReference("LookAheadEnumeratorEnumerable"), new CodeExpression[] {
                                                                                new CodeThisReferenceExpression()}))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberMethod(new CodeTypeReference(typeof(bool)), "MoveNext", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.GreaterThan, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state")), new CodeStatement[] {
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LookAheadEnumerator")), "_Disposed"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state")), new CodeStatement[] {
                                                                                        new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("ObjectDisposedException"), new CodeExpression[] {
                                                                                                        new CodePropertyReferenceExpression(new CodeTypeOfExpression(new CodeTypeReference("LookAheadEnumerator")), "Name")}))}, new CodeStatement[0]),
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LookAheadEnumerator")), "_Ended"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state")), new CodeStatement[] {
                                                                                        new CodeMethodReturnStatement(new CodePrimitiveExpression(false))}, new CodeStatement[0]),
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LookAheadEnumerator")), "_NotStarted"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state")), new CodeStatement[] {
                                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.LessThan, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueCount")), new CodeStatement[] {
                                                                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LookAheadEnumerator")), "_Enumerating")),
                                                                                                    new CodeMethodReturnStatement(new CodePrimitiveExpression(true))}, new CodeStatement[0]),
                                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_inner"), "MoveNext"), new CodeExpression[0])), new CodeStatement[] {
                                                                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LookAheadEnumerator")), "_Ended")),
                                                                                                    new CodeMethodReturnStatement(new CodePrimitiveExpression(false))}, new CodeStatement[0]),
                                                                                        new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_Enqueue"), new CodeExpression[] {
                                                                                                        new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_inner"), "Current")})),
                                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LookAheadEnumerator")), "_Enumerating")),
                                                                                        new CodeMethodReturnStatement(new CodePrimitiveExpression(true))}, new CodeStatement[0])}, new CodeStatement[0]),
                                                                new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_Dequeue"), new CodeExpression[0])),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueCount")), new CodeStatement[] {
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_inner"), "MoveNext"), new CodeExpression[0])), new CodeStatement[] {
                                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LookAheadEnumerator")), "_Ended")),
                                                                                        new CodeMethodReturnStatement(new CodePrimitiveExpression(false))}, new CodeStatement[0]),
                                                                            new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_Enqueue"), new CodeExpression[] {
                                                                                            new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_inner"), "Current")}))}, new CodeStatement[0]),
                                                                new CodeMethodReturnStatement(new CodePrimitiveExpression(true))}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberMethod(new CodeTypeReference(typeof(bool)), "MoveNext", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeMethodReturnStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "MoveNext"), new CodeExpression[0]))}, new CodeTypeReference[0], new CodeTypeReference(typeof(System.Collections.IEnumerator)), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberMethod(new CodeTypeReference(typeof(void)), "Reset", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_inner"), "Reset"), new CodeExpression[0])),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueHead"), new CodePrimitiveExpression(0)),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueCount"), new CodePrimitiveExpression(0)),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LookAheadEnumerator")), "_NotStarted"))}, new CodeTypeReference[0], new CodeTypeReference(typeof(System.Collections.IEnumerator)), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberMethod(new CodeTypeReference(typeof(void)), "Dispose", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LookAheadEnumerator")), "_Disposed"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"))), new CodeStatement[] {
                                                                            new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_inner"), "Dispose"), new CodeExpression[0])),
                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LookAheadEnumerator")), "_Disposed"))}, new CodeStatement[0])}, new CodeTypeReference[0], new CodeTypeReference(typeof(System.IDisposable)), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberMethod(new CodeTypeReference(typeof(void)), "_Enqueue", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[] {
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference("Token"), "item")}, new CodeStatement[] {
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueCount"), CodeBinaryOperatorType.ValueEquality, new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queue"), "Length")), new CodeStatement[] {
                                                                            new CodeVariableDeclarationStatement(new CodeTypeReference(new CodeTypeReference("Token"), 1), "arr", new CodeArrayCreateExpression(new CodeTypeReference(new CodeTypeReference("Token"), 1), new CodeCastExpression(new CodeTypeReference(typeof(int)), new CodeBinaryOperatorExpression(new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queue"), "Length"), CodeBinaryOperatorType.Multiply, new CodeBinaryOperatorExpression(new CodePrimitiveExpression(1), CodeBinaryOperatorType.Add, new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LookAheadEnumerator")), "_GrowthFactor")))))),
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueHead"), CodeBinaryOperatorType.Add, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueCount")), CodeBinaryOperatorType.LessThanOrEqual, new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queue"), "Length")), new CodeStatement[] {
                                                                                        new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(System.Array))), "Copy"), new CodeExpression[] {
                                                                                                        new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queue"),
                                                                                                        new CodeVariableReferenceExpression("arr"),
                                                                                                        new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueCount")})),
                                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueHead"), new CodePrimitiveExpression(0)),
                                                                                        new CodeAssignStatement(new CodeArrayIndexerExpression(new CodeVariableReferenceExpression("arr"), new CodeExpression[] {
                                                                                                        new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueCount")}), new CodeArgumentReferenceExpression("item")),
                                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueCount"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueCount"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queue"), new CodeVariableReferenceExpression("arr"))}, new CodeStatement[] {
                                                                                        new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(System.Array))), "Copy"), new CodeExpression[] {
                                                                                                        new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queue"),
                                                                                                        new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueHead"),
                                                                                                        new CodeVariableReferenceExpression("arr"),
                                                                                                        new CodePrimitiveExpression(0),
                                                                                                        new CodeBinaryOperatorExpression(new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queue"), "Length"), CodeBinaryOperatorType.Subtract, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueHead"))})),
                                                                                        new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(System.Array))), "Copy"), new CodeExpression[] {
                                                                                                        new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queue"),
                                                                                                        new CodePrimitiveExpression(0),
                                                                                                        new CodeVariableReferenceExpression("arr"),
                                                                                                        new CodeBinaryOperatorExpression(new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queue"), "Length"), CodeBinaryOperatorType.Subtract, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueHead")),
                                                                                                        new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueHead")})),
                                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueHead"), new CodePrimitiveExpression(0)),
                                                                                        new CodeAssignStatement(new CodeArrayIndexerExpression(new CodeVariableReferenceExpression("arr"), new CodeExpression[] {
                                                                                                        new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueCount")}), new CodeArgumentReferenceExpression("item")),
                                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueCount"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueCount"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queue"), new CodeVariableReferenceExpression("arr"))})}, new CodeStatement[] {
                                                                            new CodeAssignStatement(new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queue"), new CodeExpression[] {
                                                                                            new CodeBinaryOperatorExpression(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueHead"), CodeBinaryOperatorType.Add, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueCount")), CodeBinaryOperatorType.Modulus, new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queue"), "Length"))}), new CodeArgumentReferenceExpression("item")),
                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueCount"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueCount"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1)))})}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberMethod(new CodeTypeReference("Token"), "_Dequeue", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueCount")), new CodeStatement[] {
                                                                            new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("InvalidOperationException"), new CodeExpression[] {
                                                                                            new CodePrimitiveExpression("The queue is empty")}))}, new CodeStatement[0]),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference("Token"), "result", new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queue"), new CodeExpression[] {
                                                                                new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueHead")})),
                                                                new CodeAssignStatement(new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queue"), new CodeExpression[] {
                                                                                new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueHead")}), new CodeDefaultValueExpression(new CodeTypeReference("Token"))),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueHead"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueHead"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueHead"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueHead"), CodeBinaryOperatorType.Modulus, new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queue"), "Length"))),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueCount"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_queueCount"), CodeBinaryOperatorType.Subtract, new CodePrimitiveExpression(1))),
                                                                new CodeMethodReturnStatement(new CodeVariableReferenceExpression("result"))}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._TypeDeclaration("LookAheadEnumeratorEnumerable", true, false, false, false, false, (MemberAttributes.Final | MemberAttributes. Private), TypeAttributes.NotPublic, new CodeTypeParameter[0], new CodeTypeReference[] {
                                                    new CodeTypeReference(typeof(object)),
                                                    new CodeTypeReference("IEnumerable`1", new CodeTypeReference[] {
                                                                new CodeTypeReference("Token")})}, new CodeTypeMember[] {
                                                    Deslanged._MemberField(new CodeTypeReference("LookAheadEnumerator"), "_outer", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._Constructor((MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference("LookAheadEnumerator"), "outer")}, new CodeExpression[0], new CodeExpression[0], new CodeStatement[] {
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_outer"), new CodeArgumentReferenceExpression("outer"))}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberMethod(new CodeTypeReference("IEnumerator`1", new CodeTypeReference[] {
                                                                    new CodeTypeReference("Token")}), "GetEnumerator", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference("LookAheadEnumeratorEnumerator"), "result", new CodeCastExpression(new CodeTypeReference("LookAheadEnumeratorEnumerator"), new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(System.Activator))), "CreateInstance"), new CodeExpression[] {
                                                                                    new CodeTypeOfExpression(new CodeTypeReference("LookAheadEnumeratorEnumerator")),
                                                                                    new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_outer")}))),
                                                                new CodeMethodReturnStatement(new CodeVariableReferenceExpression("result"))}, new CodeTypeReference[] {
                                                                new CodeTypeReference("IEnumerable`1", new CodeTypeReference[] {
                                                                            new CodeTypeReference("Token")})}, null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberMethod(new CodeTypeReference(typeof(System.Collections.IEnumerator)), "GetEnumerator", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeMethodReturnStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "GetEnumerator"), new CodeExpression[0]))}, new CodeTypeReference[0], new CodeTypeReference(typeof(System.Collections.IEnumerable)), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._TypeDeclaration("LookAheadEnumeratorEnumerator", true, false, false, false, false, (MemberAttributes.Final | MemberAttributes. Private), TypeAttributes.NotPublic, new CodeTypeParameter[0], new CodeTypeReference[] {
                                                    new CodeTypeReference(typeof(object)),
                                                    new CodeTypeReference("IEnumerator`1", new CodeTypeReference[] {
                                                                new CodeTypeReference("Token")})}, new CodeTypeMember[] {
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_NotStarted", new CodePrimitiveExpression(-2), (MemberAttributes.Const | MemberAttributes. Private), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_Ended", new CodePrimitiveExpression(-1), (MemberAttributes.Const | MemberAttributes. Private), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_Disposed", new CodePrimitiveExpression(-3), (MemberAttributes.Const | MemberAttributes. Private), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference("LookAheadEnumerator"), "_outer", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_index", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference("Token"), "_current", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._Constructor((MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference("LookAheadEnumerator"), "outer")}, new CodeExpression[0], new CodeExpression[0], new CodeStatement[] {
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_outer"), new CodeArgumentReferenceExpression("outer")),
                                                                new CodeConditionStatement(new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_outer"), "IsEnumerating"), new CodeStatement[] {
                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_outer"), "Current"))}, new CodeStatement[0]),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_index"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LookAheadEnumeratorEnumerator")), "_NotStarted"))}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberProperty(new CodeTypeReference("Token"), "Current", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.GreaterThan, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_index")), new CodeStatement[] {
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_index"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LookAheadEnumeratorEnumerator")), "_NotStarted")), new CodeStatement[] {
                                                                                        new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("InvalidOperationException"), new CodeExpression[] {
                                                                                                        new CodePrimitiveExpression("The cursor is before the start of the enumeration.")}))}, new CodeStatement[0]),
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_index"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LookAheadEnumeratorEnumerator")), "_Ended")), new CodeStatement[] {
                                                                                        new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("InvalidOperationException"), new CodeExpression[] {
                                                                                                        new CodePrimitiveExpression("The cursor is after the end of the enumeration.")}))}, new CodeStatement[0]),
                                                                            new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("ObjectDisposedException"), new CodeExpression[] {
                                                                                            new CodePropertyReferenceExpression(new CodeTypeOfExpression(new CodeTypeReference("LookAheadEnumeratorEnumerator")), "Name")}))}, new CodeStatement[0]),
                                                                new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"))}, new CodeStatement[0], new CodeTypeReference[] {
                                                                new CodeTypeReference("IEnumerator`1", new CodeTypeReference[] {
                                                                            new CodeTypeReference("Token")})}, null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberProperty(new CodeTypeReference(typeof(object)), "Current", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeMethodReturnStatement(new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Current"))}, new CodeStatement[0], new CodeTypeReference[0], new CodeTypeReference(typeof(System.Collections.IEnumerator)), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberMethod(new CodeTypeReference(typeof(void)), "Dispose", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_index"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LookAheadEnumeratorEnumerator")), "_Disposed"))}, new CodeTypeReference[0], new CodeTypeReference(typeof(System.IDisposable)), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberMethod(new CodeTypeReference(typeof(bool)), "MoveNext", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference("Token"), "value", null),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.GreaterThan, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_index")), new CodeStatement[] {
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_index"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LookAheadEnumeratorEnumerator")), "_Disposed")), new CodeStatement[] {
                                                                                        new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("ObjectDisposedException"), new CodeExpression[] {
                                                                                                        new CodePropertyReferenceExpression(new CodeTypeOfExpression(new CodeTypeReference("LookAheadEnumeratorEnumerator")), "Name")}))}, new CodeStatement[0]),
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_index"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LookAheadEnumeratorEnumerator")), "_Ended")), new CodeStatement[] {
                                                                                        new CodeMethodReturnStatement(new CodePrimitiveExpression(false))}, new CodeStatement[0]),
                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_index"), new CodePrimitiveExpression(-1))}, new CodeStatement[0]),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_index"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_index"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_outer"), "TryPeek"), new CodeExpression[] {
                                                                                    new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_index"),
                                                                                    new CodeDirectionExpression(FieldDirection.Out, new CodeVariableReferenceExpression("value"))})), new CodeStatement[] {
                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_index"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LookAheadEnumeratorEnumerator")), "_Ended")),
                                                                            new CodeMethodReturnStatement(new CodePrimitiveExpression(false))}, new CodeStatement[0]),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), new CodeVariableReferenceExpression("value")),
                                                                new CodeMethodReturnStatement(new CodePrimitiveExpression(true))}, new CodeTypeReference[0], new CodeTypeReference(typeof(System.Collections.IEnumerator)), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberMethod(new CodeTypeReference(typeof(void)), "Reset", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_index"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.LookAheadEnumeratorEnumerator")), "_NotStarted"))}, new CodeTypeReference[0], new CodeTypeReference(typeof(System.Collections.IEnumerator)), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0])}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0]);
            }
        }
        public static System.CodeDom.CodeCompileUnit LRNodeType {
            get {
                return Deslanged._CompileUnit(new string[0], new CodeNamespace[] {
                            Deslanged._Namespace("", new CodeNamespaceImport[0], new CodeTypeDeclaration[0], new CodeCommentStatement[0]),
                            Deslanged._Namespace("Glory", new CodeNamespaceImport[0], new CodeTypeDeclaration[] {
                                        Deslanged._TypeDeclaration("LRNodeType", false, true, false, false, false, (MemberAttributes.Final | MemberAttributes. Private), TypeAttributes.NotPublic, new CodeTypeParameter[0], new CodeTypeReference[0], new CodeTypeMember[] {
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(void)), "Initial", new CodePrimitiveExpression(-1), (MemberAttributes.Final | MemberAttributes. Private), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(void)), "Shift", null, (MemberAttributes.Final | MemberAttributes. Private), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(void)), "Reduce", null, (MemberAttributes.Final | MemberAttributes. Private), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(void)), "Accept", null, (MemberAttributes.Final | MemberAttributes. Private), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(void)), "Error", null, (MemberAttributes.Final | MemberAttributes. Private), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(void)), "EndDocument", null, (MemberAttributes.Final | MemberAttributes. Private), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0])}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0]);
            }
        }
        public static System.CodeDom.CodeCompileUnit ParseAttribute {
            get {
                return Deslanged._CompileUnit(new string[0], new CodeNamespace[] {
                            Deslanged._Namespace("", new CodeNamespaceImport[] {
                                        new CodeNamespaceImport("System"),
                                        new CodeNamespaceImport("System.ComponentModel"),
                                        new CodeNamespaceImport("System.ComponentModel.Design.Serialization"),
                                        new CodeNamespaceImport("System.Globalization")}, new CodeTypeDeclaration[0], new CodeCommentStatement[0]),
                            Deslanged._Namespace("Glory", new CodeNamespaceImport[0], new CodeTypeDeclaration[] {
                                        Deslanged._TypeDeclaration("ParseAttributeConverter", true, false, false, false, false, (MemberAttributes.Final | MemberAttributes. Private), TypeAttributes.NotPublic, new CodeTypeParameter[0], new CodeTypeReference[] {
                                                    new CodeTypeReference("TypeConverter")}, new CodeTypeMember[] {
                                                    Deslanged._MemberMethod(new CodeTypeReference(typeof(bool)), "CanConvertTo", (MemberAttributes.Override | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference("ITypeDescriptorContext"), "context"),
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference("Type"), "destinationType")}, new CodeStatement[] {
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeTypeOfExpression(new CodeTypeReference("InstanceDescriptor")), CodeBinaryOperatorType.IdentityEquality, new CodeArgumentReferenceExpression("destinationType")), new CodeStatement[] {
                                                                            new CodeMethodReturnStatement(new CodePrimitiveExpression(true))}, new CodeStatement[0]),
                                                                new CodeMethodReturnStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeBaseReferenceExpression(), "CanConvertTo"), new CodeExpression[] {
                                                                                new CodeArgumentReferenceExpression("context"),
                                                                                new CodeArgumentReferenceExpression("destinationType")}))}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberMethod(new CodeTypeReference(typeof(object)), "ConvertTo", (MemberAttributes.Override | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference("ITypeDescriptorContext"), "context"),
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference("CultureInfo"), "culture"),
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(object)), "value"),
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference("Type"), "destinationType")}, new CodeStatement[] {
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeTypeOfExpression(new CodeTypeReference("InstanceDescriptor")), CodeBinaryOperatorType.IdentityEquality, new CodeArgumentReferenceExpression("destinationType")), new CodeStatement[] {
                                                                            new CodeVariableDeclarationStatement(new CodeTypeReference("ParseAttribute"), "attr", new CodeCastExpression(new CodeTypeReference("ParseAttribute"), new CodeArgumentReferenceExpression("value"))),
                                                                            new CodeMethodReturnStatement(new CodeObjectCreateExpression(new CodeTypeReference("InstanceDescriptor"), new CodeExpression[] {
                                                                                            new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeOfExpression(new CodeTypeReference("ParseAttribute")), "GetConstructor"), new CodeExpression[] {
                                                                                                        new CodeArrayCreateExpression(new CodeTypeReference(new CodeTypeReference("Type"), 1), new CodeExpression[] {
                                                                                                                    new CodeTypeOfExpression(new CodeTypeReference(typeof(string))),
                                                                                                                    new CodeTypeOfExpression(new CodeTypeReference(typeof(object)))})}),
                                                                                            new CodeArrayCreateExpression(new CodeTypeReference(new CodeTypeReference(typeof(object)), 1), new CodeExpression[] {
                                                                                                        new CodePropertyReferenceExpression(new CodeVariableReferenceExpression("attr"), "Name"),
                                                                                                        new CodePropertyReferenceExpression(new CodeVariableReferenceExpression("attr"), "Value")})}))}, new CodeStatement[0]),
                                                                new CodeMethodReturnStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeBaseReferenceExpression(), "ConvertTo"), new CodeExpression[] {
                                                                                new CodeArgumentReferenceExpression("context"),
                                                                                new CodeArgumentReferenceExpression("culture"),
                                                                                new CodeArgumentReferenceExpression("value"),
                                                                                new CodeArgumentReferenceExpression("destinationType")}))}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._TypeDeclaration("ParseAttribute", false, false, false, true, false, (MemberAttributes.Final | MemberAttributes. Private), (((TypeAttributes.AutoLayout | TypeAttributes. AnsiClass) 
                                                        | TypeAttributes. Class) 
                                                        | TypeAttributes. Public), new CodeTypeParameter[0], new CodeTypeReference[0], new CodeTypeMember[] {
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(string)), "_name", null, ((MemberAttributes)(0)), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(object)), "_value", null, ((MemberAttributes)(0)), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberProperty(new CodeTypeReference(typeof(string)), "Name", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_name"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberProperty(new CodeTypeReference(typeof(object)), "Value", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_value"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._Constructor((MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(string)), "name"),
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(object)), "value")}, new CodeExpression[0], new CodeExpression[0], new CodeStatement[] {
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_name"), new CodeArgumentReferenceExpression("name")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_value"), new CodeArgumentReferenceExpression("value"))}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0], new CodeAttributeDeclaration[] {
                                                    new CodeAttributeDeclaration(new CodeTypeReference("TypeConverter"), new CodeAttributeArgument[] {
                                                                new CodeAttributeArgument(new CodeTypeOfExpression(new CodeTypeReference("ParseAttributeConverter")))})}, new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0])}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0]);
            }
        }
        public static System.CodeDom.CodeCompileUnit ParseNode {
            get {
                return Deslanged._CompileUnit(new string[0], new CodeNamespace[] {
                            Deslanged._Namespace("", new CodeNamespaceImport[] {
                                        new CodeNamespaceImport("System"),
                                        new CodeNamespaceImport("System.Collections.Generic"),
                                        new CodeNamespaceImport("System.Text")}, new CodeTypeDeclaration[0], new CodeCommentStatement[0]),
                            Deslanged._Namespace("Glory", new CodeNamespaceImport[0], new CodeTypeDeclaration[] {
                                        Deslanged._TypeDeclaration("ParseNode", true, false, false, false, true, (MemberAttributes.Final | MemberAttributes. Private), TypeAttributes.NotPublic, new CodeTypeParameter[0], new CodeTypeReference[0], new CodeTypeMember[] {
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_symbolId", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(string)), "_symbol", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(string)), "_value", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_line", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_column", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(long)), "_position", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(new CodeTypeReference("ParseNode"), 1), "_children", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(new CodeTypeReference("ParseAttribute"), 1), "_attributes", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._Constructor((MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "symbolId"),
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(string)), "symbol"),
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(new CodeTypeReference("ParseNode"), 1), "children"),
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(string)), "value"),
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(new CodeTypeReference("ParseAttribute"), 1), "attributes"),
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "line"),
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "column"),
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(long)), "position")}, new CodeExpression[0], new CodeExpression[0], new CodeStatement[] {
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_symbolId"), new CodeArgumentReferenceExpression("symbolId")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_symbol"), new CodeArgumentReferenceExpression("symbol")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_value"), new CodePrimitiveExpression(null)),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_children"), new CodeArgumentReferenceExpression("children")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_value"), new CodeArgumentReferenceExpression("value")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_attributes"), new CodeArgumentReferenceExpression("attributes")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line"), new CodeArgumentReferenceExpression("line")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), new CodeArgumentReferenceExpression("column")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_position"), new CodeArgumentReferenceExpression("position"))}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberProperty(new CodeTypeReference(typeof(bool)), "IsNonTerminal", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeMethodReturnStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(null), CodeBinaryOperatorType.IdentityInequality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_children")))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberProperty(new CodeTypeReference(new CodeTypeReference("ParseNode"), 1), "Children", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_children"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberProperty(new CodeTypeReference(typeof(int)), "SymbolId", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_symbolId"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberProperty(new CodeTypeReference(typeof(string)), "Symbol", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_symbol"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberProperty(new CodeTypeReference(typeof(string)), "Value", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_value"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberProperty(new CodeTypeReference(typeof(int)), "Line", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberProperty(new CodeTypeReference(typeof(int)), "Column", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberProperty(new CodeTypeReference(typeof(long)), "Position", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_position"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberProperty(new CodeTypeReference(new CodeTypeReference("ParseAttribute"), 1), "Attributes", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_attributes"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberProperty(new CodeTypeReference(typeof(bool)), "IsCollapsed", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeIterationStatement(new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "i", new CodePrimitiveExpression(0)), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.LessThan, new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_attributes"), "Length")), new CodeAssignStatement(new CodeVariableReferenceExpression("i"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))), new CodeStatement[] {
                                                                            new CodeVariableDeclarationStatement(new CodeTypeReference("ParseAttribute"), "a", new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_attributes"), new CodeExpression[] {
                                                                                            new CodeVariableReferenceExpression("i")})),
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression("collapsed"), CodeBinaryOperatorType.IdentityEquality, new CodePropertyReferenceExpression(new CodeVariableReferenceExpression("a"), "Name")), new CodeStatement[] {
                                                                                        new CodeTryCatchFinallyStatement(new CodeStatement[] {
                                                                                                    new CodeMethodReturnStatement(new CodeCastExpression(new CodeTypeReference(typeof(bool)), new CodePropertyReferenceExpression(new CodeVariableReferenceExpression("a"), "Value")))}, new CodeCatchClause[] {
                                                                                                    new CodeCatchClause("", new CodeTypeReference("Exception"), new CodeStatement[] {
                                                                                                                new CodeMethodReturnStatement(new CodePrimitiveExpression(false))})}, new CodeStatement[0])}, new CodeStatement[0])}),
                                                                new CodeMethodReturnStatement(new CodePrimitiveExpression(false))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberMethod(new CodeTypeReference(typeof(string)), "ToString", (MemberAttributes.Override | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeMethodReturnStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "ToString"), new CodeExpression[] {
                                                                                new CodePrimitiveExpression(null)}))}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberMethod(new CodeTypeReference(typeof(string)), "ToString", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(string)), "format")}, new CodeStatement[] {
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression("t"), CodeBinaryOperatorType.IdentityEquality, new CodeArgumentReferenceExpression("format")), new CodeStatement[] {
                                                                            new CodeVariableDeclarationStatement(new CodeTypeReference("StringBuilder"), "sb", new CodeObjectCreateExpression(new CodeTypeReference("StringBuilder"), new CodeExpression[0])),
                                                                            new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Glory.ParseNode")), "_AppendTree"), new CodeExpression[] {
                                                                                            new CodeThisReferenceExpression(),
                                                                                            new CodeVariableReferenceExpression("sb")})),
                                                                            new CodeMethodReturnStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeVariableReferenceExpression("sb"), "ToString"), new CodeExpression[0]))}, new CodeStatement[0]),
                                                                new CodeConditionStatement(new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "IsNonTerminal"), new CodeStatement[] {
                                                                            new CodeMethodReturnStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(string))), "Concat"), new CodeExpression[] {
                                                                                            new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Symbol"),
                                                                                            new CodePrimitiveExpression(": Count = "),
                                                                                            new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_children"), "Length"), "ToString"), new CodeExpression[0])}))}, new CodeStatement[0]),
                                                                new CodeMethodReturnStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(string))), "Concat"), new CodeExpression[] {
                                                                                new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Symbol"),
                                                                                new CodePrimitiveExpression(": "),
                                                                                new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Value")}))}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberMethod(new CodeTypeReference(typeof(void)), "_AppendTree", MemberAttributes.Static, new CodeParameterDeclarationExpression[] {
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference("ParseNode"), "node"),
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(System.Text.StringBuilder)), "builder")}, new CodeStatement[] {
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference("List`1", new CodeTypeReference[] {
                                                                                new CodeTypeReference("ParseNode")}), "firstStack", new CodeObjectCreateExpression(new CodeTypeReference("List`1", new CodeTypeReference[] {
                                                                                    new CodeTypeReference("ParseNode")}), new CodeExpression[0])),
                                                                new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeVariableReferenceExpression("firstStack"), "Add"), new CodeExpression[] {
                                                                                new CodeArgumentReferenceExpression("node")})),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference("List`1", new CodeTypeReference[] {
                                                                                new CodeTypeReference("List`1", new CodeTypeReference[] {
                                                                                            new CodeTypeReference("ParseNode")})}), "childListStack", new CodeObjectCreateExpression(new CodeTypeReference("List`1", new CodeTypeReference[] {
                                                                                    new CodeTypeReference("List`1", new CodeTypeReference[] {
                                                                                                new CodeTypeReference("ParseNode")})}), new CodeExpression[0])),
                                                                new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeVariableReferenceExpression("childListStack"), "Add"), new CodeExpression[] {
                                                                                new CodeVariableReferenceExpression("firstStack")})),
                                                                new CodeIterationStatement(new CodeSnippetStatement(""), new CodeBinaryOperatorExpression(new CodePropertyReferenceExpression(new CodeVariableReferenceExpression("childListStack"), "Count"), CodeBinaryOperatorType.GreaterThan, new CodePrimitiveExpression(0)), new CodeSnippetStatement(""), new CodeStatement[] {
                                                                            new CodeVariableDeclarationStatement(new CodeTypeReference("List`1", new CodeTypeReference[] {
                                                                                            new CodeTypeReference("ParseNode")}), "childStack", new CodeIndexerExpression(new CodeVariableReferenceExpression("childListStack"), new CodeExpression[] {
                                                                                            new CodeBinaryOperatorExpression(new CodePropertyReferenceExpression(new CodeVariableReferenceExpression("childListStack"), "Count"), CodeBinaryOperatorType.Subtract, new CodePrimitiveExpression(1))})),
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePropertyReferenceExpression(new CodeVariableReferenceExpression("childStack"), "Count"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(0)), new CodeStatement[] {
                                                                                        new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeVariableReferenceExpression("childListStack"), "RemoveAt"), new CodeExpression[] {
                                                                                                        new CodeBinaryOperatorExpression(new CodePropertyReferenceExpression(new CodeVariableReferenceExpression("childListStack"), "Count"), CodeBinaryOperatorType.Subtract, new CodePrimitiveExpression(1))}))}, new CodeStatement[] {
                                                                                        new CodeAssignStatement(new CodeArgumentReferenceExpression("node"), new CodeIndexerExpression(new CodeVariableReferenceExpression("childStack"), new CodeExpression[] {
                                                                                                        new CodePrimitiveExpression(0)})),
                                                                                        new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeVariableReferenceExpression("childStack"), "RemoveAt"), new CodeExpression[] {
                                                                                                        new CodePrimitiveExpression(0)})),
                                                                                        new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(string)), "indent", new CodePrimitiveExpression("")),
                                                                                        new CodeIterationStatement(new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "i", new CodePrimitiveExpression(0)), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.LessThan, new CodeBinaryOperatorExpression(new CodePropertyReferenceExpression(new CodeVariableReferenceExpression("childListStack"), "Count"), CodeBinaryOperatorType.Subtract, new CodePrimitiveExpression(1))), new CodeAssignStatement(new CodeVariableReferenceExpression("i"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))), new CodeStatement[] {
                                                                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.LessThan, new CodePropertyReferenceExpression(new CodeIndexerExpression(new CodeVariableReferenceExpression("childListStack"), new CodeExpression[] {
                                                                                                                            new CodeVariableReferenceExpression("i")}), "Count")), new CodeStatement[] {
                                                                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("indent"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("indent"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression("|  ")))}, new CodeStatement[] {
                                                                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("indent"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("indent"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression("   ")))})}),
                                                                                        new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(string)), "s", new CodePropertyReferenceExpression(new CodeArgumentReferenceExpression("node"), "Symbol")),
                                                                                        new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(string)), "ns", new CodePrimitiveExpression("")),
                                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(null), CodeBinaryOperatorType.IdentityInequality, new CodePropertyReferenceExpression(new CodeArgumentReferenceExpression("node"), "Value")), new CodeStatement[] {
                                                                                                    new CodeAssignStatement(new CodeVariableReferenceExpression("ns"), new CodePropertyReferenceExpression(new CodeArgumentReferenceExpression("node"), "Value"))}, new CodeStatement[0]),
                                                                                        new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(string)), "ss", new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(string))), "Concat"), new CodeExpression[] {
                                                                                                        new CodeVariableReferenceExpression("indent"),
                                                                                                        new CodePrimitiveExpression("+- "),
                                                                                                        new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(string))), "Concat"), new CodeExpression[] {
                                                                                                                    new CodeVariableReferenceExpression("s"),
                                                                                                                    new CodePrimitiveExpression(" "),
                                                                                                                    new CodeVariableReferenceExpression("ns")})})),
                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("ss"), new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeVariableReferenceExpression("ss"), "TrimEnd"), new CodeExpression[0])),
                                                                                        new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeArgumentReferenceExpression("builder"), "Append"), new CodeExpression[] {
                                                                                                        new CodeVariableReferenceExpression("ss")})),
                                                                                        new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeArgumentReferenceExpression("builder"), "AppendLine"), new CodeExpression[0])),
                                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePropertyReferenceExpression(new CodeArgumentReferenceExpression("node"), "IsNonTerminal"), CodeBinaryOperatorType.BooleanAnd, new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.LessThan, new CodePropertyReferenceExpression(new CodePropertyReferenceExpression(new CodeArgumentReferenceExpression("node"), "Children"), "Length"))), new CodeStatement[] {
                                                                                                    new CodeVariableDeclarationStatement(new CodeTypeReference("List`1", new CodeTypeReference[] {
                                                                                                                    new CodeTypeReference("ParseNode")}), "pnl", new CodeObjectCreateExpression(new CodeTypeReference("List`1", new CodeTypeReference[] {
                                                                                                                        new CodeTypeReference("ParseNode")}), new CodeExpression[] {
                                                                                                                    new CodePropertyReferenceExpression(new CodeArgumentReferenceExpression("node"), "Children")})),
                                                                                                    new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeVariableReferenceExpression("childListStack"), "Add"), new CodeExpression[] {
                                                                                                                    new CodeVariableReferenceExpression("pnl")}))}, new CodeStatement[0])})})}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0])}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0]);
            }
        }
        public static System.CodeDom.CodeCompileUnit Token {
            get {
                return Deslanged._CompileUnit(new string[0], new CodeNamespace[] {
                            Deslanged._Namespace("", new CodeNamespaceImport[] {
                                        new CodeNamespaceImport("System"),
                                        new CodeNamespaceImport("System.Collections.Generic"),
                                        new CodeNamespaceImport("System.Text")}, new CodeTypeDeclaration[0], new CodeCommentStatement[0]),
                            Deslanged._Namespace("Glory", new CodeNamespaceImport[0], new CodeTypeDeclaration[] {
                                        Deslanged._TypeDeclaration("Token", false, false, false, true, false, (MemberAttributes.Final | MemberAttributes. Private), TypeAttributes.NotPublic, new CodeTypeParameter[0], new CodeTypeReference[0], new CodeTypeMember[] {
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(string)), "Symbol", null, (MemberAttributes.Final | MemberAttributes. Public), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(int)), "SymbolId", null, (MemberAttributes.Final | MemberAttributes. Public), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(int)), "Line", null, (MemberAttributes.Final | MemberAttributes. Public), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(int)), "Column", null, (MemberAttributes.Final | MemberAttributes. Public), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(long)), "Position", null, (MemberAttributes.Final | MemberAttributes. Public), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(string)), "Value", null, (MemberAttributes.Final | MemberAttributes. Public), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberMethod(new CodeTypeReference(typeof(string)), "ToString", (MemberAttributes.Override | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeMethodReturnStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(string))), "Concat"), new CodeExpression[] {
                                                                                new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "Symbol"),
                                                                                new CodePrimitiveExpression("("),
                                                                                new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(string))), "Concat"), new CodeExpression[] {
                                                                                            new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "SymbolId"), "ToString"), new CodeExpression[0]),
                                                                                            new CodePrimitiveExpression(") : "),
                                                                                            new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "Value")})}))}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0])}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0]);
            }
        }
    }
}
