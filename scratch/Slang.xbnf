// Slang.xbnf
// This is the XBNF spec for Slang (gplex version - unicode enabled)
Expression<start>=Term;
Term= Factor { ("+"|"-") Factor };
Factor= Unary { ("*"|"/"|"%") Unary };
MemberFieldRef = "." Identifier;
MemberInvokeRef = "(" [ MethodArg { "," MethodArg } ] ")";
MemberIndexerRef = "[" Expression { "," Expression } "]";
MemberAnyRef<collapsed> = MemberFieldRef | MemberInvokeRef | MemberIndexerRef;
MethodArg = [ outKeyword | refKeyword ] Expression;
TypeRef = Type;
IntrinsicType=	boolType	|
				charType	|
				stringType	|
				floatType	|
				doubleType	|
				decimalType	|
				sbyteType	|
				byteType	|
				shortType	|
				ushortType	|
				intType		|
				uintType	|
				longType	|
				ulongType	|
				objectType	;
TypeBase = (identifier { "."  identifier }) | IntrinsicType;
Type=TypeElement { TypeArraySpec };
TypeElement = TypeBase [ TypeGenericPart ];
TypeGenericPart= "<" [ Type { "," Type } ] ">";
TypeArraySpec= "[" { ArraySpecRank } "]";
TypeArraySpecRank = comma;
Cast<virtual,firsts="lparen"> { 
	return _ParseCast(context);
}
// much easier to code this as a virtual
ArraySpec<virtual,firsts="lbracket"> {
	return _ParseArraySpec(context);
}
New= newObj TypeElement ( NewObjectPart | NewArrayPart );
NewObjectPart= "(" [ Expression { "," Expression } ] ")";
NewArrayPart= ArraySpec;

// this is necessary so we can get Parsley to generate a 
// method called ParseTypeCastPart() which we use
// when resolving casts
TypeCastPart<include,collapsed>= Type ")"; 
ArraySpecExpressionList<include,collapsed>= Expression { "," Expression } "]";
ArrayInitializer<include>= "=" "{" [ Expression { "," Expression } ] "}";
SubExpression<collapsed> = "(" Expression ")" : where { return !_IsCast(context);}
// use the where clause to override first first conflict:
Unary= ("+"|"-") Unary | SubExpression | Leaf : where { return true;}
Leaf=	( Identifier | IntrinsicType )	{ MemberAnyRef }	|
		verbatimStringLiteral								|
		integerLiteral										| 
		floatLiteral										|
		stringLiteral										|
		Cast												|
		typeOf "(" Type ")"									|
		nameOf "(" Identifier ")"							|
		New;
		
// Identifier exists as a non-terminal solely to attach a semantic constraint to identifiers.
// we collapse it because we don't need it in the final parse tree but in the grammar 
// we have to refer to "Identifier" instead of identifier or verbatimIdentifer.
Identifier<collapsed> = verbatimIdentifier | identifier : where { return !Keywords.Contains(context.Value); }

// be careful about the order of the terminals.
// remember they have priorities in the final lexer

// begin keywords
outKeyword="out";
refKeyword="ref";
// end keywords

verbatimIdentifier='@(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*';
typeOf="typeof";
nameOf="nameOf";
newObj="new";
stringType="string";
boolType="bool";
charType="char";
floatType="float";
doubleType="double";
decimalType="decimal";
sbyteType="sbyte";
byteType="byte";
shortType="short";
ushortType="ushort";
intType="int";
uintType="uint";
longType="long";
ulongType="ulong";
objectType="object";
verbatimStringLiteral='@"([^"|""])*"';
identifier='(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*';
stringLiteral='"([^\\"\'\a\b\f\n\r\t\v\0]|\\[^\r\n]|\\[0-7]{3}|\\x[0-9A-Fa-f]{2}|\\u[0-9A-Fa-f]{4}|\\U[0-9A-Fa-f]{8})*"';
lineComment<hidden>='\/\/[^\n]*';
blockComment<hidden,blockEnd="*/">="/*";
characterLiteral='[\u0027]([^\\"\'\a\b\f\n\r\t\v\0]|\\[^\r\n]|\\[0-7]{3}|\\x[0-9A-Fa-f]{2}|\\u[0-9A-Fa-f]{4}|\\U[0-9A-Fa-f]{8})[\u0027]';
whitespace<hidden>='[ \t\r\n\v\f]+';
lte="<=";
lt="<";
gte=">=";
gt=">";
eqEq="==";
notEq="!=";
eq="=";
inc="++";
addAssign="+=";
add="+";
dec="--";
subAssign="-=";
sub="-";
mulAssign="*=";
mul="*";
divAssign="/=";
div="/";
modAssign="%=";
mod="%";
and="&&";
bitwiseAndAssign="&=";
bitwiseAnd="&";
or="||";
bitwiseOrAssign="|=";
bitwiseOr="|";
not="!";
lbracket="[";
rbracket="]";
lparen="(";
rparen=")";
lbrace="{";
rbrace="}";
comma=",";
colonColon="::";
colon=":";
semi=";";
dot=".";
integerLiteral = '(0x[0-9A-Fa-f]{1,16}|(0|[1-9][0-9]*))([Uu][Ll]?|[Ll][Uu]?)?';
floatLiteral= '((0|[1-9][0-9]*)(\.[0-9]+)?([Ee][\+\-]?[0-9]+)?[DdMmFf]?)|((\.[0-9]+)([Ee][\+\-]?[0-9]+)?[DdMmFf]?)';
directive<blockEnd="\n">='#[ \t]*[a-z]+[ \t]*';
// helpers
{
	static HashSet<string> Keywords=_BuildKeywords();
	static HashSet<string> _BuildKeywords() 
	{
		var result = new HashSet<string>();
		string[] sa = "abstract|as|ascending|async|await|base|bool|break|byte|case|catch|char|checked|class|const|continue|decimal|default|delegate|descending|do|double|dynamic|else|enum|equals|explicit|extern|event|false|finally|fixed|float|for|foreach|get|global|goto|if|implicit|int|interface|internal|is|lock|long|namespace|new|null|object|operator|out|override|params|partial|private|protected|public|readonly|ref|return|sbyte|sealed|set|short|sizeof|stackalloc|static|string|struct|switch|this|throw|true|try|typeof|uint|ulong|unchecked|unsafe|ushort|using|var|virtual|void|volatile|while|yield".Split(new char[] {'|'});
		
		for(var i = 0;i<sa.Length;++i) 
			result.Add(sa[i]);
		
		return result;
	}
	static ParseNode _ParseCast(ParserContext context) {
		int line = context.Line;
        int column = context.Column;
        long position = context.Position;

		if("("!=context.Value)
			context.Error("Expecting ( as start of expression or cast");
		ParseNode lp = new ParseNode(SlangParser.lparen, "lparen", context.Value, context.Line, context.Column, context.Position);
		context.Advance();
		ParseNode type = ParseTypeCastPart(context);
		ParseNode expr = ParseExpression(context);
		return new ParseNode(SlangParser.Cast, "Cast", new ParseNode[] {type,expr}, line, column, position);
	}
	static ParseNode _ParseArraySpec(ParserContext context) 
	{
		int line = context.Line;
        int column = context.Column;
        long position = context.Position;
		if("["!=context.Value)
			context.Error("Expecting start of array spec");
		ParseNode lb = null;
		ParseNode expr = null;
		ParseNode init = null;
		ParserContext pc = context.GetLookAhead(true);
		pc.Advance();
		if("]"!=pc.Value) 
		{
			lb = new ParseNode(SlangParser.lbracket, "lbracket", context.Value, context.Line, context.Column, context.Position);
			context.Advance();
			expr = ParseArraySpecExpressionList(context);
			return new ParseNode(SlangParser.ArraySpec,"ArraySpec", new ParseNode[] {expr },line,column,position);
		} else {
			expr=ParseTypeArraySpec(context);
			init=ParseArrayInitializer(context);
			return new ParseNode(SlangParser.ArraySpec,"ArraySpec", new ParseNode[] {expr ,init},line,column,position);
		}
		
		
	}
	static bool _IsCast(ParserContext context) {
		context = context.GetLookAhead(true);
		try 
		{
			if("("!=context.Value)
				return false;
			context.Advance();
			ParseNode type = ParseTypeCastPart(context);
			ParseNode expr = ParseExpression(context);
			return true;
		}
		catch(Exception ex) {
		
		}
		return false;
	}
}