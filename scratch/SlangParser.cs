//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CD {
    using System;
    using System.Collections.Generic;
    
    /// <summary>Parses the indicated grammar. Refer to C:\dev\BuildPack\scratch\Slang.xbnf</summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Parsley", "0.1.2.0")]
    internal partial class SlangParser {
        internal const int ErrorSymbol = -1;
        internal const int EosSymbol = -2;
        public const int UsingDirective = 0;
        public const int CompileUnit = 1;
        public const int NamespaceNameList = 2;
        public const int Namespace = 3;
        public const int NamespaceNameFollows = 4;
        public const int NamespaceFollows = 5;
        public const int NamespaceNameListRightAssoc = 6;
        public const int NamespaceName = 7;
        public const int NamespaceNamePart = 8;
        public const int Identifier = 22;
        public const int namespaceKeyword = 401;
        public const int usingKeyword = 402;
        public const int verbatimIdentifier = 403;
        public const int identifier2 = 430;
        public const int lbrace = 463;
        public const int rbrace = 464;
        public const int dot = 467;
        public const int semi = 481;
        internal static ParseNode ParseUsingDirective(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // UsingDirective -> usingKeyword NamespaceName semi
            if ((SlangParser.usingKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[3];
                if ((false 
                            == (SlangParser.usingKeyword == context.SymbolId))) {
                    context.Error("Expecting usingKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(SlangParser.usingKeyword, "usingKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[1] = SlangParser.ParseNamespaceName(context);
                if ((false 
                            == (StatementParser.semi == context.SymbolId))) {
                    context.Error("Expecting semi at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[2] = new ParseNode(StatementParser.semi, "semi", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(SlangParser.UsingDirective, "UsingDirective", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting usingKeyword at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCompileUnit(ParserContext context) {
            // CompileUnit
            return _ParseCompileUnit(context);
        }
        /// <summary>
        /// Parses a production of the form:
        /// CompileUnit
        /// </summary>
        /// <remarks>
        /// The production rules are:
        /// CompileUnit ->
        /// </remarks>
        /// <param name="tokenizer">The tokenizer to parse with</param><returns>A <see cref="ParseNode" /> representing the parsed tokens</returns>
        public static ParseNode Parse(System.Collections.Generic.IEnumerable<Token> tokenizer) {
            ParserContext context = new ParserContext(tokenizer);
            context.EnsureStarted();
            ParseNode result = SlangParser.ParseCompileUnit(context);
            if ((false == context.IsEnded)) {
                context.Error("Unexpected remainder in input.");
            }
            return result;
        }
        internal static ParseNode ParseNamespaceNameList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // NamespaceNameList -> dot Identifier NamespaceNameListRightAssoc
            if ((ExpressionParser.dot == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.dot == context.SymbolId))) {
                    context.Error("Expecting dot at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.dot, "dot", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                children.AddRange(SlangParser.ParseNamespaceNameListRightAssoc(context).Children);
                return new ParseNode(SlangParser.NamespaceNameList, "NamespaceNameList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting dot at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseNamespace(ParserContext context) {
            // Namespace
            return _ParseNamespace(context);
        }
        internal static ParseNode ParseNamespaceNameFollows(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // NamespaceNameFollows -> NamespaceName lbrace
            if (((ExpressionParser.verbatimIdentifier == context.SymbolId) 
                        || (ExpressionParser.identifier2 == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = SlangParser.ParseNamespaceName(context);
                if ((false 
                            == (ExpressionParser.lbrace == context.SymbolId))) {
                    context.Error("Expecting lbrace at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.lbrace, "lbrace", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(SlangParser.NamespaceNameFollows, "NamespaceNameFollows", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting NamespaceName at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseNamespaceFollows(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // NamespaceFollows -> Namespace rbrace
            if ((SlangParser.namespaceKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                children[0] = SlangParser.ParseNamespace(context);
                if ((false 
                            == (ExpressionParser.rbrace == context.SymbolId))) {
                    context.Error("Expecting rbrace at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.rbrace, "rbrace", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(SlangParser.NamespaceFollows, "NamespaceFollows", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Namespace at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseNamespaceNameListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // NamespaceNameListRightAssoc -> dot Identifier NamespaceNameListRightAssoc
            if ((ExpressionParser.dot == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.dot == context.SymbolId))) {
                    context.Error("Expecting dot at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.dot, "dot", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                children.AddRange(SlangParser.ParseNamespaceNameListRightAssoc(context).Children);
                return new ParseNode(SlangParser.NamespaceNameListRightAssoc, "NamespaceNameListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // NamespaceNameListRightAssoc ->
            if (((StatementParser.semi == context.SymbolId) 
                        || (ExpressionParser.lbrace == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(SlangParser.NamespaceNameListRightAssoc, "NamespaceNameListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting dot at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseNamespaceName(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // NamespaceName -> Identifier NamespaceNamePart
            if (((ExpressionParser.verbatimIdentifier == context.SymbolId) 
                        || (ExpressionParser.identifier2 == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                children.AddRange(SlangParser.ParseNamespaceNamePart(context).Children);
                return new ParseNode(SlangParser.NamespaceName, "NamespaceName", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Identifier at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseNamespaceNamePart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // NamespaceNamePart -> NamespaceNameList
            if ((ExpressionParser.dot == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(SlangParser.ParseNamespaceNameList(context).Children);
                return new ParseNode(SlangParser.NamespaceNamePart, "NamespaceNamePart", children.ToArray(), line__, column__, position__);
            }
            // NamespaceNamePart ->
            if (((StatementParser.semi == context.SymbolId) 
                        || (ExpressionParser.lbrace == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(SlangParser.NamespaceNamePart, "NamespaceNamePart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting NamespaceNameList at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
    }
    /// <summary>Parses the indicated grammar. Refer to C:\dev\BuildPack\scratch\SlangExpression.xbnf</summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Parsley", "0.1.2.0")]
    internal partial class ExpressionParser {
        internal const int ErrorSymbol = -1;
        internal const int EosSymbol = -2;
        public const int NamespaceNameList = 2;
        public const int NamespaceNameListRightAssoc = 6;
        public const int Expression = 9;
        public const int MemberFieldRef = 10;
        public const int MemberAnyRef = 11;
        public const int MethodArg = 12;
        public const int TypeRef = 13;
        public const int IntrinsicType = 14;
        public const int TypeBase = 15;
        public const int TypeArraySpecRank = 16;
        public const int NewArrayPart = 17;
        public const int TypeCastExpressionPart = 18;
        public const int SubExpression = 19;
        public const int UnaryExpression = 20;
        public const int PrimaryExpression = 21;
        public const int Identifier = 22;
        public const int RelationalExpressionList = 23;
        public const int EqualityExpressionList = 24;
        public const int BitwiseAndExpressionList = 25;
        public const int BitwiseOrExpressionList = 26;
        public const int AndExpressionList = 27;
        public const int OrExpressionList = 28;
        public const int AssignExpressionList = 29;
        public const int TermExpressionList = 30;
        public const int FactorExpressionList = 31;
        public const int MemberInvokeRefList = 32;
        public const int MemberIndexerRefList = 33;
        public const int TypeBaseList = 34;
        public const int TypeArraySpecList = 35;
        public const int TypeGenericPartList = 36;
        public const int TypeArraySpecRankList = 37;
        public const int NewObjectPartList = 38;
        public const int ArraySpecExpressionListList = 39;
        public const int ArrayInitializerList = 40;
        public const int MemberAnyRefList = 41;
        public const int MemberAnyRefList2 = 42;
        public const int MemberAnyRefList3 = 43;
        public const int MemberAnyRefList4 = 44;
        public const int MemberAnyRefList5 = 45;
        public const int MemberAnyRefList6 = 46;
        public const int MemberAnyRefList7 = 47;
        public const int MemberAnyRefList8 = 48;
        public const int MemberAnyRefList9 = 49;
        public const int MemberAnyRefList10 = 50;
        public const int MemberAnyRefList11 = 51;
        public const int MemberAnyRefList12 = 52;
        public const int MemberAnyRefList13 = 53;
        public const int MemberAnyRefList14 = 54;
        public const int CastExpression = 55;
        public const int ArraySpec = 56;
        public const int TypeOrFieldRef = 57;
        public const int ExpressionFollows = 58;
        public const int ExpressionFollows2 = 59;
        public const int ExpressionFollows3 = 60;
        public const int ExpressionFollows4 = 61;
        public const int TypeFollows = 62;
        public const int TypeFollows2 = 63;
        public const int TypeFollows3 = 64;
        public const int TypeFollows4 = 65;
        public const int TypeFollows5 = 66;
        public const int RelationalExpressionListRightAssoc = 67;
        public const int RelationalExpressionListRightAssoc2 = 68;
        public const int EqualityExpressionListRightAssoc = 69;
        public const int BitwiseAndExpressionListRightAssoc = 70;
        public const int BitwiseOrExpressionListRightAssoc = 71;
        public const int AndExpressionListRightAssoc = 72;
        public const int OrExpressionListRightAssoc = 73;
        public const int AssignExpressionListRightAssoc = 74;
        public const int AssignExpressionListRightAssoc2 = 75;
        public const int AssignExpressionListRightAssoc3 = 76;
        public const int AssignExpressionListRightAssoc4 = 77;
        public const int TermExpressionListRightAssoc = 78;
        public const int FactorExpressionListRightAssoc = 79;
        public const int FactorExpressionListRightAssoc2 = 80;
        public const int MemberInvokeRefListRightAssoc = 81;
        public const int MemberIndexerRefListRightAssoc = 82;
        public const int TypeBaseListRightAssoc = 83;
        public const int TypeArraySpecListRightAssoc = 84;
        public const int TypeGenericPartListRightAssoc = 85;
        public const int TypeArraySpecRankListRightAssoc = 86;
        public const int NewObjectPartListRightAssoc = 87;
        public const int ArraySpecExpressionListListRightAssoc = 88;
        public const int ArrayInitializerListRightAssoc = 89;
        public const int MemberAnyRefListRightAssoc = 90;
        public const int MemberAnyRefList2RightAssoc = 91;
        public const int MemberAnyRefList3RightAssoc = 92;
        public const int MemberAnyRefList4RightAssoc = 93;
        public const int MemberAnyRefList5RightAssoc = 94;
        public const int MemberAnyRefList6RightAssoc = 95;
        public const int MemberAnyRefList7RightAssoc = 96;
        public const int MemberAnyRefList8RightAssoc = 97;
        public const int MemberAnyRefList9RightAssoc = 98;
        public const int MemberAnyRefList10RightAssoc = 99;
        public const int MemberAnyRefList11RightAssoc = 100;
        public const int MemberAnyRefList12RightAssoc = 101;
        public const int MemberAnyRefList13RightAssoc = 102;
        public const int MemberAnyRefList14RightAssoc = 103;
        public const int RelationalExpression = 104;
        public const int RelationalExpressionPart = 105;
        public const int EqualityExpression = 106;
        public const int EqualityExpressionPart = 107;
        public const int BitwiseAndExpression = 108;
        public const int BitwiseAndExpressionPart = 109;
        public const int BitwiseOrExpression = 110;
        public const int BitwiseOrExpressionPart = 111;
        public const int AndExpression = 112;
        public const int AndExpressionPart = 113;
        public const int OrExpression = 114;
        public const int OrExpressionPart = 115;
        public const int AssignExpression = 116;
        public const int AssignExpressionPart = 117;
        public const int TermExpression = 118;
        public const int TermExpressionPart = 119;
        public const int FactorExpression = 120;
        public const int FactorExpressionPart = 121;
        public const int MemberInvokeRefPart = 122;
        public const int MemberIndexerRef = 123;
        public const int MemberIndexerRefPart = 124;
        public const int TypeBasePart = 125;
        public const int Type = 126;
        public const int TypePart = 127;
        public const int TypeElement = 128;
        public const int TypeElementPart = 129;
        public const int TypeGenericPartPart = 130;
        public const int TypeArraySpec = 131;
        public const int TypeArraySpecPart = 132;
        public const int NewExpression = 133;
        public const int NewExpressionPart = 134;
        public const int NewObjectPartPart = 135;
        public const int ArraySpecExpressionList = 136;
        public const int ArraySpecExpressionListPart = 137;
        public const int ArrayInitializerPart = 138;
        public const int FieldRef = 139;
        public const int FieldRefPart = 140;
        public const int PrimaryExpressionPart = 141;
        public const int PrimaryExpressionPart2 = 142;
        public const int PrimaryExpressionPart3 = 143;
        public const int PrimaryExpressionPart4 = 144;
        public const int PrimaryExpressionPart5 = 145;
        public const int PrimaryExpressionPart6 = 146;
        public const int PrimaryExpressionPart7 = 147;
        public const int PrimaryExpressionPart8 = 148;
        public const int PrimaryExpressionPart9 = 149;
        public const int PrimaryExpressionPart10 = 150;
        public const int PrimaryExpressionPart11 = 151;
        public const int PrimaryExpressionPart12 = 152;
        public const int PrimaryExpressionPart13 = 153;
        public const int RelationalExpressionListPart = 154;
        public const int AssignExpressionListPart = 155;
        public const int EqualityExpressionListRightAssoc2 = 156;
        public const int TermExpressionListRightAssoc2 = 157;
        public const int FactorExpressionListRightAssoc3 = 158;
        public const int RelationalExpressionListRightAssoc3 = 159;
        public const int AssignExpressionListRightAssoc5 = 160;
        public const int MemberInvokeRef = 161;
        public const int MemberInvokeRefPart2 = 162;
        public const int TypeGenericPart = 163;
        public const int TypeGenericPartPart2 = 164;
        public const int NewObjectPart = 165;
        public const int NewObjectPartPart2 = 166;
        public const int ArrayInitializer = 167;
        public const int ArrayInitializerPart2 = 168;
        public const int verbatimIdentifier = 403;
        public const int outKeyword = 404;
        public const int refKeyword = 405;
        public const int typeOf = 406;
        public const int nameOf = 407;
        public const int defaultOf = 408;
        public const int newKeyword = 409;
        public const int stringType = 410;
        public const int boolType = 411;
        public const int charType = 412;
        public const int floatType = 413;
        public const int doubleType = 414;
        public const int decimalType = 415;
        public const int sbyteType = 416;
        public const int byteType = 417;
        public const int shortType = 418;
        public const int ushortType = 419;
        public const int intType = 420;
        public const int uintType = 421;
        public const int longType = 422;
        public const int ulongType = 423;
        public const int objectType = 424;
        public const int boolLiteral = 425;
        public const int nullLiteral = 426;
        public const int thisRef = 427;
        public const int baseRef = 428;
        public const int verbatimStringLiteral = 429;
        public const int identifier2 = 430;
        public const int stringLiteral = 431;
        public const int characterLiteral = 432;
        public const int lte = 433;
        public const int lt = 434;
        public const int gte = 435;
        public const int gt = 436;
        public const int eqEq = 437;
        public const int notEq = 438;
        public const int eq = 439;
        public const int inc = 440;
        public const int addAssign = 441;
        public const int add = 442;
        public const int dec = 443;
        public const int subAssign = 444;
        public const int sub = 445;
        public const int mulAssign = 446;
        public const int mul = 447;
        public const int divAssign = 448;
        public const int div = 449;
        public const int modAssign = 450;
        public const int mod = 451;
        public const int and = 452;
        public const int bitwiseAndAssign = 453;
        public const int bitwiseAnd = 454;
        public const int or = 455;
        public const int bitwiseOrAssign = 456;
        public const int bitwiseOr = 457;
        public const int not = 458;
        public const int lbracket = 459;
        public const int rbracket = 460;
        public const int lparen = 461;
        public const int rparen = 462;
        public const int lbrace = 463;
        public const int rbrace = 464;
        public const int comma = 465;
        public const int dot = 467;
        public const int integerLiteral = 468;
        public const int floatLiteral = 469;
        public const int whitespace = 470;
        public const int semi = 481;
        internal static ParseNode ParseExpression(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // Expression -> AssignExpression
            if (((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId))) {
                ParseNode[] children = new ParseNode[1];
                children[0] = ExpressionParser.ParseAssignExpression(context);
                return new ParseNode(ExpressionParser.Expression, "Expression", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting AssignExpression at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        /// <summary>
        /// Parses a production of the form:
        /// Expression= AssignExpression
        /// </summary>
        /// <remarks>
        /// The production rules are:
        /// Expression -> AssignExpression
        /// </remarks>
        /// <param name="tokenizer">The tokenizer to parse with</param><returns>A <see cref="ParseNode" /> representing the parsed tokens</returns>
        public static ParseNode Parse(System.Collections.Generic.IEnumerable<Token> tokenizer) {
            ParserContext context = new ParserContext(tokenizer);
            context.EnsureStarted();
            ParseNode result = ExpressionParser.ParseExpression(context);
            if ((false == context.IsEnded)) {
                context.Error("Unexpected remainder in input.");
            }
            return result;
        }
        /// <summary>
        /// Parses a production of the form:
        /// Expression= AssignExpression
        /// </summary>
        /// <remarks>
        /// The production rules are:
        /// Expression -> AssignExpression
        /// </remarks>
        /// <param name="tokenizer">The tokenizer to parse with</param><returns>A <see cref="ParseNode" /> representing the parsed tokens</returns>
        public static ParseNode ParseExpression(System.Collections.Generic.IEnumerable<Token> tokenizer) {
            ParserContext context = new ParserContext(tokenizer);
            context.EnsureStarted();
            ParseNode result = ExpressionParser.ParseExpression(context);
            if ((false == context.IsEnded)) {
                context.Error("Unexpected remainder in input.");
            }
            return result;
        }
        internal static ParseNode ParseMemberFieldRef(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberFieldRef -> dot Identifier
            if ((ExpressionParser.dot == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.dot == context.SymbolId))) {
                    context.Error("Expecting dot at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.dot, "dot", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                return new ParseNode(ExpressionParser.MemberFieldRef, "MemberFieldRef", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting dot at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRef(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRef -> MemberFieldRef
            if ((ExpressionParser.dot == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                children[0] = ExpressionParser.ParseMemberFieldRef(context);
                return new ParseNode(ExpressionParser.MemberAnyRef, "MemberAnyRef", children, line__, column__, position__);
            }
            // MemberAnyRef -> MemberInvokeRef
            if ((ExpressionParser.lparen == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                children[0] = ExpressionParser.ParseMemberInvokeRef(context);
                return new ParseNode(ExpressionParser.MemberAnyRef, "MemberAnyRef", children, line__, column__, position__);
            }
            // MemberAnyRef -> MemberIndexerRef
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                children[0] = ExpressionParser.ParseMemberIndexerRef(context);
                return new ParseNode(ExpressionParser.MemberAnyRef, "MemberAnyRef", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberFieldRef, MemberInvokeRef, or MemberIndexerRef at line {0}, colum" +
                        "n {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMethodArg(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MethodArg -> outKeyword Expression
            if ((ExpressionParser.outKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.outKeyword == context.SymbolId))) {
                    context.Error("Expecting outKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.outKeyword, "outKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[1] = ExpressionParser.ParseExpression(context);
                return new ParseNode(ExpressionParser.MethodArg, "MethodArg", children, line__, column__, position__);
            }
            // MethodArg -> refKeyword Expression
            if ((ExpressionParser.refKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.refKeyword == context.SymbolId))) {
                    context.Error("Expecting refKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.refKeyword, "refKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[1] = ExpressionParser.ParseExpression(context);
                return new ParseNode(ExpressionParser.MethodArg, "MethodArg", children, line__, column__, position__);
            }
            // MethodArg -> Expression
            if (((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId))) {
                ParseNode[] children = new ParseNode[1];
                children[0] = ExpressionParser.ParseExpression(context);
                return new ParseNode(ExpressionParser.MethodArg, "MethodArg", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting outKeyword, refKeyword, or Expression at line {0}, column {1}, position" +
                        " {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeRef(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeRef -> Type
            if (((((((((((((((((ExpressionParser.boolType == context.SymbolId) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId))) {
                ParseNode[] children = new ParseNode[1];
                children[0] = ExpressionParser.ParseType(context);
                return new ParseNode(ExpressionParser.TypeRef, "TypeRef", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Type at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseIntrinsicType(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // IntrinsicType -> boolType
            if ((ExpressionParser.boolType == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.boolType == context.SymbolId))) {
                    context.Error("Expecting boolType at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.boolType, "boolType", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.IntrinsicType, "IntrinsicType", children, line__, column__, position__);
            }
            // IntrinsicType -> charType
            if ((ExpressionParser.charType == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.charType == context.SymbolId))) {
                    context.Error("Expecting charType at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.charType, "charType", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.IntrinsicType, "IntrinsicType", children, line__, column__, position__);
            }
            // IntrinsicType -> stringType
            if ((ExpressionParser.stringType == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.stringType == context.SymbolId))) {
                    context.Error("Expecting stringType at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.stringType, "stringType", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.IntrinsicType, "IntrinsicType", children, line__, column__, position__);
            }
            // IntrinsicType -> floatType
            if ((ExpressionParser.floatType == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.floatType == context.SymbolId))) {
                    context.Error("Expecting floatType at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.floatType, "floatType", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.IntrinsicType, "IntrinsicType", children, line__, column__, position__);
            }
            // IntrinsicType -> doubleType
            if ((ExpressionParser.doubleType == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.doubleType == context.SymbolId))) {
                    context.Error("Expecting doubleType at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.doubleType, "doubleType", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.IntrinsicType, "IntrinsicType", children, line__, column__, position__);
            }
            // IntrinsicType -> decimalType
            if ((ExpressionParser.decimalType == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.decimalType == context.SymbolId))) {
                    context.Error("Expecting decimalType at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.decimalType, "decimalType", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.IntrinsicType, "IntrinsicType", children, line__, column__, position__);
            }
            // IntrinsicType -> sbyteType
            if ((ExpressionParser.sbyteType == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.sbyteType == context.SymbolId))) {
                    context.Error("Expecting sbyteType at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.sbyteType, "sbyteType", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.IntrinsicType, "IntrinsicType", children, line__, column__, position__);
            }
            // IntrinsicType -> byteType
            if ((ExpressionParser.byteType == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.byteType == context.SymbolId))) {
                    context.Error("Expecting byteType at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.byteType, "byteType", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.IntrinsicType, "IntrinsicType", children, line__, column__, position__);
            }
            // IntrinsicType -> shortType
            if ((ExpressionParser.shortType == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.shortType == context.SymbolId))) {
                    context.Error("Expecting shortType at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.shortType, "shortType", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.IntrinsicType, "IntrinsicType", children, line__, column__, position__);
            }
            // IntrinsicType -> ushortType
            if ((ExpressionParser.ushortType == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.ushortType == context.SymbolId))) {
                    context.Error("Expecting ushortType at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.ushortType, "ushortType", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.IntrinsicType, "IntrinsicType", children, line__, column__, position__);
            }
            // IntrinsicType -> intType
            if ((ExpressionParser.intType == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.intType == context.SymbolId))) {
                    context.Error("Expecting intType at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.intType, "intType", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.IntrinsicType, "IntrinsicType", children, line__, column__, position__);
            }
            // IntrinsicType -> uintType
            if ((ExpressionParser.uintType == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.uintType == context.SymbolId))) {
                    context.Error("Expecting uintType at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.uintType, "uintType", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.IntrinsicType, "IntrinsicType", children, line__, column__, position__);
            }
            // IntrinsicType -> longType
            if ((ExpressionParser.longType == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.longType == context.SymbolId))) {
                    context.Error("Expecting longType at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.longType, "longType", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.IntrinsicType, "IntrinsicType", children, line__, column__, position__);
            }
            // IntrinsicType -> ulongType
            if ((ExpressionParser.ulongType == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.ulongType == context.SymbolId))) {
                    context.Error("Expecting ulongType at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.ulongType, "ulongType", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.IntrinsicType, "IntrinsicType", children, line__, column__, position__);
            }
            // IntrinsicType -> objectType
            if ((ExpressionParser.objectType == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.objectType == context.SymbolId))) {
                    context.Error("Expecting objectType at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.objectType, "objectType", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.IntrinsicType, "IntrinsicType", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting boolType, charType, stringType, floatType, doubleType, decimalType, sby" +
                        "teType, byteType, shortType, ushortType, intType, uintType, longType, ulongType," +
                        " or objectType at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeBase(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeBase -> IntrinsicType
            if ((((((((((((((((ExpressionParser.boolType == context.SymbolId) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                ParseNode[] children = new ParseNode[1];
                children[0] = ExpressionParser.ParseIntrinsicType(context);
                return new ParseNode(ExpressionParser.TypeBase, "TypeBase", children, line__, column__, position__);
            }
            // TypeBase -> identifier TypeBasePart
            if ((ExpressionParser.identifier2 == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.identifier2 == context.SymbolId))) {
                    context.Error("Expecting identifier at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.identifier2, "identifier", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseTypeBasePart(context).Children);
                return new ParseNode(ExpressionParser.TypeBase, "TypeBase", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting IntrinsicType or identifier at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeArraySpecRank(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeArraySpecRank -> comma
            if ((ExpressionParser.comma == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.TypeArraySpecRank, "TypeArraySpecRank", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseNewArrayPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // NewArrayPart -> ArraySpec
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                children[0] = ExpressionParser.ParseArraySpec(context);
                return new ParseNode(ExpressionParser.NewArrayPart, "NewArrayPart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting ArraySpec at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeCastExpressionPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeCastExpressionPart -> Type rparen
            if (((((((((((((((((ExpressionParser.boolType == context.SymbolId) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = ExpressionParser.ParseType(context);
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.TypeCastExpressionPart, "TypeCastExpressionPart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Type at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseSubExpression(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // SubExpression -> lparen Expression rparen
            if (((ExpressionParser.lparen == context.SymbolId) 
                        && ExpressionParser.WhereSubExpression(context.GetLookAhead(true)))) {
                ParseNode[] children = new ParseNode[3];
                if ((false 
                            == (ExpressionParser.lparen == context.SymbolId))) {
                    context.Error("Expecting lparen at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.lparen, "lparen", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[1] = ExpressionParser.ParseExpression(context);
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[2] = new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.SubExpression, "SubExpression", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting lparen at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static bool WhereSubExpression(ParserContext context) {
            return (false == _IsCastExpression(context));
        }
        internal static ParseNode ParseUnaryExpression(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
			// UnaryExpression -> add UnaryExpression
            if (((ExpressionParser.add == context.SymbolId) 
                        && ExpressionParser.WhereUnaryExpression(context.GetLookAhead(true)))) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.add == context.SymbolId))) {
                    context.Error("Expecting add at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.add, "add", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[1] = ExpressionParser.ParseUnaryExpression(context);
                return new ParseNode(ExpressionParser.UnaryExpression, "UnaryExpression", children, line__, column__, position__);
            }
            // UnaryExpression -> sub UnaryExpression
            if (((ExpressionParser.sub == context.SymbolId) 
                        && ExpressionParser.WhereUnaryExpression(context.GetLookAhead(true)))) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.sub == context.SymbolId))) {
                    context.Error("Expecting sub at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.sub, "sub", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[1] = ExpressionParser.ParseUnaryExpression(context);
                return new ParseNode(ExpressionParser.UnaryExpression, "UnaryExpression", children, line__, column__, position__);
            }
            // UnaryExpression -> not UnaryExpression
            if (((ExpressionParser.not == context.SymbolId) 
                        && ExpressionParser.WhereUnaryExpression(context.GetLookAhead(true)))) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.not == context.SymbolId))) {
                    context.Error("Expecting not at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.not, "not", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[1] = ExpressionParser.ParseUnaryExpression(context);
                return new ParseNode(ExpressionParser.UnaryExpression, "UnaryExpression", children, line__, column__, position__);
            }
            // UnaryExpression -> inc PrimaryExpression
            if (((ExpressionParser.inc == context.SymbolId) 
                        && ExpressionParser.WhereUnaryExpression(context.GetLookAhead(true)))) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.inc == context.SymbolId))) {
                    context.Error("Expecting inc at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.inc, "inc", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[1] = ExpressionParser.ParsePrimaryExpression(context);
                return new ParseNode(ExpressionParser.UnaryExpression, "UnaryExpression", children, line__, column__, position__);
            }
            // UnaryExpression -> dec PrimaryExpression
            if (((ExpressionParser.dec == context.SymbolId) 
                        && ExpressionParser.WhereUnaryExpression(context.GetLookAhead(true)))) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.dec == context.SymbolId))) {
                    context.Error("Expecting dec at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.dec, "dec", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[1] = ExpressionParser.ParsePrimaryExpression(context);
                return new ParseNode(ExpressionParser.UnaryExpression, "UnaryExpression", children, line__, column__, position__);
            }
            // UnaryExpression -> SubExpression
            // UnaryExpression -> PrimaryExpression
            if (((ExpressionParser.lparen == context.SymbolId) 
                        && ExpressionParser.WhereUnaryExpression(context.GetLookAhead(true)))) {
                ParserContext context2__;
                int advanceCount__ = 0;
                System.Exception lastExcept = null;
                context2__ = context.GetLookAhead();
                context2__.EnsureStarted();
                // UnaryExpression -> SubExpression
                try {
                    if (((ExpressionParser.lparen == context2__.SymbolId) 
                                && ExpressionParser.WhereUnaryExpression(context2__.GetLookAhead(true)))) {
                        System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                        children.AddRange(ExpressionParser.ParseSubExpression(context2__).Children);
                        ExpressionParser.ParseSubExpression(context);
                        return new ParseNode(ExpressionParser.UnaryExpression, "UnaryExpression", children.ToArray(), line__, column__, position__);
                    }
                    context.Error("Expecting lparen");
                }
                catch (SyntaxException ex) {
                    if ((context2__.AdvanceCount > advanceCount__)) {
                        lastExcept = ex;
                        advanceCount__ = context2__.AdvanceCount;
                    }
                }
                finally {

                }
                context2__ = context.GetLookAhead();
                context2__.EnsureStarted();
                // UnaryExpression -> PrimaryExpression
                try {
                    if (((ExpressionParser.lparen == context2__.SymbolId) 
                                && ExpressionParser.WhereUnaryExpression(context2__.GetLookAhead(true)))) {
                        ParseNode[] children = new ParseNode[1];
                        children[0] = ExpressionParser.ParsePrimaryExpression(context2__);
                        ExpressionParser.ParsePrimaryExpression(context);
                        return new ParseNode(ExpressionParser.UnaryExpression, "UnaryExpression", children, line__, column__, position__);
                    }
                    context.Error("Expecting lparen");
                }
                catch (SyntaxException ex) {
                    if ((context2__.AdvanceCount > advanceCount__)) {
                        lastExcept = ex;
                        advanceCount__ = context2__.AdvanceCount;
                    }
                }
                finally {

                }
                throw lastExcept;
            }
            // UnaryExpression -> PrimaryExpression
            if ((((((((((((((((((((((((((((((((ExpressionParser.nullLiteral == context.SymbolId) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        && ExpressionParser.WhereUnaryExpression(context.GetLookAhead(true)))) {
                ParseNode[] children = new ParseNode[1];
                children[0] = ExpressionParser.ParsePrimaryExpression(context);
                return new ParseNode(ExpressionParser.UnaryExpression, "UnaryExpression", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting add, sub, not, inc, dec, SubExpression, or PrimaryExpression at line {0" +
                        "}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static bool WhereUnaryExpression(ParserContext context) {
            return true;
        }
        internal static ParseNode ParsePrimaryExpression(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // PrimaryExpression -> nullLiteral
            if ((ExpressionParser.nullLiteral == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.nullLiteral == context.SymbolId))) {
                    context.Error("Expecting nullLiteral at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.nullLiteral, "nullLiteral", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.PrimaryExpression, "PrimaryExpression", children, line__, column__, position__);
            }
            // PrimaryExpression -> CastExpression
            if ((ExpressionParser.lparen == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                children[0] = ExpressionParser.ParseCastExpression(context);
                return new ParseNode(ExpressionParser.PrimaryExpression, "PrimaryExpression", children, line__, column__, position__);
            }
            // PrimaryExpression -> typeOf lparen Type rparen PrimaryExpressionPart
            if ((ExpressionParser.typeOf == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.typeOf == context.SymbolId))) {
                    context.Error("Expecting typeOf at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.typeOf, "typeOf", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.lparen == context.SymbolId))) {
                    context.Error("Expecting lparen at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.lparen, "lparen", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseType(context));
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParsePrimaryExpressionPart(context).Children);
                return new ParseNode(ExpressionParser.PrimaryExpression, "PrimaryExpression", children.ToArray(), line__, column__, position__);
            }
            // PrimaryExpression -> nameOf lparen Identifier rparen PrimaryExpressionPart2
            if ((ExpressionParser.nameOf == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.nameOf == context.SymbolId))) {
                    context.Error("Expecting nameOf at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.nameOf, "nameOf", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.lparen == context.SymbolId))) {
                    context.Error("Expecting lparen at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.lparen, "lparen", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParsePrimaryExpressionPart2(context).Children);
                return new ParseNode(ExpressionParser.PrimaryExpression, "PrimaryExpression", children.ToArray(), line__, column__, position__);
            }
            // PrimaryExpression -> defaultOf lparen Type rparen PrimaryExpressionPart3
            if ((ExpressionParser.defaultOf == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.defaultOf == context.SymbolId))) {
                    context.Error("Expecting defaultOf at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.defaultOf, "defaultOf", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.lparen == context.SymbolId))) {
                    context.Error("Expecting lparen at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.lparen, "lparen", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseType(context));
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParsePrimaryExpressionPart3(context).Children);
                return new ParseNode(ExpressionParser.PrimaryExpression, "PrimaryExpression", children.ToArray(), line__, column__, position__);
            }
            // PrimaryExpression -> TypeOrFieldRef PrimaryExpressionPart4
            if ((((((((((((((((((ExpressionParser.verbatimIdentifier == context.SymbolId) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseTypeOrFieldRef(context));
                children.AddRange(ExpressionParser.ParsePrimaryExpressionPart4(context).Children);
                return new ParseNode(ExpressionParser.PrimaryExpression, "PrimaryExpression", children.ToArray(), line__, column__, position__);
            }
            // PrimaryExpression -> verbatimStringLiteral PrimaryExpressionPart5
            if ((ExpressionParser.verbatimStringLiteral == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.verbatimStringLiteral == context.SymbolId))) {
                    context.Error("Expecting verbatimStringLiteral at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.verbatimStringLiteral, "verbatimStringLiteral", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParsePrimaryExpressionPart5(context).Children);
                return new ParseNode(ExpressionParser.PrimaryExpression, "PrimaryExpression", children.ToArray(), line__, column__, position__);
            }
            // PrimaryExpression -> characterLiteral PrimaryExpressionPart6
            if ((ExpressionParser.characterLiteral == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.characterLiteral == context.SymbolId))) {
                    context.Error("Expecting characterLiteral at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.characterLiteral, "characterLiteral", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParsePrimaryExpressionPart6(context).Children);
                return new ParseNode(ExpressionParser.PrimaryExpression, "PrimaryExpression", children.ToArray(), line__, column__, position__);
            }
            // PrimaryExpression -> integerLiteral PrimaryExpressionPart7
            if ((ExpressionParser.integerLiteral == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.integerLiteral == context.SymbolId))) {
                    context.Error("Expecting integerLiteral at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.integerLiteral, "integerLiteral", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParsePrimaryExpressionPart7(context).Children);
                return new ParseNode(ExpressionParser.PrimaryExpression, "PrimaryExpression", children.ToArray(), line__, column__, position__);
            }
            // PrimaryExpression -> floatLiteral PrimaryExpressionPart8
            if ((ExpressionParser.floatLiteral == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.floatLiteral == context.SymbolId))) {
                    context.Error("Expecting floatLiteral at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.floatLiteral, "floatLiteral", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParsePrimaryExpressionPart8(context).Children);
                return new ParseNode(ExpressionParser.PrimaryExpression, "PrimaryExpression", children.ToArray(), line__, column__, position__);
            }
            // PrimaryExpression -> stringLiteral PrimaryExpressionPart9
            if ((ExpressionParser.stringLiteral == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.stringLiteral == context.SymbolId))) {
                    context.Error("Expecting stringLiteral at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.stringLiteral, "stringLiteral", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParsePrimaryExpressionPart9(context).Children);
                return new ParseNode(ExpressionParser.PrimaryExpression, "PrimaryExpression", children.ToArray(), line__, column__, position__);
            }
            // PrimaryExpression -> boolLiteral PrimaryExpressionPart10
            if ((ExpressionParser.boolLiteral == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.boolLiteral == context.SymbolId))) {
                    context.Error("Expecting boolLiteral at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.boolLiteral, "boolLiteral", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParsePrimaryExpressionPart10(context).Children);
                return new ParseNode(ExpressionParser.PrimaryExpression, "PrimaryExpression", children.ToArray(), line__, column__, position__);
            }
            // PrimaryExpression -> NewExpression PrimaryExpressionPart11
            if ((ExpressionParser.newKeyword == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseNewExpression(context));
                children.AddRange(ExpressionParser.ParsePrimaryExpressionPart11(context).Children);
                return new ParseNode(ExpressionParser.PrimaryExpression, "PrimaryExpression", children.ToArray(), line__, column__, position__);
            }
            // PrimaryExpression -> thisRef PrimaryExpressionPart12
            if ((ExpressionParser.thisRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.thisRef == context.SymbolId))) {
                    context.Error("Expecting thisRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.thisRef, "thisRef", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParsePrimaryExpressionPart12(context).Children);
                return new ParseNode(ExpressionParser.PrimaryExpression, "PrimaryExpression", children.ToArray(), line__, column__, position__);
            }
            // PrimaryExpression -> baseRef PrimaryExpressionPart13
            if ((ExpressionParser.baseRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.baseRef == context.SymbolId))) {
                    context.Error("Expecting baseRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.baseRef, "baseRef", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParsePrimaryExpressionPart13(context).Children);
                return new ParseNode(ExpressionParser.PrimaryExpression, "PrimaryExpression", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting nullLiteral, CastExpression, typeOf, nameOf, defaultOf, TypeOrFieldRef," +
                        " verbatimStringLiteral, characterLiteral, integerLiteral, floatLiteral, stringLi" +
                        "teral, boolLiteral, NewExpression, thisRef, or baseRef at line {0}, column {1}, " +
                        "position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseIdentifier(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // Identifier -> verbatimIdentifier
            if (((ExpressionParser.verbatimIdentifier == context.SymbolId) 
                        && ExpressionParser.WhereIdentifier(context.GetLookAhead(true)))) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.verbatimIdentifier == context.SymbolId))) {
                    context.Error("Expecting verbatimIdentifier at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.verbatimIdentifier, "verbatimIdentifier", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.Identifier, "Identifier", children, line__, column__, position__);
            }
            // Identifier -> identifier
            if (((ExpressionParser.identifier2 == context.SymbolId) 
                        && ExpressionParser.WhereIdentifier(context.GetLookAhead(true)))) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.identifier2 == context.SymbolId))) {
                    context.Error("Expecting identifier at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.identifier2, "identifier", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.Identifier, "Identifier", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting verbatimIdentifier or identifier at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static bool WhereIdentifier(ParserContext context) {
            return (false == Keywords.Contains(context.Value));
        }
        internal static ParseNode ParseNamespaceNameList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // NamespaceNameList -> dot Identifier NamespaceNameListRightAssoc
            if ((ExpressionParser.dot == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.dot == context.SymbolId))) {
                    context.Error("Expecting dot at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.dot, "dot", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                children.AddRange(ExpressionParser.ParseNamespaceNameListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.NamespaceNameList, "NamespaceNameList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting dot at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseRelationalExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // RelationalExpressionList -> lt TermExpression RelationalExpressionListRightAssoc RelationalExpressionListRightAssoc2 RelationalExpressionListRightAssoc3
            if ((ExpressionParser.lt == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.lt == context.SymbolId))) {
                    context.Error("Expecting lt at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.lt, "lt", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseTermExpression(context));
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc3(context).Children);
                return new ParseNode(ExpressionParser.RelationalExpressionList, "RelationalExpressionList", children.ToArray(), line__, column__, position__);
            }
            // RelationalExpressionList -> lte TermExpression RelationalExpressionListRightAssoc RelationalExpressionListRightAssoc2 RelationalExpressionListRightAssoc3
            if ((ExpressionParser.lte == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.lte == context.SymbolId))) {
                    context.Error("Expecting lte at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.lte, "lte", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseTermExpression(context));
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc3(context).Children);
                return new ParseNode(ExpressionParser.RelationalExpressionList, "RelationalExpressionList", children.ToArray(), line__, column__, position__);
            }
            // RelationalExpressionList -> gt TermExpression RelationalExpressionListRightAssoc RelationalExpressionListRightAssoc2 RelationalExpressionListRightAssoc3
            if ((ExpressionParser.gt == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.gt == context.SymbolId))) {
                    context.Error("Expecting gt at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.gt, "gt", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseTermExpression(context));
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc3(context).Children);
                return new ParseNode(ExpressionParser.RelationalExpressionList, "RelationalExpressionList", children.ToArray(), line__, column__, position__);
            }
            // RelationalExpressionList -> gte TermExpression RelationalExpressionListRightAssoc RelationalExpressionListRightAssoc2 RelationalExpressionListRightAssoc3
            if ((ExpressionParser.gte == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.gte == context.SymbolId))) {
                    context.Error("Expecting gte at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.gte, "gte", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseTermExpression(context));
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc3(context).Children);
                return new ParseNode(ExpressionParser.RelationalExpressionList, "RelationalExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting lt, lte, gt, or gte at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseEqualityExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // EqualityExpressionList -> eqEq RelationalExpression EqualityExpressionListRightAssoc EqualityExpressionListRightAssoc2
            if ((ExpressionParser.eqEq == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.eqEq == context.SymbolId))) {
                    context.Error("Expecting eqEq at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.eqEq, "eqEq", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseRelationalExpression(context));
                children.AddRange(ExpressionParser.ParseEqualityExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseEqualityExpressionListRightAssoc2(context).Children);
                return new ParseNode(ExpressionParser.EqualityExpressionList, "EqualityExpressionList", children.ToArray(), line__, column__, position__);
            }
            // EqualityExpressionList -> notEq RelationalExpression EqualityExpressionListRightAssoc EqualityExpressionListRightAssoc2
            if ((ExpressionParser.notEq == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.notEq == context.SymbolId))) {
                    context.Error("Expecting notEq at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.notEq, "notEq", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseRelationalExpression(context));
                children.AddRange(ExpressionParser.ParseEqualityExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseEqualityExpressionListRightAssoc2(context).Children);
                return new ParseNode(ExpressionParser.EqualityExpressionList, "EqualityExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting eqEq or notEq at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseBitwiseAndExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // BitwiseAndExpressionList -> bitwiseAnd EqualityExpression BitwiseAndExpressionListRightAssoc
            if ((ExpressionParser.bitwiseAnd == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.bitwiseAnd == context.SymbolId))) {
                    context.Error("Expecting bitwiseAnd at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.bitwiseAnd, "bitwiseAnd", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseEqualityExpression(context));
                children.AddRange(ExpressionParser.ParseBitwiseAndExpressionListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.BitwiseAndExpressionList, "BitwiseAndExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting bitwiseAnd at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseBitwiseOrExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // BitwiseOrExpressionList -> bitwiseOr BitwiseAndExpression BitwiseOrExpressionListRightAssoc
            if ((ExpressionParser.bitwiseOr == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.bitwiseOr == context.SymbolId))) {
                    context.Error("Expecting bitwiseOr at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.bitwiseOr, "bitwiseOr", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseBitwiseAndExpression(context));
                children.AddRange(ExpressionParser.ParseBitwiseOrExpressionListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.BitwiseOrExpressionList, "BitwiseOrExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting bitwiseOr at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseAndExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AndExpressionList -> and BitwiseOrExpression AndExpressionListRightAssoc
            if ((ExpressionParser.and == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.and == context.SymbolId))) {
                    context.Error("Expecting and at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.and, "and", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseBitwiseOrExpression(context));
                children.AddRange(ExpressionParser.ParseAndExpressionListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.AndExpressionList, "AndExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting and at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseOrExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // OrExpressionList -> or AndExpression OrExpressionListRightAssoc
            if ((ExpressionParser.or == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.or == context.SymbolId))) {
                    context.Error("Expecting or at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.or, "or", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseAndExpression(context));
                children.AddRange(ExpressionParser.ParseOrExpressionListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.OrExpressionList, "OrExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting or at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseAssignExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AssignExpressionList -> eq OrExpression AssignExpressionListRightAssoc AssignExpressionListRightAssoc2 AssignExpressionListRightAssoc3 AssignExpressionListRightAssoc4 AssignExpressionListRightAssoc5
            if ((ExpressionParser.eq == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.eq == context.SymbolId))) {
                    context.Error("Expecting eq at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.eq, "eq", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseOrExpression(context));
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(ExpressionParser.AssignExpressionList, "AssignExpressionList", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionList -> addAssign OrExpression AssignExpressionListRightAssoc AssignExpressionListRightAssoc2 AssignExpressionListRightAssoc3 AssignExpressionListRightAssoc4 AssignExpressionListRightAssoc5
            if ((ExpressionParser.addAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.addAssign == context.SymbolId))) {
                    context.Error("Expecting addAssign at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.addAssign, "addAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseOrExpression(context));
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(ExpressionParser.AssignExpressionList, "AssignExpressionList", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionList -> subAssign OrExpression AssignExpressionListRightAssoc AssignExpressionListRightAssoc2 AssignExpressionListRightAssoc3 AssignExpressionListRightAssoc4 AssignExpressionListRightAssoc5
            if ((ExpressionParser.subAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.subAssign == context.SymbolId))) {
                    context.Error("Expecting subAssign at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.subAssign, "subAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseOrExpression(context));
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(ExpressionParser.AssignExpressionList, "AssignExpressionList", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionList -> mulAssign OrExpression AssignExpressionListRightAssoc AssignExpressionListRightAssoc2 AssignExpressionListRightAssoc3 AssignExpressionListRightAssoc4 AssignExpressionListRightAssoc5
            if ((ExpressionParser.mulAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.mulAssign == context.SymbolId))) {
                    context.Error("Expecting mulAssign at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.mulAssign, "mulAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseOrExpression(context));
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(ExpressionParser.AssignExpressionList, "AssignExpressionList", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionList -> divAssign OrExpression AssignExpressionListRightAssoc AssignExpressionListRightAssoc2 AssignExpressionListRightAssoc3 AssignExpressionListRightAssoc4 AssignExpressionListRightAssoc5
            if ((ExpressionParser.divAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.divAssign == context.SymbolId))) {
                    context.Error("Expecting divAssign at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.divAssign, "divAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseOrExpression(context));
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(ExpressionParser.AssignExpressionList, "AssignExpressionList", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionList -> modAssign OrExpression AssignExpressionListRightAssoc AssignExpressionListRightAssoc2 AssignExpressionListRightAssoc3 AssignExpressionListRightAssoc4 AssignExpressionListRightAssoc5
            if ((ExpressionParser.modAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.modAssign == context.SymbolId))) {
                    context.Error("Expecting modAssign at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.modAssign, "modAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseOrExpression(context));
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(ExpressionParser.AssignExpressionList, "AssignExpressionList", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionList -> bitwiseAndAssign OrExpression AssignExpressionListRightAssoc AssignExpressionListRightAssoc2 AssignExpressionListRightAssoc3 AssignExpressionListRightAssoc4 AssignExpressionListRightAssoc5
            if ((ExpressionParser.bitwiseAndAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.bitwiseAndAssign == context.SymbolId))) {
                    context.Error("Expecting bitwiseAndAssign at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.bitwiseAndAssign, "bitwiseAndAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseOrExpression(context));
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(ExpressionParser.AssignExpressionList, "AssignExpressionList", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionList -> bitwiseOrAssign OrExpression AssignExpressionListRightAssoc AssignExpressionListRightAssoc2 AssignExpressionListRightAssoc3 AssignExpressionListRightAssoc4 AssignExpressionListRightAssoc5
            if ((ExpressionParser.bitwiseOrAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.bitwiseOrAssign == context.SymbolId))) {
                    context.Error("Expecting bitwiseOrAssign at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.bitwiseOrAssign, "bitwiseOrAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseOrExpression(context));
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(ExpressionParser.AssignExpressionList, "AssignExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting eq, addAssign, subAssign, mulAssign, divAssign, modAssign, bitwiseAndAs" +
                        "sign, or bitwiseOrAssign at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTermExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TermExpressionList -> add FactorExpression TermExpressionListRightAssoc TermExpressionListRightAssoc2
            if ((ExpressionParser.add == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.add == context.SymbolId))) {
                    context.Error("Expecting add at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.add, "add", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseFactorExpression(context));
                children.AddRange(ExpressionParser.ParseTermExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseTermExpressionListRightAssoc2(context).Children);
                return new ParseNode(ExpressionParser.TermExpressionList, "TermExpressionList", children.ToArray(), line__, column__, position__);
            }
            // TermExpressionList -> sub FactorExpression TermExpressionListRightAssoc TermExpressionListRightAssoc2
            if ((ExpressionParser.sub == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.sub == context.SymbolId))) {
                    context.Error("Expecting sub at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.sub, "sub", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseFactorExpression(context));
                children.AddRange(ExpressionParser.ParseTermExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseTermExpressionListRightAssoc2(context).Children);
                return new ParseNode(ExpressionParser.TermExpressionList, "TermExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting add or sub at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseFactorExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // FactorExpressionList -> mul UnaryExpression FactorExpressionListRightAssoc FactorExpressionListRightAssoc2 FactorExpressionListRightAssoc3
            if ((ExpressionParser.mul == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.mul == context.SymbolId))) {
                    context.Error("Expecting mul at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.mul, "mul", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseUnaryExpression(context));
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc3(context).Children);
                return new ParseNode(ExpressionParser.FactorExpressionList, "FactorExpressionList", children.ToArray(), line__, column__, position__);
            }
            // FactorExpressionList -> div UnaryExpression FactorExpressionListRightAssoc FactorExpressionListRightAssoc2 FactorExpressionListRightAssoc3
            if ((ExpressionParser.div == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.div == context.SymbolId))) {
                    context.Error("Expecting div at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.div, "div", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseUnaryExpression(context));
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc3(context).Children);
                return new ParseNode(ExpressionParser.FactorExpressionList, "FactorExpressionList", children.ToArray(), line__, column__, position__);
            }
            // FactorExpressionList -> mod UnaryExpression FactorExpressionListRightAssoc FactorExpressionListRightAssoc2 FactorExpressionListRightAssoc3
            if ((ExpressionParser.mod == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.mod == context.SymbolId))) {
                    context.Error("Expecting mod at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.mod, "mod", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseUnaryExpression(context));
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc3(context).Children);
                return new ParseNode(ExpressionParser.FactorExpressionList, "FactorExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting mul, div, or mod at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberInvokeRefList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberInvokeRefList -> comma MethodArg MemberInvokeRefListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseMethodArg(context));
                children.AddRange(ExpressionParser.ParseMemberInvokeRefListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberInvokeRefList, "MemberInvokeRefList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberIndexerRefList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberIndexerRefList -> comma Expression MemberIndexerRefListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseExpression(context));
                children.AddRange(ExpressionParser.ParseMemberIndexerRefListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberIndexerRefList, "MemberIndexerRefList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeBaseList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeBaseList -> dot identifier TypeBaseListRightAssoc
            if ((ExpressionParser.dot == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.dot == context.SymbolId))) {
                    context.Error("Expecting dot at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.dot, "dot", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.identifier2 == context.SymbolId))) {
                    context.Error("Expecting identifier at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.identifier2, "identifier", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseTypeBaseListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.TypeBaseList, "TypeBaseList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting dot at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeArraySpecList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeArraySpecList -> TypeArraySpec TypeArraySpecListRightAssoc
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseTypeArraySpec(context));
                children.AddRange(ExpressionParser.ParseTypeArraySpecListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.TypeArraySpecList, "TypeArraySpecList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting TypeArraySpec at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeGenericPartList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeGenericPartList -> comma Type TypeGenericPartListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseType(context));
                children.AddRange(ExpressionParser.ParseTypeGenericPartListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.TypeGenericPartList, "TypeGenericPartList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeArraySpecRankList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeArraySpecRankList -> TypeArraySpecRank TypeArraySpecRankListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseTypeArraySpecRank(context));
                children.AddRange(ExpressionParser.ParseTypeArraySpecRankListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.TypeArraySpecRankList, "TypeArraySpecRankList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting TypeArraySpecRank at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseNewObjectPartList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // NewObjectPartList -> comma Expression NewObjectPartListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseExpression(context));
                children.AddRange(ExpressionParser.ParseNewObjectPartListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.NewObjectPartList, "NewObjectPartList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseArraySpecExpressionListList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ArraySpecExpressionListList -> comma Expression ArraySpecExpressionListListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseExpression(context));
                children.AddRange(ExpressionParser.ParseArraySpecExpressionListListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.ArraySpecExpressionListList, "ArraySpecExpressionListList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseArrayInitializerList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ArrayInitializerList -> comma Expression ArrayInitializerListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseExpression(context));
                children.AddRange(ExpressionParser.ParseArrayInitializerListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.ArrayInitializerList, "ArrayInitializerList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList -> MemberAnyRef MemberAnyRefListRightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList, "MemberAnyRefList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList2 -> MemberAnyRef MemberAnyRefList2RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList2RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList2, "MemberAnyRefList2", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList3(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList3 -> MemberAnyRef MemberAnyRefList3RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList3RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList3, "MemberAnyRefList3", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList4(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList4 -> MemberAnyRef MemberAnyRefList4RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList4RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList4, "MemberAnyRefList4", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList5(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList5 -> MemberAnyRef MemberAnyRefList5RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList5RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList5, "MemberAnyRefList5", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList6(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList6 -> MemberAnyRef MemberAnyRefList6RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList6RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList6, "MemberAnyRefList6", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList7(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList7 -> MemberAnyRef MemberAnyRefList7RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList7RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList7, "MemberAnyRefList7", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList8(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList8 -> MemberAnyRef MemberAnyRefList8RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList8RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList8, "MemberAnyRefList8", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList9(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList9 -> MemberAnyRef MemberAnyRefList9RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList9RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList9, "MemberAnyRefList9", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList10(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList10 -> MemberAnyRef MemberAnyRefList10RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList10RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList10, "MemberAnyRefList10", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList11(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList11 -> MemberAnyRef MemberAnyRefList11RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList11RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList11, "MemberAnyRefList11", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList12(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList12 -> MemberAnyRef MemberAnyRefList12RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList12RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList12, "MemberAnyRefList12", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList13(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList13 -> MemberAnyRef MemberAnyRefList13RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList13RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList13, "MemberAnyRefList13", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList14(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList14 -> MemberAnyRef MemberAnyRefList14RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList14RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList14, "MemberAnyRefList14", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCastExpression(ParserContext context) {
            // CastExpression
            return _ParseCastExpression(context);
        }
        internal static ParseNode ParseArraySpec(ParserContext context) {
            // ArraySpec
            return _ParseArraySpec(context);
        }
        internal static ParseNode ParseTypeOrFieldRef(ParserContext context) {
            // TypeOrFieldRef
            return _ParseTypeOrFieldRef(context);
        }
        internal static ParseNode ParseExpressionFollows(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ExpressionFollows -> Expression semi
            if (((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = ExpressionParser.ParseExpression(context);
                if ((false 
                            == (StatementParser.semi == context.SymbolId))) {
                    context.Error("Expecting semi at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(StatementParser.semi, "semi", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.ExpressionFollows, "ExpressionFollows", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Expression at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseExpressionFollows2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ExpressionFollows2 -> Expression rparen
            if (((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = ExpressionParser.ParseExpression(context);
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.ExpressionFollows2, "ExpressionFollows2", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Expression at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseExpressionFollows3(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ExpressionFollows3 -> Expression rbracket
            if (((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = ExpressionParser.ParseExpression(context);
                if ((false 
                            == (ExpressionParser.rbracket == context.SymbolId))) {
                    context.Error("Expecting rbracket at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.rbracket, "rbracket", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.ExpressionFollows3, "ExpressionFollows3", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Expression at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseExpressionFollows4(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ExpressionFollows4 -> Expression comma
            if (((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = ExpressionParser.ParseExpression(context);
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.ExpressionFollows4, "ExpressionFollows4", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Expression at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeFollows(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeFollows -> Type verbatimIdentifier
            if (((((((((((((((((ExpressionParser.boolType == context.SymbolId) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = ExpressionParser.ParseType(context);
                if ((false 
                            == (ExpressionParser.verbatimIdentifier == context.SymbolId))) {
                    context.Error("Expecting verbatimIdentifier at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.verbatimIdentifier, "verbatimIdentifier", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.TypeFollows, "TypeFollows", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Type at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeFollows2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeFollows2 -> Type identifier
            if (((((((((((((((((ExpressionParser.boolType == context.SymbolId) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = ExpressionParser.ParseType(context);
                if ((false 
                            == (ExpressionParser.identifier2 == context.SymbolId))) {
                    context.Error("Expecting identifier at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.identifier2, "identifier", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.TypeFollows2, "TypeFollows2", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Type at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeFollows3(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeFollows3 -> Type lbrace
            if (((((((((((((((((ExpressionParser.boolType == context.SymbolId) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = ExpressionParser.ParseType(context);
                if ((false 
                            == (ExpressionParser.lbrace == context.SymbolId))) {
                    context.Error("Expecting lbrace at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.lbrace, "lbrace", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.TypeFollows3, "TypeFollows3", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Type at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeFollows4(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeFollows4 -> Type rbracket
            if (((((((((((((((((ExpressionParser.boolType == context.SymbolId) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = ExpressionParser.ParseType(context);
                if ((false 
                            == (ExpressionParser.rbracket == context.SymbolId))) {
                    context.Error("Expecting rbracket at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.rbracket, "rbracket", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.TypeFollows4, "TypeFollows4", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Type at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeFollows5(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeFollows5 -> Type #EOS
            if (((((((((((((((((ExpressionParser.boolType == context.SymbolId) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = ExpressionParser.ParseType(context);
                if ((false 
                            == (ExpressionParser.EosSymbol == context.SymbolId))) {
                    context.Error("Expecting #EOS at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.EosSymbol, "#EOS", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.TypeFollows5, "TypeFollows5", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Type at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseNamespaceNameListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // NamespaceNameListRightAssoc -> dot Identifier NamespaceNameListRightAssoc
            if ((ExpressionParser.dot == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.dot == context.SymbolId))) {
                    context.Error("Expecting dot at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.dot, "dot", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                children.AddRange(ExpressionParser.ParseNamespaceNameListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.NamespaceNameListRightAssoc, "NamespaceNameListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting dot at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseRelationalExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // RelationalExpressionListRightAssoc -> lt TermExpression RelationalExpressionListRightAssoc
            if ((ExpressionParser.lt == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.lt == context.SymbolId))) {
                    context.Error("Expecting lt at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.lt, "lt", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseTermExpression(context));
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.RelationalExpressionListRightAssoc, "RelationalExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // RelationalExpressionListRightAssoc ->
            if ((((((((((((((((((((((((ExpressionParser.gt == context.SymbolId) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.RelationalExpressionListRightAssoc, "RelationalExpressionListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting lt at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseRelationalExpressionListRightAssoc2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // RelationalExpressionListRightAssoc2 -> gt TermExpression RelationalExpressionListRightAssoc2
            if ((ExpressionParser.gt == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.gt == context.SymbolId))) {
                    context.Error("Expecting gt at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.gt, "gt", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseTermExpression(context));
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc2(context).Children);
                return new ParseNode(ExpressionParser.RelationalExpressionListRightAssoc2, "RelationalExpressionListRightAssoc2", children.ToArray(), line__, column__, position__);
            }
            // RelationalExpressionListRightAssoc2 ->
            if (((((((((((((((((((((((ExpressionParser.lte == context.SymbolId) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.RelationalExpressionListRightAssoc2, "RelationalExpressionListRightAssoc2", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting gt at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseEqualityExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // EqualityExpressionListRightAssoc -> eqEq RelationalExpression EqualityExpressionListRightAssoc
            if ((ExpressionParser.eqEq == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.eqEq == context.SymbolId))) {
                    context.Error("Expecting eqEq at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.eqEq, "eqEq", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseRelationalExpression(context));
                children.AddRange(ExpressionParser.ParseEqualityExpressionListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.EqualityExpressionListRightAssoc, "EqualityExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // EqualityExpressionListRightAssoc ->
            if ((((((((((((((((((((ExpressionParser.notEq == context.SymbolId) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.EqualityExpressionListRightAssoc, "EqualityExpressionListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting eqEq at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseBitwiseAndExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // BitwiseAndExpressionListRightAssoc -> bitwiseAnd EqualityExpression BitwiseAndExpressionListRightAssoc
            if ((ExpressionParser.bitwiseAnd == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.bitwiseAnd == context.SymbolId))) {
                    context.Error("Expecting bitwiseAnd at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.bitwiseAnd, "bitwiseAnd", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseEqualityExpression(context));
                children.AddRange(ExpressionParser.ParseBitwiseAndExpressionListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.BitwiseAndExpressionListRightAssoc, "BitwiseAndExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // BitwiseAndExpressionListRightAssoc ->
            if ((((((((((((((((((ExpressionParser.bitwiseOr == context.SymbolId) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.BitwiseAndExpressionListRightAssoc, "BitwiseAndExpressionListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting bitwiseAnd at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseBitwiseOrExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // BitwiseOrExpressionListRightAssoc -> bitwiseOr BitwiseAndExpression BitwiseOrExpressionListRightAssoc
            if ((ExpressionParser.bitwiseOr == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.bitwiseOr == context.SymbolId))) {
                    context.Error("Expecting bitwiseOr at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.bitwiseOr, "bitwiseOr", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseBitwiseAndExpression(context));
                children.AddRange(ExpressionParser.ParseBitwiseOrExpressionListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.BitwiseOrExpressionListRightAssoc, "BitwiseOrExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // BitwiseOrExpressionListRightAssoc ->
            if (((((((((((((((((ExpressionParser.and == context.SymbolId) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.BitwiseOrExpressionListRightAssoc, "BitwiseOrExpressionListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting bitwiseOr at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseAndExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AndExpressionListRightAssoc -> and BitwiseOrExpression AndExpressionListRightAssoc
            if ((ExpressionParser.and == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.and == context.SymbolId))) {
                    context.Error("Expecting and at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.and, "and", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseBitwiseOrExpression(context));
                children.AddRange(ExpressionParser.ParseAndExpressionListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.AndExpressionListRightAssoc, "AndExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // AndExpressionListRightAssoc ->
            if ((((((((((((((((ExpressionParser.or == context.SymbolId) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.AndExpressionListRightAssoc, "AndExpressionListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting and at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseOrExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // OrExpressionListRightAssoc -> or AndExpression OrExpressionListRightAssoc
            if ((ExpressionParser.or == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.or == context.SymbolId))) {
                    context.Error("Expecting or at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.or, "or", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseAndExpression(context));
                children.AddRange(ExpressionParser.ParseOrExpressionListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.OrExpressionListRightAssoc, "OrExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // OrExpressionListRightAssoc ->
            if (((((((((((((((ExpressionParser.eq == context.SymbolId) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.OrExpressionListRightAssoc, "OrExpressionListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting or at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseAssignExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AssignExpressionListRightAssoc -> eq OrExpression AssignExpressionListRightAssoc
            if ((ExpressionParser.eq == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.eq == context.SymbolId))) {
                    context.Error("Expecting eq at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.eq, "eq", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseOrExpression(context));
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.AssignExpressionListRightAssoc, "AssignExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionListRightAssoc ->
            if ((((((((((((((ExpressionParser.subAssign == context.SymbolId) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.AssignExpressionListRightAssoc, "AssignExpressionListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting eq at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseAssignExpressionListRightAssoc2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AssignExpressionListRightAssoc2 -> subAssign OrExpression AssignExpressionListRightAssoc2
            if ((ExpressionParser.subAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.subAssign == context.SymbolId))) {
                    context.Error("Expecting subAssign at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.subAssign, "subAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseOrExpression(context));
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                return new ParseNode(ExpressionParser.AssignExpressionListRightAssoc2, "AssignExpressionListRightAssoc2", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionListRightAssoc2 ->
            if (((((((((((((ExpressionParser.divAssign == context.SymbolId) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.AssignExpressionListRightAssoc2, "AssignExpressionListRightAssoc2", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting subAssign at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseAssignExpressionListRightAssoc3(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AssignExpressionListRightAssoc3 -> divAssign OrExpression AssignExpressionListRightAssoc3
            if ((ExpressionParser.divAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.divAssign == context.SymbolId))) {
                    context.Error("Expecting divAssign at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.divAssign, "divAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseOrExpression(context));
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                return new ParseNode(ExpressionParser.AssignExpressionListRightAssoc3, "AssignExpressionListRightAssoc3", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionListRightAssoc3 ->
            if ((((((((((((ExpressionParser.bitwiseAndAssign == context.SymbolId) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.AssignExpressionListRightAssoc3, "AssignExpressionListRightAssoc3", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting divAssign at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseAssignExpressionListRightAssoc4(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AssignExpressionListRightAssoc4 -> bitwiseAndAssign OrExpression AssignExpressionListRightAssoc4
            if ((ExpressionParser.bitwiseAndAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.bitwiseAndAssign == context.SymbolId))) {
                    context.Error("Expecting bitwiseAndAssign at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.bitwiseAndAssign, "bitwiseAndAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseOrExpression(context));
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                return new ParseNode(ExpressionParser.AssignExpressionListRightAssoc4, "AssignExpressionListRightAssoc4", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionListRightAssoc4 ->
            if (((((((((((ExpressionParser.addAssign == context.SymbolId) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.AssignExpressionListRightAssoc4, "AssignExpressionListRightAssoc4", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting bitwiseAndAssign at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTermExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TermExpressionListRightAssoc -> add FactorExpression TermExpressionListRightAssoc
            if ((ExpressionParser.add == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.add == context.SymbolId))) {
                    context.Error("Expecting add at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.add, "add", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseFactorExpression(context));
                children.AddRange(ExpressionParser.ParseTermExpressionListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.TermExpressionListRightAssoc, "TermExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // TermExpressionListRightAssoc ->
            if ((((((((((((((((((((((((((ExpressionParser.sub == context.SymbolId) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.TermExpressionListRightAssoc, "TermExpressionListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting add at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseFactorExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // FactorExpressionListRightAssoc -> mul UnaryExpression FactorExpressionListRightAssoc
            if ((ExpressionParser.mul == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.mul == context.SymbolId))) {
                    context.Error("Expecting mul at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.mul, "mul", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseUnaryExpression(context));
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.FactorExpressionListRightAssoc, "FactorExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // FactorExpressionListRightAssoc ->
            if (((((((((((((((((((((((((((((ExpressionParser.mod == context.SymbolId) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.FactorExpressionListRightAssoc, "FactorExpressionListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting mul at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseFactorExpressionListRightAssoc2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // FactorExpressionListRightAssoc2 -> mod UnaryExpression FactorExpressionListRightAssoc2
            if ((ExpressionParser.mod == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.mod == context.SymbolId))) {
                    context.Error("Expecting mod at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.mod, "mod", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseUnaryExpression(context));
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc2(context).Children);
                return new ParseNode(ExpressionParser.FactorExpressionListRightAssoc2, "FactorExpressionListRightAssoc2", children.ToArray(), line__, column__, position__);
            }
            // FactorExpressionListRightAssoc2 ->
            if ((((((((((((((((((((((((((((ExpressionParser.div == context.SymbolId) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.FactorExpressionListRightAssoc2, "FactorExpressionListRightAssoc2", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting mod at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberInvokeRefListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberInvokeRefListRightAssoc -> comma MethodArg MemberInvokeRefListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseMethodArg(context));
                children.AddRange(ExpressionParser.ParseMemberInvokeRefListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberInvokeRefListRightAssoc, "MemberInvokeRefListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // MemberInvokeRefListRightAssoc ->
            if ((ExpressionParser.rparen == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.MemberInvokeRefListRightAssoc, "MemberInvokeRefListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberIndexerRefListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberIndexerRefListRightAssoc -> comma Expression MemberIndexerRefListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseExpression(context));
                children.AddRange(ExpressionParser.ParseMemberIndexerRefListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberIndexerRefListRightAssoc, "MemberIndexerRefListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // MemberIndexerRefListRightAssoc ->
            if ((ExpressionParser.rbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.MemberIndexerRefListRightAssoc, "MemberIndexerRefListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeBaseListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeBaseListRightAssoc -> dot identifier TypeBaseListRightAssoc
            if ((ExpressionParser.dot == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.dot == context.SymbolId))) {
                    context.Error("Expecting dot at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.dot, "dot", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.identifier2 == context.SymbolId))) {
                    context.Error("Expecting identifier at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.identifier2, "identifier", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseTypeBaseListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.TypeBaseListRightAssoc, "TypeBaseListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // TypeBaseListRightAssoc ->
            if ((((((((((((ExpressionParser.lt == context.SymbolId) 
                        || (ExpressionParser.lbracket == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.lbrace == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.TypeBaseListRightAssoc, "TypeBaseListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting dot at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeArraySpecListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeArraySpecListRightAssoc -> TypeArraySpec TypeArraySpecListRightAssoc
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseTypeArraySpec(context));
                children.AddRange(ExpressionParser.ParseTypeArraySpecListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.TypeArraySpecListRightAssoc, "TypeArraySpecListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // TypeArraySpecListRightAssoc ->
            if (((((((((ExpressionParser.rparen == context.SymbolId) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.lbrace == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.TypeArraySpecListRightAssoc, "TypeArraySpecListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting TypeArraySpec at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeGenericPartListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeGenericPartListRightAssoc -> comma Type TypeGenericPartListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseType(context));
                children.AddRange(ExpressionParser.ParseTypeGenericPartListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.TypeGenericPartListRightAssoc, "TypeGenericPartListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // TypeGenericPartListRightAssoc ->
            if ((ExpressionParser.gt == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.TypeGenericPartListRightAssoc, "TypeGenericPartListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeArraySpecRankListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeArraySpecRankListRightAssoc -> TypeArraySpecRank TypeArraySpecRankListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseTypeArraySpecRank(context));
                children.AddRange(ExpressionParser.ParseTypeArraySpecRankListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.TypeArraySpecRankListRightAssoc, "TypeArraySpecRankListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // TypeArraySpecRankListRightAssoc ->
            if ((ExpressionParser.rbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.TypeArraySpecRankListRightAssoc, "TypeArraySpecRankListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting TypeArraySpecRank at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseNewObjectPartListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // NewObjectPartListRightAssoc -> comma Expression NewObjectPartListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseExpression(context));
                children.AddRange(ExpressionParser.ParseNewObjectPartListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.NewObjectPartListRightAssoc, "NewObjectPartListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // NewObjectPartListRightAssoc ->
            if ((ExpressionParser.rparen == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.NewObjectPartListRightAssoc, "NewObjectPartListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseArraySpecExpressionListListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ArraySpecExpressionListListRightAssoc -> comma Expression ArraySpecExpressionListListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseExpression(context));
                children.AddRange(ExpressionParser.ParseArraySpecExpressionListListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.ArraySpecExpressionListListRightAssoc, "ArraySpecExpressionListListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // ArraySpecExpressionListListRightAssoc ->
            if ((ExpressionParser.rbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.ArraySpecExpressionListListRightAssoc, "ArraySpecExpressionListListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseArrayInitializerListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ArrayInitializerListRightAssoc -> comma Expression ArrayInitializerListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseExpression(context));
                children.AddRange(ExpressionParser.ParseArrayInitializerListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.ArrayInitializerListRightAssoc, "ArrayInitializerListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // ArrayInitializerListRightAssoc ->
            if ((ExpressionParser.rbrace == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.ArrayInitializerListRightAssoc, "ArrayInitializerListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefListRightAssoc -> MemberAnyRef MemberAnyRefListRightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefListRightAssoc, "MemberAnyRefListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList2RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList2RightAssoc -> MemberAnyRef MemberAnyRefList2RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList2RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList2RightAssoc, "MemberAnyRefList2RightAssoc", children.ToArray(), line__, column__, position__);
            }
            // MemberAnyRefList2RightAssoc ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.MemberAnyRefList2RightAssoc, "MemberAnyRefList2RightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList3RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList3RightAssoc -> MemberAnyRef MemberAnyRefList3RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList3RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList3RightAssoc, "MemberAnyRefList3RightAssoc", children.ToArray(), line__, column__, position__);
            }
            // MemberAnyRefList3RightAssoc ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.MemberAnyRefList3RightAssoc, "MemberAnyRefList3RightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList4RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList4RightAssoc -> MemberAnyRef MemberAnyRefList4RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList4RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList4RightAssoc, "MemberAnyRefList4RightAssoc", children.ToArray(), line__, column__, position__);
            }
            // MemberAnyRefList4RightAssoc ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.MemberAnyRefList4RightAssoc, "MemberAnyRefList4RightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList5RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList5RightAssoc -> MemberAnyRef MemberAnyRefList5RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList5RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList5RightAssoc, "MemberAnyRefList5RightAssoc", children.ToArray(), line__, column__, position__);
            }
            // MemberAnyRefList5RightAssoc ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.MemberAnyRefList5RightAssoc, "MemberAnyRefList5RightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList6RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList6RightAssoc -> MemberAnyRef MemberAnyRefList6RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList6RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList6RightAssoc, "MemberAnyRefList6RightAssoc", children.ToArray(), line__, column__, position__);
            }
            // MemberAnyRefList6RightAssoc ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.MemberAnyRefList6RightAssoc, "MemberAnyRefList6RightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList7RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList7RightAssoc -> MemberAnyRef MemberAnyRefList7RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList7RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList7RightAssoc, "MemberAnyRefList7RightAssoc", children.ToArray(), line__, column__, position__);
            }
            // MemberAnyRefList7RightAssoc ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.MemberAnyRefList7RightAssoc, "MemberAnyRefList7RightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList8RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList8RightAssoc -> MemberAnyRef MemberAnyRefList8RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList8RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList8RightAssoc, "MemberAnyRefList8RightAssoc", children.ToArray(), line__, column__, position__);
            }
            // MemberAnyRefList8RightAssoc ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.MemberAnyRefList8RightAssoc, "MemberAnyRefList8RightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList9RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList9RightAssoc -> MemberAnyRef MemberAnyRefList9RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList9RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList9RightAssoc, "MemberAnyRefList9RightAssoc", children.ToArray(), line__, column__, position__);
            }
            // MemberAnyRefList9RightAssoc ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.MemberAnyRefList9RightAssoc, "MemberAnyRefList9RightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList10RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList10RightAssoc -> MemberAnyRef MemberAnyRefList10RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList10RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList10RightAssoc, "MemberAnyRefList10RightAssoc", children.ToArray(), line__, column__, position__);
            }
            // MemberAnyRefList10RightAssoc ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.MemberAnyRefList10RightAssoc, "MemberAnyRefList10RightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList11RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList11RightAssoc -> MemberAnyRef MemberAnyRefList11RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList11RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList11RightAssoc, "MemberAnyRefList11RightAssoc", children.ToArray(), line__, column__, position__);
            }
            // MemberAnyRefList11RightAssoc ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.MemberAnyRefList11RightAssoc, "MemberAnyRefList11RightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList12RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList12RightAssoc -> MemberAnyRef MemberAnyRefList12RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList12RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList12RightAssoc, "MemberAnyRefList12RightAssoc", children.ToArray(), line__, column__, position__);
            }
            // MemberAnyRefList12RightAssoc ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.MemberAnyRefList12RightAssoc, "MemberAnyRefList12RightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList13RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList13RightAssoc -> MemberAnyRef MemberAnyRefList13RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList13RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList13RightAssoc, "MemberAnyRefList13RightAssoc", children.ToArray(), line__, column__, position__);
            }
            // MemberAnyRefList13RightAssoc ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.MemberAnyRefList13RightAssoc, "MemberAnyRefList13RightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList14RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList14RightAssoc -> MemberAnyRef MemberAnyRefList14RightAssoc
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRef(context).Children);
                children.AddRange(ExpressionParser.ParseMemberAnyRefList14RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList14RightAssoc, "MemberAnyRefList14RightAssoc", children.ToArray(), line__, column__, position__);
            }
            // MemberAnyRefList14RightAssoc ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.MemberAnyRefList14RightAssoc, "MemberAnyRefList14RightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseRelationalExpression(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // RelationalExpression -> TermExpression RelationalExpressionPart
            if (((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseTermExpression(context));
                children.AddRange(ExpressionParser.ParseRelationalExpressionPart(context).Children);
                return new ParseNode(ExpressionParser.RelationalExpression, "RelationalExpression", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting TermExpression at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseRelationalExpressionPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // RelationalExpressionPart -> RelationalExpressionList
            if (((((ExpressionParser.lt == context.SymbolId) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseRelationalExpressionList(context).Children);
                return new ParseNode(ExpressionParser.RelationalExpressionPart, "RelationalExpressionPart", children.ToArray(), line__, column__, position__);
            }
            // RelationalExpressionPart ->
            if (((((((((((((((((((((ExpressionParser.eqEq == context.SymbolId) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.RelationalExpressionPart, "RelationalExpressionPart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting RelationalExpressionList at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseEqualityExpression(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // EqualityExpression -> RelationalExpression EqualityExpressionPart
            if (((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseRelationalExpression(context));
                children.AddRange(ExpressionParser.ParseEqualityExpressionPart(context).Children);
                return new ParseNode(ExpressionParser.EqualityExpression, "EqualityExpression", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting RelationalExpression at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseEqualityExpressionPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // EqualityExpressionPart -> EqualityExpressionList
            if (((ExpressionParser.eqEq == context.SymbolId) 
                        || (ExpressionParser.notEq == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseEqualityExpressionList(context).Children);
                return new ParseNode(ExpressionParser.EqualityExpressionPart, "EqualityExpressionPart", children.ToArray(), line__, column__, position__);
            }
            // EqualityExpressionPart ->
            if (((((((((((((((((((ExpressionParser.bitwiseAnd == context.SymbolId) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.EqualityExpressionPart, "EqualityExpressionPart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting EqualityExpressionList at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseBitwiseAndExpression(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // BitwiseAndExpression -> EqualityExpression BitwiseAndExpressionPart
            if (((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseEqualityExpression(context));
                children.AddRange(ExpressionParser.ParseBitwiseAndExpressionPart(context).Children);
                return new ParseNode(ExpressionParser.BitwiseAndExpression, "BitwiseAndExpression", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting EqualityExpression at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseBitwiseAndExpressionPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // BitwiseAndExpressionPart -> BitwiseAndExpressionList
            if ((ExpressionParser.bitwiseAnd == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseBitwiseAndExpressionList(context).Children);
                return new ParseNode(ExpressionParser.BitwiseAndExpressionPart, "BitwiseAndExpressionPart", children.ToArray(), line__, column__, position__);
            }
            // BitwiseAndExpressionPart ->
            if ((((((((((((((((((ExpressionParser.bitwiseOr == context.SymbolId) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.BitwiseAndExpressionPart, "BitwiseAndExpressionPart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting BitwiseAndExpressionList at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseBitwiseOrExpression(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // BitwiseOrExpression -> BitwiseAndExpression BitwiseOrExpressionPart
            if (((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseBitwiseAndExpression(context));
                children.AddRange(ExpressionParser.ParseBitwiseOrExpressionPart(context).Children);
                return new ParseNode(ExpressionParser.BitwiseOrExpression, "BitwiseOrExpression", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting BitwiseAndExpression at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseBitwiseOrExpressionPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // BitwiseOrExpressionPart -> BitwiseOrExpressionList
            if ((ExpressionParser.bitwiseOr == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseBitwiseOrExpressionList(context).Children);
                return new ParseNode(ExpressionParser.BitwiseOrExpressionPart, "BitwiseOrExpressionPart", children.ToArray(), line__, column__, position__);
            }
            // BitwiseOrExpressionPart ->
            if (((((((((((((((((ExpressionParser.and == context.SymbolId) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.BitwiseOrExpressionPart, "BitwiseOrExpressionPart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting BitwiseOrExpressionList at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseAndExpression(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AndExpression -> BitwiseOrExpression AndExpressionPart
            if (((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseBitwiseOrExpression(context));
                children.AddRange(ExpressionParser.ParseAndExpressionPart(context).Children);
                return new ParseNode(ExpressionParser.AndExpression, "AndExpression", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting BitwiseOrExpression at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseAndExpressionPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AndExpressionPart -> AndExpressionList
            if ((ExpressionParser.and == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseAndExpressionList(context).Children);
                return new ParseNode(ExpressionParser.AndExpressionPart, "AndExpressionPart", children.ToArray(), line__, column__, position__);
            }
            // AndExpressionPart ->
            if ((((((((((((((((ExpressionParser.or == context.SymbolId) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.AndExpressionPart, "AndExpressionPart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting AndExpressionList at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseOrExpression(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // OrExpression -> AndExpression OrExpressionPart
            if (((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseAndExpression(context));
                children.AddRange(ExpressionParser.ParseOrExpressionPart(context).Children);
                return new ParseNode(ExpressionParser.OrExpression, "OrExpression", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting AndExpression at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseOrExpressionPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // OrExpressionPart -> OrExpressionList
            if ((ExpressionParser.or == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseOrExpressionList(context).Children);
                return new ParseNode(ExpressionParser.OrExpressionPart, "OrExpressionPart", children.ToArray(), line__, column__, position__);
            }
            // OrExpressionPart ->
            if (((((((((((((((ExpressionParser.eq == context.SymbolId) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.OrExpressionPart, "OrExpressionPart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting OrExpressionList at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseAssignExpression(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AssignExpression -> OrExpression AssignExpressionPart
            if (((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseOrExpression(context));
                children.AddRange(ExpressionParser.ParseAssignExpressionPart(context).Children);
                return new ParseNode(ExpressionParser.AssignExpression, "AssignExpression", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting OrExpression at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseAssignExpressionPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AssignExpressionPart -> AssignExpressionList
            if (((((((((ExpressionParser.eq == context.SymbolId) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseAssignExpressionList(context).Children);
                return new ParseNode(ExpressionParser.AssignExpressionPart, "AssignExpressionPart", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionPart ->
            if (((((((ExpressionParser.EosSymbol == context.SymbolId) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.AssignExpressionPart, "AssignExpressionPart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting AssignExpressionList at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTermExpression(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TermExpression -> FactorExpression TermExpressionPart
            if (((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseFactorExpression(context));
                children.AddRange(ExpressionParser.ParseTermExpressionPart(context).Children);
                return new ParseNode(ExpressionParser.TermExpression, "TermExpression", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting FactorExpression at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTermExpressionPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TermExpressionPart -> TermExpressionList
            if (((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseTermExpressionList(context).Children);
                return new ParseNode(ExpressionParser.TermExpressionPart, "TermExpressionPart", children.ToArray(), line__, column__, position__);
            }
            // TermExpressionPart ->
            if (((((((((((((((((((((((((ExpressionParser.lt == context.SymbolId) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.TermExpressionPart, "TermExpressionPart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting TermExpressionList at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseFactorExpression(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // FactorExpression -> UnaryExpression FactorExpressionPart
            if (((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseUnaryExpression(context));
                children.AddRange(ExpressionParser.ParseFactorExpressionPart(context).Children);
                return new ParseNode(ExpressionParser.FactorExpression, "FactorExpression", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting UnaryExpression at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseFactorExpressionPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // FactorExpressionPart -> FactorExpressionList
            if ((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.mod == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseFactorExpressionList(context).Children);
                return new ParseNode(ExpressionParser.FactorExpressionPart, "FactorExpressionPart", children.ToArray(), line__, column__, position__);
            }
            // FactorExpressionPart ->
            if (((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.FactorExpressionPart, "FactorExpressionPart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting FactorExpressionList at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberInvokeRefPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberInvokeRefPart -> MemberInvokeRefList rparen
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberInvokeRefList(context).Children);
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                return new ParseNode(ExpressionParser.MemberInvokeRefPart, "MemberInvokeRefPart", children.ToArray(), line__, column__, position__);
            }
            // MemberInvokeRefPart -> rparen
            if ((ExpressionParser.rparen == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.MemberInvokeRefPart, "MemberInvokeRefPart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberInvokeRefList or rparen at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberIndexerRef(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberIndexerRef -> lbracket Expression MemberIndexerRefPart
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.lbracket == context.SymbolId))) {
                    context.Error("Expecting lbracket at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.lbracket, "lbracket", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseExpression(context));
                children.AddRange(ExpressionParser.ParseMemberIndexerRefPart(context).Children);
                return new ParseNode(ExpressionParser.MemberIndexerRef, "MemberIndexerRef", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting lbracket at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberIndexerRefPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberIndexerRefPart -> MemberIndexerRefList rbracket
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberIndexerRefList(context).Children);
                if ((false 
                            == (ExpressionParser.rbracket == context.SymbolId))) {
                    context.Error("Expecting rbracket at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.rbracket, "rbracket", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                return new ParseNode(ExpressionParser.MemberIndexerRefPart, "MemberIndexerRefPart", children.ToArray(), line__, column__, position__);
            }
            // MemberIndexerRefPart -> rbracket
            if ((ExpressionParser.rbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.rbracket == context.SymbolId))) {
                    context.Error("Expecting rbracket at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.rbracket, "rbracket", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.MemberIndexerRefPart, "MemberIndexerRefPart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberIndexerRefList or rbracket at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeBasePart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeBasePart -> TypeBaseList
            if ((ExpressionParser.dot == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseTypeBaseList(context).Children);
                return new ParseNode(ExpressionParser.TypeBasePart, "TypeBasePart", children.ToArray(), line__, column__, position__);
            }
            // TypeBasePart ->
            if ((((((((((((ExpressionParser.lt == context.SymbolId) 
                        || (ExpressionParser.lbracket == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.lbrace == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.TypeBasePart, "TypeBasePart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting TypeBaseList at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseType(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // Type -> TypeElement TypePart
            if (((((((((((((((((ExpressionParser.boolType == context.SymbolId) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseTypeElement(context));
                children.AddRange(ExpressionParser.ParseTypePart(context).Children);
                return new ParseNode(ExpressionParser.Type, "Type", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting TypeElement at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        /// <summary>
        /// Parses a production of the form:
        /// Type= TypeElement { TypeArraySpec }
        /// </summary>
        /// <remarks>
        /// The production rules are:
        /// Type -> TypeElement TypePart
        /// </remarks>
        /// <param name="tokenizer">The tokenizer to parse with</param><returns>A <see cref="ParseNode" /> representing the parsed tokens</returns>
        public static ParseNode ParseType(System.Collections.Generic.IEnumerable<Token> tokenizer) {
            ParserContext context = new ParserContext(tokenizer);
            context.EnsureStarted();
            ParseNode result = ExpressionParser.ParseType(context);
            if ((false == context.IsEnded)) {
                context.Error("Unexpected remainder in input.");
            }
            return result;
        }
        internal static ParseNode ParseTypePart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypePart -> TypeArraySpecList
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseTypeArraySpecList(context).Children);
                return new ParseNode(ExpressionParser.TypePart, "TypePart", children.ToArray(), line__, column__, position__);
            }
            // TypePart ->
            if (((((((((ExpressionParser.rparen == context.SymbolId) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.lbrace == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.TypePart, "TypePart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting TypeArraySpecList at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeElement(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeElement -> TypeBase TypeElementPart
            if (((((((((((((((((ExpressionParser.boolType == context.SymbolId) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseTypeBase(context));
                children.AddRange(ExpressionParser.ParseTypeElementPart(context).Children);
                return new ParseNode(ExpressionParser.TypeElement, "TypeElement", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting TypeBase at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeElementPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeElementPart -> TypeGenericPart
            if ((ExpressionParser.lt == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                children[0] = ExpressionParser.ParseTypeGenericPart(context);
                return new ParseNode(ExpressionParser.TypeElementPart, "TypeElementPart", children, line__, column__, position__);
            }
            // TypeElementPart ->
            if (((((((((((ExpressionParser.lbracket == context.SymbolId) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.lbrace == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.TypeElementPart, "TypeElementPart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting TypeGenericPart at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeGenericPartPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeGenericPartPart -> TypeGenericPartList gt
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseTypeGenericPartList(context).Children);
                if ((false 
                            == (ExpressionParser.gt == context.SymbolId))) {
                    context.Error("Expecting gt at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.gt, "gt", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                return new ParseNode(ExpressionParser.TypeGenericPartPart, "TypeGenericPartPart", children.ToArray(), line__, column__, position__);
            }
            // TypeGenericPartPart -> gt
            if ((ExpressionParser.gt == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.gt == context.SymbolId))) {
                    context.Error("Expecting gt at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.gt, "gt", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.TypeGenericPartPart, "TypeGenericPartPart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting TypeGenericPartList or gt at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeArraySpec(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeArraySpec -> lbracket TypeArraySpecPart
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.lbracket == context.SymbolId))) {
                    context.Error("Expecting lbracket at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.lbracket, "lbracket", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseTypeArraySpecPart(context).Children);
                return new ParseNode(ExpressionParser.TypeArraySpec, "TypeArraySpec", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting lbracket at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeArraySpecPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeArraySpecPart -> TypeArraySpecRankList rbracket
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseTypeArraySpecRankList(context).Children);
                if ((false 
                            == (ExpressionParser.rbracket == context.SymbolId))) {
                    context.Error("Expecting rbracket at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.rbracket, "rbracket", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                return new ParseNode(ExpressionParser.TypeArraySpecPart, "TypeArraySpecPart", children.ToArray(), line__, column__, position__);
            }
            // TypeArraySpecPart -> rbracket
            if ((ExpressionParser.rbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.rbracket == context.SymbolId))) {
                    context.Error("Expecting rbracket at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.rbracket, "rbracket", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.TypeArraySpecPart, "TypeArraySpecPart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting TypeArraySpecRankList or rbracket at line {0}, column {1}, position {2}" +
                        "", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseNewExpression(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // NewExpression -> newKeyword TypeElement NewExpressionPart
            if ((ExpressionParser.newKeyword == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.newKeyword == context.SymbolId))) {
                    context.Error("Expecting newKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.newKeyword, "newKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseTypeElement(context));
                children.AddRange(ExpressionParser.ParseNewExpressionPart(context).Children);
                return new ParseNode(ExpressionParser.NewExpression, "NewExpression", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting newKeyword at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseNewExpressionPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // NewExpressionPart -> NewObjectPart
            if ((ExpressionParser.lparen == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseNewObjectPart(context).Children);
                return new ParseNode(ExpressionParser.NewExpressionPart, "NewExpressionPart", children.ToArray(), line__, column__, position__);
            }
            // NewExpressionPart -> NewArrayPart
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseNewArrayPart(context).Children);
                return new ParseNode(ExpressionParser.NewExpressionPart, "NewExpressionPart", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting NewObjectPart or NewArrayPart at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseNewObjectPartPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // NewObjectPartPart -> NewObjectPartList rparen
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseNewObjectPartList(context).Children);
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                return new ParseNode(ExpressionParser.NewObjectPartPart, "NewObjectPartPart", children.ToArray(), line__, column__, position__);
            }
            // NewObjectPartPart -> rparen
            if ((ExpressionParser.rparen == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.NewObjectPartPart, "NewObjectPartPart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting NewObjectPartList or rparen at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseArraySpecExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ArraySpecExpressionList -> Expression ArraySpecExpressionListPart
            if (((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseExpression(context));
                children.AddRange(ExpressionParser.ParseArraySpecExpressionListPart(context).Children);
                return new ParseNode(ExpressionParser.ArraySpecExpressionList, "ArraySpecExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Expression at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseArraySpecExpressionListPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ArraySpecExpressionListPart -> ArraySpecExpressionListList rbracket
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseArraySpecExpressionListList(context).Children);
                if ((false 
                            == (ExpressionParser.rbracket == context.SymbolId))) {
                    context.Error("Expecting rbracket at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.rbracket, "rbracket", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                return new ParseNode(ExpressionParser.ArraySpecExpressionListPart, "ArraySpecExpressionListPart", children.ToArray(), line__, column__, position__);
            }
            // ArraySpecExpressionListPart -> rbracket
            if ((ExpressionParser.rbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.rbracket == context.SymbolId))) {
                    context.Error("Expecting rbracket at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.rbracket, "rbracket", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.ArraySpecExpressionListPart, "ArraySpecExpressionListPart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting ArraySpecExpressionListList or rbracket at line {0}, column {1}, positi" +
                        "on {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseArrayInitializerPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ArrayInitializerPart -> ArrayInitializerList rbrace
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseArrayInitializerList(context).Children);
                if ((false 
                            == (ExpressionParser.rbrace == context.SymbolId))) {
                    context.Error("Expecting rbrace at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.rbrace, "rbrace", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                return new ParseNode(ExpressionParser.ArrayInitializerPart, "ArrayInitializerPart", children.ToArray(), line__, column__, position__);
            }
            // ArrayInitializerPart -> rbrace
            if ((ExpressionParser.rbrace == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.rbrace == context.SymbolId))) {
                    context.Error("Expecting rbrace at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.rbrace, "rbrace", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.ArrayInitializerPart, "ArrayInitializerPart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting ArrayInitializerList or rbrace at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseFieldRef(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // FieldRef -> Identifier FieldRefPart
            if (((ExpressionParser.verbatimIdentifier == context.SymbolId) 
                        || (ExpressionParser.identifier2 == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                children.AddRange(ExpressionParser.ParseFieldRefPart(context).Children);
                return new ParseNode(ExpressionParser.FieldRef, "FieldRef", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Identifier at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseFieldRefPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // FieldRefPart -> MemberAnyRefList
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList(context).Children);
                return new ParseNode(ExpressionParser.FieldRefPart, "FieldRefPart", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRefList at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParsePrimaryExpressionPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // PrimaryExpressionPart -> MemberAnyRefList9
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList9(context).Children);
                return new ParseNode(ExpressionParser.PrimaryExpressionPart, "PrimaryExpressionPart", children.ToArray(), line__, column__, position__);
            }
            // PrimaryExpressionPart ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.PrimaryExpressionPart, "PrimaryExpressionPart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRefList9 at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParsePrimaryExpressionPart2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // PrimaryExpressionPart2 -> MemberAnyRefList10
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList10(context).Children);
                return new ParseNode(ExpressionParser.PrimaryExpressionPart2, "PrimaryExpressionPart2", children.ToArray(), line__, column__, position__);
            }
            // PrimaryExpressionPart2 ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.PrimaryExpressionPart2, "PrimaryExpressionPart2", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRefList10 at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParsePrimaryExpressionPart3(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // PrimaryExpressionPart3 -> MemberAnyRefList11
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList11(context).Children);
                return new ParseNode(ExpressionParser.PrimaryExpressionPart3, "PrimaryExpressionPart3", children.ToArray(), line__, column__, position__);
            }
            // PrimaryExpressionPart3 ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.PrimaryExpressionPart3, "PrimaryExpressionPart3", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRefList11 at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParsePrimaryExpressionPart4(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // PrimaryExpressionPart4 -> MemberAnyRefList2
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList2(context).Children);
                return new ParseNode(ExpressionParser.PrimaryExpressionPart4, "PrimaryExpressionPart4", children.ToArray(), line__, column__, position__);
            }
            // PrimaryExpressionPart4 ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.PrimaryExpressionPart4, "PrimaryExpressionPart4", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRefList2 at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParsePrimaryExpressionPart5(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // PrimaryExpressionPart5 -> MemberAnyRefList3
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList3(context).Children);
                return new ParseNode(ExpressionParser.PrimaryExpressionPart5, "PrimaryExpressionPart5", children.ToArray(), line__, column__, position__);
            }
            // PrimaryExpressionPart5 ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.PrimaryExpressionPart5, "PrimaryExpressionPart5", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRefList3 at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParsePrimaryExpressionPart6(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // PrimaryExpressionPart6 -> MemberAnyRefList4
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList4(context).Children);
                return new ParseNode(ExpressionParser.PrimaryExpressionPart6, "PrimaryExpressionPart6", children.ToArray(), line__, column__, position__);
            }
            // PrimaryExpressionPart6 ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.PrimaryExpressionPart6, "PrimaryExpressionPart6", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRefList4 at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParsePrimaryExpressionPart7(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // PrimaryExpressionPart7 -> MemberAnyRefList5
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList5(context).Children);
                return new ParseNode(ExpressionParser.PrimaryExpressionPart7, "PrimaryExpressionPart7", children.ToArray(), line__, column__, position__);
            }
            // PrimaryExpressionPart7 ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.PrimaryExpressionPart7, "PrimaryExpressionPart7", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRefList5 at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParsePrimaryExpressionPart8(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // PrimaryExpressionPart8 -> MemberAnyRefList6
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList6(context).Children);
                return new ParseNode(ExpressionParser.PrimaryExpressionPart8, "PrimaryExpressionPart8", children.ToArray(), line__, column__, position__);
            }
            // PrimaryExpressionPart8 ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.PrimaryExpressionPart8, "PrimaryExpressionPart8", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRefList6 at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParsePrimaryExpressionPart9(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // PrimaryExpressionPart9 -> MemberAnyRefList7
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList7(context).Children);
                return new ParseNode(ExpressionParser.PrimaryExpressionPart9, "PrimaryExpressionPart9", children.ToArray(), line__, column__, position__);
            }
            // PrimaryExpressionPart9 ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.PrimaryExpressionPart9, "PrimaryExpressionPart9", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRefList7 at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParsePrimaryExpressionPart10(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // PrimaryExpressionPart10 -> MemberAnyRefList8
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList8(context).Children);
                return new ParseNode(ExpressionParser.PrimaryExpressionPart10, "PrimaryExpressionPart10", children.ToArray(), line__, column__, position__);
            }
            // PrimaryExpressionPart10 ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.PrimaryExpressionPart10, "PrimaryExpressionPart10", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRefList8 at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParsePrimaryExpressionPart11(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // PrimaryExpressionPart11 -> MemberAnyRefList12
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList12(context).Children);
                return new ParseNode(ExpressionParser.PrimaryExpressionPart11, "PrimaryExpressionPart11", children.ToArray(), line__, column__, position__);
            }
            // PrimaryExpressionPart11 ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.PrimaryExpressionPart11, "PrimaryExpressionPart11", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRefList12 at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParsePrimaryExpressionPart12(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // PrimaryExpressionPart12 -> MemberAnyRefList13
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList13(context).Children);
                return new ParseNode(ExpressionParser.PrimaryExpressionPart12, "PrimaryExpressionPart12", children.ToArray(), line__, column__, position__);
            }
            // PrimaryExpressionPart12 ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.PrimaryExpressionPart12, "PrimaryExpressionPart12", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRefList13 at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParsePrimaryExpressionPart13(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // PrimaryExpressionPart13 -> MemberAnyRefList14
            if ((((ExpressionParser.dot == context.SymbolId) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList14(context).Children);
                return new ParseNode(ExpressionParser.PrimaryExpressionPart13, "PrimaryExpressionPart13", children.ToArray(), line__, column__, position__);
            }
            // PrimaryExpressionPart13 ->
            if ((((((((((((((((((((((((((((((ExpressionParser.mul == context.SymbolId) 
                        || (ExpressionParser.mod == context.SymbolId)) 
                        || (ExpressionParser.div == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.PrimaryExpressionPart13, "PrimaryExpressionPart13", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRefList14 at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseRelationalExpressionListPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // RelationalExpressionListPart -> lte TermExpression
            if ((ExpressionParser.lte == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.lte == context.SymbolId))) {
                    context.Error("Expecting lte at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.lte, "lte", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[1] = ExpressionParser.ParseTermExpression(context);
                return new ParseNode(ExpressionParser.RelationalExpressionListPart, "RelationalExpressionListPart", children, line__, column__, position__);
            }
            // RelationalExpressionListPart -> gte TermExpression
            if ((ExpressionParser.gte == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.gte == context.SymbolId))) {
                    context.Error("Expecting gte at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.gte, "gte", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[1] = ExpressionParser.ParseTermExpression(context);
                return new ParseNode(ExpressionParser.RelationalExpressionListPart, "RelationalExpressionListPart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting lte or gte at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseAssignExpressionListPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AssignExpressionListPart -> addAssign OrExpression
            if ((ExpressionParser.addAssign == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.addAssign == context.SymbolId))) {
                    context.Error("Expecting addAssign at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.addAssign, "addAssign", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[1] = ExpressionParser.ParseOrExpression(context);
                return new ParseNode(ExpressionParser.AssignExpressionListPart, "AssignExpressionListPart", children, line__, column__, position__);
            }
            // AssignExpressionListPart -> mulAssign OrExpression
            if ((ExpressionParser.mulAssign == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.mulAssign == context.SymbolId))) {
                    context.Error("Expecting mulAssign at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.mulAssign, "mulAssign", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[1] = ExpressionParser.ParseOrExpression(context);
                return new ParseNode(ExpressionParser.AssignExpressionListPart, "AssignExpressionListPart", children, line__, column__, position__);
            }
            // AssignExpressionListPart -> modAssign OrExpression
            if ((ExpressionParser.modAssign == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.modAssign == context.SymbolId))) {
                    context.Error("Expecting modAssign at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.modAssign, "modAssign", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[1] = ExpressionParser.ParseOrExpression(context);
                return new ParseNode(ExpressionParser.AssignExpressionListPart, "AssignExpressionListPart", children, line__, column__, position__);
            }
            // AssignExpressionListPart -> bitwiseOrAssign OrExpression
            if ((ExpressionParser.bitwiseOrAssign == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.bitwiseOrAssign == context.SymbolId))) {
                    context.Error("Expecting bitwiseOrAssign at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.bitwiseOrAssign, "bitwiseOrAssign", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[1] = ExpressionParser.ParseOrExpression(context);
                return new ParseNode(ExpressionParser.AssignExpressionListPart, "AssignExpressionListPart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting addAssign, mulAssign, modAssign, or bitwiseOrAssign at line {0}, column" +
                        " {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseEqualityExpressionListRightAssoc2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // EqualityExpressionListRightAssoc2 -> notEq RelationalExpression EqualityExpressionListRightAssoc2
            if ((ExpressionParser.notEq == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.notEq == context.SymbolId))) {
                    context.Error("Expecting notEq at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.notEq, "notEq", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseRelationalExpression(context));
                children.AddRange(ExpressionParser.ParseEqualityExpressionListRightAssoc2(context).Children);
                return new ParseNode(ExpressionParser.EqualityExpressionListRightAssoc2, "EqualityExpressionListRightAssoc2", children.ToArray(), line__, column__, position__);
            }
            // EqualityExpressionListRightAssoc2 ->
            if (((((((((((((((((((ExpressionParser.bitwiseAnd == context.SymbolId) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.EqualityExpressionListRightAssoc2, "EqualityExpressionListRightAssoc2", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting notEq at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTermExpressionListRightAssoc2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TermExpressionListRightAssoc2 -> sub FactorExpression TermExpressionListRightAssoc2
            if ((ExpressionParser.sub == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.sub == context.SymbolId))) {
                    context.Error("Expecting sub at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.sub, "sub", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseFactorExpression(context));
                children.AddRange(ExpressionParser.ParseTermExpressionListRightAssoc2(context).Children);
                return new ParseNode(ExpressionParser.TermExpressionListRightAssoc2, "TermExpressionListRightAssoc2", children.ToArray(), line__, column__, position__);
            }
            // TermExpressionListRightAssoc2 ->
            if (((((((((((((((((((((((((ExpressionParser.lt == context.SymbolId) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.TermExpressionListRightAssoc2, "TermExpressionListRightAssoc2", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting sub at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseFactorExpressionListRightAssoc3(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // FactorExpressionListRightAssoc3 -> div UnaryExpression FactorExpressionListRightAssoc3
            if ((ExpressionParser.div == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.div == context.SymbolId))) {
                    context.Error("Expecting div at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.div, "div", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseUnaryExpression(context));
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc3(context).Children);
                return new ParseNode(ExpressionParser.FactorExpressionListRightAssoc3, "FactorExpressionListRightAssoc3", children.ToArray(), line__, column__, position__);
            }
            // FactorExpressionListRightAssoc3 ->
            if (((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.lt == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId)) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId)) 
                        || (ExpressionParser.eqEq == context.SymbolId)) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.FactorExpressionListRightAssoc3, "FactorExpressionListRightAssoc3", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting div at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseRelationalExpressionListRightAssoc3(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // RelationalExpressionListRightAssoc3 -> RelationalExpressionListPart RelationalExpressionListRightAssoc3
            if (((ExpressionParser.lte == context.SymbolId) 
                        || (ExpressionParser.gte == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseRelationalExpressionListPart(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc3(context).Children);
                return new ParseNode(ExpressionParser.RelationalExpressionListRightAssoc3, "RelationalExpressionListRightAssoc3", children.ToArray(), line__, column__, position__);
            }
            // RelationalExpressionListRightAssoc3 ->
            if (((((((((((((((((((((ExpressionParser.eqEq == context.SymbolId) 
                        || (ExpressionParser.notEq == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAnd == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOr == context.SymbolId)) 
                        || (ExpressionParser.and == context.SymbolId)) 
                        || (ExpressionParser.or == context.SymbolId)) 
                        || (ExpressionParser.eq == context.SymbolId)) 
                        || (ExpressionParser.subAssign == context.SymbolId)) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId)) 
                        || (ExpressionParser.EosSymbol == context.SymbolId)) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.RelationalExpressionListRightAssoc3, "RelationalExpressionListRightAssoc3", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting RelationalExpressionListPart at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseAssignExpressionListRightAssoc5(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AssignExpressionListRightAssoc5 -> AssignExpressionListPart AssignExpressionListRightAssoc5
            if (((((ExpressionParser.addAssign == context.SymbolId) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseAssignExpressionListPart(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(ExpressionParser.AssignExpressionListRightAssoc5, "AssignExpressionListRightAssoc5", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionListRightAssoc5 ->
            if (((((((ExpressionParser.EosSymbol == context.SymbolId) 
                        || (ExpressionParser.comma == context.SymbolId)) 
                        || (ExpressionParser.rparen == context.SymbolId)) 
                        || (ExpressionParser.rbracket == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.semi == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.AssignExpressionListRightAssoc5, "AssignExpressionListRightAssoc5", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting AssignExpressionListPart at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberInvokeRef(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberInvokeRef -> lparen MemberInvokeRefPart2
            if ((ExpressionParser.lparen == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.lparen == context.SymbolId))) {
                    context.Error("Expecting lparen at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.lparen, "lparen", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberInvokeRefPart2(context).Children);
                return new ParseNode(ExpressionParser.MemberInvokeRef, "MemberInvokeRef", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting lparen at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberInvokeRefPart2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberInvokeRefPart2 -> rparen
            if ((ExpressionParser.rparen == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.MemberInvokeRefPart2, "MemberInvokeRefPart2", children, line__, column__, position__);
            }
            // MemberInvokeRefPart2 -> MethodArg MemberInvokeRefPart
            if (((((((((((((((((((((((((((((((((((((((ExpressionParser.outKeyword == context.SymbolId) 
                        || (ExpressionParser.refKeyword == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseMethodArg(context));
                children.AddRange(ExpressionParser.ParseMemberInvokeRefPart(context).Children);
                return new ParseNode(ExpressionParser.MemberInvokeRefPart2, "MemberInvokeRefPart2", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting rparen or MethodArg at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeGenericPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeGenericPart -> lt TypeGenericPartPart2
            if ((ExpressionParser.lt == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.lt == context.SymbolId))) {
                    context.Error("Expecting lt at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.lt, "lt", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseTypeGenericPartPart2(context).Children);
                return new ParseNode(ExpressionParser.TypeGenericPart, "TypeGenericPart", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting lt at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeGenericPartPart2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeGenericPartPart2 -> gt
            if ((ExpressionParser.gt == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.gt == context.SymbolId))) {
                    context.Error("Expecting gt at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.gt, "gt", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.TypeGenericPartPart2, "TypeGenericPartPart2", children, line__, column__, position__);
            }
            // TypeGenericPartPart2 -> Type TypeGenericPartPart
            if (((((((((((((((((ExpressionParser.boolType == context.SymbolId) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseType(context));
                children.AddRange(ExpressionParser.ParseTypeGenericPartPart(context).Children);
                return new ParseNode(ExpressionParser.TypeGenericPartPart2, "TypeGenericPartPart2", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting gt or Type at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseNewObjectPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // NewObjectPart -> lparen NewObjectPartPart2
            if ((ExpressionParser.lparen == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.lparen == context.SymbolId))) {
                    context.Error("Expecting lparen at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.lparen, "lparen", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseNewObjectPartPart2(context).Children);
                return new ParseNode(ExpressionParser.NewObjectPart, "NewObjectPart", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting lparen at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseNewObjectPartPart2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // NewObjectPartPart2 -> rparen
            if ((ExpressionParser.rparen == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.NewObjectPartPart2, "NewObjectPartPart2", children, line__, column__, position__);
            }
            // NewObjectPartPart2 -> Expression NewObjectPartPart
            if (((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseExpression(context));
                children.AddRange(ExpressionParser.ParseNewObjectPartPart(context).Children);
                return new ParseNode(ExpressionParser.NewObjectPartPart2, "NewObjectPartPart2", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting rparen or Expression at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseArrayInitializer(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ArrayInitializer -> eq lbrace ArrayInitializerPart2
            if ((ExpressionParser.eq == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.eq == context.SymbolId))) {
                    context.Error("Expecting eq at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.eq, "eq", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.lbrace == context.SymbolId))) {
                    context.Error("Expecting lbrace at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.lbrace, "lbrace", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseArrayInitializerPart2(context).Children);
                return new ParseNode(ExpressionParser.ArrayInitializer, "ArrayInitializer", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting eq at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseArrayInitializerPart2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ArrayInitializerPart2 -> rbrace
            if ((ExpressionParser.rbrace == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.rbrace == context.SymbolId))) {
                    context.Error("Expecting rbrace at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.rbrace, "rbrace", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.ArrayInitializerPart2, "ArrayInitializerPart2", children, line__, column__, position__);
            }
            // ArrayInitializerPart2 -> Expression ArrayInitializerPart
            if (((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseExpression(context));
                children.AddRange(ExpressionParser.ParseArrayInitializerPart(context).Children);
                return new ParseNode(ExpressionParser.ArrayInitializerPart2, "ArrayInitializerPart2", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting rbrace or Expression at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
    }
    /// <summary>Parses the indicated grammar. Refer to C:\dev\BuildPack\scratch\SlangStatement.xbnf</summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Parsley", "0.1.2.0")]
    internal partial class StatementParser {
        internal const int ErrorSymbol = -1;
        internal const int EosSymbol = -2;
        public const int NamespaceNameList = 2;
        public const int NamespaceNameListRightAssoc = 6;
        public const int Expression = 9;
        public const int MemberAnyRef = 11;
        public const int MethodArg = 12;
        public const int TypeArraySpecRank = 16;
        public const int UnaryExpression = 20;
        public const int Identifier = 22;
        public const int RelationalExpressionList = 23;
        public const int EqualityExpressionList = 24;
        public const int BitwiseAndExpressionList = 25;
        public const int BitwiseOrExpressionList = 26;
        public const int AndExpressionList = 27;
        public const int OrExpressionList = 28;
        public const int AssignExpressionList = 29;
        public const int TermExpressionList = 30;
        public const int FactorExpressionList = 31;
        public const int MemberInvokeRefList = 32;
        public const int MemberIndexerRefList = 33;
        public const int TypeBaseList = 34;
        public const int TypeArraySpecList = 35;
        public const int TypeGenericPartList = 36;
        public const int TypeArraySpecRankList = 37;
        public const int NewObjectPartList = 38;
        public const int ArraySpecExpressionListList = 39;
        public const int ArrayInitializerList = 40;
        public const int MemberAnyRefList = 41;
        public const int MemberAnyRefList2 = 42;
        public const int MemberAnyRefList3 = 43;
        public const int MemberAnyRefList4 = 44;
        public const int MemberAnyRefList5 = 45;
        public const int MemberAnyRefList6 = 46;
        public const int MemberAnyRefList7 = 47;
        public const int MemberAnyRefList8 = 48;
        public const int MemberAnyRefList9 = 49;
        public const int MemberAnyRefList10 = 50;
        public const int MemberAnyRefList11 = 51;
        public const int MemberAnyRefList12 = 52;
        public const int MemberAnyRefList13 = 53;
        public const int MemberAnyRefList14 = 54;
        public const int ExpressionFollows = 58;
        public const int ExpressionFollows2 = 59;
        public const int ExpressionFollows3 = 60;
        public const int ExpressionFollows4 = 61;
        public const int TypeFollows = 62;
        public const int TypeFollows2 = 63;
        public const int TypeFollows3 = 64;
        public const int TypeFollows4 = 65;
        public const int RelationalExpressionListRightAssoc = 67;
        public const int RelationalExpressionListRightAssoc2 = 68;
        public const int EqualityExpressionListRightAssoc = 69;
        public const int BitwiseAndExpressionListRightAssoc = 70;
        public const int BitwiseOrExpressionListRightAssoc = 71;
        public const int AndExpressionListRightAssoc = 72;
        public const int OrExpressionListRightAssoc = 73;
        public const int AssignExpressionListRightAssoc = 74;
        public const int AssignExpressionListRightAssoc2 = 75;
        public const int AssignExpressionListRightAssoc3 = 76;
        public const int AssignExpressionListRightAssoc4 = 77;
        public const int TermExpressionListRightAssoc = 78;
        public const int FactorExpressionListRightAssoc = 79;
        public const int FactorExpressionListRightAssoc2 = 80;
        public const int MemberInvokeRefListRightAssoc = 81;
        public const int MemberIndexerRefListRightAssoc = 82;
        public const int TypeBaseListRightAssoc = 83;
        public const int TypeArraySpecListRightAssoc = 84;
        public const int TypeGenericPartListRightAssoc = 85;
        public const int TypeArraySpecRankListRightAssoc = 86;
        public const int NewObjectPartListRightAssoc = 87;
        public const int ArraySpecExpressionListListRightAssoc = 88;
        public const int ArrayInitializerListRightAssoc = 89;
        public const int MemberAnyRefListRightAssoc = 90;
        public const int MemberAnyRefList2RightAssoc = 91;
        public const int MemberAnyRefList3RightAssoc = 92;
        public const int MemberAnyRefList4RightAssoc = 93;
        public const int MemberAnyRefList5RightAssoc = 94;
        public const int MemberAnyRefList6RightAssoc = 95;
        public const int MemberAnyRefList7RightAssoc = 96;
        public const int MemberAnyRefList8RightAssoc = 97;
        public const int MemberAnyRefList9RightAssoc = 98;
        public const int MemberAnyRefList10RightAssoc = 99;
        public const int MemberAnyRefList11RightAssoc = 100;
        public const int MemberAnyRefList12RightAssoc = 101;
        public const int MemberAnyRefList13RightAssoc = 102;
        public const int MemberAnyRefList14RightAssoc = 103;
        public const int RelationalExpression = 104;
        public const int EqualityExpression = 106;
        public const int BitwiseAndExpression = 108;
        public const int BitwiseOrExpression = 110;
        public const int AndExpression = 112;
        public const int OrExpression = 114;
        public const int TermExpression = 118;
        public const int FactorExpression = 120;
        public const int Type = 126;
        public const int TypeArraySpec = 131;
        public const int RelationalExpressionListPart = 154;
        public const int AssignExpressionListPart = 155;
        public const int EqualityExpressionListRightAssoc2 = 156;
        public const int TermExpressionListRightAssoc2 = 157;
        public const int FactorExpressionListRightAssoc3 = 158;
        public const int RelationalExpressionListRightAssoc3 = 159;
        public const int AssignExpressionListRightAssoc5 = 160;
        public const int EmptyStatement = 169;
        public const int ExpressionStatement = 170;
        public const int VariableDeclarationOrLabelOrExpressionStatement = 171;
        public const int ElsePart = 172;
        public const int IfStatementPart = 173;
        public const int GotoStatement = 174;
        public const int LocalAssignStatement = 175;
        public const int ForIncPart = 176;
        public const int WhileStatement = 177;
        public const int ReturnStatement = 178;
        public const int FinallyPart = 179;
        public const int LabelStatement = 180;
        public const int StatementOrBlock = 181;
        public const int InnerStatement = 182;
        public const int Statements = 183;
        public const int CatchClauseList = 184;
        public const int StatementList = 185;
        public const int StatementList2 = 186;
        public const int IfStatement = 187;
        public const int ForStatement = 188;
        public const int Statement = 189;
        public const int StatementFollows = 190;
        public const int StatementFollows2 = 191;
        public const int StatementFollows3 = 192;
        public const int StatementFollows4 = 193;
        public const int StatementFollows5 = 194;
        public const int StatementFollows6 = 195;
        public const int StatementFollows7 = 196;
        public const int StatementFollows8 = 197;
        public const int StatementFollows9 = 198;
        public const int StatementFollows10 = 199;
        public const int StatementFollows11 = 200;
        public const int StatementFollows12 = 201;
        public const int StatementFollows13 = 202;
        public const int StatementFollows14 = 203;
        public const int InnerStatementFollows = 204;
        public const int InnerStatementFollows2 = 205;
        public const int InnerStatementFollows3 = 206;
        public const int InnerStatementFollows4 = 207;
        public const int InnerStatementFollows5 = 208;
        public const int InnerStatementFollows6 = 209;
        public const int InnerStatementFollows7 = 210;
        public const int InnerStatementFollows8 = 211;
        public const int InnerStatementFollows9 = 212;
        public const int InnerStatementFollows10 = 213;
        public const int InnerStatementFollows11 = 214;
        public const int InnerStatementFollows12 = 215;
        public const int InnerStatementFollows13 = 216;
        public const int InnerStatementFollows14 = 217;
        public const int StatementsFollows = 218;
        public const int CatchClauseListRightAssoc = 219;
        public const int StatementListRightAssoc = 220;
        public const int StatementList2RightAssoc = 221;
        public const int VariableDeclarationStatement = 222;
        public const int VariableDeclarationStatementPart = 223;
        public const int VariableDeclarationStatementPart2 = 224;
        public const int ThrowStatement = 225;
        public const int ThrowStatementPart = 226;
        public const int TryStatementPart = 227;
        public const int CatchClause = 228;
        public const int CatchClausePart = 229;
        public const int StatementBlock = 230;
        public const int StatementBlockPart = 231;
        public const int TryStatement = 232;
        public const int TryStatementPart2 = 233;
        public const int Comments = 234;
        public const int verbatimIdentifier = 403;
        public const int typeOf = 406;
        public const int nameOf = 407;
        public const int defaultOf = 408;
        public const int newKeyword = 409;
        public const int stringType = 410;
        public const int boolType = 411;
        public const int charType = 412;
        public const int floatType = 413;
        public const int doubleType = 414;
        public const int decimalType = 415;
        public const int sbyteType = 416;
        public const int byteType = 417;
        public const int shortType = 418;
        public const int ushortType = 419;
        public const int intType = 420;
        public const int uintType = 421;
        public const int longType = 422;
        public const int ulongType = 423;
        public const int objectType = 424;
        public const int boolLiteral = 425;
        public const int nullLiteral = 426;
        public const int thisRef = 427;
        public const int baseRef = 428;
        public const int verbatimStringLiteral = 429;
        public const int identifier2 = 430;
        public const int stringLiteral = 431;
        public const int characterLiteral = 432;
        public const int lte = 433;
        public const int lt = 434;
        public const int gte = 435;
        public const int gt = 436;
        public const int eqEq = 437;
        public const int notEq = 438;
        public const int eq = 439;
        public const int inc = 440;
        public const int addAssign = 441;
        public const int add = 442;
        public const int dec = 443;
        public const int subAssign = 444;
        public const int sub = 445;
        public const int mulAssign = 446;
        public const int mul = 447;
        public const int divAssign = 448;
        public const int div = 449;
        public const int modAssign = 450;
        public const int mod = 451;
        public const int and = 452;
        public const int bitwiseAndAssign = 453;
        public const int bitwiseAnd = 454;
        public const int or = 455;
        public const int bitwiseOrAssign = 456;
        public const int bitwiseOr = 457;
        public const int not = 458;
        public const int rbracket = 460;
        public const int lparen = 461;
        public const int rparen = 462;
        public const int lbrace = 463;
        public const int rbrace = 464;
        public const int comma = 465;
        public const int dot = 467;
        public const int integerLiteral = 468;
        public const int floatLiteral = 469;
        public const int ifKeyword = 471;
        public const int gotoKeyword = 472;
        public const int elseKeyword = 473;
        public const int forKeyword = 474;
        public const int throwKeyword = 475;
        public const int whileKeyword = 476;
        public const int returnKeyword = 477;
        public const int tryKeyword = 478;
        public const int catchKeyword = 479;
        public const int finallyKeyword = 480;
        public const int semi = 481;
        public const int varType = 482;
        public const int colon = 483;
        public const int directive = 484;
        public const int lineComment = 485;
        public const int blockComment = 486;
        internal static ParseNode ParseEmptyStatement(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // EmptyStatement -> semi
            if ((StatementParser.semi == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (StatementParser.semi == context.SymbolId))) {
                    context.Error("Expecting semi at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(StatementParser.semi, "semi", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(StatementParser.EmptyStatement, "EmptyStatement", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting semi at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseExpressionStatement(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ExpressionStatement -> Expression semi
            if ((((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        && StatementParser.WhereExpressionStatement(context.GetLookAhead(true)))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = ExpressionParser.ParseExpression(context);
                if ((false 
                            == (StatementParser.semi == context.SymbolId))) {
                    context.Error("Expecting semi at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(StatementParser.semi, "semi", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(StatementParser.ExpressionStatement, "ExpressionStatement", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Expression at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static bool WhereExpressionStatement(ParserContext context) {
            return _WhereExpressionStatement(context);
        }
        internal static ParseNode ParseVariableDeclarationOrLabelOrExpressionStatement(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // VariableDeclarationOrLabelOrExpressionStatement -> VariableDeclarationStatement
            if (((StatementParser.varType == context.SymbolId) 
                        && StatementParser.WhereVariableDeclarationOrLabelOrExpressionStatement(context.GetLookAhead(true)))) {
                ParseNode[] children = new ParseNode[1];
                children[0] = StatementParser.ParseVariableDeclarationStatement(context);
                return new ParseNode(StatementParser.VariableDeclarationOrLabelOrExpressionStatement, "VariableDeclarationOrLabelOrExpressionStatement", children, line__, column__, position__);
            }
            // VariableDeclarationOrLabelOrExpressionStatement -> VariableDeclarationStatement
            // VariableDeclarationOrLabelOrExpressionStatement -> ExpressionStatement
            if (((((((((((((((((ExpressionParser.boolType == context.SymbolId) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        && StatementParser.WhereVariableDeclarationOrLabelOrExpressionStatement(context.GetLookAhead(true)))) {
                ParserContext context2__;
                int advanceCount__ = 0;
                System.Exception lastExcept = null;
                context2__ = context.GetLookAhead();
                context2__.EnsureStarted();
                // VariableDeclarationOrLabelOrExpressionStatement -> VariableDeclarationStatement
                try {
                    if (((((((((((((((((ExpressionParser.boolType == context2__.SymbolId) 
                                || (ExpressionParser.charType == context2__.SymbolId)) 
                                || (ExpressionParser.stringType == context2__.SymbolId)) 
                                || (ExpressionParser.floatType == context2__.SymbolId)) 
                                || (ExpressionParser.doubleType == context2__.SymbolId)) 
                                || (ExpressionParser.decimalType == context2__.SymbolId)) 
                                || (ExpressionParser.sbyteType == context2__.SymbolId)) 
                                || (ExpressionParser.byteType == context2__.SymbolId)) 
                                || (ExpressionParser.shortType == context2__.SymbolId)) 
                                || (ExpressionParser.ushortType == context2__.SymbolId)) 
                                || (ExpressionParser.intType == context2__.SymbolId)) 
                                || (ExpressionParser.uintType == context2__.SymbolId)) 
                                || (ExpressionParser.longType == context2__.SymbolId)) 
                                || (ExpressionParser.ulongType == context2__.SymbolId)) 
                                || (ExpressionParser.objectType == context2__.SymbolId)) 
                                && StatementParser.WhereVariableDeclarationOrLabelOrExpressionStatement(context2__.GetLookAhead(true)))) {
                        ParseNode[] children = new ParseNode[1];
                        children[0] = StatementParser.ParseVariableDeclarationStatement(context2__);
                        StatementParser.ParseVariableDeclarationStatement(context);
                        return new ParseNode(StatementParser.VariableDeclarationOrLabelOrExpressionStatement, "VariableDeclarationOrLabelOrExpressionStatement", children, line__, column__, position__);
                    }
                    context.Error("Expecting boolType, charType, stringType, floatType, doubleType, decimalType, sby" +
                            "teType, byteType, shortType, ushortType, intType, uintType, longType, ulongType," +
                            " or objectType");
                }
                catch (SyntaxException ex) {
                    if ((context2__.AdvanceCount > advanceCount__)) {
                        lastExcept = ex;
                        advanceCount__ = context2__.AdvanceCount;
                    }
                }
                finally {

                }
                context2__ = context.GetLookAhead();
                context2__.EnsureStarted();
                // VariableDeclarationOrLabelOrExpressionStatement -> ExpressionStatement
                try {
                    if (((((((((((((((((ExpressionParser.boolType == context2__.SymbolId) 
                                || (ExpressionParser.charType == context2__.SymbolId)) 
                                || (ExpressionParser.stringType == context2__.SymbolId)) 
                                || (ExpressionParser.floatType == context2__.SymbolId)) 
                                || (ExpressionParser.doubleType == context2__.SymbolId)) 
                                || (ExpressionParser.decimalType == context2__.SymbolId)) 
                                || (ExpressionParser.sbyteType == context2__.SymbolId)) 
                                || (ExpressionParser.byteType == context2__.SymbolId)) 
                                || (ExpressionParser.shortType == context2__.SymbolId)) 
                                || (ExpressionParser.ushortType == context2__.SymbolId)) 
                                || (ExpressionParser.intType == context2__.SymbolId)) 
                                || (ExpressionParser.uintType == context2__.SymbolId)) 
                                || (ExpressionParser.longType == context2__.SymbolId)) 
                                || (ExpressionParser.ulongType == context2__.SymbolId)) 
                                || (ExpressionParser.objectType == context2__.SymbolId)) 
                                && StatementParser.WhereVariableDeclarationOrLabelOrExpressionStatement(context2__.GetLookAhead(true)))) {
                        ParseNode[] children = new ParseNode[1];
                        children[0] = StatementParser.ParseExpressionStatement(context2__);
                        StatementParser.ParseExpressionStatement(context);
                        return new ParseNode(StatementParser.VariableDeclarationOrLabelOrExpressionStatement, "VariableDeclarationOrLabelOrExpressionStatement", children, line__, column__, position__);
                    }
                    context.Error("Expecting boolType, charType, stringType, floatType, doubleType, decimalType, sby" +
                            "teType, byteType, shortType, ushortType, intType, uintType, longType, ulongType," +
                            " or objectType");
                }
                catch (SyntaxException ex) {
                    if ((context2__.AdvanceCount > advanceCount__)) {
                        lastExcept = ex;
                        advanceCount__ = context2__.AdvanceCount;
                    }
                }
                finally {

                }
                throw lastExcept;
            }
            // VariableDeclarationOrLabelOrExpressionStatement -> VariableDeclarationStatement
            // VariableDeclarationOrLabelOrExpressionStatement -> ExpressionStatement
            // VariableDeclarationOrLabelOrExpressionStatement -> LabelStatement
            if (((ExpressionParser.identifier2 == context.SymbolId) 
                        && StatementParser.WhereVariableDeclarationOrLabelOrExpressionStatement(context.GetLookAhead(true)))) {
                ParserContext context2__;
                int advanceCount__ = 0;
                System.Exception lastExcept = null;
                context2__ = context.GetLookAhead();
                context2__.EnsureStarted();
                // VariableDeclarationOrLabelOrExpressionStatement -> VariableDeclarationStatement
                try {
                    if (((ExpressionParser.identifier2 == context2__.SymbolId) 
                                && StatementParser.WhereVariableDeclarationOrLabelOrExpressionStatement(context2__.GetLookAhead(true)))) {
                        ParseNode[] children = new ParseNode[1];
                        children[0] = StatementParser.ParseVariableDeclarationStatement(context2__);
                        StatementParser.ParseVariableDeclarationStatement(context);
                        return new ParseNode(StatementParser.VariableDeclarationOrLabelOrExpressionStatement, "VariableDeclarationOrLabelOrExpressionStatement", children, line__, column__, position__);
                    }
                    context.Error("Expecting identifier");
                }
                catch (SyntaxException ex) {
                    if ((context2__.AdvanceCount > advanceCount__)) {
                        lastExcept = ex;
                        advanceCount__ = context2__.AdvanceCount;
                    }
                }
                finally {

                }
                context2__ = context.GetLookAhead();
                context2__.EnsureStarted();
                // VariableDeclarationOrLabelOrExpressionStatement -> ExpressionStatement
                try {
                    if (((ExpressionParser.identifier2 == context2__.SymbolId) 
                                && StatementParser.WhereVariableDeclarationOrLabelOrExpressionStatement(context2__.GetLookAhead(true)))) {
                        ParseNode[] children = new ParseNode[1];
                        children[0] = StatementParser.ParseExpressionStatement(context2__);
                        StatementParser.ParseExpressionStatement(context);
                        return new ParseNode(StatementParser.VariableDeclarationOrLabelOrExpressionStatement, "VariableDeclarationOrLabelOrExpressionStatement", children, line__, column__, position__);
                    }
                    context.Error("Expecting identifier");
                }
                catch (SyntaxException ex) {
                    if ((context2__.AdvanceCount > advanceCount__)) {
                        lastExcept = ex;
                        advanceCount__ = context2__.AdvanceCount;
                    }
                }
                finally {

                }
                context2__ = context.GetLookAhead();
                context2__.EnsureStarted();
                // VariableDeclarationOrLabelOrExpressionStatement -> LabelStatement
                try {
                    if (((ExpressionParser.identifier2 == context2__.SymbolId) 
                                && StatementParser.WhereVariableDeclarationOrLabelOrExpressionStatement(context2__.GetLookAhead(true)))) {
                        ParseNode[] children = new ParseNode[1];
                        children[0] = StatementParser.ParseLabelStatement(context2__);
                        StatementParser.ParseLabelStatement(context);
                        return new ParseNode(StatementParser.VariableDeclarationOrLabelOrExpressionStatement, "VariableDeclarationOrLabelOrExpressionStatement", children, line__, column__, position__);
                    }
                    context.Error("Expecting identifier");
                }
                catch (SyntaxException ex) {
                    if ((context2__.AdvanceCount > advanceCount__)) {
                        lastExcept = ex;
                        advanceCount__ = context2__.AdvanceCount;
                    }
                }
                finally {

                }
                throw lastExcept;
            }
            // VariableDeclarationOrLabelOrExpressionStatement -> ExpressionStatement
            if ((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        && StatementParser.WhereVariableDeclarationOrLabelOrExpressionStatement(context.GetLookAhead(true)))) {
                ParseNode[] children = new ParseNode[1];
                children[0] = StatementParser.ParseExpressionStatement(context);
                return new ParseNode(StatementParser.VariableDeclarationOrLabelOrExpressionStatement, "VariableDeclarationOrLabelOrExpressionStatement", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting VariableDeclarationStatement, ExpressionStatement, or LabelStatement at" +
                        " line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static bool WhereVariableDeclarationOrLabelOrExpressionStatement(ParserContext context) {
            return true;
        }
        internal static ParseNode ParseElsePart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ElsePart -> elseKeyword StatementOrBlock
            if ((StatementParser.elseKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (StatementParser.elseKeyword == context.SymbolId))) {
                    context.Error("Expecting elseKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(StatementParser.elseKeyword, "elseKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[1] = StatementParser.ParseStatementOrBlock(context);
                return new ParseNode(StatementParser.ElsePart, "ElsePart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting elseKeyword at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseIfStatementPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // IfStatementPart -> ifKeyword lparen Expression rparen StatementOrBlock
            if ((StatementParser.ifKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[5];
                if ((false 
                            == (StatementParser.ifKeyword == context.SymbolId))) {
                    context.Error("Expecting ifKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(StatementParser.ifKeyword, "ifKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                if ((false 
                            == (ExpressionParser.lparen == context.SymbolId))) {
                    context.Error("Expecting lparen at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.lparen, "lparen", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[2] = ExpressionParser.ParseExpression(context);
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[3] = new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[4] = StatementParser.ParseStatementOrBlock(context);
                return new ParseNode(StatementParser.IfStatementPart, "IfStatementPart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting ifKeyword at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseGotoStatement(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // GotoStatement -> gotoKeyword identifier semi
            if ((StatementParser.gotoKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[3];
                if ((false 
                            == (StatementParser.gotoKeyword == context.SymbolId))) {
                    context.Error("Expecting gotoKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(StatementParser.gotoKeyword, "gotoKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                if ((false 
                            == (ExpressionParser.identifier2 == context.SymbolId))) {
                    context.Error("Expecting identifier at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.identifier2, "identifier", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                if ((false 
                            == (StatementParser.semi == context.SymbolId))) {
                    context.Error("Expecting semi at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[2] = new ParseNode(StatementParser.semi, "semi", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(StatementParser.GotoStatement, "GotoStatement", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting gotoKeyword at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseLocalAssignStatement(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // LocalAssignStatement -> ExpressionStatement
            if ((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        && StatementParser.WhereLocalAssignStatement(context.GetLookAhead(true)))) {
                ParseNode[] children = new ParseNode[1];
                children[0] = StatementParser.ParseExpressionStatement(context);
                return new ParseNode(StatementParser.LocalAssignStatement, "LocalAssignStatement", children, line__, column__, position__);
            }
            // LocalAssignStatement -> ExpressionStatement
            // LocalAssignStatement -> VariableDeclarationStatement
            if ((((((((((((((((((ExpressionParser.identifier2 == context.SymbolId) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        && StatementParser.WhereLocalAssignStatement(context.GetLookAhead(true)))) {
                ParserContext context2__;
                int advanceCount__ = 0;
                System.Exception lastExcept = null;
                context2__ = context.GetLookAhead();
                context2__.EnsureStarted();
                // LocalAssignStatement -> ExpressionStatement
                try {
                    if ((((((((((((((((((ExpressionParser.identifier2 == context2__.SymbolId) 
                                || (ExpressionParser.boolType == context2__.SymbolId)) 
                                || (ExpressionParser.charType == context2__.SymbolId)) 
                                || (ExpressionParser.stringType == context2__.SymbolId)) 
                                || (ExpressionParser.floatType == context2__.SymbolId)) 
                                || (ExpressionParser.doubleType == context2__.SymbolId)) 
                                || (ExpressionParser.decimalType == context2__.SymbolId)) 
                                || (ExpressionParser.sbyteType == context2__.SymbolId)) 
                                || (ExpressionParser.byteType == context2__.SymbolId)) 
                                || (ExpressionParser.shortType == context2__.SymbolId)) 
                                || (ExpressionParser.ushortType == context2__.SymbolId)) 
                                || (ExpressionParser.intType == context2__.SymbolId)) 
                                || (ExpressionParser.uintType == context2__.SymbolId)) 
                                || (ExpressionParser.longType == context2__.SymbolId)) 
                                || (ExpressionParser.ulongType == context2__.SymbolId)) 
                                || (ExpressionParser.objectType == context2__.SymbolId)) 
                                && StatementParser.WhereLocalAssignStatement(context2__.GetLookAhead(true)))) {
                        ParseNode[] children = new ParseNode[1];
                        children[0] = StatementParser.ParseExpressionStatement(context2__);
                        StatementParser.ParseExpressionStatement(context);
                        return new ParseNode(StatementParser.LocalAssignStatement, "LocalAssignStatement", children, line__, column__, position__);
                    }
                    context.Error("Expecting identifier, boolType, charType, stringType, floatType, doubleType, deci" +
                            "malType, sbyteType, byteType, shortType, ushortType, intType, uintType, longType" +
                            ", ulongType, or objectType");
                }
                catch (SyntaxException ex) {
                    if ((context2__.AdvanceCount > advanceCount__)) {
                        lastExcept = ex;
                        advanceCount__ = context2__.AdvanceCount;
                    }
                }
                finally {

                }
                context2__ = context.GetLookAhead();
                context2__.EnsureStarted();
                // LocalAssignStatement -> VariableDeclarationStatement
                try {
                    if ((((((((((((((((((ExpressionParser.identifier2 == context2__.SymbolId) 
                                || (ExpressionParser.boolType == context2__.SymbolId)) 
                                || (ExpressionParser.charType == context2__.SymbolId)) 
                                || (ExpressionParser.stringType == context2__.SymbolId)) 
                                || (ExpressionParser.floatType == context2__.SymbolId)) 
                                || (ExpressionParser.doubleType == context2__.SymbolId)) 
                                || (ExpressionParser.decimalType == context2__.SymbolId)) 
                                || (ExpressionParser.sbyteType == context2__.SymbolId)) 
                                || (ExpressionParser.byteType == context2__.SymbolId)) 
                                || (ExpressionParser.shortType == context2__.SymbolId)) 
                                || (ExpressionParser.ushortType == context2__.SymbolId)) 
                                || (ExpressionParser.intType == context2__.SymbolId)) 
                                || (ExpressionParser.uintType == context2__.SymbolId)) 
                                || (ExpressionParser.longType == context2__.SymbolId)) 
                                || (ExpressionParser.ulongType == context2__.SymbolId)) 
                                || (ExpressionParser.objectType == context2__.SymbolId)) 
                                && StatementParser.WhereLocalAssignStatement(context2__.GetLookAhead(true)))) {
                        ParseNode[] children = new ParseNode[1];
                        children[0] = StatementParser.ParseVariableDeclarationStatement(context2__);
                        StatementParser.ParseVariableDeclarationStatement(context);
                        return new ParseNode(StatementParser.LocalAssignStatement, "LocalAssignStatement", children, line__, column__, position__);
                    }
                    context.Error("Expecting identifier, boolType, charType, stringType, floatType, doubleType, deci" +
                            "malType, sbyteType, byteType, shortType, ushortType, intType, uintType, longType" +
                            ", ulongType, or objectType");
                }
                catch (SyntaxException ex) {
                    if ((context2__.AdvanceCount > advanceCount__)) {
                        lastExcept = ex;
                        advanceCount__ = context2__.AdvanceCount;
                    }
                }
                finally {

                }
                throw lastExcept;
            }
            // LocalAssignStatement -> VariableDeclarationStatement
            if (((StatementParser.varType == context.SymbolId) 
                        && StatementParser.WhereLocalAssignStatement(context.GetLookAhead(true)))) {
                ParseNode[] children = new ParseNode[1];
                children[0] = StatementParser.ParseVariableDeclarationStatement(context);
                return new ParseNode(StatementParser.LocalAssignStatement, "LocalAssignStatement", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting ExpressionStatement or VariableDeclarationStatement at line {0}, column" +
                        " {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static bool WhereLocalAssignStatement(ParserContext context) {
            return true;
        }
        internal static ParseNode ParseForIncPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ForIncPart -> Expression rparen
            if (((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = ExpressionParser.ParseExpression(context);
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(StatementParser.ForIncPart, "ForIncPart", children, line__, column__, position__);
            }
            // ForIncPart -> rparen
            if ((ExpressionParser.rparen == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(StatementParser.ForIncPart, "ForIncPart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Expression or rparen at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseWhileStatement(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // WhileStatement -> whileKeyword lparen Expression rparen StatementOrBlock
            if ((StatementParser.whileKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[5];
                if ((false 
                            == (StatementParser.whileKeyword == context.SymbolId))) {
                    context.Error("Expecting whileKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(StatementParser.whileKeyword, "whileKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                if ((false 
                            == (ExpressionParser.lparen == context.SymbolId))) {
                    context.Error("Expecting lparen at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.lparen, "lparen", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[2] = ExpressionParser.ParseExpression(context);
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[3] = new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[4] = StatementParser.ParseStatementOrBlock(context);
                return new ParseNode(StatementParser.WhileStatement, "WhileStatement", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting whileKeyword at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseReturnStatement(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ReturnStatement -> returnKeyword Expression semi
            if ((StatementParser.returnKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[3];
                if ((false 
                            == (StatementParser.returnKeyword == context.SymbolId))) {
                    context.Error("Expecting returnKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(StatementParser.returnKeyword, "returnKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[1] = ExpressionParser.ParseExpression(context);
                if ((false 
                            == (StatementParser.semi == context.SymbolId))) {
                    context.Error("Expecting semi at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[2] = new ParseNode(StatementParser.semi, "semi", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(StatementParser.ReturnStatement, "ReturnStatement", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting returnKeyword at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseFinallyPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // FinallyPart -> finallyKeyword StatementBlock
            if ((StatementParser.finallyKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (StatementParser.finallyKeyword == context.SymbolId))) {
                    context.Error("Expecting finallyKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(StatementParser.finallyKeyword, "finallyKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[1] = StatementParser.ParseStatementBlock(context);
                return new ParseNode(StatementParser.FinallyPart, "FinallyPart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting finallyKeyword at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseLabelStatement(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // LabelStatement -> identifier colon
            if (((ExpressionParser.identifier2 == context.SymbolId) 
                        && StatementParser.WhereLabelStatement(context.GetLookAhead(true)))) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.identifier2 == context.SymbolId))) {
                    context.Error("Expecting identifier at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.identifier2, "identifier", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                if ((false 
                            == (StatementParser.colon == context.SymbolId))) {
                    context.Error("Expecting colon at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(StatementParser.colon, "colon", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(StatementParser.LabelStatement, "LabelStatement", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting identifier at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static bool WhereLabelStatement(ParserContext context) {
            context.Advance();
            return (colon == context.SymbolId);
        }
        internal static ParseNode ParseStatementOrBlock(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // StatementOrBlock -> Statement
            if ((((((((((((((((((((((((((((((((((((((((((((((StatementParser.semi == context.SymbolId) 
                        || (StatementParser.varType == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (StatementParser.ifKeyword == context.SymbolId)) 
                        || (StatementParser.gotoKeyword == context.SymbolId)) 
                        || (StatementParser.forKeyword == context.SymbolId)) 
                        || (StatementParser.whileKeyword == context.SymbolId)) 
                        || (StatementParser.returnKeyword == context.SymbolId)) 
                        || (StatementParser.tryKeyword == context.SymbolId)) 
                        || (StatementParser.throwKeyword == context.SymbolId))) {
                ParseNode[] children = new ParseNode[1];
                children[0] = StatementParser.ParseStatement(context);
                return new ParseNode(StatementParser.StatementOrBlock, "StatementOrBlock", children, line__, column__, position__);
            }
            // StatementOrBlock -> StatementBlock
            if ((ExpressionParser.lbrace == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                children[0] = StatementParser.ParseStatementBlock(context);
                return new ParseNode(StatementParser.StatementOrBlock, "StatementOrBlock", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Statement or StatementBlock at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseInnerStatement(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // InnerStatement -> EmptyStatement
            if ((StatementParser.semi == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                children[0] = StatementParser.ParseEmptyStatement(context);
                return new ParseNode(StatementParser.InnerStatement, "InnerStatement", children, line__, column__, position__);
            }
            // InnerStatement -> VariableDeclarationOrLabelOrExpressionStatement
            if ((((((((((((((((((((((((((((((((((((((StatementParser.varType == context.SymbolId) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(StatementParser.ParseVariableDeclarationOrLabelOrExpressionStatement(context).Children);
                return new ParseNode(StatementParser.InnerStatement, "InnerStatement", children.ToArray(), line__, column__, position__);
            }
            // InnerStatement -> IfStatement
            if ((StatementParser.ifKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                children[0] = StatementParser.ParseIfStatement(context);
                return new ParseNode(StatementParser.InnerStatement, "InnerStatement", children, line__, column__, position__);
            }
            // InnerStatement -> GotoStatement
            if ((StatementParser.gotoKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                children[0] = StatementParser.ParseGotoStatement(context);
                return new ParseNode(StatementParser.InnerStatement, "InnerStatement", children, line__, column__, position__);
            }
            // InnerStatement -> ForStatement
            if ((StatementParser.forKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                children[0] = StatementParser.ParseForStatement(context);
                return new ParseNode(StatementParser.InnerStatement, "InnerStatement", children, line__, column__, position__);
            }
            // InnerStatement -> WhileStatement
            if ((StatementParser.whileKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                children[0] = StatementParser.ParseWhileStatement(context);
                return new ParseNode(StatementParser.InnerStatement, "InnerStatement", children, line__, column__, position__);
            }
            // InnerStatement -> ReturnStatement
            if ((StatementParser.returnKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                children[0] = StatementParser.ParseReturnStatement(context);
                return new ParseNode(StatementParser.InnerStatement, "InnerStatement", children, line__, column__, position__);
            }
            // InnerStatement -> TryStatement
            if ((StatementParser.tryKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                children[0] = StatementParser.ParseTryStatement(context);
                return new ParseNode(StatementParser.InnerStatement, "InnerStatement", children, line__, column__, position__);
            }
            // InnerStatement -> ThrowStatement
            if ((StatementParser.throwKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                children[0] = StatementParser.ParseThrowStatement(context);
                return new ParseNode(StatementParser.InnerStatement, "InnerStatement", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting EmptyStatement, VariableDeclarationOrLabelOrExpressionStatement, IfStat" +
                        "ement, GotoStatement, ForStatement, WhileStatement, ReturnStatement, TryStatemen" +
                        "t, or ThrowStatement at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseStatements(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // Statements -> StatementList
            if ((((((((((((((((((((((((((((((((((((((((((((((StatementParser.semi == context.SymbolId) 
                        || (StatementParser.varType == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (StatementParser.ifKeyword == context.SymbolId)) 
                        || (StatementParser.gotoKeyword == context.SymbolId)) 
                        || (StatementParser.forKeyword == context.SymbolId)) 
                        || (StatementParser.whileKeyword == context.SymbolId)) 
                        || (StatementParser.returnKeyword == context.SymbolId)) 
                        || (StatementParser.tryKeyword == context.SymbolId)) 
                        || (StatementParser.throwKeyword == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(StatementParser.ParseStatementList(context).Children);
                return new ParseNode(StatementParser.Statements, "Statements", children.ToArray(), line__, column__, position__);
            }
            // Statements ->
            if ((StatementParser.EosSymbol == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(StatementParser.Statements, "Statements", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting StatementList at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        /// <summary>
        /// Parses a production of the form:
        /// Statements= { Statement }
        /// </summary>
        /// <remarks>
        /// The production rules are:
        /// Statements -> StatementList
        /// Statements ->
        /// </remarks>
        /// <param name="tokenizer">The tokenizer to parse with</param><returns>A <see cref="ParseNode" /> representing the parsed tokens</returns>
        public static ParseNode ParseStatements(System.Collections.Generic.IEnumerable<Token> tokenizer) {
            ParserContext context = new ParserContext(tokenizer);
            context.EnsureStarted();
            ParseNode result = StatementParser.ParseStatements(context);
            if ((false == context.IsEnded)) {
                context.Error("Unexpected remainder in input.");
            }
            return result;
        }
        internal static ParseNode ParseNamespaceNameList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // NamespaceNameList -> dot Identifier NamespaceNameListRightAssoc
            if ((ExpressionParser.dot == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.dot == context.SymbolId))) {
                    context.Error("Expecting dot at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.dot, "dot", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                children.AddRange(StatementParser.ParseNamespaceNameListRightAssoc(context).Children);
                return new ParseNode(StatementParser.NamespaceNameList, "NamespaceNameList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting dot at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseRelationalExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // RelationalExpressionList -> lt TermExpression RelationalExpressionListRightAssoc RelationalExpressionListRightAssoc2 RelationalExpressionListRightAssoc3
            if ((ExpressionParser.lt == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.lt == context.SymbolId))) {
                    context.Error("Expecting lt at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.lt, "lt", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.TermExpression == context.SymbolId))) {
                    context.Error("Expecting TermExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.TermExpression, "TermExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc3(context).Children);
                return new ParseNode(ExpressionParser.RelationalExpressionList, "RelationalExpressionList", children.ToArray(), line__, column__, position__);
            }
            // RelationalExpressionList -> lte TermExpression RelationalExpressionListRightAssoc RelationalExpressionListRightAssoc2 RelationalExpressionListRightAssoc3
            if ((ExpressionParser.lte == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.lte == context.SymbolId))) {
                    context.Error("Expecting lte at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.lte, "lte", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.TermExpression == context.SymbolId))) {
                    context.Error("Expecting TermExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.TermExpression, "TermExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc3(context).Children);
                return new ParseNode(ExpressionParser.RelationalExpressionList, "RelationalExpressionList", children.ToArray(), line__, column__, position__);
            }
            // RelationalExpressionList -> gt TermExpression RelationalExpressionListRightAssoc RelationalExpressionListRightAssoc2 RelationalExpressionListRightAssoc3
            if ((ExpressionParser.gt == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.gt == context.SymbolId))) {
                    context.Error("Expecting gt at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.gt, "gt", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.TermExpression == context.SymbolId))) {
                    context.Error("Expecting TermExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.TermExpression, "TermExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc3(context).Children);
                return new ParseNode(ExpressionParser.RelationalExpressionList, "RelationalExpressionList", children.ToArray(), line__, column__, position__);
            }
            // RelationalExpressionList -> gte TermExpression RelationalExpressionListRightAssoc RelationalExpressionListRightAssoc2 RelationalExpressionListRightAssoc3
            if ((ExpressionParser.gte == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.gte == context.SymbolId))) {
                    context.Error("Expecting gte at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.gte, "gte", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.TermExpression == context.SymbolId))) {
                    context.Error("Expecting TermExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.TermExpression, "TermExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc3(context).Children);
                return new ParseNode(ExpressionParser.RelationalExpressionList, "RelationalExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting lt, lte, gt, or gte at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseEqualityExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // EqualityExpressionList -> eqEq RelationalExpression EqualityExpressionListRightAssoc EqualityExpressionListRightAssoc2
            if ((ExpressionParser.eqEq == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.eqEq == context.SymbolId))) {
                    context.Error("Expecting eqEq at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.eqEq, "eqEq", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.RelationalExpression == context.SymbolId))) {
                    context.Error("Expecting RelationalExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.RelationalExpression, "RelationalExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseEqualityExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseEqualityExpressionListRightAssoc2(context).Children);
                return new ParseNode(ExpressionParser.EqualityExpressionList, "EqualityExpressionList", children.ToArray(), line__, column__, position__);
            }
            // EqualityExpressionList -> notEq RelationalExpression EqualityExpressionListRightAssoc EqualityExpressionListRightAssoc2
            if ((ExpressionParser.notEq == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.notEq == context.SymbolId))) {
                    context.Error("Expecting notEq at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.notEq, "notEq", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.RelationalExpression == context.SymbolId))) {
                    context.Error("Expecting RelationalExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.RelationalExpression, "RelationalExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseEqualityExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseEqualityExpressionListRightAssoc2(context).Children);
                return new ParseNode(ExpressionParser.EqualityExpressionList, "EqualityExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting eqEq or notEq at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseBitwiseAndExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // BitwiseAndExpressionList -> bitwiseAnd EqualityExpression BitwiseAndExpressionListRightAssoc
            if ((ExpressionParser.bitwiseAnd == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.bitwiseAnd == context.SymbolId))) {
                    context.Error("Expecting bitwiseAnd at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.bitwiseAnd, "bitwiseAnd", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.EqualityExpression == context.SymbolId))) {
                    context.Error("Expecting EqualityExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.EqualityExpression, "EqualityExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseBitwiseAndExpressionListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.BitwiseAndExpressionList, "BitwiseAndExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting bitwiseAnd at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseBitwiseOrExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // BitwiseOrExpressionList -> bitwiseOr BitwiseAndExpression BitwiseOrExpressionListRightAssoc
            if ((ExpressionParser.bitwiseOr == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.bitwiseOr == context.SymbolId))) {
                    context.Error("Expecting bitwiseOr at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.bitwiseOr, "bitwiseOr", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.BitwiseAndExpression == context.SymbolId))) {
                    context.Error("Expecting BitwiseAndExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.BitwiseAndExpression, "BitwiseAndExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseBitwiseOrExpressionListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.BitwiseOrExpressionList, "BitwiseOrExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting bitwiseOr at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseAndExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AndExpressionList -> and BitwiseOrExpression AndExpressionListRightAssoc
            if ((ExpressionParser.and == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.and == context.SymbolId))) {
                    context.Error("Expecting and at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.and, "and", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.BitwiseOrExpression == context.SymbolId))) {
                    context.Error("Expecting BitwiseOrExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.BitwiseOrExpression, "BitwiseOrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAndExpressionListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.AndExpressionList, "AndExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting and at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseOrExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // OrExpressionList -> or AndExpression OrExpressionListRightAssoc
            if ((ExpressionParser.or == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.or == context.SymbolId))) {
                    context.Error("Expecting or at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.or, "or", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.AndExpression == context.SymbolId))) {
                    context.Error("Expecting AndExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.AndExpression, "AndExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseOrExpressionListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.OrExpressionList, "OrExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting or at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseAssignExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AssignExpressionList -> eq OrExpression AssignExpressionListRightAssoc AssignExpressionListRightAssoc2 AssignExpressionListRightAssoc3 AssignExpressionListRightAssoc4 AssignExpressionListRightAssoc5
            if ((ExpressionParser.eq == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.eq == context.SymbolId))) {
                    context.Error("Expecting eq at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.eq, "eq", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(ExpressionParser.AssignExpressionList, "AssignExpressionList", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionList -> addAssign OrExpression AssignExpressionListRightAssoc AssignExpressionListRightAssoc2 AssignExpressionListRightAssoc3 AssignExpressionListRightAssoc4 AssignExpressionListRightAssoc5
            if ((ExpressionParser.addAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.addAssign == context.SymbolId))) {
                    context.Error("Expecting addAssign at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.addAssign, "addAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(ExpressionParser.AssignExpressionList, "AssignExpressionList", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionList -> subAssign OrExpression AssignExpressionListRightAssoc AssignExpressionListRightAssoc2 AssignExpressionListRightAssoc3 AssignExpressionListRightAssoc4 AssignExpressionListRightAssoc5
            if ((ExpressionParser.subAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.subAssign == context.SymbolId))) {
                    context.Error("Expecting subAssign at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.subAssign, "subAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(ExpressionParser.AssignExpressionList, "AssignExpressionList", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionList -> mulAssign OrExpression AssignExpressionListRightAssoc AssignExpressionListRightAssoc2 AssignExpressionListRightAssoc3 AssignExpressionListRightAssoc4 AssignExpressionListRightAssoc5
            if ((ExpressionParser.mulAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.mulAssign == context.SymbolId))) {
                    context.Error("Expecting mulAssign at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.mulAssign, "mulAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(ExpressionParser.AssignExpressionList, "AssignExpressionList", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionList -> divAssign OrExpression AssignExpressionListRightAssoc AssignExpressionListRightAssoc2 AssignExpressionListRightAssoc3 AssignExpressionListRightAssoc4 AssignExpressionListRightAssoc5
            if ((ExpressionParser.divAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.divAssign == context.SymbolId))) {
                    context.Error("Expecting divAssign at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.divAssign, "divAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(ExpressionParser.AssignExpressionList, "AssignExpressionList", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionList -> modAssign OrExpression AssignExpressionListRightAssoc AssignExpressionListRightAssoc2 AssignExpressionListRightAssoc3 AssignExpressionListRightAssoc4 AssignExpressionListRightAssoc5
            if ((ExpressionParser.modAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.modAssign == context.SymbolId))) {
                    context.Error("Expecting modAssign at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.modAssign, "modAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(ExpressionParser.AssignExpressionList, "AssignExpressionList", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionList -> bitwiseAndAssign OrExpression AssignExpressionListRightAssoc AssignExpressionListRightAssoc2 AssignExpressionListRightAssoc3 AssignExpressionListRightAssoc4 AssignExpressionListRightAssoc5
            if ((ExpressionParser.bitwiseAndAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.bitwiseAndAssign == context.SymbolId))) {
                    context.Error("Expecting bitwiseAndAssign at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.bitwiseAndAssign, "bitwiseAndAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(ExpressionParser.AssignExpressionList, "AssignExpressionList", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionList -> bitwiseOrAssign OrExpression AssignExpressionListRightAssoc AssignExpressionListRightAssoc2 AssignExpressionListRightAssoc3 AssignExpressionListRightAssoc4 AssignExpressionListRightAssoc5
            if ((ExpressionParser.bitwiseOrAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.bitwiseOrAssign == context.SymbolId))) {
                    context.Error("Expecting bitwiseOrAssign at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.bitwiseOrAssign, "bitwiseOrAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(ExpressionParser.AssignExpressionList, "AssignExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting eq, addAssign, subAssign, mulAssign, divAssign, modAssign, bitwiseAndAs" +
                        "sign, or bitwiseOrAssign at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTermExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TermExpressionList -> add FactorExpression TermExpressionListRightAssoc TermExpressionListRightAssoc2
            if ((ExpressionParser.add == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.add == context.SymbolId))) {
                    context.Error("Expecting add at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.add, "add", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.FactorExpression == context.SymbolId))) {
                    context.Error("Expecting FactorExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.FactorExpression, "FactorExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseTermExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseTermExpressionListRightAssoc2(context).Children);
                return new ParseNode(ExpressionParser.TermExpressionList, "TermExpressionList", children.ToArray(), line__, column__, position__);
            }
            // TermExpressionList -> sub FactorExpression TermExpressionListRightAssoc TermExpressionListRightAssoc2
            if ((ExpressionParser.sub == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.sub == context.SymbolId))) {
                    context.Error("Expecting sub at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.sub, "sub", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.FactorExpression == context.SymbolId))) {
                    context.Error("Expecting FactorExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.FactorExpression, "FactorExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseTermExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseTermExpressionListRightAssoc2(context).Children);
                return new ParseNode(ExpressionParser.TermExpressionList, "TermExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting add or sub at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseFactorExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // FactorExpressionList -> mul UnaryExpression FactorExpressionListRightAssoc FactorExpressionListRightAssoc2 FactorExpressionListRightAssoc3
            if ((ExpressionParser.mul == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.mul == context.SymbolId))) {
                    context.Error("Expecting mul at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.mul, "mul", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.UnaryExpression == context.SymbolId))) {
                    context.Error("Expecting UnaryExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.UnaryExpression, "UnaryExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc3(context).Children);
                return new ParseNode(ExpressionParser.FactorExpressionList, "FactorExpressionList", children.ToArray(), line__, column__, position__);
            }
            // FactorExpressionList -> div UnaryExpression FactorExpressionListRightAssoc FactorExpressionListRightAssoc2 FactorExpressionListRightAssoc3
            if ((ExpressionParser.div == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.div == context.SymbolId))) {
                    context.Error("Expecting div at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.div, "div", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.UnaryExpression == context.SymbolId))) {
                    context.Error("Expecting UnaryExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.UnaryExpression, "UnaryExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc3(context).Children);
                return new ParseNode(ExpressionParser.FactorExpressionList, "FactorExpressionList", children.ToArray(), line__, column__, position__);
            }
            // FactorExpressionList -> mod UnaryExpression FactorExpressionListRightAssoc FactorExpressionListRightAssoc2 FactorExpressionListRightAssoc3
            if ((ExpressionParser.mod == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.mod == context.SymbolId))) {
                    context.Error("Expecting mod at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.mod, "mod", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.UnaryExpression == context.SymbolId))) {
                    context.Error("Expecting UnaryExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.UnaryExpression, "UnaryExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc3(context).Children);
                return new ParseNode(ExpressionParser.FactorExpressionList, "FactorExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting mul, div, or mod at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberInvokeRefList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberInvokeRefList -> comma MethodArg MemberInvokeRefListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.MethodArg == context.SymbolId))) {
                    context.Error("Expecting MethodArg at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.MethodArg, "MethodArg", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberInvokeRefListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberInvokeRefList, "MemberInvokeRefList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberIndexerRefList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberIndexerRefList -> comma Expression MemberIndexerRefListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseExpression(context));
                children.AddRange(ExpressionParser.ParseMemberIndexerRefListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberIndexerRefList, "MemberIndexerRefList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeBaseList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeBaseList -> dot identifier TypeBaseListRightAssoc
            if ((ExpressionParser.dot == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.dot == context.SymbolId))) {
                    context.Error("Expecting dot at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.dot, "dot", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.identifier2 == context.SymbolId))) {
                    context.Error("Expecting identifier at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.identifier2, "identifier", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseTypeBaseListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.TypeBaseList, "TypeBaseList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting dot at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeArraySpecList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeArraySpecList -> TypeArraySpec TypeArraySpecListRightAssoc
            if ((ExpressionParser.TypeArraySpec == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.TypeArraySpec == context.SymbolId))) {
                    context.Error("Expecting TypeArraySpec at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.TypeArraySpec, "TypeArraySpec", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseTypeArraySpecListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.TypeArraySpecList, "TypeArraySpecList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting TypeArraySpec at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeGenericPartList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeGenericPartList -> comma Type TypeGenericPartListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseType(context));
                children.AddRange(ExpressionParser.ParseTypeGenericPartListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.TypeGenericPartList, "TypeGenericPartList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeArraySpecRankList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeArraySpecRankList -> TypeArraySpecRank TypeArraySpecRankListRightAssoc
            if ((ExpressionParser.TypeArraySpecRank == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.TypeArraySpecRank == context.SymbolId))) {
                    context.Error("Expecting TypeArraySpecRank at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.TypeArraySpecRank, "TypeArraySpecRank", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseTypeArraySpecRankListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.TypeArraySpecRankList, "TypeArraySpecRankList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting TypeArraySpecRank at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseNewObjectPartList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // NewObjectPartList -> comma Expression NewObjectPartListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseExpression(context));
                children.AddRange(ExpressionParser.ParseNewObjectPartListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.NewObjectPartList, "NewObjectPartList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseArraySpecExpressionListList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ArraySpecExpressionListList -> comma Expression ArraySpecExpressionListListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseExpression(context));
                children.AddRange(ExpressionParser.ParseArraySpecExpressionListListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.ArraySpecExpressionListList, "ArraySpecExpressionListList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseArrayInitializerList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ArrayInitializerList -> comma Expression ArrayInitializerListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseExpression(context));
                children.AddRange(ExpressionParser.ParseArrayInitializerListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.ArrayInitializerList, "ArrayInitializerList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList -> MemberAnyRef MemberAnyRefListRightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList, "MemberAnyRefList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList2 -> MemberAnyRef MemberAnyRefList2RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList2RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList2, "MemberAnyRefList2", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList3(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList3 -> MemberAnyRef MemberAnyRefList3RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList3RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList3, "MemberAnyRefList3", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList4(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList4 -> MemberAnyRef MemberAnyRefList4RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList4RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList4, "MemberAnyRefList4", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList5(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList5 -> MemberAnyRef MemberAnyRefList5RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList5RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList5, "MemberAnyRefList5", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList6(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList6 -> MemberAnyRef MemberAnyRefList6RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList6RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList6, "MemberAnyRefList6", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList7(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList7 -> MemberAnyRef MemberAnyRefList7RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList7RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList7, "MemberAnyRefList7", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList8(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList8 -> MemberAnyRef MemberAnyRefList8RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList8RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList8, "MemberAnyRefList8", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList9(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList9 -> MemberAnyRef MemberAnyRefList9RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList9RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList9, "MemberAnyRefList9", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList10(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList10 -> MemberAnyRef MemberAnyRefList10RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList10RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList10, "MemberAnyRefList10", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList11(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList11 -> MemberAnyRef MemberAnyRefList11RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList11RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList11, "MemberAnyRefList11", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList12(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList12 -> MemberAnyRef MemberAnyRefList12RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList12RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList12, "MemberAnyRefList12", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList13(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList13 -> MemberAnyRef MemberAnyRefList13RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList13RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList13, "MemberAnyRefList13", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList14(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList14 -> MemberAnyRef MemberAnyRefList14RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList14RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList14, "MemberAnyRefList14", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCatchClauseList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CatchClauseList -> CatchClause CatchClauseListRightAssoc
            if ((StatementParser.catchKeyword == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(StatementParser.ParseCatchClause(context));
                children.AddRange(StatementParser.ParseCatchClauseListRightAssoc(context).Children);
                return new ParseNode(StatementParser.CatchClauseList, "CatchClauseList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CatchClause at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseStatementList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // StatementList -> Statement StatementListRightAssoc
            if ((((((((((((((((((((((((((((((((((((((((((((((StatementParser.semi == context.SymbolId) 
                        || (StatementParser.varType == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (StatementParser.ifKeyword == context.SymbolId)) 
                        || (StatementParser.gotoKeyword == context.SymbolId)) 
                        || (StatementParser.forKeyword == context.SymbolId)) 
                        || (StatementParser.whileKeyword == context.SymbolId)) 
                        || (StatementParser.returnKeyword == context.SymbolId)) 
                        || (StatementParser.tryKeyword == context.SymbolId)) 
                        || (StatementParser.throwKeyword == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(StatementParser.ParseStatement(context));
                children.AddRange(StatementParser.ParseStatementListRightAssoc(context).Children);
                return new ParseNode(StatementParser.StatementList, "StatementList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Statement at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseStatementList2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // StatementList2 -> Statement StatementList2RightAssoc
            if ((((((((((((((((((((((((((((((((((((((((((((((StatementParser.semi == context.SymbolId) 
                        || (StatementParser.varType == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (StatementParser.ifKeyword == context.SymbolId)) 
                        || (StatementParser.gotoKeyword == context.SymbolId)) 
                        || (StatementParser.forKeyword == context.SymbolId)) 
                        || (StatementParser.whileKeyword == context.SymbolId)) 
                        || (StatementParser.returnKeyword == context.SymbolId)) 
                        || (StatementParser.tryKeyword == context.SymbolId)) 
                        || (StatementParser.throwKeyword == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(StatementParser.ParseStatement(context));
                children.AddRange(StatementParser.ParseStatementList2RightAssoc(context).Children);
                return new ParseNode(StatementParser.StatementList2, "StatementList2", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Statement at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseIfStatement(ParserContext context) {
            // IfStatement
            return _ParseIfStatement(context);
        }
        internal static ParseNode ParseForStatement(ParserContext context) {
            // ForStatement
            return _ParseForStatement(context);
        }
        internal static bool WhereForStatement(ParserContext context) {
            return true;
        }
        internal static ParseNode ParseStatement(ParserContext context) {
            // Statement
            return _ParseStatement(context);
        }
        internal static bool WhereStatement(ParserContext context) {
            return true;
        }
        /// <summary>
        /// Parses a production of the form:
        /// Statement
        /// </summary>
        /// <remarks>
        /// The production rules are:
        /// Statement -> semi
        /// Statement -> varType
        /// Statement -> Type
        /// Statement -> Expression
        /// Statement -> identifier
        /// Statement -> IfStatement
        /// Statement -> gotoKeyword
        /// Statement -> ForStatement
        /// Statement -> whileKeyword
        /// Statement -> returnKeyword
        /// Statement -> tryKeyword
        /// Statement -> throwKeyword
        /// </remarks>
        /// <param name="tokenizer">The tokenizer to parse with</param><returns>A <see cref="ParseNode" /> representing the parsed tokens</returns>
        public static ParseNode Parse(System.Collections.Generic.IEnumerable<Token> tokenizer) {
            ParserContext context = new ParserContext(tokenizer);
            context.EnsureStarted();
            ParseNode result = StatementParser.ParseStatement(context);
            if ((false == context.IsEnded)) {
                context.Error("Unexpected remainder in input.");
            }
            return result;
        }
        internal static ParseNode ParseExpressionFollows(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ExpressionFollows -> Expression semi
            if (((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = ExpressionParser.ParseExpression(context);
                if ((false 
                            == (StatementParser.semi == context.SymbolId))) {
                    context.Error("Expecting semi at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(StatementParser.semi, "semi", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.ExpressionFollows, "ExpressionFollows", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Expression at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseExpressionFollows2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ExpressionFollows2 -> Expression rparen
            if (((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = ExpressionParser.ParseExpression(context);
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.ExpressionFollows2, "ExpressionFollows2", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Expression at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseExpressionFollows3(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ExpressionFollows3 -> Expression rbracket
            if (((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = ExpressionParser.ParseExpression(context);
                if ((false 
                            == (ExpressionParser.rbracket == context.SymbolId))) {
                    context.Error("Expecting rbracket at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.rbracket, "rbracket", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.ExpressionFollows3, "ExpressionFollows3", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Expression at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseExpressionFollows4(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ExpressionFollows4 -> Expression comma
            if (((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = ExpressionParser.ParseExpression(context);
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.ExpressionFollows4, "ExpressionFollows4", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Expression at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeFollows(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeFollows -> Type Identifier
            if (((((((((((((((((ExpressionParser.boolType == context.SymbolId) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseType(context));
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                return new ParseNode(ExpressionParser.TypeFollows, "TypeFollows", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Type at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeFollows2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeFollows2 -> Type lbrace
            if (((((((((((((((((ExpressionParser.boolType == context.SymbolId) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = ExpressionParser.ParseType(context);
                if ((false 
                            == (ExpressionParser.lbrace == context.SymbolId))) {
                    context.Error("Expecting lbrace at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.lbrace, "lbrace", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.TypeFollows2, "TypeFollows2", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Type at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeFollows3(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeFollows3 -> Type rbracket
            if (((((((((((((((((ExpressionParser.boolType == context.SymbolId) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = ExpressionParser.ParseType(context);
                if ((false 
                            == (ExpressionParser.rbracket == context.SymbolId))) {
                    context.Error("Expecting rbracket at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.rbracket, "rbracket", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.TypeFollows3, "TypeFollows3", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Type at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeFollows4(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeFollows4 -> Type #EOS
            if (((((((((((((((((ExpressionParser.boolType == context.SymbolId) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = ExpressionParser.ParseType(context);
                if ((false 
                            == (StatementParser.EosSymbol == context.SymbolId))) {
                    context.Error("Expecting #EOS at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(StatementParser.EosSymbol, "#EOS", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.TypeFollows4, "TypeFollows4", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Type at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseStatementFollows(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // StatementFollows -> Statement semi
            if ((((((((((((((((((((((((((((((((((((((((((((((StatementParser.semi == context.SymbolId) 
                        || (StatementParser.varType == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (StatementParser.ifKeyword == context.SymbolId)) 
                        || (StatementParser.gotoKeyword == context.SymbolId)) 
                        || (StatementParser.forKeyword == context.SymbolId)) 
                        || (StatementParser.whileKeyword == context.SymbolId)) 
                        || (StatementParser.returnKeyword == context.SymbolId)) 
                        || (StatementParser.tryKeyword == context.SymbolId)) 
                        || (StatementParser.throwKeyword == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = StatementParser.ParseStatement(context);
                if ((false 
                            == (StatementParser.semi == context.SymbolId))) {
                    context.Error("Expecting semi at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(StatementParser.semi, "semi", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(StatementParser.StatementFollows, "StatementFollows", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Statement at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseStatementFollows2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // StatementFollows2 -> Statement varType
            if ((((((((((((((((((((((((((((((((((((((((((((((StatementParser.semi == context.SymbolId) 
                        || (StatementParser.varType == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (StatementParser.ifKeyword == context.SymbolId)) 
                        || (StatementParser.gotoKeyword == context.SymbolId)) 
                        || (StatementParser.forKeyword == context.SymbolId)) 
                        || (StatementParser.whileKeyword == context.SymbolId)) 
                        || (StatementParser.returnKeyword == context.SymbolId)) 
                        || (StatementParser.tryKeyword == context.SymbolId)) 
                        || (StatementParser.throwKeyword == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = StatementParser.ParseStatement(context);
                if ((false 
                            == (StatementParser.varType == context.SymbolId))) {
                    context.Error("Expecting varType at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(StatementParser.varType, "varType", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(StatementParser.StatementFollows2, "StatementFollows2", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Statement at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseStatementFollows3(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // StatementFollows3 -> Statement ifKeyword
            if ((((((((((((((((((((((((((((((((((((((((((((((StatementParser.semi == context.SymbolId) 
                        || (StatementParser.varType == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (StatementParser.ifKeyword == context.SymbolId)) 
                        || (StatementParser.gotoKeyword == context.SymbolId)) 
                        || (StatementParser.forKeyword == context.SymbolId)) 
                        || (StatementParser.whileKeyword == context.SymbolId)) 
                        || (StatementParser.returnKeyword == context.SymbolId)) 
                        || (StatementParser.tryKeyword == context.SymbolId)) 
                        || (StatementParser.throwKeyword == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = StatementParser.ParseStatement(context);
                if ((false 
                            == (StatementParser.ifKeyword == context.SymbolId))) {
                    context.Error("Expecting ifKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(StatementParser.ifKeyword, "ifKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(StatementParser.StatementFollows3, "StatementFollows3", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Statement at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseStatementFollows4(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // StatementFollows4 -> Statement gotoKeyword
            if ((((((((((((((((((((((((((((((((((((((((((((((StatementParser.semi == context.SymbolId) 
                        || (StatementParser.varType == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (StatementParser.ifKeyword == context.SymbolId)) 
                        || (StatementParser.gotoKeyword == context.SymbolId)) 
                        || (StatementParser.forKeyword == context.SymbolId)) 
                        || (StatementParser.whileKeyword == context.SymbolId)) 
                        || (StatementParser.returnKeyword == context.SymbolId)) 
                        || (StatementParser.tryKeyword == context.SymbolId)) 
                        || (StatementParser.throwKeyword == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = StatementParser.ParseStatement(context);
                if ((false 
                            == (StatementParser.gotoKeyword == context.SymbolId))) {
                    context.Error("Expecting gotoKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(StatementParser.gotoKeyword, "gotoKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(StatementParser.StatementFollows4, "StatementFollows4", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Statement at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseStatementFollows5(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // StatementFollows5 -> Statement forKeyword
            if ((((((((((((((((((((((((((((((((((((((((((((((StatementParser.semi == context.SymbolId) 
                        || (StatementParser.varType == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (StatementParser.ifKeyword == context.SymbolId)) 
                        || (StatementParser.gotoKeyword == context.SymbolId)) 
                        || (StatementParser.forKeyword == context.SymbolId)) 
                        || (StatementParser.whileKeyword == context.SymbolId)) 
                        || (StatementParser.returnKeyword == context.SymbolId)) 
                        || (StatementParser.tryKeyword == context.SymbolId)) 
                        || (StatementParser.throwKeyword == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = StatementParser.ParseStatement(context);
                if ((false 
                            == (StatementParser.forKeyword == context.SymbolId))) {
                    context.Error("Expecting forKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(StatementParser.forKeyword, "forKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(StatementParser.StatementFollows5, "StatementFollows5", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Statement at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseStatementFollows6(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // StatementFollows6 -> Statement whileKeyword
            if ((((((((((((((((((((((((((((((((((((((((((((((StatementParser.semi == context.SymbolId) 
                        || (StatementParser.varType == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (StatementParser.ifKeyword == context.SymbolId)) 
                        || (StatementParser.gotoKeyword == context.SymbolId)) 
                        || (StatementParser.forKeyword == context.SymbolId)) 
                        || (StatementParser.whileKeyword == context.SymbolId)) 
                        || (StatementParser.returnKeyword == context.SymbolId)) 
                        || (StatementParser.tryKeyword == context.SymbolId)) 
                        || (StatementParser.throwKeyword == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = StatementParser.ParseStatement(context);
                if ((false 
                            == (StatementParser.whileKeyword == context.SymbolId))) {
                    context.Error("Expecting whileKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(StatementParser.whileKeyword, "whileKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(StatementParser.StatementFollows6, "StatementFollows6", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Statement at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseStatementFollows7(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // StatementFollows7 -> Statement returnKeyword
            if ((((((((((((((((((((((((((((((((((((((((((((((StatementParser.semi == context.SymbolId) 
                        || (StatementParser.varType == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (StatementParser.ifKeyword == context.SymbolId)) 
                        || (StatementParser.gotoKeyword == context.SymbolId)) 
                        || (StatementParser.forKeyword == context.SymbolId)) 
                        || (StatementParser.whileKeyword == context.SymbolId)) 
                        || (StatementParser.returnKeyword == context.SymbolId)) 
                        || (StatementParser.tryKeyword == context.SymbolId)) 
                        || (StatementParser.throwKeyword == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = StatementParser.ParseStatement(context);
                if ((false 
                            == (StatementParser.returnKeyword == context.SymbolId))) {
                    context.Error("Expecting returnKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(StatementParser.returnKeyword, "returnKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(StatementParser.StatementFollows7, "StatementFollows7", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Statement at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseStatementFollows8(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // StatementFollows8 -> Statement tryKeyword
            if ((((((((((((((((((((((((((((((((((((((((((((((StatementParser.semi == context.SymbolId) 
                        || (StatementParser.varType == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (StatementParser.ifKeyword == context.SymbolId)) 
                        || (StatementParser.gotoKeyword == context.SymbolId)) 
                        || (StatementParser.forKeyword == context.SymbolId)) 
                        || (StatementParser.whileKeyword == context.SymbolId)) 
                        || (StatementParser.returnKeyword == context.SymbolId)) 
                        || (StatementParser.tryKeyword == context.SymbolId)) 
                        || (StatementParser.throwKeyword == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = StatementParser.ParseStatement(context);
                if ((false 
                            == (StatementParser.tryKeyword == context.SymbolId))) {
                    context.Error("Expecting tryKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(StatementParser.tryKeyword, "tryKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(StatementParser.StatementFollows8, "StatementFollows8", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Statement at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseStatementFollows9(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // StatementFollows9 -> Statement throwKeyword
            if ((((((((((((((((((((((((((((((((((((((((((((((StatementParser.semi == context.SymbolId) 
                        || (StatementParser.varType == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (StatementParser.ifKeyword == context.SymbolId)) 
                        || (StatementParser.gotoKeyword == context.SymbolId)) 
                        || (StatementParser.forKeyword == context.SymbolId)) 
                        || (StatementParser.whileKeyword == context.SymbolId)) 
                        || (StatementParser.returnKeyword == context.SymbolId)) 
                        || (StatementParser.tryKeyword == context.SymbolId)) 
                        || (StatementParser.throwKeyword == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = StatementParser.ParseStatement(context);
                if ((false 
                            == (StatementParser.throwKeyword == context.SymbolId))) {
                    context.Error("Expecting throwKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(StatementParser.throwKeyword, "throwKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(StatementParser.StatementFollows9, "StatementFollows9", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Statement at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseStatementFollows10(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // StatementFollows10 -> Statement Expression
            if ((((((((((((((((((((((((((((((((((((((((((((((StatementParser.semi == context.SymbolId) 
                        || (StatementParser.varType == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (StatementParser.ifKeyword == context.SymbolId)) 
                        || (StatementParser.gotoKeyword == context.SymbolId)) 
                        || (StatementParser.forKeyword == context.SymbolId)) 
                        || (StatementParser.whileKeyword == context.SymbolId)) 
                        || (StatementParser.returnKeyword == context.SymbolId)) 
                        || (StatementParser.tryKeyword == context.SymbolId)) 
                        || (StatementParser.throwKeyword == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = StatementParser.ParseStatement(context);
                children[1] = ExpressionParser.ParseExpression(context);
                return new ParseNode(StatementParser.StatementFollows10, "StatementFollows10", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Statement at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseStatementFollows11(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // StatementFollows11 -> Statement identifier
            if ((((((((((((((((((((((((((((((((((((((((((((((StatementParser.semi == context.SymbolId) 
                        || (StatementParser.varType == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (StatementParser.ifKeyword == context.SymbolId)) 
                        || (StatementParser.gotoKeyword == context.SymbolId)) 
                        || (StatementParser.forKeyword == context.SymbolId)) 
                        || (StatementParser.whileKeyword == context.SymbolId)) 
                        || (StatementParser.returnKeyword == context.SymbolId)) 
                        || (StatementParser.tryKeyword == context.SymbolId)) 
                        || (StatementParser.throwKeyword == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = StatementParser.ParseStatement(context);
                if ((false 
                            == (ExpressionParser.identifier2 == context.SymbolId))) {
                    context.Error("Expecting identifier at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.identifier2, "identifier", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(StatementParser.StatementFollows11, "StatementFollows11", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Statement at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseStatementFollows12(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // StatementFollows12 -> Statement Type
            if ((((((((((((((((((((((((((((((((((((((((((((((StatementParser.semi == context.SymbolId) 
                        || (StatementParser.varType == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (StatementParser.ifKeyword == context.SymbolId)) 
                        || (StatementParser.gotoKeyword == context.SymbolId)) 
                        || (StatementParser.forKeyword == context.SymbolId)) 
                        || (StatementParser.whileKeyword == context.SymbolId)) 
                        || (StatementParser.returnKeyword == context.SymbolId)) 
                        || (StatementParser.tryKeyword == context.SymbolId)) 
                        || (StatementParser.throwKeyword == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = StatementParser.ParseStatement(context);
                children[1] = ExpressionParser.ParseType(context);
                return new ParseNode(StatementParser.StatementFollows12, "StatementFollows12", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Statement at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseStatementFollows13(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // StatementFollows13 -> Statement rbrace
            if ((((((((((((((((((((((((((((((((((((((((((((((StatementParser.semi == context.SymbolId) 
                        || (StatementParser.varType == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (StatementParser.ifKeyword == context.SymbolId)) 
                        || (StatementParser.gotoKeyword == context.SymbolId)) 
                        || (StatementParser.forKeyword == context.SymbolId)) 
                        || (StatementParser.whileKeyword == context.SymbolId)) 
                        || (StatementParser.returnKeyword == context.SymbolId)) 
                        || (StatementParser.tryKeyword == context.SymbolId)) 
                        || (StatementParser.throwKeyword == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = StatementParser.ParseStatement(context);
                if ((false 
                            == (ExpressionParser.rbrace == context.SymbolId))) {
                    context.Error("Expecting rbrace at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.rbrace, "rbrace", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(StatementParser.StatementFollows13, "StatementFollows13", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Statement at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseStatementFollows14(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // StatementFollows14 -> Statement #EOS
            if ((((((((((((((((((((((((((((((((((((((((((((((StatementParser.semi == context.SymbolId) 
                        || (StatementParser.varType == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (StatementParser.ifKeyword == context.SymbolId)) 
                        || (StatementParser.gotoKeyword == context.SymbolId)) 
                        || (StatementParser.forKeyword == context.SymbolId)) 
                        || (StatementParser.whileKeyword == context.SymbolId)) 
                        || (StatementParser.returnKeyword == context.SymbolId)) 
                        || (StatementParser.tryKeyword == context.SymbolId)) 
                        || (StatementParser.throwKeyword == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = StatementParser.ParseStatement(context);
                if ((false 
                            == (StatementParser.EosSymbol == context.SymbolId))) {
                    context.Error("Expecting #EOS at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(StatementParser.EosSymbol, "#EOS", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(StatementParser.StatementFollows14, "StatementFollows14", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Statement at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseInnerStatementFollows(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // InnerStatementFollows -> InnerStatement semi
            if ((((((((((((((((((((((((((((((((((((((((((((((StatementParser.semi == context.SymbolId) 
                        || (StatementParser.varType == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (StatementParser.ifKeyword == context.SymbolId)) 
                        || (StatementParser.gotoKeyword == context.SymbolId)) 
                        || (StatementParser.forKeyword == context.SymbolId)) 
                        || (StatementParser.whileKeyword == context.SymbolId)) 
                        || (StatementParser.returnKeyword == context.SymbolId)) 
                        || (StatementParser.tryKeyword == context.SymbolId)) 
                        || (StatementParser.throwKeyword == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(StatementParser.ParseInnerStatement(context).Children);
                if ((false 
                            == (StatementParser.semi == context.SymbolId))) {
                    context.Error("Expecting semi at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(StatementParser.semi, "semi", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                return new ParseNode(StatementParser.InnerStatementFollows, "InnerStatementFollows", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting InnerStatement at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseInnerStatementFollows2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // InnerStatementFollows2 -> InnerStatement varType
            if ((((((((((((((((((((((((((((((((((((((((((((((StatementParser.semi == context.SymbolId) 
                        || (StatementParser.varType == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (StatementParser.ifKeyword == context.SymbolId)) 
                        || (StatementParser.gotoKeyword == context.SymbolId)) 
                        || (StatementParser.forKeyword == context.SymbolId)) 
                        || (StatementParser.whileKeyword == context.SymbolId)) 
                        || (StatementParser.returnKeyword == context.SymbolId)) 
                        || (StatementParser.tryKeyword == context.SymbolId)) 
                        || (StatementParser.throwKeyword == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(StatementParser.ParseInnerStatement(context).Children);
                if ((false 
                            == (StatementParser.varType == context.SymbolId))) {
                    context.Error("Expecting varType at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(StatementParser.varType, "varType", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                return new ParseNode(StatementParser.InnerStatementFollows2, "InnerStatementFollows2", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting InnerStatement at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseInnerStatementFollows3(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // InnerStatementFollows3 -> InnerStatement ifKeyword
            if ((((((((((((((((((((((((((((((((((((((((((((((StatementParser.semi == context.SymbolId) 
                        || (StatementParser.varType == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (StatementParser.ifKeyword == context.SymbolId)) 
                        || (StatementParser.gotoKeyword == context.SymbolId)) 
                        || (StatementParser.forKeyword == context.SymbolId)) 
                        || (StatementParser.whileKeyword == context.SymbolId)) 
                        || (StatementParser.returnKeyword == context.SymbolId)) 
                        || (StatementParser.tryKeyword == context.SymbolId)) 
                        || (StatementParser.throwKeyword == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(StatementParser.ParseInnerStatement(context).Children);
                if ((false 
                            == (StatementParser.ifKeyword == context.SymbolId))) {
                    context.Error("Expecting ifKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(StatementParser.ifKeyword, "ifKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                return new ParseNode(StatementParser.InnerStatementFollows3, "InnerStatementFollows3", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting InnerStatement at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseInnerStatementFollows4(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // InnerStatementFollows4 -> InnerStatement gotoKeyword
            if ((((((((((((((((((((((((((((((((((((((((((((((StatementParser.semi == context.SymbolId) 
                        || (StatementParser.varType == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (StatementParser.ifKeyword == context.SymbolId)) 
                        || (StatementParser.gotoKeyword == context.SymbolId)) 
                        || (StatementParser.forKeyword == context.SymbolId)) 
                        || (StatementParser.whileKeyword == context.SymbolId)) 
                        || (StatementParser.returnKeyword == context.SymbolId)) 
                        || (StatementParser.tryKeyword == context.SymbolId)) 
                        || (StatementParser.throwKeyword == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(StatementParser.ParseInnerStatement(context).Children);
                if ((false 
                            == (StatementParser.gotoKeyword == context.SymbolId))) {
                    context.Error("Expecting gotoKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(StatementParser.gotoKeyword, "gotoKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                return new ParseNode(StatementParser.InnerStatementFollows4, "InnerStatementFollows4", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting InnerStatement at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseInnerStatementFollows5(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // InnerStatementFollows5 -> InnerStatement forKeyword
            if ((((((((((((((((((((((((((((((((((((((((((((((StatementParser.semi == context.SymbolId) 
                        || (StatementParser.varType == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (StatementParser.ifKeyword == context.SymbolId)) 
                        || (StatementParser.gotoKeyword == context.SymbolId)) 
                        || (StatementParser.forKeyword == context.SymbolId)) 
                        || (StatementParser.whileKeyword == context.SymbolId)) 
                        || (StatementParser.returnKeyword == context.SymbolId)) 
                        || (StatementParser.tryKeyword == context.SymbolId)) 
                        || (StatementParser.throwKeyword == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(StatementParser.ParseInnerStatement(context).Children);
                if ((false 
                            == (StatementParser.forKeyword == context.SymbolId))) {
                    context.Error("Expecting forKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(StatementParser.forKeyword, "forKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                return new ParseNode(StatementParser.InnerStatementFollows5, "InnerStatementFollows5", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting InnerStatement at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseInnerStatementFollows6(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // InnerStatementFollows6 -> InnerStatement whileKeyword
            if ((((((((((((((((((((((((((((((((((((((((((((((StatementParser.semi == context.SymbolId) 
                        || (StatementParser.varType == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (StatementParser.ifKeyword == context.SymbolId)) 
                        || (StatementParser.gotoKeyword == context.SymbolId)) 
                        || (StatementParser.forKeyword == context.SymbolId)) 
                        || (StatementParser.whileKeyword == context.SymbolId)) 
                        || (StatementParser.returnKeyword == context.SymbolId)) 
                        || (StatementParser.tryKeyword == context.SymbolId)) 
                        || (StatementParser.throwKeyword == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(StatementParser.ParseInnerStatement(context).Children);
                if ((false 
                            == (StatementParser.whileKeyword == context.SymbolId))) {
                    context.Error("Expecting whileKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(StatementParser.whileKeyword, "whileKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                return new ParseNode(StatementParser.InnerStatementFollows6, "InnerStatementFollows6", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting InnerStatement at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseInnerStatementFollows7(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // InnerStatementFollows7 -> InnerStatement returnKeyword
            if ((((((((((((((((((((((((((((((((((((((((((((((StatementParser.semi == context.SymbolId) 
                        || (StatementParser.varType == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (StatementParser.ifKeyword == context.SymbolId)) 
                        || (StatementParser.gotoKeyword == context.SymbolId)) 
                        || (StatementParser.forKeyword == context.SymbolId)) 
                        || (StatementParser.whileKeyword == context.SymbolId)) 
                        || (StatementParser.returnKeyword == context.SymbolId)) 
                        || (StatementParser.tryKeyword == context.SymbolId)) 
                        || (StatementParser.throwKeyword == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(StatementParser.ParseInnerStatement(context).Children);
                if ((false 
                            == (StatementParser.returnKeyword == context.SymbolId))) {
                    context.Error("Expecting returnKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(StatementParser.returnKeyword, "returnKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                return new ParseNode(StatementParser.InnerStatementFollows7, "InnerStatementFollows7", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting InnerStatement at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseInnerStatementFollows8(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // InnerStatementFollows8 -> InnerStatement tryKeyword
            if ((((((((((((((((((((((((((((((((((((((((((((((StatementParser.semi == context.SymbolId) 
                        || (StatementParser.varType == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (StatementParser.ifKeyword == context.SymbolId)) 
                        || (StatementParser.gotoKeyword == context.SymbolId)) 
                        || (StatementParser.forKeyword == context.SymbolId)) 
                        || (StatementParser.whileKeyword == context.SymbolId)) 
                        || (StatementParser.returnKeyword == context.SymbolId)) 
                        || (StatementParser.tryKeyword == context.SymbolId)) 
                        || (StatementParser.throwKeyword == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(StatementParser.ParseInnerStatement(context).Children);
                if ((false 
                            == (StatementParser.tryKeyword == context.SymbolId))) {
                    context.Error("Expecting tryKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(StatementParser.tryKeyword, "tryKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                return new ParseNode(StatementParser.InnerStatementFollows8, "InnerStatementFollows8", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting InnerStatement at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseInnerStatementFollows9(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // InnerStatementFollows9 -> InnerStatement throwKeyword
            if ((((((((((((((((((((((((((((((((((((((((((((((StatementParser.semi == context.SymbolId) 
                        || (StatementParser.varType == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (StatementParser.ifKeyword == context.SymbolId)) 
                        || (StatementParser.gotoKeyword == context.SymbolId)) 
                        || (StatementParser.forKeyword == context.SymbolId)) 
                        || (StatementParser.whileKeyword == context.SymbolId)) 
                        || (StatementParser.returnKeyword == context.SymbolId)) 
                        || (StatementParser.tryKeyword == context.SymbolId)) 
                        || (StatementParser.throwKeyword == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(StatementParser.ParseInnerStatement(context).Children);
                if ((false 
                            == (StatementParser.throwKeyword == context.SymbolId))) {
                    context.Error("Expecting throwKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(StatementParser.throwKeyword, "throwKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                return new ParseNode(StatementParser.InnerStatementFollows9, "InnerStatementFollows9", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting InnerStatement at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseInnerStatementFollows10(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // InnerStatementFollows10 -> InnerStatement Expression
            if ((((((((((((((((((((((((((((((((((((((((((((((StatementParser.semi == context.SymbolId) 
                        || (StatementParser.varType == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (StatementParser.ifKeyword == context.SymbolId)) 
                        || (StatementParser.gotoKeyword == context.SymbolId)) 
                        || (StatementParser.forKeyword == context.SymbolId)) 
                        || (StatementParser.whileKeyword == context.SymbolId)) 
                        || (StatementParser.returnKeyword == context.SymbolId)) 
                        || (StatementParser.tryKeyword == context.SymbolId)) 
                        || (StatementParser.throwKeyword == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(StatementParser.ParseInnerStatement(context).Children);
                children.Add(ExpressionParser.ParseExpression(context));
                return new ParseNode(StatementParser.InnerStatementFollows10, "InnerStatementFollows10", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting InnerStatement at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseInnerStatementFollows11(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // InnerStatementFollows11 -> InnerStatement identifier
            if ((((((((((((((((((((((((((((((((((((((((((((((StatementParser.semi == context.SymbolId) 
                        || (StatementParser.varType == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (StatementParser.ifKeyword == context.SymbolId)) 
                        || (StatementParser.gotoKeyword == context.SymbolId)) 
                        || (StatementParser.forKeyword == context.SymbolId)) 
                        || (StatementParser.whileKeyword == context.SymbolId)) 
                        || (StatementParser.returnKeyword == context.SymbolId)) 
                        || (StatementParser.tryKeyword == context.SymbolId)) 
                        || (StatementParser.throwKeyword == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(StatementParser.ParseInnerStatement(context).Children);
                if ((false 
                            == (ExpressionParser.identifier2 == context.SymbolId))) {
                    context.Error("Expecting identifier at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.identifier2, "identifier", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                return new ParseNode(StatementParser.InnerStatementFollows11, "InnerStatementFollows11", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting InnerStatement at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseInnerStatementFollows12(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // InnerStatementFollows12 -> InnerStatement Type
            if ((((((((((((((((((((((((((((((((((((((((((((((StatementParser.semi == context.SymbolId) 
                        || (StatementParser.varType == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (StatementParser.ifKeyword == context.SymbolId)) 
                        || (StatementParser.gotoKeyword == context.SymbolId)) 
                        || (StatementParser.forKeyword == context.SymbolId)) 
                        || (StatementParser.whileKeyword == context.SymbolId)) 
                        || (StatementParser.returnKeyword == context.SymbolId)) 
                        || (StatementParser.tryKeyword == context.SymbolId)) 
                        || (StatementParser.throwKeyword == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(StatementParser.ParseInnerStatement(context).Children);
                children.Add(ExpressionParser.ParseType(context));
                return new ParseNode(StatementParser.InnerStatementFollows12, "InnerStatementFollows12", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting InnerStatement at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseInnerStatementFollows13(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // InnerStatementFollows13 -> InnerStatement rbrace
            if ((((((((((((((((((((((((((((((((((((((((((((((StatementParser.semi == context.SymbolId) 
                        || (StatementParser.varType == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (StatementParser.ifKeyword == context.SymbolId)) 
                        || (StatementParser.gotoKeyword == context.SymbolId)) 
                        || (StatementParser.forKeyword == context.SymbolId)) 
                        || (StatementParser.whileKeyword == context.SymbolId)) 
                        || (StatementParser.returnKeyword == context.SymbolId)) 
                        || (StatementParser.tryKeyword == context.SymbolId)) 
                        || (StatementParser.throwKeyword == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(StatementParser.ParseInnerStatement(context).Children);
                if ((false 
                            == (ExpressionParser.rbrace == context.SymbolId))) {
                    context.Error("Expecting rbrace at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.rbrace, "rbrace", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                return new ParseNode(StatementParser.InnerStatementFollows13, "InnerStatementFollows13", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting InnerStatement at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseInnerStatementFollows14(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // InnerStatementFollows14 -> InnerStatement #EOS
            if ((((((((((((((((((((((((((((((((((((((((((((((StatementParser.semi == context.SymbolId) 
                        || (StatementParser.varType == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (StatementParser.ifKeyword == context.SymbolId)) 
                        || (StatementParser.gotoKeyword == context.SymbolId)) 
                        || (StatementParser.forKeyword == context.SymbolId)) 
                        || (StatementParser.whileKeyword == context.SymbolId)) 
                        || (StatementParser.returnKeyword == context.SymbolId)) 
                        || (StatementParser.tryKeyword == context.SymbolId)) 
                        || (StatementParser.throwKeyword == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(StatementParser.ParseInnerStatement(context).Children);
                if ((false 
                            == (StatementParser.EosSymbol == context.SymbolId))) {
                    context.Error("Expecting #EOS at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(StatementParser.EosSymbol, "#EOS", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                return new ParseNode(StatementParser.InnerStatementFollows14, "InnerStatementFollows14", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting InnerStatement at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseStatementsFollows(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // StatementsFollows -> Statements #EOS
            if ((((((((((((((((((((((((((((((((((((((((((((((StatementParser.semi == context.SymbolId) 
                        || (StatementParser.varType == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (StatementParser.ifKeyword == context.SymbolId)) 
                        || (StatementParser.gotoKeyword == context.SymbolId)) 
                        || (StatementParser.forKeyword == context.SymbolId)) 
                        || (StatementParser.whileKeyword == context.SymbolId)) 
                        || (StatementParser.returnKeyword == context.SymbolId)) 
                        || (StatementParser.tryKeyword == context.SymbolId)) 
                        || (StatementParser.throwKeyword == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = StatementParser.ParseStatements(context);
                if ((false 
                            == (StatementParser.EosSymbol == context.SymbolId))) {
                    context.Error("Expecting #EOS at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(StatementParser.EosSymbol, "#EOS", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(StatementParser.StatementsFollows, "StatementsFollows", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Statements at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseNamespaceNameListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // NamespaceNameListRightAssoc -> dot Identifier NamespaceNameListRightAssoc
            if ((ExpressionParser.dot == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.dot == context.SymbolId))) {
                    context.Error("Expecting dot at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.dot, "dot", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                children.AddRange(StatementParser.ParseNamespaceNameListRightAssoc(context).Children);
                return new ParseNode(StatementParser.NamespaceNameListRightAssoc, "NamespaceNameListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting dot at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseRelationalExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // RelationalExpressionListRightAssoc -> lt TermExpression RelationalExpressionListRightAssoc
            if ((ExpressionParser.lt == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.lt == context.SymbolId))) {
                    context.Error("Expecting lt at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.lt, "lt", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.TermExpression == context.SymbolId))) {
                    context.Error("Expecting TermExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.TermExpression, "TermExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.RelationalExpressionListRightAssoc, "RelationalExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // RelationalExpressionListRightAssoc ->
            if ((((ExpressionParser.gt == context.SymbolId) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.RelationalExpressionListRightAssoc, "RelationalExpressionListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting lt at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseRelationalExpressionListRightAssoc2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // RelationalExpressionListRightAssoc2 -> gt TermExpression RelationalExpressionListRightAssoc2
            if ((ExpressionParser.gt == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.gt == context.SymbolId))) {
                    context.Error("Expecting gt at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.gt, "gt", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.TermExpression == context.SymbolId))) {
                    context.Error("Expecting TermExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.TermExpression, "TermExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc2(context).Children);
                return new ParseNode(ExpressionParser.RelationalExpressionListRightAssoc2, "RelationalExpressionListRightAssoc2", children.ToArray(), line__, column__, position__);
            }
            // RelationalExpressionListRightAssoc2 ->
            if (((ExpressionParser.lte == context.SymbolId) 
                        || (ExpressionParser.gte == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.RelationalExpressionListRightAssoc2, "RelationalExpressionListRightAssoc2", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting gt at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseEqualityExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // EqualityExpressionListRightAssoc -> eqEq RelationalExpression EqualityExpressionListRightAssoc
            if ((ExpressionParser.eqEq == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.eqEq == context.SymbolId))) {
                    context.Error("Expecting eqEq at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.eqEq, "eqEq", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.RelationalExpression == context.SymbolId))) {
                    context.Error("Expecting RelationalExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.RelationalExpression, "RelationalExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseEqualityExpressionListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.EqualityExpressionListRightAssoc, "EqualityExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // EqualityExpressionListRightAssoc ->
            if ((ExpressionParser.notEq == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.EqualityExpressionListRightAssoc, "EqualityExpressionListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting eqEq at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseBitwiseAndExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // BitwiseAndExpressionListRightAssoc -> bitwiseAnd EqualityExpression BitwiseAndExpressionListRightAssoc
            if ((ExpressionParser.bitwiseAnd == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.bitwiseAnd == context.SymbolId))) {
                    context.Error("Expecting bitwiseAnd at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.bitwiseAnd, "bitwiseAnd", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.EqualityExpression == context.SymbolId))) {
                    context.Error("Expecting EqualityExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.EqualityExpression, "EqualityExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseBitwiseAndExpressionListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.BitwiseAndExpressionListRightAssoc, "BitwiseAndExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting bitwiseAnd at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseBitwiseOrExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // BitwiseOrExpressionListRightAssoc -> bitwiseOr BitwiseAndExpression BitwiseOrExpressionListRightAssoc
            if ((ExpressionParser.bitwiseOr == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.bitwiseOr == context.SymbolId))) {
                    context.Error("Expecting bitwiseOr at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.bitwiseOr, "bitwiseOr", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.BitwiseAndExpression == context.SymbolId))) {
                    context.Error("Expecting BitwiseAndExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.BitwiseAndExpression, "BitwiseAndExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseBitwiseOrExpressionListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.BitwiseOrExpressionListRightAssoc, "BitwiseOrExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting bitwiseOr at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseAndExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AndExpressionListRightAssoc -> and BitwiseOrExpression AndExpressionListRightAssoc
            if ((ExpressionParser.and == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.and == context.SymbolId))) {
                    context.Error("Expecting and at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.and, "and", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.BitwiseOrExpression == context.SymbolId))) {
                    context.Error("Expecting BitwiseOrExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.BitwiseOrExpression, "BitwiseOrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAndExpressionListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.AndExpressionListRightAssoc, "AndExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting and at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseOrExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // OrExpressionListRightAssoc -> or AndExpression OrExpressionListRightAssoc
            if ((ExpressionParser.or == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.or == context.SymbolId))) {
                    context.Error("Expecting or at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.or, "or", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.AndExpression == context.SymbolId))) {
                    context.Error("Expecting AndExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.AndExpression, "AndExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseOrExpressionListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.OrExpressionListRightAssoc, "OrExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting or at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseAssignExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AssignExpressionListRightAssoc -> eq OrExpression AssignExpressionListRightAssoc
            if ((ExpressionParser.eq == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.eq == context.SymbolId))) {
                    context.Error("Expecting eq at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.eq, "eq", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.AssignExpressionListRightAssoc, "AssignExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionListRightAssoc ->
            if ((((((((ExpressionParser.subAssign == context.SymbolId) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.AssignExpressionListRightAssoc, "AssignExpressionListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting eq at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseAssignExpressionListRightAssoc2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AssignExpressionListRightAssoc2 -> subAssign OrExpression AssignExpressionListRightAssoc2
            if ((ExpressionParser.subAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.subAssign == context.SymbolId))) {
                    context.Error("Expecting subAssign at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.subAssign, "subAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                return new ParseNode(ExpressionParser.AssignExpressionListRightAssoc2, "AssignExpressionListRightAssoc2", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionListRightAssoc2 ->
            if (((((((ExpressionParser.divAssign == context.SymbolId) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.AssignExpressionListRightAssoc2, "AssignExpressionListRightAssoc2", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting subAssign at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseAssignExpressionListRightAssoc3(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AssignExpressionListRightAssoc3 -> divAssign OrExpression AssignExpressionListRightAssoc3
            if ((ExpressionParser.divAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.divAssign == context.SymbolId))) {
                    context.Error("Expecting divAssign at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.divAssign, "divAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                return new ParseNode(ExpressionParser.AssignExpressionListRightAssoc3, "AssignExpressionListRightAssoc3", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionListRightAssoc3 ->
            if ((((((ExpressionParser.bitwiseAndAssign == context.SymbolId) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.AssignExpressionListRightAssoc3, "AssignExpressionListRightAssoc3", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting divAssign at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseAssignExpressionListRightAssoc4(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AssignExpressionListRightAssoc4 -> bitwiseAndAssign OrExpression AssignExpressionListRightAssoc4
            if ((ExpressionParser.bitwiseAndAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.bitwiseAndAssign == context.SymbolId))) {
                    context.Error("Expecting bitwiseAndAssign at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.bitwiseAndAssign, "bitwiseAndAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                return new ParseNode(ExpressionParser.AssignExpressionListRightAssoc4, "AssignExpressionListRightAssoc4", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionListRightAssoc4 ->
            if (((((ExpressionParser.addAssign == context.SymbolId) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.AssignExpressionListRightAssoc4, "AssignExpressionListRightAssoc4", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting bitwiseAndAssign at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTermExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TermExpressionListRightAssoc -> add FactorExpression TermExpressionListRightAssoc
            if ((ExpressionParser.add == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.add == context.SymbolId))) {
                    context.Error("Expecting add at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.add, "add", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.FactorExpression == context.SymbolId))) {
                    context.Error("Expecting FactorExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.FactorExpression, "FactorExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseTermExpressionListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.TermExpressionListRightAssoc, "TermExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // TermExpressionListRightAssoc ->
            if ((ExpressionParser.sub == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.TermExpressionListRightAssoc, "TermExpressionListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting add at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseFactorExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // FactorExpressionListRightAssoc -> mul UnaryExpression FactorExpressionListRightAssoc
            if ((ExpressionParser.mul == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.mul == context.SymbolId))) {
                    context.Error("Expecting mul at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.mul, "mul", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.UnaryExpression == context.SymbolId))) {
                    context.Error("Expecting UnaryExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.UnaryExpression, "UnaryExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.FactorExpressionListRightAssoc, "FactorExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // FactorExpressionListRightAssoc ->
            if (((ExpressionParser.mod == context.SymbolId) 
                        || (ExpressionParser.div == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.FactorExpressionListRightAssoc, "FactorExpressionListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting mul at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseFactorExpressionListRightAssoc2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // FactorExpressionListRightAssoc2 -> mod UnaryExpression FactorExpressionListRightAssoc2
            if ((ExpressionParser.mod == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.mod == context.SymbolId))) {
                    context.Error("Expecting mod at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.mod, "mod", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.UnaryExpression == context.SymbolId))) {
                    context.Error("Expecting UnaryExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.UnaryExpression, "UnaryExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc2(context).Children);
                return new ParseNode(ExpressionParser.FactorExpressionListRightAssoc2, "FactorExpressionListRightAssoc2", children.ToArray(), line__, column__, position__);
            }
            // FactorExpressionListRightAssoc2 ->
            if ((ExpressionParser.div == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.FactorExpressionListRightAssoc2, "FactorExpressionListRightAssoc2", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting mod at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberInvokeRefListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberInvokeRefListRightAssoc -> comma MethodArg MemberInvokeRefListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.MethodArg == context.SymbolId))) {
                    context.Error("Expecting MethodArg at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.MethodArg, "MethodArg", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberInvokeRefListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberInvokeRefListRightAssoc, "MemberInvokeRefListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberIndexerRefListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberIndexerRefListRightAssoc -> comma Expression MemberIndexerRefListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseExpression(context));
                children.AddRange(ExpressionParser.ParseMemberIndexerRefListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberIndexerRefListRightAssoc, "MemberIndexerRefListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeBaseListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeBaseListRightAssoc -> dot identifier TypeBaseListRightAssoc
            if ((ExpressionParser.dot == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.dot == context.SymbolId))) {
                    context.Error("Expecting dot at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.dot, "dot", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.identifier2 == context.SymbolId))) {
                    context.Error("Expecting identifier at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.identifier2, "identifier", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseTypeBaseListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.TypeBaseListRightAssoc, "TypeBaseListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting dot at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeArraySpecListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeArraySpecListRightAssoc -> TypeArraySpec TypeArraySpecListRightAssoc
            if ((ExpressionParser.TypeArraySpec == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.TypeArraySpec == context.SymbolId))) {
                    context.Error("Expecting TypeArraySpec at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.TypeArraySpec, "TypeArraySpec", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseTypeArraySpecListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.TypeArraySpecListRightAssoc, "TypeArraySpecListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting TypeArraySpec at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeGenericPartListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeGenericPartListRightAssoc -> comma Type TypeGenericPartListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseType(context));
                children.AddRange(ExpressionParser.ParseTypeGenericPartListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.TypeGenericPartListRightAssoc, "TypeGenericPartListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeArraySpecRankListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeArraySpecRankListRightAssoc -> TypeArraySpecRank TypeArraySpecRankListRightAssoc
            if ((ExpressionParser.TypeArraySpecRank == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.TypeArraySpecRank == context.SymbolId))) {
                    context.Error("Expecting TypeArraySpecRank at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.TypeArraySpecRank, "TypeArraySpecRank", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseTypeArraySpecRankListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.TypeArraySpecRankListRightAssoc, "TypeArraySpecRankListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting TypeArraySpecRank at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseNewObjectPartListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // NewObjectPartListRightAssoc -> comma Expression NewObjectPartListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseExpression(context));
                children.AddRange(ExpressionParser.ParseNewObjectPartListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.NewObjectPartListRightAssoc, "NewObjectPartListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseArraySpecExpressionListListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ArraySpecExpressionListListRightAssoc -> comma Expression ArraySpecExpressionListListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseExpression(context));
                children.AddRange(ExpressionParser.ParseArraySpecExpressionListListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.ArraySpecExpressionListListRightAssoc, "ArraySpecExpressionListListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseArrayInitializerListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ArrayInitializerListRightAssoc -> comma Expression ArrayInitializerListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseExpression(context));
                children.AddRange(ExpressionParser.ParseArrayInitializerListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.ArrayInitializerListRightAssoc, "ArrayInitializerListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefListRightAssoc -> MemberAnyRef MemberAnyRefListRightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefListRightAssoc, "MemberAnyRefListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList2RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList2RightAssoc -> MemberAnyRef MemberAnyRefList2RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList2RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList2RightAssoc, "MemberAnyRefList2RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList3RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList3RightAssoc -> MemberAnyRef MemberAnyRefList3RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList3RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList3RightAssoc, "MemberAnyRefList3RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList4RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList4RightAssoc -> MemberAnyRef MemberAnyRefList4RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList4RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList4RightAssoc, "MemberAnyRefList4RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList5RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList5RightAssoc -> MemberAnyRef MemberAnyRefList5RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList5RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList5RightAssoc, "MemberAnyRefList5RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList6RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList6RightAssoc -> MemberAnyRef MemberAnyRefList6RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList6RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList6RightAssoc, "MemberAnyRefList6RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList7RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList7RightAssoc -> MemberAnyRef MemberAnyRefList7RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList7RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList7RightAssoc, "MemberAnyRefList7RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList8RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList8RightAssoc -> MemberAnyRef MemberAnyRefList8RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList8RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList8RightAssoc, "MemberAnyRefList8RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList9RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList9RightAssoc -> MemberAnyRef MemberAnyRefList9RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList9RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList9RightAssoc, "MemberAnyRefList9RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList10RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList10RightAssoc -> MemberAnyRef MemberAnyRefList10RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList10RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList10RightAssoc, "MemberAnyRefList10RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList11RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList11RightAssoc -> MemberAnyRef MemberAnyRefList11RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList11RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList11RightAssoc, "MemberAnyRefList11RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList12RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList12RightAssoc -> MemberAnyRef MemberAnyRefList12RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList12RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList12RightAssoc, "MemberAnyRefList12RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList13RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList13RightAssoc -> MemberAnyRef MemberAnyRefList13RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList13RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList13RightAssoc, "MemberAnyRefList13RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList14RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList14RightAssoc -> MemberAnyRef MemberAnyRefList14RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList14RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList14RightAssoc, "MemberAnyRefList14RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCatchClauseListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CatchClauseListRightAssoc -> CatchClause CatchClauseListRightAssoc
            if ((StatementParser.catchKeyword == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(StatementParser.ParseCatchClause(context));
                children.AddRange(StatementParser.ParseCatchClauseListRightAssoc(context).Children);
                return new ParseNode(StatementParser.CatchClauseListRightAssoc, "CatchClauseListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // CatchClauseListRightAssoc ->
            if (((((((((((((((((((((((((((((((((((((((((((((((((StatementParser.finallyKeyword == context.SymbolId) 
                        || (StatementParser.semi == context.SymbolId)) 
                        || (StatementParser.varType == context.SymbolId)) 
                        || (StatementParser.ifKeyword == context.SymbolId)) 
                        || (StatementParser.gotoKeyword == context.SymbolId)) 
                        || (StatementParser.forKeyword == context.SymbolId)) 
                        || (StatementParser.whileKeyword == context.SymbolId)) 
                        || (StatementParser.returnKeyword == context.SymbolId)) 
                        || (StatementParser.tryKeyword == context.SymbolId)) 
                        || (StatementParser.throwKeyword == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.EosSymbol == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(StatementParser.CatchClauseListRightAssoc, "CatchClauseListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CatchClause at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseStatementListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // StatementListRightAssoc -> Statement StatementListRightAssoc
            if ((((((((((((((((((((((((((((((((((((((((((((((StatementParser.semi == context.SymbolId) 
                        || (StatementParser.varType == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (StatementParser.ifKeyword == context.SymbolId)) 
                        || (StatementParser.gotoKeyword == context.SymbolId)) 
                        || (StatementParser.forKeyword == context.SymbolId)) 
                        || (StatementParser.whileKeyword == context.SymbolId)) 
                        || (StatementParser.returnKeyword == context.SymbolId)) 
                        || (StatementParser.tryKeyword == context.SymbolId)) 
                        || (StatementParser.throwKeyword == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(StatementParser.ParseStatement(context));
                children.AddRange(StatementParser.ParseStatementListRightAssoc(context).Children);
                return new ParseNode(StatementParser.StatementListRightAssoc, "StatementListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // StatementListRightAssoc ->
            if ((StatementParser.EosSymbol == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(StatementParser.StatementListRightAssoc, "StatementListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Statement at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseStatementList2RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // StatementList2RightAssoc -> Statement StatementList2RightAssoc
            if ((((((((((((((((((((((((((((((((((((((((((((((StatementParser.semi == context.SymbolId) 
                        || (StatementParser.varType == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (StatementParser.ifKeyword == context.SymbolId)) 
                        || (StatementParser.gotoKeyword == context.SymbolId)) 
                        || (StatementParser.forKeyword == context.SymbolId)) 
                        || (StatementParser.whileKeyword == context.SymbolId)) 
                        || (StatementParser.returnKeyword == context.SymbolId)) 
                        || (StatementParser.tryKeyword == context.SymbolId)) 
                        || (StatementParser.throwKeyword == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(StatementParser.ParseStatement(context));
                children.AddRange(StatementParser.ParseStatementList2RightAssoc(context).Children);
                return new ParseNode(StatementParser.StatementList2RightAssoc, "StatementList2RightAssoc", children.ToArray(), line__, column__, position__);
            }
            // StatementList2RightAssoc ->
            if ((ExpressionParser.rbrace == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(StatementParser.StatementList2RightAssoc, "StatementList2RightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Statement at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseVariableDeclarationStatement(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // VariableDeclarationStatement -> varType Identifier VariableDeclarationStatementPart
            if ((StatementParser.varType == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (StatementParser.varType == context.SymbolId))) {
                    context.Error("Expecting varType at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(StatementParser.varType, "varType", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                children.AddRange(StatementParser.ParseVariableDeclarationStatementPart(context).Children);
                return new ParseNode(StatementParser.VariableDeclarationStatement, "VariableDeclarationStatement", children.ToArray(), line__, column__, position__);
            }
            // VariableDeclarationStatement -> Type Identifier VariableDeclarationStatementPart2
            if (((((((((((((((((ExpressionParser.boolType == context.SymbolId) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseType(context));
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                children.AddRange(StatementParser.ParseVariableDeclarationStatementPart2(context).Children);
                return new ParseNode(StatementParser.VariableDeclarationStatement, "VariableDeclarationStatement", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting varType or Type at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseVariableDeclarationStatementPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // VariableDeclarationStatementPart -> eq Expression semi
            if ((ExpressionParser.eq == context.SymbolId)) {
                ParseNode[] children = new ParseNode[3];
                if ((false 
                            == (ExpressionParser.eq == context.SymbolId))) {
                    context.Error("Expecting eq at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.eq, "eq", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[1] = ExpressionParser.ParseExpression(context);
                if ((false 
                            == (StatementParser.semi == context.SymbolId))) {
                    context.Error("Expecting semi at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[2] = new ParseNode(StatementParser.semi, "semi", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(StatementParser.VariableDeclarationStatementPart, "VariableDeclarationStatementPart", children, line__, column__, position__);
            }
            // VariableDeclarationStatementPart -> semi
            if ((StatementParser.semi == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (StatementParser.semi == context.SymbolId))) {
                    context.Error("Expecting semi at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(StatementParser.semi, "semi", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(StatementParser.VariableDeclarationStatementPart, "VariableDeclarationStatementPart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting eq or semi at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseVariableDeclarationStatementPart2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // VariableDeclarationStatementPart2 -> eq Expression semi
            if ((ExpressionParser.eq == context.SymbolId)) {
                ParseNode[] children = new ParseNode[3];
                if ((false 
                            == (ExpressionParser.eq == context.SymbolId))) {
                    context.Error("Expecting eq at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.eq, "eq", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[1] = ExpressionParser.ParseExpression(context);
                if ((false 
                            == (StatementParser.semi == context.SymbolId))) {
                    context.Error("Expecting semi at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[2] = new ParseNode(StatementParser.semi, "semi", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(StatementParser.VariableDeclarationStatementPart2, "VariableDeclarationStatementPart2", children, line__, column__, position__);
            }
            // VariableDeclarationStatementPart2 -> semi
            if ((StatementParser.semi == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (StatementParser.semi == context.SymbolId))) {
                    context.Error("Expecting semi at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(StatementParser.semi, "semi", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(StatementParser.VariableDeclarationStatementPart2, "VariableDeclarationStatementPart2", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting eq or semi at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseThrowStatement(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ThrowStatement -> throwKeyword ThrowStatementPart
            if ((StatementParser.throwKeyword == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (StatementParser.throwKeyword == context.SymbolId))) {
                    context.Error("Expecting throwKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(StatementParser.throwKeyword, "throwKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(StatementParser.ParseThrowStatementPart(context).Children);
                return new ParseNode(StatementParser.ThrowStatement, "ThrowStatement", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting throwKeyword at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseThrowStatementPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ThrowStatementPart -> Expression semi
            if (((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = ExpressionParser.ParseExpression(context);
                if ((false 
                            == (StatementParser.semi == context.SymbolId))) {
                    context.Error("Expecting semi at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(StatementParser.semi, "semi", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(StatementParser.ThrowStatementPart, "ThrowStatementPart", children, line__, column__, position__);
            }
            // ThrowStatementPart -> semi
            if ((StatementParser.semi == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (StatementParser.semi == context.SymbolId))) {
                    context.Error("Expecting semi at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(StatementParser.semi, "semi", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(StatementParser.ThrowStatementPart, "ThrowStatementPart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Expression or semi at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTryStatementPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TryStatementPart -> FinallyPart
            if ((StatementParser.finallyKeyword == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(StatementParser.ParseFinallyPart(context).Children);
                return new ParseNode(StatementParser.TryStatementPart, "TryStatementPart", children.ToArray(), line__, column__, position__);
            }
            // TryStatementPart ->
            if ((((((((((((((((((((((((((((((((((((((((((((((((StatementParser.semi == context.SymbolId) 
                        || (StatementParser.varType == context.SymbolId)) 
                        || (StatementParser.ifKeyword == context.SymbolId)) 
                        || (StatementParser.gotoKeyword == context.SymbolId)) 
                        || (StatementParser.forKeyword == context.SymbolId)) 
                        || (StatementParser.whileKeyword == context.SymbolId)) 
                        || (StatementParser.returnKeyword == context.SymbolId)) 
                        || (StatementParser.tryKeyword == context.SymbolId)) 
                        || (StatementParser.throwKeyword == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.rbrace == context.SymbolId)) 
                        || (StatementParser.EosSymbol == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(StatementParser.TryStatementPart, "TryStatementPart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting FinallyPart at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCatchClause(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CatchClause -> catchKeyword lparen Type CatchClausePart
            if ((StatementParser.catchKeyword == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (StatementParser.catchKeyword == context.SymbolId))) {
                    context.Error("Expecting catchKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(StatementParser.catchKeyword, "catchKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.lparen == context.SymbolId))) {
                    context.Error("Expecting lparen at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.lparen, "lparen", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseType(context));
                children.AddRange(StatementParser.ParseCatchClausePart(context).Children);
                return new ParseNode(StatementParser.CatchClause, "CatchClause", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting catchKeyword at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCatchClausePart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CatchClausePart -> Identifier rparen StatementBlock
            if (((ExpressionParser.verbatimIdentifier == context.SymbolId) 
                        || (ExpressionParser.identifier2 == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(StatementParser.ParseStatementBlock(context));
                return new ParseNode(StatementParser.CatchClausePart, "CatchClausePart", children.ToArray(), line__, column__, position__);
            }
            // CatchClausePart -> rparen StatementBlock
            if ((ExpressionParser.rparen == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[1] = StatementParser.ParseStatementBlock(context);
                return new ParseNode(StatementParser.CatchClausePart, "CatchClausePart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Identifier or rparen at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseStatementBlock(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // StatementBlock -> lbrace StatementBlockPart
            if ((ExpressionParser.lbrace == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.lbrace == context.SymbolId))) {
                    context.Error("Expecting lbrace at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.lbrace, "lbrace", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(StatementParser.ParseStatementBlockPart(context).Children);
                return new ParseNode(StatementParser.StatementBlock, "StatementBlock", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting lbrace at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseStatementBlockPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // StatementBlockPart -> StatementList2 rbrace
            if ((((((((((((((((((((((((((((((((((((((((((((((StatementParser.semi == context.SymbolId) 
                        || (StatementParser.varType == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (StatementParser.ifKeyword == context.SymbolId)) 
                        || (StatementParser.gotoKeyword == context.SymbolId)) 
                        || (StatementParser.forKeyword == context.SymbolId)) 
                        || (StatementParser.whileKeyword == context.SymbolId)) 
                        || (StatementParser.returnKeyword == context.SymbolId)) 
                        || (StatementParser.tryKeyword == context.SymbolId)) 
                        || (StatementParser.throwKeyword == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(StatementParser.ParseStatementList2(context).Children);
                if ((false 
                            == (ExpressionParser.rbrace == context.SymbolId))) {
                    context.Error("Expecting rbrace at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.rbrace, "rbrace", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                return new ParseNode(StatementParser.StatementBlockPart, "StatementBlockPart", children.ToArray(), line__, column__, position__);
            }
            // StatementBlockPart -> rbrace
            if ((ExpressionParser.rbrace == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.rbrace == context.SymbolId))) {
                    context.Error("Expecting rbrace at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.rbrace, "rbrace", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(StatementParser.StatementBlockPart, "StatementBlockPart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting StatementList2 or rbrace at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseRelationalExpressionListPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // RelationalExpressionListPart -> lte TermExpression
            if ((ExpressionParser.lte == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.lte == context.SymbolId))) {
                    context.Error("Expecting lte at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.lte, "lte", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                if ((false 
                            == (ExpressionParser.TermExpression == context.SymbolId))) {
                    context.Error("Expecting TermExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.TermExpression, "TermExpression", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.RelationalExpressionListPart, "RelationalExpressionListPart", children, line__, column__, position__);
            }
            // RelationalExpressionListPart -> gte TermExpression
            if ((ExpressionParser.gte == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.gte == context.SymbolId))) {
                    context.Error("Expecting gte at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.gte, "gte", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                if ((false 
                            == (ExpressionParser.TermExpression == context.SymbolId))) {
                    context.Error("Expecting TermExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.TermExpression, "TermExpression", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.RelationalExpressionListPart, "RelationalExpressionListPart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting lte or gte at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseAssignExpressionListPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AssignExpressionListPart -> addAssign OrExpression
            if ((ExpressionParser.addAssign == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.addAssign == context.SymbolId))) {
                    context.Error("Expecting addAssign at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.addAssign, "addAssign", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.AssignExpressionListPart, "AssignExpressionListPart", children, line__, column__, position__);
            }
            // AssignExpressionListPart -> mulAssign OrExpression
            if ((ExpressionParser.mulAssign == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.mulAssign == context.SymbolId))) {
                    context.Error("Expecting mulAssign at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.mulAssign, "mulAssign", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.AssignExpressionListPart, "AssignExpressionListPart", children, line__, column__, position__);
            }
            // AssignExpressionListPart -> modAssign OrExpression
            if ((ExpressionParser.modAssign == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.modAssign == context.SymbolId))) {
                    context.Error("Expecting modAssign at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.modAssign, "modAssign", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.AssignExpressionListPart, "AssignExpressionListPart", children, line__, column__, position__);
            }
            // AssignExpressionListPart -> bitwiseOrAssign OrExpression
            if ((ExpressionParser.bitwiseOrAssign == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.bitwiseOrAssign == context.SymbolId))) {
                    context.Error("Expecting bitwiseOrAssign at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.bitwiseOrAssign, "bitwiseOrAssign", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.AssignExpressionListPart, "AssignExpressionListPart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting addAssign, mulAssign, modAssign, or bitwiseOrAssign at line {0}, column" +
                        " {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseEqualityExpressionListRightAssoc2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // EqualityExpressionListRightAssoc2 -> notEq RelationalExpression EqualityExpressionListRightAssoc2
            if ((ExpressionParser.notEq == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.notEq == context.SymbolId))) {
                    context.Error("Expecting notEq at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.notEq, "notEq", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.RelationalExpression == context.SymbolId))) {
                    context.Error("Expecting RelationalExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.RelationalExpression, "RelationalExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseEqualityExpressionListRightAssoc2(context).Children);
                return new ParseNode(ExpressionParser.EqualityExpressionListRightAssoc2, "EqualityExpressionListRightAssoc2", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting notEq at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTermExpressionListRightAssoc2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TermExpressionListRightAssoc2 -> sub FactorExpression TermExpressionListRightAssoc2
            if ((ExpressionParser.sub == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.sub == context.SymbolId))) {
                    context.Error("Expecting sub at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.sub, "sub", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.FactorExpression == context.SymbolId))) {
                    context.Error("Expecting FactorExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.FactorExpression, "FactorExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseTermExpressionListRightAssoc2(context).Children);
                return new ParseNode(ExpressionParser.TermExpressionListRightAssoc2, "TermExpressionListRightAssoc2", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting sub at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseFactorExpressionListRightAssoc3(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // FactorExpressionListRightAssoc3 -> div UnaryExpression FactorExpressionListRightAssoc3
            if ((ExpressionParser.div == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.div == context.SymbolId))) {
                    context.Error("Expecting div at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.div, "div", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.UnaryExpression == context.SymbolId))) {
                    context.Error("Expecting UnaryExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.UnaryExpression, "UnaryExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc3(context).Children);
                return new ParseNode(ExpressionParser.FactorExpressionListRightAssoc3, "FactorExpressionListRightAssoc3", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting div at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseRelationalExpressionListRightAssoc3(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // RelationalExpressionListRightAssoc3 -> RelationalExpressionListPart RelationalExpressionListRightAssoc3
            if (((ExpressionParser.lte == context.SymbolId) 
                        || (ExpressionParser.gte == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseRelationalExpressionListPart(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc3(context).Children);
                return new ParseNode(ExpressionParser.RelationalExpressionListRightAssoc3, "RelationalExpressionListRightAssoc3", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting RelationalExpressionListPart at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseAssignExpressionListRightAssoc5(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AssignExpressionListRightAssoc5 -> AssignExpressionListPart AssignExpressionListRightAssoc5
            if (((((ExpressionParser.addAssign == context.SymbolId) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseAssignExpressionListPart(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(ExpressionParser.AssignExpressionListRightAssoc5, "AssignExpressionListRightAssoc5", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting AssignExpressionListPart at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTryStatement(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TryStatement -> tryKeyword StatementBlock TryStatementPart2
            if ((StatementParser.tryKeyword == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (StatementParser.tryKeyword == context.SymbolId))) {
                    context.Error("Expecting tryKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(StatementParser.tryKeyword, "tryKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(StatementParser.ParseStatementBlock(context));
                children.AddRange(StatementParser.ParseTryStatementPart2(context).Children);
                return new ParseNode(StatementParser.TryStatement, "TryStatement", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting tryKeyword at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTryStatementPart2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TryStatementPart2 -> FinallyPart
            if ((StatementParser.finallyKeyword == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(StatementParser.ParseFinallyPart(context).Children);
                return new ParseNode(StatementParser.TryStatementPart2, "TryStatementPart2", children.ToArray(), line__, column__, position__);
            }
            // TryStatementPart2 -> CatchClauseList TryStatementPart
            if ((StatementParser.catchKeyword == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(StatementParser.ParseCatchClauseList(context).Children);
                children.AddRange(StatementParser.ParseTryStatementPart(context).Children);
                return new ParseNode(StatementParser.TryStatementPart2, "TryStatementPart2", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting FinallyPart or CatchClauseList at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
    }
    /// <summary>Parses the indicated grammar. Refer to C:\dev\BuildPack\scratch\SlangType.xbnf</summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Parsley", "0.1.2.0")]
    internal partial class TypeDeclParser {
        internal const int ErrorSymbol = -1;
        internal const int EosSymbol = -2;
        public const int NamespaceNameList = 2;
        public const int NamespaceNameListRightAssoc = 6;
        public const int Expression = 9;
        public const int MemberAnyRef = 11;
        public const int MethodArg = 12;
        public const int TypeBase = 15;
        public const int TypeArraySpecRank = 16;
        public const int UnaryExpression = 20;
        public const int Identifier = 22;
        public const int RelationalExpressionList = 23;
        public const int EqualityExpressionList = 24;
        public const int BitwiseAndExpressionList = 25;
        public const int BitwiseOrExpressionList = 26;
        public const int AndExpressionList = 27;
        public const int OrExpressionList = 28;
        public const int AssignExpressionList = 29;
        public const int TermExpressionList = 30;
        public const int FactorExpressionList = 31;
        public const int MemberInvokeRefList = 32;
        public const int MemberIndexerRefList = 33;
        public const int TypeBaseList = 34;
        public const int TypeArraySpecList = 35;
        public const int TypeGenericPartList = 36;
        public const int TypeArraySpecRankList = 37;
        public const int NewObjectPartList = 38;
        public const int ArraySpecExpressionListList = 39;
        public const int ArrayInitializerList = 40;
        public const int MemberAnyRefList = 41;
        public const int MemberAnyRefList2 = 42;
        public const int MemberAnyRefList3 = 43;
        public const int MemberAnyRefList4 = 44;
        public const int MemberAnyRefList5 = 45;
        public const int MemberAnyRefList6 = 46;
        public const int MemberAnyRefList7 = 47;
        public const int MemberAnyRefList8 = 48;
        public const int MemberAnyRefList9 = 49;
        public const int MemberAnyRefList10 = 50;
        public const int MemberAnyRefList11 = 51;
        public const int MemberAnyRefList12 = 52;
        public const int MemberAnyRefList13 = 53;
        public const int MemberAnyRefList14 = 54;
        public const int ExpressionFollows = 58;
        public const int ExpressionFollows2 = 59;
        public const int ExpressionFollows3 = 60;
        public const int ExpressionFollows4 = 61;
        public const int TypeFollows = 62;
        public const int TypeFollows2 = 63;
        public const int TypeFollows3 = 64;
        public const int TypeFollows4 = 65;
        public const int RelationalExpressionListRightAssoc = 67;
        public const int RelationalExpressionListRightAssoc2 = 68;
        public const int EqualityExpressionListRightAssoc = 69;
        public const int BitwiseAndExpressionListRightAssoc = 70;
        public const int BitwiseOrExpressionListRightAssoc = 71;
        public const int AndExpressionListRightAssoc = 72;
        public const int OrExpressionListRightAssoc = 73;
        public const int AssignExpressionListRightAssoc = 74;
        public const int AssignExpressionListRightAssoc2 = 75;
        public const int AssignExpressionListRightAssoc3 = 76;
        public const int AssignExpressionListRightAssoc4 = 77;
        public const int TermExpressionListRightAssoc = 78;
        public const int FactorExpressionListRightAssoc = 79;
        public const int FactorExpressionListRightAssoc2 = 80;
        public const int MemberInvokeRefListRightAssoc = 81;
        public const int MemberIndexerRefListRightAssoc = 82;
        public const int TypeBaseListRightAssoc = 83;
        public const int TypeArraySpecListRightAssoc = 84;
        public const int TypeGenericPartListRightAssoc = 85;
        public const int TypeArraySpecRankListRightAssoc = 86;
        public const int NewObjectPartListRightAssoc = 87;
        public const int ArraySpecExpressionListListRightAssoc = 88;
        public const int ArrayInitializerListRightAssoc = 89;
        public const int MemberAnyRefListRightAssoc = 90;
        public const int MemberAnyRefList2RightAssoc = 91;
        public const int MemberAnyRefList3RightAssoc = 92;
        public const int MemberAnyRefList4RightAssoc = 93;
        public const int MemberAnyRefList5RightAssoc = 94;
        public const int MemberAnyRefList6RightAssoc = 95;
        public const int MemberAnyRefList7RightAssoc = 96;
        public const int MemberAnyRefList8RightAssoc = 97;
        public const int MemberAnyRefList9RightAssoc = 98;
        public const int MemberAnyRefList10RightAssoc = 99;
        public const int MemberAnyRefList11RightAssoc = 100;
        public const int MemberAnyRefList12RightAssoc = 101;
        public const int MemberAnyRefList13RightAssoc = 102;
        public const int MemberAnyRefList14RightAssoc = 103;
        public const int RelationalExpression = 104;
        public const int EqualityExpression = 106;
        public const int BitwiseAndExpression = 108;
        public const int BitwiseOrExpression = 110;
        public const int AndExpression = 112;
        public const int OrExpression = 114;
        public const int TermExpression = 118;
        public const int FactorExpression = 120;
        public const int Type = 126;
        public const int TypeArraySpec = 131;
        public const int RelationalExpressionListPart = 154;
        public const int AssignExpressionListPart = 155;
        public const int EqualityExpressionListRightAssoc2 = 156;
        public const int TermExpressionListRightAssoc2 = 157;
        public const int FactorExpressionListRightAssoc3 = 158;
        public const int RelationalExpressionListRightAssoc3 = 159;
        public const int AssignExpressionListRightAssoc5 = 160;
        public const int InnerStatement = 182;
        public const int CatchClauseList = 184;
        public const int StatementList = 185;
        public const int StatementList2 = 186;
        public const int Statement = 189;
        public const int StatementFollows = 190;
        public const int StatementFollows2 = 191;
        public const int StatementFollows3 = 192;
        public const int InnerStatementFollows = 204;
        public const int InnerStatementFollows2 = 205;
        public const int InnerStatementFollows3 = 206;
        public const int CatchClauseListRightAssoc = 219;
        public const int StatementListRightAssoc = 220;
        public const int StatementList2RightAssoc = 221;
        public const int CatchClause = 228;
        public const int StatementBlock = 230;
        public const int CustomAttributeArg = 235;
        public const int CustomAttributeTarget = 236;
        public const int CustomAttributeGroups = 237;
        public const int TypeAttributes = 238;
        public const int EnumPart = 239;
        public const int EnumFields = 240;
        public const int EnumField = 241;
        public const int Where = 242;
        public const int WhereClausePart = 243;
        public const int BaseType = 244;
        public const int TypeParams = 245;
        public const int Enum = 246;
        public const int Struct = 247;
        public const int Class = 248;
        public const int MemberAttribute = 249;
        public const int MemberAttributes = 250;
        public const int MethodParamList = 251;
        public const int MethodParam = 252;
        public const int ParamList = 253;
        public const int Param = 254;
        public const int CustomAttributeArgListList = 255;
        public const int CustomAttributeGroupList = 256;
        public const int CustomAttributeGroupList2 = 257;
        public const int CustomAttributeGroupList3 = 258;
        public const int TypeAttributesList = 259;
        public const int EnumFieldsList = 260;
        public const int WhereClauseList = 261;
        public const int TypeParamsList = 262;
        public const int TypeParamsList2 = 263;
        public const int MemberAttributeList = 264;
        public const int MethodParamListList = 265;
        public const int ParamListList = 266;
        public const int ConstructorChainList = 267;
        public const int ConstructorChainList2 = 268;
        public const int WhereClauses = 269;
        public const int TypeDeclPart = 270;
        public const int TypeDecl = 271;
        public const int PrivateImplementationType = 272;
        public const int PropertyAccessors = 273;
        public const int Member = 274;
        public const int Members = 275;
        public const int CustomAttributeGroupFollows = 276;
        public const int CustomAttributeGroupFollows2 = 277;
        public const int CustomAttributeGroupFollows3 = 278;
        public const int CustomAttributeGroupFollows4 = 279;
        public const int CustomAttributeGroupFollows5 = 280;
        public const int CustomAttributeGroupFollows6 = 281;
        public const int CustomAttributeGroupFollows7 = 282;
        public const int CustomAttributeGroupFollows8 = 283;
        public const int CustomAttributeGroupFollows9 = 284;
        public const int CustomAttributeGroupFollows10 = 285;
        public const int CustomAttributeGroupFollows11 = 286;
        public const int CustomAttributeGroupFollows12 = 287;
        public const int CustomAttributeGroupFollows13 = 288;
        public const int CustomAttributeGroupFollows14 = 289;
        public const int CustomAttributeGroupFollows15 = 290;
        public const int CustomAttributeGroupFollows16 = 291;
        public const int CustomAttributeGroupFollows17 = 292;
        public const int CustomAttributeGroupFollows18 = 293;
        public const int CustomAttributeGroupFollows19 = 294;
        public const int CustomAttributeGroupFollows20 = 295;
        public const int CustomAttributeGroupFollows21 = 296;
        public const int CustomAttributeGroupsFollows = 297;
        public const int CustomAttributeGroupsFollows2 = 298;
        public const int CustomAttributeGroupsFollows3 = 299;
        public const int CustomAttributeGroupsFollows4 = 300;
        public const int CustomAttributeGroupsFollows5 = 301;
        public const int CustomAttributeGroupsFollows6 = 302;
        public const int CustomAttributeGroupsFollows7 = 303;
        public const int CustomAttributeGroupsFollows8 = 304;
        public const int CustomAttributeGroupsFollows9 = 305;
        public const int CustomAttributeGroupsFollows10 = 306;
        public const int CustomAttributeGroupsFollows11 = 307;
        public const int CustomAttributeGroupsFollows12 = 308;
        public const int CustomAttributeGroupsFollows13 = 309;
        public const int CustomAttributeGroupsFollows14 = 310;
        public const int CustomAttributeGroupsFollows15 = 311;
        public const int CustomAttributeGroupsFollows16 = 312;
        public const int CustomAttributeGroupsFollows17 = 313;
        public const int CustomAttributeGroupsFollows18 = 314;
        public const int CustomAttributeGroupsFollows19 = 315;
        public const int CustomAttributeGroupsFollows20 = 316;
        public const int CustomAttributeGroupsFollows21 = 317;
        public const int CustomAttributeGroupsFollows22 = 318;
        public const int CustomAttributeGroupsFollows23 = 319;
        public const int TypeAttributesFollows = 320;
        public const int TypeAttributesFollows2 = 321;
        public const int TypeAttributesFollows3 = 322;
        public const int TypeAttributesFollows4 = 323;
        public const int TypeAttributesFollows5 = 324;
        public const int WhereFollows = 325;
        public const int WhereClauseFollows = 326;
        public const int BaseTypeFollows = 327;
        public const int BaseTypeFollows2 = 328;
        public const int BaseTypeFollows3 = 329;
        public const int TypeDeclPartFollows = 330;
        public const int TypeParamsFollows = 331;
        public const int TypeParamsFollows2 = 332;
        public const int TypeParamsFollows3 = 333;
        public const int TypeDeclFollows = 334;
        public const int TypeDeclFollows2 = 335;
        public const int TypeDeclFollows3 = 336;
        public const int TypeDeclFollows4 = 337;
        public const int TypeDeclFollows5 = 338;
        public const int TypeDeclFollows6 = 339;
        public const int TypeDeclFollows7 = 340;
        public const int TypeDeclFollows8 = 341;
        public const int TypeDeclFollows9 = 342;
        public const int TypeDeclFollows10 = 343;
        public const int TypeDeclFollows11 = 344;
        public const int TypeDeclFollows12 = 345;
        public const int TypeDeclFollows13 = 346;
        public const int MethodParamListFollows = 347;
        public const int ParamListFollows = 348;
        public const int ParamListFollows2 = 349;
        public const int MemberFollows = 350;
        public const int CustomAttributeArgListListRightAssoc = 351;
        public const int CustomAttributeGroupListRightAssoc = 352;
        public const int CustomAttributeGroupList2RightAssoc = 353;
        public const int CustomAttributeGroupList3RightAssoc = 354;
        public const int TypeAttributesListRightAssoc = 355;
        public const int TypeAttributesListRightAssoc2 = 356;
        public const int EnumFieldsListRightAssoc = 357;
        public const int WhereClauseListRightAssoc = 358;
        public const int TypeParamsListRightAssoc = 359;
        public const int TypeParamsList2RightAssoc = 360;
        public const int MemberAttributeListRightAssoc = 361;
        public const int MethodParamListListRightAssoc = 362;
        public const int ParamListListRightAssoc = 363;
        public const int ConstructorChainListRightAssoc = 364;
        public const int ConstructorChainList2RightAssoc = 365;
        public const int CustomAttributePart = 366;
        public const int CustomAttributeArgList = 367;
        public const int CustomAttributeArgListPart = 368;
        public const int CustomAttributeGroupPart = 369;
        public const int CustomAttributeGroupPart2 = 370;
        public const int EnumFieldsPart = 371;
        public const int WhereClause = 372;
        public const int WhereClausePart2 = 373;
        public const int TypeParamsPart = 374;
        public const int TypeParamsPart2 = 375;
        public const int Interface = 376;
        public const int InterfacePart = 377;
        public const int MethodParamListPart = 378;
        public const int ParamListPart = 379;
        public const int PropertyGet = 380;
        public const int PropertyGetPart = 381;
        public const int PropertySet = 382;
        public const int PropertySetPart = 383;
        public const int ConstructorChainPart = 384;
        public const int ConstructorChainPart2 = 385;
        public const int TypeAttributesListRightAssoc3 = 386;
        public const int CustomAttribute = 387;
        public const int CustomAttributePart2 = 388;
        public const int TypeParamsPart3 = 389;
        public const int ConstructorChain = 390;
        public const int ConstructorChainPart3 = 391;
        public const int ConstructorChainPart4 = 392;
        public const int CustomAttributeGroup = 393;
        public const int CustomAttributeGroupPart3 = 394;
        public const int BaseTypes = 395;
        public const int Constructor = 396;
        public const int Method = 397;
        public const int Property = 398;
        public const int Event = 399;
        public const int Field = 400;
        public const int namespaceKeyword = 401;
        public const int usingKeyword = 402;
        public const int verbatimIdentifier = 403;
        public const int outKeyword = 404;
        public const int refKeyword = 405;
        public const int typeOf = 406;
        public const int nameOf = 407;
        public const int defaultOf = 408;
        public const int newKeyword = 409;
        public const int stringType = 410;
        public const int boolType = 411;
        public const int charType = 412;
        public const int floatType = 413;
        public const int doubleType = 414;
        public const int decimalType = 415;
        public const int sbyteType = 416;
        public const int byteType = 417;
        public const int shortType = 418;
        public const int ushortType = 419;
        public const int intType = 420;
        public const int uintType = 421;
        public const int longType = 422;
        public const int ulongType = 423;
        public const int objectType = 424;
        public const int boolLiteral = 425;
        public const int nullLiteral = 426;
        public const int thisRef = 427;
        public const int baseRef = 428;
        public const int verbatimStringLiteral = 429;
        public const int identifier2 = 430;
        public const int stringLiteral = 431;
        public const int characterLiteral = 432;
        public const int lte = 433;
        public const int lt = 434;
        public const int gte = 435;
        public const int gt = 436;
        public const int eqEq = 437;
        public const int notEq = 438;
        public const int eq = 439;
        public const int inc = 440;
        public const int addAssign = 441;
        public const int add = 442;
        public const int dec = 443;
        public const int subAssign = 444;
        public const int sub = 445;
        public const int mulAssign = 446;
        public const int mul = 447;
        public const int divAssign = 448;
        public const int div = 449;
        public const int modAssign = 450;
        public const int mod = 451;
        public const int and = 452;
        public const int bitwiseAndAssign = 453;
        public const int bitwiseAnd = 454;
        public const int or = 455;
        public const int bitwiseOrAssign = 456;
        public const int bitwiseOr = 457;
        public const int not = 458;
        public const int lbracket = 459;
        public const int rbracket = 460;
        public const int lparen = 461;
        public const int rparen = 462;
        public const int lbrace = 463;
        public const int rbrace = 464;
        public const int comma = 465;
        public const int dot = 467;
        public const int integerLiteral = 468;
        public const int floatLiteral = 469;
        public const int returnKeyword = 477;
        public const int semi = 481;
        public const int colon = 483;
        public const int assemblyKeyword = 487;
        public const int voidType = 488;
        public const int partialKeyword = 489;
        public const int classKeyword = 490;
        public const int enumKeyword = 491;
        public const int structKeyword = 492;
        public const int interfaceKeyword = 493;
        public const int getKeyword = 494;
        public const int setKeyword = 495;
        public const int eventKeyword = 496;
        public const int publicKeyword = 497;
        public const int privateKeyword = 498;
        public const int protectedKeyword = 499;
        public const int internalKeyword = 500;
        public const int staticKeyword = 501;
        public const int abstractKeyword = 502;
        public const int constKeyword = 503;
        public const int overrideKeyword = 504;
        public const int whereKeyword = 505;
        internal static ParseNode ParseCustomAttributeArg(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeArg -> Identifier eq Expression
            // CustomAttributeArg -> Expression
            if ((((ExpressionParser.verbatimIdentifier == context.SymbolId) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        && TypeDeclParser.WhereCustomAttributeArg(context.GetLookAhead(true)))) {
                ParserContext context2__;
                int advanceCount__ = 0;
                System.Exception lastExcept = null;
                context2__ = context.GetLookAhead();
                context2__.EnsureStarted();
                // CustomAttributeArg -> Identifier eq Expression
                try {
                    if ((((ExpressionParser.verbatimIdentifier == context2__.SymbolId) 
                                || (ExpressionParser.identifier2 == context2__.SymbolId)) 
                                && TypeDeclParser.WhereCustomAttributeArg(context2__.GetLookAhead(true)))) {
                        System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                        children.AddRange(ExpressionParser.ParseIdentifier(context2__).Children);
                        if ((false 
                                    == (ExpressionParser.eq == context2__.SymbolId))) {
                            context2__.Error("Expecting eq at line {0}, column {1}, position {2}", context2__.Line, context2__.Column, context2__.Position);
                        }
                        children.Add(new ParseNode(ExpressionParser.eq, "eq", context2__.Value, context2__.Line, context2__.Column, context2__.Position));
                        context2__.Advance();
                        children.Add(ExpressionParser.ParseExpression(context2__));
                        ExpressionParser.ParseIdentifier(context);
                        context.Advance();
                        ExpressionParser.ParseExpression(context);
                        return new ParseNode(TypeDeclParser.CustomAttributeArg, "CustomAttributeArg", children.ToArray(), line__, column__, position__);
                    }
                    context.Error("Expecting verbatimIdentifier or identifier");
                }
                catch (SyntaxException ex) {
                    if ((context2__.AdvanceCount > advanceCount__)) {
                        lastExcept = ex;
                        advanceCount__ = context2__.AdvanceCount;
                    }
                }
                finally {

                }
                context2__ = context.GetLookAhead();
                context2__.EnsureStarted();
                // CustomAttributeArg -> Expression
                try {
                    if ((((ExpressionParser.verbatimIdentifier == context2__.SymbolId) 
                                || (ExpressionParser.identifier2 == context2__.SymbolId)) 
                                && TypeDeclParser.WhereCustomAttributeArg(context2__.GetLookAhead(true)))) {
                        ParseNode[] children = new ParseNode[1];
                        children[0] = ExpressionParser.ParseExpression(context2__);
                        ExpressionParser.ParseExpression(context);
                        return new ParseNode(TypeDeclParser.CustomAttributeArg, "CustomAttributeArg", children, line__, column__, position__);
                    }
                    context.Error("Expecting verbatimIdentifier or identifier");
                }
                catch (SyntaxException ex) {
                    if ((context2__.AdvanceCount > advanceCount__)) {
                        lastExcept = ex;
                        advanceCount__ = context2__.AdvanceCount;
                    }
                }
                finally {

                }
                throw lastExcept;
            }
            // CustomAttributeArg -> Expression
            if ((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        && TypeDeclParser.WhereCustomAttributeArg(context.GetLookAhead(true)))) {
                ParseNode[] children = new ParseNode[1];
                children[0] = ExpressionParser.ParseExpression(context);
                return new ParseNode(TypeDeclParser.CustomAttributeArg, "CustomAttributeArg", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Identifier or Expression at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static bool WhereCustomAttributeArg(ParserContext context) {
            return true;
        }
        internal static ParseNode ParseCustomAttributeTarget(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeTarget -> assemblyKeyword colon
            if ((TypeDeclParser.assemblyKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (TypeDeclParser.assemblyKeyword == context.SymbolId))) {
                    context.Error("Expecting assemblyKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(TypeDeclParser.assemblyKeyword, "assemblyKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                if ((false 
                            == (StatementParser.colon == context.SymbolId))) {
                    context.Error("Expecting colon at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(StatementParser.colon, "colon", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.CustomAttributeTarget, "CustomAttributeTarget", children, line__, column__, position__);
            }
            // CustomAttributeTarget -> returnKeyword colon
            if ((StatementParser.returnKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (StatementParser.returnKeyword == context.SymbolId))) {
                    context.Error("Expecting returnKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(StatementParser.returnKeyword, "returnKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                if ((false 
                            == (StatementParser.colon == context.SymbolId))) {
                    context.Error("Expecting colon at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(StatementParser.colon, "colon", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.CustomAttributeTarget, "CustomAttributeTarget", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting assemblyKeyword or returnKeyword at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroups(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroups -> CustomAttributeGroupList3
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(TypeDeclParser.ParseCustomAttributeGroupList3(context).Children);
                return new ParseNode(TypeDeclParser.CustomAttributeGroups, "CustomAttributeGroups", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroupList3 at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeAttributes(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeAttributes -> TypeAttributesList
            if ((((TypeDeclParser.publicKeyword == context.SymbolId) 
                        || (TypeDeclParser.internalKeyword == context.SymbolId)) 
                        || (TypeDeclParser.privateKeyword == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(TypeDeclParser.ParseTypeAttributesList(context).Children);
                return new ParseNode(TypeDeclParser.TypeAttributes, "TypeAttributes", children.ToArray(), line__, column__, position__);
            }
            // TypeAttributes ->
            if ((((((TypeDeclParser.classKeyword == context.SymbolId) 
                        || (TypeDeclParser.enumKeyword == context.SymbolId)) 
                        || (TypeDeclParser.structKeyword == context.SymbolId)) 
                        || (TypeDeclParser.interfaceKeyword == context.SymbolId)) 
                        || (TypeDeclParser.partialKeyword == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(TypeDeclParser.TypeAttributes, "TypeAttributes", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting TypeAttributesList at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseEnumPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // EnumPart -> lbrace EnumFields rbrace
            if ((ExpressionParser.lbrace == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.lbrace == context.SymbolId))) {
                    context.Error("Expecting lbrace at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.lbrace, "lbrace", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(TypeDeclParser.ParseEnumFields(context).Children);
                if ((false 
                            == (ExpressionParser.rbrace == context.SymbolId))) {
                    context.Error("Expecting rbrace at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.rbrace, "rbrace", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                return new ParseNode(TypeDeclParser.EnumPart, "EnumPart", children.ToArray(), line__, column__, position__);
            }
            // EnumPart -> colon Type lbrace EnumFields rbrace
            if ((StatementParser.colon == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (StatementParser.colon == context.SymbolId))) {
                    context.Error("Expecting colon at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(StatementParser.colon, "colon", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseType(context));
                if ((false 
                            == (ExpressionParser.lbrace == context.SymbolId))) {
                    context.Error("Expecting lbrace at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.lbrace, "lbrace", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(TypeDeclParser.ParseEnumFields(context).Children);
                if ((false 
                            == (ExpressionParser.rbrace == context.SymbolId))) {
                    context.Error("Expecting rbrace at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.rbrace, "rbrace", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                return new ParseNode(TypeDeclParser.EnumPart, "EnumPart", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting lbrace or colon at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseEnumFields(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // EnumFields ->
            if ((ExpressionParser.rbrace == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(TypeDeclParser.EnumFields, "EnumFields", children, line__, column__, position__);
            }
            // EnumFields -> EnumField EnumFieldsPart
            if (((ExpressionParser.verbatimIdentifier == context.SymbolId) 
                        || (ExpressionParser.identifier2 == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(TypeDeclParser.ParseEnumField(context));
                children.AddRange(TypeDeclParser.ParseEnumFieldsPart(context).Children);
                return new ParseNode(TypeDeclParser.EnumFields, "EnumFields", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting EnumField at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseEnumField(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // EnumField -> Identifier eq Expression
            if (((ExpressionParser.verbatimIdentifier == context.SymbolId) 
                        || (ExpressionParser.identifier2 == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                if ((false 
                            == (ExpressionParser.eq == context.SymbolId))) {
                    context.Error("Expecting eq at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.eq, "eq", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseExpression(context));
                return new ParseNode(TypeDeclParser.EnumField, "EnumField", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Identifier at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseWhere(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // Where -> whereKeyword WhereClauses
            if ((TypeDeclParser.whereKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (TypeDeclParser.whereKeyword == context.SymbolId))) {
                    context.Error("Expecting whereKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(TypeDeclParser.whereKeyword, "whereKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[1] = TypeDeclParser.ParseWhereClauses(context);
                return new ParseNode(TypeDeclParser.Where, "Where", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting whereKeyword at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseWhereClausePart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // WhereClausePart -> Type
            if (((((((((((((((((ExpressionParser.boolType == context.SymbolId) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                ParseNode[] children = new ParseNode[1];
                children[0] = ExpressionParser.ParseType(context);
                return new ParseNode(TypeDeclParser.WhereClausePart, "WhereClausePart", children, line__, column__, position__);
            }
            // WhereClausePart -> newKeyword lparen rparen
            if ((ExpressionParser.newKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[3];
                if ((false 
                            == (ExpressionParser.newKeyword == context.SymbolId))) {
                    context.Error("Expecting newKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.newKeyword, "newKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                if ((false 
                            == (ExpressionParser.lparen == context.SymbolId))) {
                    context.Error("Expecting lparen at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.lparen, "lparen", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[2] = new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.WhereClausePart, "WhereClausePart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Type or newKeyword at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseBaseType(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // BaseType -> Type
            if (((((((((((((((((ExpressionParser.boolType == context.SymbolId) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                ParseNode[] children = new ParseNode[1];
                children[0] = ExpressionParser.ParseType(context);
                return new ParseNode(TypeDeclParser.BaseType, "BaseType", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Type at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeParams(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeParams ->
            if (((((StatementParser.colon == context.SymbolId) 
                        || (TypeDeclParser.whereKeyword == context.SymbolId)) 
                        || (ExpressionParser.lbrace == context.SymbolId)) 
                        || (ExpressionParser.gt == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(TypeDeclParser.TypeParams, "TypeParams", children, line__, column__, position__);
            }
            // TypeParams -> lt TypeParamsPart3
            if ((ExpressionParser.lt == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.lt == context.SymbolId))) {
                    context.Error("Expecting lt at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.lt, "lt", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(TypeDeclParser.ParseTypeParamsPart3(context).Children);
                return new ParseNode(TypeDeclParser.TypeParams, "TypeParams", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting lt at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseEnum(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // Enum -> MemberAttributes enumKeyword Identifier EnumPart
            if (((((((((ExpressionParser.newKeyword == context.SymbolId) 
                        || (TypeDeclParser.constKeyword == context.SymbolId)) 
                        || (TypeDeclParser.publicKeyword == context.SymbolId)) 
                        || (TypeDeclParser.protectedKeyword == context.SymbolId)) 
                        || (TypeDeclParser.internalKeyword == context.SymbolId)) 
                        || (TypeDeclParser.privateKeyword == context.SymbolId)) 
                        || (TypeDeclParser.staticKeyword == context.SymbolId)) 
                        || (TypeDeclParser.overrideKeyword == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(TypeDeclParser.ParseMemberAttributes(context));
                if ((false 
                            == (TypeDeclParser.enumKeyword == context.SymbolId))) {
                    context.Error("Expecting enumKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(TypeDeclParser.enumKeyword, "enumKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                children.AddRange(TypeDeclParser.ParseEnumPart(context).Children);
                return new ParseNode(TypeDeclParser.Enum, "Enum", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAttributes at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseStruct(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // Struct -> MemberAttributes structKeyword Identifier TypeParams TypeDeclPart
            if (((((((((ExpressionParser.newKeyword == context.SymbolId) 
                        || (TypeDeclParser.constKeyword == context.SymbolId)) 
                        || (TypeDeclParser.publicKeyword == context.SymbolId)) 
                        || (TypeDeclParser.protectedKeyword == context.SymbolId)) 
                        || (TypeDeclParser.internalKeyword == context.SymbolId)) 
                        || (TypeDeclParser.privateKeyword == context.SymbolId)) 
                        || (TypeDeclParser.staticKeyword == context.SymbolId)) 
                        || (TypeDeclParser.overrideKeyword == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(TypeDeclParser.ParseMemberAttributes(context));
                if ((false 
                            == (TypeDeclParser.structKeyword == context.SymbolId))) {
                    context.Error("Expecting structKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(TypeDeclParser.structKeyword, "structKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                children.Add(TypeDeclParser.ParseTypeParams(context));
                children.Add(TypeDeclParser.ParseTypeDeclPart(context));
                return new ParseNode(TypeDeclParser.Struct, "Struct", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAttributes at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseClass(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // Class -> MemberAttributes classKeyword Identifier TypeParams TypeDeclPart
            if (((((((((ExpressionParser.newKeyword == context.SymbolId) 
                        || (TypeDeclParser.constKeyword == context.SymbolId)) 
                        || (TypeDeclParser.publicKeyword == context.SymbolId)) 
                        || (TypeDeclParser.protectedKeyword == context.SymbolId)) 
                        || (TypeDeclParser.internalKeyword == context.SymbolId)) 
                        || (TypeDeclParser.privateKeyword == context.SymbolId)) 
                        || (TypeDeclParser.staticKeyword == context.SymbolId)) 
                        || (TypeDeclParser.overrideKeyword == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(TypeDeclParser.ParseMemberAttributes(context));
                if ((false 
                            == (TypeDeclParser.classKeyword == context.SymbolId))) {
                    context.Error("Expecting classKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(TypeDeclParser.classKeyword, "classKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                children.Add(TypeDeclParser.ParseTypeParams(context));
                children.Add(TypeDeclParser.ParseTypeDeclPart(context));
                return new ParseNode(TypeDeclParser.Class, "Class", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAttributes at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAttribute(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAttribute -> newKeyword
            if ((ExpressionParser.newKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.newKeyword == context.SymbolId))) {
                    context.Error("Expecting newKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.newKeyword, "newKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.MemberAttribute, "MemberAttribute", children, line__, column__, position__);
            }
            // MemberAttribute -> constKeyword
            if ((TypeDeclParser.constKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (TypeDeclParser.constKeyword == context.SymbolId))) {
                    context.Error("Expecting constKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(TypeDeclParser.constKeyword, "constKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.MemberAttribute, "MemberAttribute", children, line__, column__, position__);
            }
            // MemberAttribute -> publicKeyword
            if ((TypeDeclParser.publicKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (TypeDeclParser.publicKeyword == context.SymbolId))) {
                    context.Error("Expecting publicKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(TypeDeclParser.publicKeyword, "publicKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.MemberAttribute, "MemberAttribute", children, line__, column__, position__);
            }
            // MemberAttribute -> protectedKeyword
            if ((TypeDeclParser.protectedKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (TypeDeclParser.protectedKeyword == context.SymbolId))) {
                    context.Error("Expecting protectedKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(TypeDeclParser.protectedKeyword, "protectedKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.MemberAttribute, "MemberAttribute", children, line__, column__, position__);
            }
            // MemberAttribute -> internalKeyword
            if ((TypeDeclParser.internalKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (TypeDeclParser.internalKeyword == context.SymbolId))) {
                    context.Error("Expecting internalKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(TypeDeclParser.internalKeyword, "internalKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.MemberAttribute, "MemberAttribute", children, line__, column__, position__);
            }
            // MemberAttribute -> privateKeyword
            if ((TypeDeclParser.privateKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (TypeDeclParser.privateKeyword == context.SymbolId))) {
                    context.Error("Expecting privateKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(TypeDeclParser.privateKeyword, "privateKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.MemberAttribute, "MemberAttribute", children, line__, column__, position__);
            }
            // MemberAttribute -> staticKeyword
            if ((TypeDeclParser.staticKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (TypeDeclParser.staticKeyword == context.SymbolId))) {
                    context.Error("Expecting staticKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(TypeDeclParser.staticKeyword, "staticKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.MemberAttribute, "MemberAttribute", children, line__, column__, position__);
            }
            // MemberAttribute -> overrideKeyword
            if ((TypeDeclParser.overrideKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (TypeDeclParser.overrideKeyword == context.SymbolId))) {
                    context.Error("Expecting overrideKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(TypeDeclParser.overrideKeyword, "overrideKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.MemberAttribute, "MemberAttribute", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting newKeyword, constKeyword, publicKeyword, protectedKeyword, internalKeyw" +
                        "ord, privateKeyword, staticKeyword, or overrideKeyword at line {0}, column {1}, " +
                        "position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAttributes(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAttributes -> MemberAttributeList
            if (((((((((ExpressionParser.newKeyword == context.SymbolId) 
                        || (TypeDeclParser.constKeyword == context.SymbolId)) 
                        || (TypeDeclParser.publicKeyword == context.SymbolId)) 
                        || (TypeDeclParser.protectedKeyword == context.SymbolId)) 
                        || (TypeDeclParser.internalKeyword == context.SymbolId)) 
                        || (TypeDeclParser.privateKeyword == context.SymbolId)) 
                        || (TypeDeclParser.staticKeyword == context.SymbolId)) 
                        || (TypeDeclParser.overrideKeyword == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(TypeDeclParser.ParseMemberAttributeList(context).Children);
                return new ParseNode(TypeDeclParser.MemberAttributes, "MemberAttributes", children.ToArray(), line__, column__, position__);
            }
            // MemberAttributes ->
            if (((((TypeDeclParser.enumKeyword == context.SymbolId) 
                        || (TypeDeclParser.structKeyword == context.SymbolId)) 
                        || (TypeDeclParser.classKeyword == context.SymbolId)) 
                        || (TypeDeclParser.interfaceKeyword == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(TypeDeclParser.MemberAttributes, "MemberAttributes", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAttributeList at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMethodParamList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MethodParamList ->
            if ((ExpressionParser.rparen == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(TypeDeclParser.MethodParamList, "MethodParamList", children, line__, column__, position__);
            }
            // MethodParamList -> MethodParam MethodParamListPart
            if (((((((((((((((((((ExpressionParser.outKeyword == context.SymbolId) 
                        || (ExpressionParser.refKeyword == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(TypeDeclParser.ParseMethodParam(context));
                children.AddRange(TypeDeclParser.ParseMethodParamListPart(context).Children);
                return new ParseNode(TypeDeclParser.MethodParamList, "MethodParamList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MethodParam at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMethodParam(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MethodParam -> outKeyword Type Identifier
            if ((ExpressionParser.outKeyword == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.outKeyword == context.SymbolId))) {
                    context.Error("Expecting outKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.outKeyword, "outKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseType(context));
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                return new ParseNode(TypeDeclParser.MethodParam, "MethodParam", children.ToArray(), line__, column__, position__);
            }
            // MethodParam -> refKeyword Type Identifier
            if ((ExpressionParser.refKeyword == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.refKeyword == context.SymbolId))) {
                    context.Error("Expecting refKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.refKeyword, "refKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseType(context));
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                return new ParseNode(TypeDeclParser.MethodParam, "MethodParam", children.ToArray(), line__, column__, position__);
            }
            // MethodParam -> Type Identifier
            if (((((((((((((((((ExpressionParser.boolType == context.SymbolId) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseType(context));
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                return new ParseNode(TypeDeclParser.MethodParam, "MethodParam", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting outKeyword, refKeyword, or Type at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseParamList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ParamList ->
            if (((ExpressionParser.rparen == context.SymbolId) 
                        || (ExpressionParser.rbracket == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(TypeDeclParser.ParamList, "ParamList", children, line__, column__, position__);
            }
            // ParamList -> Param ParamListPart
            if (((((((((((((((((ExpressionParser.boolType == context.SymbolId) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(TypeDeclParser.ParseParam(context));
                children.AddRange(TypeDeclParser.ParseParamListPart(context).Children);
                return new ParseNode(TypeDeclParser.ParamList, "ParamList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Param at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseParam(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // Param -> Type Identifier
            if (((((((((((((((((ExpressionParser.boolType == context.SymbolId) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseType(context));
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                return new ParseNode(TypeDeclParser.Param, "Param", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Type at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseNamespaceNameList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // NamespaceNameList -> dot Identifier NamespaceNameListRightAssoc
            if ((ExpressionParser.dot == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.dot == context.SymbolId))) {
                    context.Error("Expecting dot at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.dot, "dot", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                children.AddRange(TypeDeclParser.ParseNamespaceNameListRightAssoc(context).Children);
                return new ParseNode(TypeDeclParser.NamespaceNameList, "NamespaceNameList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting dot at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseRelationalExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // RelationalExpressionList -> lt TermExpression RelationalExpressionListRightAssoc RelationalExpressionListRightAssoc2 RelationalExpressionListRightAssoc3
            if ((ExpressionParser.lt == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.lt == context.SymbolId))) {
                    context.Error("Expecting lt at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.lt, "lt", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.TermExpression == context.SymbolId))) {
                    context.Error("Expecting TermExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.TermExpression, "TermExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc3(context).Children);
                return new ParseNode(ExpressionParser.RelationalExpressionList, "RelationalExpressionList", children.ToArray(), line__, column__, position__);
            }
            // RelationalExpressionList -> lte TermExpression RelationalExpressionListRightAssoc RelationalExpressionListRightAssoc2 RelationalExpressionListRightAssoc3
            if ((ExpressionParser.lte == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.lte == context.SymbolId))) {
                    context.Error("Expecting lte at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.lte, "lte", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.TermExpression == context.SymbolId))) {
                    context.Error("Expecting TermExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.TermExpression, "TermExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc3(context).Children);
                return new ParseNode(ExpressionParser.RelationalExpressionList, "RelationalExpressionList", children.ToArray(), line__, column__, position__);
            }
            // RelationalExpressionList -> gt TermExpression RelationalExpressionListRightAssoc RelationalExpressionListRightAssoc2 RelationalExpressionListRightAssoc3
            if ((ExpressionParser.gt == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.gt == context.SymbolId))) {
                    context.Error("Expecting gt at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.gt, "gt", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.TermExpression == context.SymbolId))) {
                    context.Error("Expecting TermExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.TermExpression, "TermExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc3(context).Children);
                return new ParseNode(ExpressionParser.RelationalExpressionList, "RelationalExpressionList", children.ToArray(), line__, column__, position__);
            }
            // RelationalExpressionList -> gte TermExpression RelationalExpressionListRightAssoc RelationalExpressionListRightAssoc2 RelationalExpressionListRightAssoc3
            if ((ExpressionParser.gte == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.gte == context.SymbolId))) {
                    context.Error("Expecting gte at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.gte, "gte", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.TermExpression == context.SymbolId))) {
                    context.Error("Expecting TermExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.TermExpression, "TermExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc3(context).Children);
                return new ParseNode(ExpressionParser.RelationalExpressionList, "RelationalExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting lt, lte, gt, or gte at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseEqualityExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // EqualityExpressionList -> eqEq RelationalExpression EqualityExpressionListRightAssoc EqualityExpressionListRightAssoc2
            if ((ExpressionParser.eqEq == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.eqEq == context.SymbolId))) {
                    context.Error("Expecting eqEq at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.eqEq, "eqEq", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.RelationalExpression == context.SymbolId))) {
                    context.Error("Expecting RelationalExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.RelationalExpression, "RelationalExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseEqualityExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseEqualityExpressionListRightAssoc2(context).Children);
                return new ParseNode(ExpressionParser.EqualityExpressionList, "EqualityExpressionList", children.ToArray(), line__, column__, position__);
            }
            // EqualityExpressionList -> notEq RelationalExpression EqualityExpressionListRightAssoc EqualityExpressionListRightAssoc2
            if ((ExpressionParser.notEq == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.notEq == context.SymbolId))) {
                    context.Error("Expecting notEq at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.notEq, "notEq", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.RelationalExpression == context.SymbolId))) {
                    context.Error("Expecting RelationalExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.RelationalExpression, "RelationalExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseEqualityExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseEqualityExpressionListRightAssoc2(context).Children);
                return new ParseNode(ExpressionParser.EqualityExpressionList, "EqualityExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting eqEq or notEq at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseBitwiseAndExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // BitwiseAndExpressionList -> bitwiseAnd EqualityExpression BitwiseAndExpressionListRightAssoc
            if ((ExpressionParser.bitwiseAnd == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.bitwiseAnd == context.SymbolId))) {
                    context.Error("Expecting bitwiseAnd at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.bitwiseAnd, "bitwiseAnd", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.EqualityExpression == context.SymbolId))) {
                    context.Error("Expecting EqualityExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.EqualityExpression, "EqualityExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseBitwiseAndExpressionListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.BitwiseAndExpressionList, "BitwiseAndExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting bitwiseAnd at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseBitwiseOrExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // BitwiseOrExpressionList -> bitwiseOr BitwiseAndExpression BitwiseOrExpressionListRightAssoc
            if ((ExpressionParser.bitwiseOr == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.bitwiseOr == context.SymbolId))) {
                    context.Error("Expecting bitwiseOr at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.bitwiseOr, "bitwiseOr", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.BitwiseAndExpression == context.SymbolId))) {
                    context.Error("Expecting BitwiseAndExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.BitwiseAndExpression, "BitwiseAndExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseBitwiseOrExpressionListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.BitwiseOrExpressionList, "BitwiseOrExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting bitwiseOr at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseAndExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AndExpressionList -> and BitwiseOrExpression AndExpressionListRightAssoc
            if ((ExpressionParser.and == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.and == context.SymbolId))) {
                    context.Error("Expecting and at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.and, "and", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.BitwiseOrExpression == context.SymbolId))) {
                    context.Error("Expecting BitwiseOrExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.BitwiseOrExpression, "BitwiseOrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAndExpressionListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.AndExpressionList, "AndExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting and at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseOrExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // OrExpressionList -> or AndExpression OrExpressionListRightAssoc
            if ((ExpressionParser.or == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.or == context.SymbolId))) {
                    context.Error("Expecting or at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.or, "or", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.AndExpression == context.SymbolId))) {
                    context.Error("Expecting AndExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.AndExpression, "AndExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseOrExpressionListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.OrExpressionList, "OrExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting or at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseAssignExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AssignExpressionList -> eq OrExpression AssignExpressionListRightAssoc AssignExpressionListRightAssoc2 AssignExpressionListRightAssoc3 AssignExpressionListRightAssoc4 AssignExpressionListRightAssoc5
            if ((ExpressionParser.eq == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.eq == context.SymbolId))) {
                    context.Error("Expecting eq at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.eq, "eq", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(ExpressionParser.AssignExpressionList, "AssignExpressionList", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionList -> addAssign OrExpression AssignExpressionListRightAssoc AssignExpressionListRightAssoc2 AssignExpressionListRightAssoc3 AssignExpressionListRightAssoc4 AssignExpressionListRightAssoc5
            if ((ExpressionParser.addAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.addAssign == context.SymbolId))) {
                    context.Error("Expecting addAssign at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.addAssign, "addAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(ExpressionParser.AssignExpressionList, "AssignExpressionList", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionList -> subAssign OrExpression AssignExpressionListRightAssoc AssignExpressionListRightAssoc2 AssignExpressionListRightAssoc3 AssignExpressionListRightAssoc4 AssignExpressionListRightAssoc5
            if ((ExpressionParser.subAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.subAssign == context.SymbolId))) {
                    context.Error("Expecting subAssign at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.subAssign, "subAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(ExpressionParser.AssignExpressionList, "AssignExpressionList", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionList -> mulAssign OrExpression AssignExpressionListRightAssoc AssignExpressionListRightAssoc2 AssignExpressionListRightAssoc3 AssignExpressionListRightAssoc4 AssignExpressionListRightAssoc5
            if ((ExpressionParser.mulAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.mulAssign == context.SymbolId))) {
                    context.Error("Expecting mulAssign at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.mulAssign, "mulAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(ExpressionParser.AssignExpressionList, "AssignExpressionList", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionList -> divAssign OrExpression AssignExpressionListRightAssoc AssignExpressionListRightAssoc2 AssignExpressionListRightAssoc3 AssignExpressionListRightAssoc4 AssignExpressionListRightAssoc5
            if ((ExpressionParser.divAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.divAssign == context.SymbolId))) {
                    context.Error("Expecting divAssign at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.divAssign, "divAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(ExpressionParser.AssignExpressionList, "AssignExpressionList", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionList -> modAssign OrExpression AssignExpressionListRightAssoc AssignExpressionListRightAssoc2 AssignExpressionListRightAssoc3 AssignExpressionListRightAssoc4 AssignExpressionListRightAssoc5
            if ((ExpressionParser.modAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.modAssign == context.SymbolId))) {
                    context.Error("Expecting modAssign at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.modAssign, "modAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(ExpressionParser.AssignExpressionList, "AssignExpressionList", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionList -> bitwiseAndAssign OrExpression AssignExpressionListRightAssoc AssignExpressionListRightAssoc2 AssignExpressionListRightAssoc3 AssignExpressionListRightAssoc4 AssignExpressionListRightAssoc5
            if ((ExpressionParser.bitwiseAndAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.bitwiseAndAssign == context.SymbolId))) {
                    context.Error("Expecting bitwiseAndAssign at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.bitwiseAndAssign, "bitwiseAndAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(ExpressionParser.AssignExpressionList, "AssignExpressionList", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionList -> bitwiseOrAssign OrExpression AssignExpressionListRightAssoc AssignExpressionListRightAssoc2 AssignExpressionListRightAssoc3 AssignExpressionListRightAssoc4 AssignExpressionListRightAssoc5
            if ((ExpressionParser.bitwiseOrAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.bitwiseOrAssign == context.SymbolId))) {
                    context.Error("Expecting bitwiseOrAssign at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.bitwiseOrAssign, "bitwiseOrAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(ExpressionParser.AssignExpressionList, "AssignExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting eq, addAssign, subAssign, mulAssign, divAssign, modAssign, bitwiseAndAs" +
                        "sign, or bitwiseOrAssign at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTermExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TermExpressionList -> add FactorExpression TermExpressionListRightAssoc TermExpressionListRightAssoc2
            if ((ExpressionParser.add == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.add == context.SymbolId))) {
                    context.Error("Expecting add at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.add, "add", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.FactorExpression == context.SymbolId))) {
                    context.Error("Expecting FactorExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.FactorExpression, "FactorExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseTermExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseTermExpressionListRightAssoc2(context).Children);
                return new ParseNode(ExpressionParser.TermExpressionList, "TermExpressionList", children.ToArray(), line__, column__, position__);
            }
            // TermExpressionList -> sub FactorExpression TermExpressionListRightAssoc TermExpressionListRightAssoc2
            if ((ExpressionParser.sub == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.sub == context.SymbolId))) {
                    context.Error("Expecting sub at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.sub, "sub", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.FactorExpression == context.SymbolId))) {
                    context.Error("Expecting FactorExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.FactorExpression, "FactorExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseTermExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseTermExpressionListRightAssoc2(context).Children);
                return new ParseNode(ExpressionParser.TermExpressionList, "TermExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting add or sub at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseFactorExpressionList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // FactorExpressionList -> mul UnaryExpression FactorExpressionListRightAssoc FactorExpressionListRightAssoc2 FactorExpressionListRightAssoc3
            if ((ExpressionParser.mul == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.mul == context.SymbolId))) {
                    context.Error("Expecting mul at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.mul, "mul", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.UnaryExpression == context.SymbolId))) {
                    context.Error("Expecting UnaryExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.UnaryExpression, "UnaryExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc3(context).Children);
                return new ParseNode(ExpressionParser.FactorExpressionList, "FactorExpressionList", children.ToArray(), line__, column__, position__);
            }
            // FactorExpressionList -> div UnaryExpression FactorExpressionListRightAssoc FactorExpressionListRightAssoc2 FactorExpressionListRightAssoc3
            if ((ExpressionParser.div == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.div == context.SymbolId))) {
                    context.Error("Expecting div at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.div, "div", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.UnaryExpression == context.SymbolId))) {
                    context.Error("Expecting UnaryExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.UnaryExpression, "UnaryExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc3(context).Children);
                return new ParseNode(ExpressionParser.FactorExpressionList, "FactorExpressionList", children.ToArray(), line__, column__, position__);
            }
            // FactorExpressionList -> mod UnaryExpression FactorExpressionListRightAssoc FactorExpressionListRightAssoc2 FactorExpressionListRightAssoc3
            if ((ExpressionParser.mod == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.mod == context.SymbolId))) {
                    context.Error("Expecting mod at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.mod, "mod", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.UnaryExpression == context.SymbolId))) {
                    context.Error("Expecting UnaryExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.UnaryExpression, "UnaryExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc(context).Children);
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc2(context).Children);
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc3(context).Children);
                return new ParseNode(ExpressionParser.FactorExpressionList, "FactorExpressionList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting mul, div, or mod at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberInvokeRefList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberInvokeRefList -> comma MethodArg MemberInvokeRefListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.MethodArg == context.SymbolId))) {
                    context.Error("Expecting MethodArg at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.MethodArg, "MethodArg", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberInvokeRefListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberInvokeRefList, "MemberInvokeRefList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberIndexerRefList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberIndexerRefList -> comma Expression MemberIndexerRefListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseExpression(context));
                children.AddRange(ExpressionParser.ParseMemberIndexerRefListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberIndexerRefList, "MemberIndexerRefList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeBaseList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeBaseList -> dot identifier TypeBaseListRightAssoc
            if ((ExpressionParser.dot == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.dot == context.SymbolId))) {
                    context.Error("Expecting dot at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.dot, "dot", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.identifier2 == context.SymbolId))) {
                    context.Error("Expecting identifier at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.identifier2, "identifier", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseTypeBaseListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.TypeBaseList, "TypeBaseList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting dot at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeArraySpecList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeArraySpecList -> TypeArraySpec TypeArraySpecListRightAssoc
            if ((ExpressionParser.TypeArraySpec == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.TypeArraySpec == context.SymbolId))) {
                    context.Error("Expecting TypeArraySpec at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.TypeArraySpec, "TypeArraySpec", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseTypeArraySpecListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.TypeArraySpecList, "TypeArraySpecList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting TypeArraySpec at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeGenericPartList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeGenericPartList -> comma Type TypeGenericPartListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseType(context));
                children.AddRange(ExpressionParser.ParseTypeGenericPartListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.TypeGenericPartList, "TypeGenericPartList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeArraySpecRankList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeArraySpecRankList -> TypeArraySpecRank TypeArraySpecRankListRightAssoc
            if ((ExpressionParser.TypeArraySpecRank == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.TypeArraySpecRank == context.SymbolId))) {
                    context.Error("Expecting TypeArraySpecRank at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.TypeArraySpecRank, "TypeArraySpecRank", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseTypeArraySpecRankListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.TypeArraySpecRankList, "TypeArraySpecRankList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting TypeArraySpecRank at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseNewObjectPartList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // NewObjectPartList -> comma Expression NewObjectPartListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseExpression(context));
                children.AddRange(ExpressionParser.ParseNewObjectPartListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.NewObjectPartList, "NewObjectPartList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseArraySpecExpressionListList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ArraySpecExpressionListList -> comma Expression ArraySpecExpressionListListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseExpression(context));
                children.AddRange(ExpressionParser.ParseArraySpecExpressionListListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.ArraySpecExpressionListList, "ArraySpecExpressionListList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseArrayInitializerList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ArrayInitializerList -> comma Expression ArrayInitializerListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseExpression(context));
                children.AddRange(ExpressionParser.ParseArrayInitializerListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.ArrayInitializerList, "ArrayInitializerList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList -> MemberAnyRef MemberAnyRefListRightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList, "MemberAnyRefList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList2 -> MemberAnyRef MemberAnyRefList2RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList2RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList2, "MemberAnyRefList2", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList3(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList3 -> MemberAnyRef MemberAnyRefList3RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList3RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList3, "MemberAnyRefList3", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList4(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList4 -> MemberAnyRef MemberAnyRefList4RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList4RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList4, "MemberAnyRefList4", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList5(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList5 -> MemberAnyRef MemberAnyRefList5RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList5RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList5, "MemberAnyRefList5", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList6(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList6 -> MemberAnyRef MemberAnyRefList6RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList6RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList6, "MemberAnyRefList6", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList7(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList7 -> MemberAnyRef MemberAnyRefList7RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList7RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList7, "MemberAnyRefList7", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList8(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList8 -> MemberAnyRef MemberAnyRefList8RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList8RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList8, "MemberAnyRefList8", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList9(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList9 -> MemberAnyRef MemberAnyRefList9RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList9RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList9, "MemberAnyRefList9", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList10(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList10 -> MemberAnyRef MemberAnyRefList10RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList10RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList10, "MemberAnyRefList10", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList11(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList11 -> MemberAnyRef MemberAnyRefList11RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList11RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList11, "MemberAnyRefList11", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList12(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList12 -> MemberAnyRef MemberAnyRefList12RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList12RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList12, "MemberAnyRefList12", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList13(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList13 -> MemberAnyRef MemberAnyRefList13RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList13RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList13, "MemberAnyRefList13", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList14(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList14 -> MemberAnyRef MemberAnyRefList14RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList14RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList14, "MemberAnyRefList14", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCatchClauseList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CatchClauseList -> CatchClause CatchClauseListRightAssoc
            if ((StatementParser.CatchClause == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (StatementParser.CatchClause == context.SymbolId))) {
                    context.Error("Expecting CatchClause at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(StatementParser.CatchClause, "CatchClause", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(StatementParser.ParseCatchClauseListRightAssoc(context).Children);
                return new ParseNode(StatementParser.CatchClauseList, "CatchClauseList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CatchClause at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseStatementList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // StatementList -> Statement StatementListRightAssoc
            if ((StatementParser.InnerStatement == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(StatementParser.ParseStatement(context));
                children.AddRange(StatementParser.ParseStatementListRightAssoc(context).Children);
                return new ParseNode(StatementParser.StatementList, "StatementList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Statement at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseStatementList2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // StatementList2 -> Statement StatementList2RightAssoc
            if ((StatementParser.InnerStatement == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(StatementParser.ParseStatement(context));
                children.AddRange(StatementParser.ParseStatementList2RightAssoc(context).Children);
                return new ParseNode(StatementParser.StatementList2, "StatementList2", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Statement at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeArgListList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeArgListList -> comma CustomAttributeArg CustomAttributeArgListListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(TypeDeclParser.ParseCustomAttributeArg(context));
                children.AddRange(TypeDeclParser.ParseCustomAttributeArgListListRightAssoc(context).Children);
                return new ParseNode(TypeDeclParser.CustomAttributeArgListList, "CustomAttributeArgListList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupList -> comma CustomAttribute CustomAttributeGroupListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(TypeDeclParser.ParseCustomAttribute(context));
                children.AddRange(TypeDeclParser.ParseCustomAttributeGroupListRightAssoc(context).Children);
                return new ParseNode(TypeDeclParser.CustomAttributeGroupList, "CustomAttributeGroupList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupList2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupList2 -> comma CustomAttribute CustomAttributeGroupList2RightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(TypeDeclParser.ParseCustomAttribute(context));
                children.AddRange(TypeDeclParser.ParseCustomAttributeGroupList2RightAssoc(context).Children);
                return new ParseNode(TypeDeclParser.CustomAttributeGroupList2, "CustomAttributeGroupList2", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupList3(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupList3 -> CustomAttributeGroup CustomAttributeGroupList3RightAssoc
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(TypeDeclParser.ParseCustomAttributeGroup(context));
                children.AddRange(TypeDeclParser.ParseCustomAttributeGroupList3RightAssoc(context).Children);
                return new ParseNode(TypeDeclParser.CustomAttributeGroupList3, "CustomAttributeGroupList3", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroup at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeAttributesList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeAttributesList -> publicKeyword TypeAttributesListRightAssoc TypeAttributesListRightAssoc2 TypeAttributesListRightAssoc3
            if ((TypeDeclParser.publicKeyword == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (TypeDeclParser.publicKeyword == context.SymbolId))) {
                    context.Error("Expecting publicKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(TypeDeclParser.publicKeyword, "publicKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(TypeDeclParser.ParseTypeAttributesListRightAssoc(context).Children);
                children.AddRange(TypeDeclParser.ParseTypeAttributesListRightAssoc2(context).Children);
                children.AddRange(TypeDeclParser.ParseTypeAttributesListRightAssoc3(context).Children);
                return new ParseNode(TypeDeclParser.TypeAttributesList, "TypeAttributesList", children.ToArray(), line__, column__, position__);
            }
            // TypeAttributesList -> internalKeyword TypeAttributesListRightAssoc TypeAttributesListRightAssoc2 TypeAttributesListRightAssoc3
            if ((TypeDeclParser.internalKeyword == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (TypeDeclParser.internalKeyword == context.SymbolId))) {
                    context.Error("Expecting internalKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(TypeDeclParser.internalKeyword, "internalKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(TypeDeclParser.ParseTypeAttributesListRightAssoc(context).Children);
                children.AddRange(TypeDeclParser.ParseTypeAttributesListRightAssoc2(context).Children);
                children.AddRange(TypeDeclParser.ParseTypeAttributesListRightAssoc3(context).Children);
                return new ParseNode(TypeDeclParser.TypeAttributesList, "TypeAttributesList", children.ToArray(), line__, column__, position__);
            }
            // TypeAttributesList -> privateKeyword TypeAttributesListRightAssoc TypeAttributesListRightAssoc2 TypeAttributesListRightAssoc3
            if ((TypeDeclParser.privateKeyword == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (TypeDeclParser.privateKeyword == context.SymbolId))) {
                    context.Error("Expecting privateKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(TypeDeclParser.privateKeyword, "privateKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(TypeDeclParser.ParseTypeAttributesListRightAssoc(context).Children);
                children.AddRange(TypeDeclParser.ParseTypeAttributesListRightAssoc2(context).Children);
                children.AddRange(TypeDeclParser.ParseTypeAttributesListRightAssoc3(context).Children);
                return new ParseNode(TypeDeclParser.TypeAttributesList, "TypeAttributesList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting publicKeyword, internalKeyword, or privateKeyword at line {0}, column {" +
                        "1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseEnumFieldsList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // EnumFieldsList -> comma EnumField EnumFieldsListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(TypeDeclParser.ParseEnumField(context));
                children.AddRange(TypeDeclParser.ParseEnumFieldsListRightAssoc(context).Children);
                return new ParseNode(TypeDeclParser.EnumFieldsList, "EnumFieldsList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseWhereClauseList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // WhereClauseList -> comma WhereClausePart WhereClauseListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(TypeDeclParser.ParseWhereClausePart(context));
                children.AddRange(TypeDeclParser.ParseWhereClauseListRightAssoc(context).Children);
                return new ParseNode(TypeDeclParser.WhereClauseList, "WhereClauseList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeParamsList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeParamsList -> comma Identifier TypeParamsListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                children.AddRange(TypeDeclParser.ParseTypeParamsListRightAssoc(context).Children);
                return new ParseNode(TypeDeclParser.TypeParamsList, "TypeParamsList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeParamsList2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeParamsList2 -> comma Identifier TypeParamsList2RightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                children.AddRange(TypeDeclParser.ParseTypeParamsList2RightAssoc(context).Children);
                return new ParseNode(TypeDeclParser.TypeParamsList2, "TypeParamsList2", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAttributeList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAttributeList -> MemberAttribute MemberAttributeListRightAssoc
            if (((((((((ExpressionParser.newKeyword == context.SymbolId) 
                        || (TypeDeclParser.constKeyword == context.SymbolId)) 
                        || (TypeDeclParser.publicKeyword == context.SymbolId)) 
                        || (TypeDeclParser.protectedKeyword == context.SymbolId)) 
                        || (TypeDeclParser.internalKeyword == context.SymbolId)) 
                        || (TypeDeclParser.privateKeyword == context.SymbolId)) 
                        || (TypeDeclParser.staticKeyword == context.SymbolId)) 
                        || (TypeDeclParser.overrideKeyword == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(TypeDeclParser.ParseMemberAttribute(context).Children);
                children.AddRange(TypeDeclParser.ParseMemberAttributeListRightAssoc(context).Children);
                return new ParseNode(TypeDeclParser.MemberAttributeList, "MemberAttributeList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAttribute at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMethodParamListList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MethodParamListList -> comma MethodParam MethodParamListListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(TypeDeclParser.ParseMethodParam(context));
                children.AddRange(TypeDeclParser.ParseMethodParamListListRightAssoc(context).Children);
                return new ParseNode(TypeDeclParser.MethodParamListList, "MethodParamListList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseParamListList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ParamListList -> comma Param ParamListListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(TypeDeclParser.ParseParam(context));
                children.AddRange(TypeDeclParser.ParseParamListListRightAssoc(context).Children);
                return new ParseNode(TypeDeclParser.ParamListList, "ParamListList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseConstructorChainList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ConstructorChainList -> comma Expression ConstructorChainListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseExpression(context));
                children.AddRange(TypeDeclParser.ParseConstructorChainListRightAssoc(context).Children);
                return new ParseNode(TypeDeclParser.ConstructorChainList, "ConstructorChainList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseConstructorChainList2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ConstructorChainList2 -> comma Expression ConstructorChainList2RightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseExpression(context));
                children.AddRange(TypeDeclParser.ParseConstructorChainList2RightAssoc(context).Children);
                return new ParseNode(TypeDeclParser.ConstructorChainList2, "ConstructorChainList2", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseStatement(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // Statement -> InnerStatement
            if ((StatementParser.InnerStatement == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (StatementParser.InnerStatement == context.SymbolId))) {
                    context.Error("Expecting InnerStatement at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                return new ParseNode(StatementParser.Statement, "Statement", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting InnerStatement at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseWhereClauses(ParserContext context) {
            // WhereClauses
            return _ParseWhereClauses(context);
        }
        internal static bool WhereWhereClauses(ParserContext context) {
            return (false == ExpressionParser.Keywords.Contains(context.Value));
        }
        internal static ParseNode ParseTypeDeclPart(ParserContext context) {
            // TypeDeclPart
            return _ParseTypeDeclPart(context);
        }
        internal static ParseNode ParseTypeDecl(ParserContext context) {
            // TypeDecl
            return _ParseTypeDecl(context, false, null, null, context.Line, context.Column, context.Position, null);
        }
        /// <summary>
        /// Parses a production of the form:
        /// TypeDecl
        /// </summary>
        /// <remarks>
        /// The production rules are:
        /// TypeDecl -> publicKeyword
        /// TypeDecl -> internalKeyword
        /// TypeDecl -> privateKeyword
        /// TypeDecl -> structKeyword
        /// TypeDecl -> classKeyword
        /// TypeDecl -> enumKeyword
        /// TypeDecl -> interfaceKeyword
        /// TypeDecl -> partialKeyword
        /// TypeDecl -> lbracket
        /// </remarks>
        /// <param name="tokenizer">The tokenizer to parse with</param><returns>A <see cref="ParseNode" /> representing the parsed tokens</returns>
        public static ParseNode Parse(System.Collections.Generic.IEnumerable<Token> tokenizer) {
            ParserContext context = new ParserContext(tokenizer);
            context.EnsureStarted();
            ParseNode result = TypeDeclParser.ParseTypeDecl(context);
            if ((false == context.IsEnded)) {
                context.Error("Unexpected remainder in input.");
            }
            return result;
        }
        /// <summary>
        /// Parses a production of the form:
        /// TypeDecl
        /// </summary>
        /// <remarks>
        /// The production rules are:
        /// TypeDecl -> publicKeyword
        /// TypeDecl -> internalKeyword
        /// TypeDecl -> privateKeyword
        /// TypeDecl -> structKeyword
        /// TypeDecl -> classKeyword
        /// TypeDecl -> enumKeyword
        /// TypeDecl -> interfaceKeyword
        /// TypeDecl -> partialKeyword
        /// TypeDecl -> lbracket
        /// </remarks>
        /// <param name="tokenizer">The tokenizer to parse with</param><returns>A <see cref="ParseNode" /> representing the parsed tokens</returns>
        public static ParseNode ParseTypeDecl(System.Collections.Generic.IEnumerable<Token> tokenizer) {
            ParserContext context = new ParserContext(tokenizer);
            context.EnsureStarted();
            ParseNode result = TypeDeclParser.ParseTypeDecl(context);
            if ((false == context.IsEnded)) {
                context.Error("Unexpected remainder in input.");
            }
            return result;
        }
        internal static ParseNode ParsePrivateImplementationType(ParserContext context) {
            // PrivateImplementationType
            return _ParsePrivateImplementationType(context);
        }
        internal static bool WherePrivateImplementationType(ParserContext context) {
            return (false == ExpressionParser.Keywords.Contains(context.Value));
        }
        internal static ParseNode ParsePropertyAccessors(ParserContext context) {
            // PropertyAccessors
            return _ParsePropertyAccessors(context);
        }
        internal static ParseNode ParseMember(ParserContext context) {
            // Member
            return _ParseMember(context);
        }
        internal static bool WhereMember(ParserContext context) {
            return true;
        }
        internal static ParseNode ParseMembers(ParserContext context) {
            // Members
            return _ParseMembers(context);
        }
        internal static bool WhereMembers(ParserContext context) {
            return true;
        }
        internal static ParseNode ParseExpressionFollows(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ExpressionFollows -> Expression semi
            if (((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = ExpressionParser.ParseExpression(context);
                if ((false 
                            == (StatementParser.semi == context.SymbolId))) {
                    context.Error("Expecting semi at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(StatementParser.semi, "semi", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.ExpressionFollows, "ExpressionFollows", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Expression at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseExpressionFollows2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ExpressionFollows2 -> Expression rparen
            if (((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = ExpressionParser.ParseExpression(context);
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.ExpressionFollows2, "ExpressionFollows2", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Expression at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseExpressionFollows3(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ExpressionFollows3 -> Expression rbracket
            if (((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = ExpressionParser.ParseExpression(context);
                if ((false 
                            == (ExpressionParser.rbracket == context.SymbolId))) {
                    context.Error("Expecting rbracket at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.rbracket, "rbracket", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.ExpressionFollows3, "ExpressionFollows3", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Expression at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseExpressionFollows4(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ExpressionFollows4 -> Expression comma
            if (((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = ExpressionParser.ParseExpression(context);
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.ExpressionFollows4, "ExpressionFollows4", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Expression at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeFollows(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeFollows -> Type Identifier
            if (((((((((((((((((ExpressionParser.boolType == context.SymbolId) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseType(context));
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                return new ParseNode(ExpressionParser.TypeFollows, "TypeFollows", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Type at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeFollows2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeFollows2 -> Type lbrace
            if (((((((((((((((((ExpressionParser.boolType == context.SymbolId) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = ExpressionParser.ParseType(context);
                if ((false 
                            == (ExpressionParser.lbrace == context.SymbolId))) {
                    context.Error("Expecting lbrace at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.lbrace, "lbrace", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.TypeFollows2, "TypeFollows2", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Type at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeFollows3(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeFollows3 -> Type rbracket
            if (((((((((((((((((ExpressionParser.boolType == context.SymbolId) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = ExpressionParser.ParseType(context);
                if ((false 
                            == (ExpressionParser.rbracket == context.SymbolId))) {
                    context.Error("Expecting rbracket at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.rbracket, "rbracket", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.TypeFollows3, "TypeFollows3", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Type at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeFollows4(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeFollows4 -> Type #EOS
            if (((((((((((((((((ExpressionParser.boolType == context.SymbolId) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = ExpressionParser.ParseType(context);
                if ((false 
                            == (TypeDeclParser.EosSymbol == context.SymbolId))) {
                    context.Error("Expecting #EOS at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.EosSymbol, "#EOS", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.TypeFollows4, "TypeFollows4", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Type at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseStatementFollows(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // StatementFollows -> Statement InnerStatement
            if ((StatementParser.InnerStatement == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(StatementParser.ParseStatement(context));
                if ((false 
                            == (StatementParser.InnerStatement == context.SymbolId))) {
                    context.Error("Expecting InnerStatement at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                return new ParseNode(StatementParser.StatementFollows, "StatementFollows", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Statement at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseStatementFollows2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // StatementFollows2 -> Statement rbrace
            if ((StatementParser.InnerStatement == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                children[0] = StatementParser.ParseStatement(context);
                if ((false 
                            == (ExpressionParser.rbrace == context.SymbolId))) {
                    context.Error("Expecting rbrace at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.rbrace, "rbrace", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(StatementParser.StatementFollows2, "StatementFollows2", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Statement at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseStatementFollows3(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // StatementFollows3 -> Statement #EOS
            if ((StatementParser.InnerStatement == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                children[0] = StatementParser.ParseStatement(context);
                if ((false 
                            == (TypeDeclParser.EosSymbol == context.SymbolId))) {
                    context.Error("Expecting #EOS at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.EosSymbol, "#EOS", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(StatementParser.StatementFollows3, "StatementFollows3", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Statement at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseInnerStatementFollows(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // InnerStatementFollows -> InnerStatement InnerStatement
            if ((StatementParser.InnerStatement == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (StatementParser.InnerStatement == context.SymbolId))) {
                    context.Error("Expecting InnerStatement at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                if ((false 
                            == (StatementParser.InnerStatement == context.SymbolId))) {
                    context.Error("Expecting InnerStatement at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                return new ParseNode(StatementParser.InnerStatementFollows, "InnerStatementFollows", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting InnerStatement at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseInnerStatementFollows2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // InnerStatementFollows2 -> InnerStatement rbrace
            if ((StatementParser.InnerStatement == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (StatementParser.InnerStatement == context.SymbolId))) {
                    context.Error("Expecting InnerStatement at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                if ((false 
                            == (ExpressionParser.rbrace == context.SymbolId))) {
                    context.Error("Expecting rbrace at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.rbrace, "rbrace", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                return new ParseNode(StatementParser.InnerStatementFollows2, "InnerStatementFollows2", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting InnerStatement at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseInnerStatementFollows3(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // InnerStatementFollows3 -> InnerStatement #EOS
            if ((StatementParser.InnerStatement == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (StatementParser.InnerStatement == context.SymbolId))) {
                    context.Error("Expecting InnerStatement at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                if ((false 
                            == (TypeDeclParser.EosSymbol == context.SymbolId))) {
                    context.Error("Expecting #EOS at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(TypeDeclParser.EosSymbol, "#EOS", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                return new ParseNode(StatementParser.InnerStatementFollows3, "InnerStatementFollows3", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting InnerStatement at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupFollows(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupFollows -> CustomAttributeGroup lbracket
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseCustomAttributeGroup(context);
                if ((false 
                            == (ExpressionParser.lbracket == context.SymbolId))) {
                    context.Error("Expecting lbracket at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.lbracket, "lbracket", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.CustomAttributeGroupFollows, "CustomAttributeGroupFollows", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroup at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupFollows2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupFollows2 -> CustomAttributeGroup newKeyword
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseCustomAttributeGroup(context);
                if ((false 
                            == (ExpressionParser.newKeyword == context.SymbolId))) {
                    context.Error("Expecting newKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.newKeyword, "newKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.CustomAttributeGroupFollows2, "CustomAttributeGroupFollows2", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroup at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupFollows3(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupFollows3 -> CustomAttributeGroup constKeyword
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseCustomAttributeGroup(context);
                if ((false 
                            == (TypeDeclParser.constKeyword == context.SymbolId))) {
                    context.Error("Expecting constKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.constKeyword, "constKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.CustomAttributeGroupFollows3, "CustomAttributeGroupFollows3", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroup at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupFollows4(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupFollows4 -> CustomAttributeGroup publicKeyword
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseCustomAttributeGroup(context);
                if ((false 
                            == (TypeDeclParser.publicKeyword == context.SymbolId))) {
                    context.Error("Expecting publicKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.publicKeyword, "publicKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.CustomAttributeGroupFollows4, "CustomAttributeGroupFollows4", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroup at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupFollows5(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupFollows5 -> CustomAttributeGroup protectedKeyword
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseCustomAttributeGroup(context);
                if ((false 
                            == (TypeDeclParser.protectedKeyword == context.SymbolId))) {
                    context.Error("Expecting protectedKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.protectedKeyword, "protectedKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.CustomAttributeGroupFollows5, "CustomAttributeGroupFollows5", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroup at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupFollows6(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupFollows6 -> CustomAttributeGroup internalKeyword
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseCustomAttributeGroup(context);
                if ((false 
                            == (TypeDeclParser.internalKeyword == context.SymbolId))) {
                    context.Error("Expecting internalKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.internalKeyword, "internalKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.CustomAttributeGroupFollows6, "CustomAttributeGroupFollows6", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroup at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupFollows7(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupFollows7 -> CustomAttributeGroup privateKeyword
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseCustomAttributeGroup(context);
                if ((false 
                            == (TypeDeclParser.privateKeyword == context.SymbolId))) {
                    context.Error("Expecting privateKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.privateKeyword, "privateKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.CustomAttributeGroupFollows7, "CustomAttributeGroupFollows7", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroup at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupFollows8(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupFollows8 -> CustomAttributeGroup staticKeyword
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseCustomAttributeGroup(context);
                if ((false 
                            == (TypeDeclParser.staticKeyword == context.SymbolId))) {
                    context.Error("Expecting staticKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.staticKeyword, "staticKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.CustomAttributeGroupFollows8, "CustomAttributeGroupFollows8", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroup at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupFollows9(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupFollows9 -> CustomAttributeGroup overrideKeyword
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseCustomAttributeGroup(context);
                if ((false 
                            == (TypeDeclParser.overrideKeyword == context.SymbolId))) {
                    context.Error("Expecting overrideKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.overrideKeyword, "overrideKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.CustomAttributeGroupFollows9, "CustomAttributeGroupFollows9", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroup at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupFollows10(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupFollows10 -> CustomAttributeGroup Type
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseCustomAttributeGroup(context);
                children[1] = ExpressionParser.ParseType(context);
                return new ParseNode(TypeDeclParser.CustomAttributeGroupFollows10, "CustomAttributeGroupFollows10", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroup at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupFollows11(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupFollows11 -> CustomAttributeGroup eventKeyword
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseCustomAttributeGroup(context);
                if ((false 
                            == (TypeDeclParser.eventKeyword == context.SymbolId))) {
                    context.Error("Expecting eventKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.eventKeyword, "eventKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.CustomAttributeGroupFollows11, "CustomAttributeGroupFollows11", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroup at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupFollows12(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupFollows12 -> CustomAttributeGroup Identifier
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(TypeDeclParser.ParseCustomAttributeGroup(context));
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                return new ParseNode(TypeDeclParser.CustomAttributeGroupFollows12, "CustomAttributeGroupFollows12", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroup at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupFollows13(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupFollows13 -> CustomAttributeGroup publicKeyword
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseCustomAttributeGroup(context);
                if ((false 
                            == (TypeDeclParser.publicKeyword == context.SymbolId))) {
                    context.Error("Expecting publicKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.publicKeyword, "publicKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.CustomAttributeGroupFollows13, "CustomAttributeGroupFollows13", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroup at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupFollows14(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupFollows14 -> CustomAttributeGroup internalKeyword
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseCustomAttributeGroup(context);
                if ((false 
                            == (TypeDeclParser.internalKeyword == context.SymbolId))) {
                    context.Error("Expecting internalKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.internalKeyword, "internalKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.CustomAttributeGroupFollows14, "CustomAttributeGroupFollows14", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroup at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupFollows15(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupFollows15 -> CustomAttributeGroup privateKeyword
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseCustomAttributeGroup(context);
                if ((false 
                            == (TypeDeclParser.privateKeyword == context.SymbolId))) {
                    context.Error("Expecting privateKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.privateKeyword, "privateKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.CustomAttributeGroupFollows15, "CustomAttributeGroupFollows15", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroup at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupFollows16(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupFollows16 -> CustomAttributeGroup structKeyword
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseCustomAttributeGroup(context);
                if ((false 
                            == (TypeDeclParser.structKeyword == context.SymbolId))) {
                    context.Error("Expecting structKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.structKeyword, "structKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.CustomAttributeGroupFollows16, "CustomAttributeGroupFollows16", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroup at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupFollows17(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupFollows17 -> CustomAttributeGroup classKeyword
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseCustomAttributeGroup(context);
                if ((false 
                            == (TypeDeclParser.classKeyword == context.SymbolId))) {
                    context.Error("Expecting classKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.classKeyword, "classKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.CustomAttributeGroupFollows17, "CustomAttributeGroupFollows17", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroup at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupFollows18(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupFollows18 -> CustomAttributeGroup enumKeyword
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseCustomAttributeGroup(context);
                if ((false 
                            == (TypeDeclParser.enumKeyword == context.SymbolId))) {
                    context.Error("Expecting enumKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.enumKeyword, "enumKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.CustomAttributeGroupFollows18, "CustomAttributeGroupFollows18", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroup at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupFollows19(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupFollows19 -> CustomAttributeGroup interfaceKeyword
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseCustomAttributeGroup(context);
                if ((false 
                            == (TypeDeclParser.interfaceKeyword == context.SymbolId))) {
                    context.Error("Expecting interfaceKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.interfaceKeyword, "interfaceKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.CustomAttributeGroupFollows19, "CustomAttributeGroupFollows19", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroup at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupFollows20(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupFollows20 -> CustomAttributeGroup partialKeyword
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseCustomAttributeGroup(context);
                if ((false 
                            == (TypeDeclParser.partialKeyword == context.SymbolId))) {
                    context.Error("Expecting partialKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.partialKeyword, "partialKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.CustomAttributeGroupFollows20, "CustomAttributeGroupFollows20", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroup at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupFollows21(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupFollows21 -> CustomAttributeGroup lbracket
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseCustomAttributeGroup(context);
                if ((false 
                            == (ExpressionParser.lbracket == context.SymbolId))) {
                    context.Error("Expecting lbracket at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.lbracket, "lbracket", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.CustomAttributeGroupFollows21, "CustomAttributeGroupFollows21", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroup at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupsFollows(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupsFollows -> CustomAttributeGroups lbracket
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseCustomAttributeGroups(context);
                if ((false 
                            == (ExpressionParser.lbracket == context.SymbolId))) {
                    context.Error("Expecting lbracket at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.lbracket, "lbracket", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.CustomAttributeGroupsFollows, "CustomAttributeGroupsFollows", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroups at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupsFollows2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupsFollows2 -> CustomAttributeGroups newKeyword
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseCustomAttributeGroups(context);
                if ((false 
                            == (ExpressionParser.newKeyword == context.SymbolId))) {
                    context.Error("Expecting newKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.newKeyword, "newKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.CustomAttributeGroupsFollows2, "CustomAttributeGroupsFollows2", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroups at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupsFollows3(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupsFollows3 -> CustomAttributeGroups constKeyword
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseCustomAttributeGroups(context);
                if ((false 
                            == (TypeDeclParser.constKeyword == context.SymbolId))) {
                    context.Error("Expecting constKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.constKeyword, "constKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.CustomAttributeGroupsFollows3, "CustomAttributeGroupsFollows3", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroups at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupsFollows4(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupsFollows4 -> CustomAttributeGroups publicKeyword
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseCustomAttributeGroups(context);
                if ((false 
                            == (TypeDeclParser.publicKeyword == context.SymbolId))) {
                    context.Error("Expecting publicKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.publicKeyword, "publicKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.CustomAttributeGroupsFollows4, "CustomAttributeGroupsFollows4", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroups at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupsFollows5(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupsFollows5 -> CustomAttributeGroups protectedKeyword
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseCustomAttributeGroups(context);
                if ((false 
                            == (TypeDeclParser.protectedKeyword == context.SymbolId))) {
                    context.Error("Expecting protectedKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.protectedKeyword, "protectedKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.CustomAttributeGroupsFollows5, "CustomAttributeGroupsFollows5", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroups at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupsFollows6(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupsFollows6 -> CustomAttributeGroups internalKeyword
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseCustomAttributeGroups(context);
                if ((false 
                            == (TypeDeclParser.internalKeyword == context.SymbolId))) {
                    context.Error("Expecting internalKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.internalKeyword, "internalKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.CustomAttributeGroupsFollows6, "CustomAttributeGroupsFollows6", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroups at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupsFollows7(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupsFollows7 -> CustomAttributeGroups privateKeyword
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseCustomAttributeGroups(context);
                if ((false 
                            == (TypeDeclParser.privateKeyword == context.SymbolId))) {
                    context.Error("Expecting privateKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.privateKeyword, "privateKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.CustomAttributeGroupsFollows7, "CustomAttributeGroupsFollows7", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroups at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupsFollows8(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupsFollows8 -> CustomAttributeGroups staticKeyword
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseCustomAttributeGroups(context);
                if ((false 
                            == (TypeDeclParser.staticKeyword == context.SymbolId))) {
                    context.Error("Expecting staticKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.staticKeyword, "staticKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.CustomAttributeGroupsFollows8, "CustomAttributeGroupsFollows8", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroups at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupsFollows9(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupsFollows9 -> CustomAttributeGroups overrideKeyword
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseCustomAttributeGroups(context);
                if ((false 
                            == (TypeDeclParser.overrideKeyword == context.SymbolId))) {
                    context.Error("Expecting overrideKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.overrideKeyword, "overrideKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.CustomAttributeGroupsFollows9, "CustomAttributeGroupsFollows9", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroups at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupsFollows10(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupsFollows10 -> CustomAttributeGroups Type
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseCustomAttributeGroups(context);
                children[1] = ExpressionParser.ParseType(context);
                return new ParseNode(TypeDeclParser.CustomAttributeGroupsFollows10, "CustomAttributeGroupsFollows10", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroups at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupsFollows11(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupsFollows11 -> CustomAttributeGroups eventKeyword
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseCustomAttributeGroups(context);
                if ((false 
                            == (TypeDeclParser.eventKeyword == context.SymbolId))) {
                    context.Error("Expecting eventKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.eventKeyword, "eventKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.CustomAttributeGroupsFollows11, "CustomAttributeGroupsFollows11", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroups at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupsFollows12(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupsFollows12 -> CustomAttributeGroups Identifier
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(TypeDeclParser.ParseCustomAttributeGroups(context));
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                return new ParseNode(TypeDeclParser.CustomAttributeGroupsFollows12, "CustomAttributeGroupsFollows12", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroups at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupsFollows13(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupsFollows13 -> CustomAttributeGroups publicKeyword
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseCustomAttributeGroups(context);
                if ((false 
                            == (TypeDeclParser.publicKeyword == context.SymbolId))) {
                    context.Error("Expecting publicKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.publicKeyword, "publicKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.CustomAttributeGroupsFollows13, "CustomAttributeGroupsFollows13", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroups at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupsFollows14(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupsFollows14 -> CustomAttributeGroups internalKeyword
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseCustomAttributeGroups(context);
                if ((false 
                            == (TypeDeclParser.internalKeyword == context.SymbolId))) {
                    context.Error("Expecting internalKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.internalKeyword, "internalKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.CustomAttributeGroupsFollows14, "CustomAttributeGroupsFollows14", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroups at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupsFollows15(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupsFollows15 -> CustomAttributeGroups privateKeyword
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseCustomAttributeGroups(context);
                if ((false 
                            == (TypeDeclParser.privateKeyword == context.SymbolId))) {
                    context.Error("Expecting privateKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.privateKeyword, "privateKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.CustomAttributeGroupsFollows15, "CustomAttributeGroupsFollows15", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroups at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupsFollows16(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupsFollows16 -> CustomAttributeGroups structKeyword
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseCustomAttributeGroups(context);
                if ((false 
                            == (TypeDeclParser.structKeyword == context.SymbolId))) {
                    context.Error("Expecting structKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.structKeyword, "structKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.CustomAttributeGroupsFollows16, "CustomAttributeGroupsFollows16", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroups at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupsFollows17(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupsFollows17 -> CustomAttributeGroups classKeyword
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseCustomAttributeGroups(context);
                if ((false 
                            == (TypeDeclParser.classKeyword == context.SymbolId))) {
                    context.Error("Expecting classKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.classKeyword, "classKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.CustomAttributeGroupsFollows17, "CustomAttributeGroupsFollows17", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroups at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupsFollows18(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupsFollows18 -> CustomAttributeGroups enumKeyword
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseCustomAttributeGroups(context);
                if ((false 
                            == (TypeDeclParser.enumKeyword == context.SymbolId))) {
                    context.Error("Expecting enumKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.enumKeyword, "enumKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.CustomAttributeGroupsFollows18, "CustomAttributeGroupsFollows18", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroups at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupsFollows19(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupsFollows19 -> CustomAttributeGroups interfaceKeyword
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseCustomAttributeGroups(context);
                if ((false 
                            == (TypeDeclParser.interfaceKeyword == context.SymbolId))) {
                    context.Error("Expecting interfaceKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.interfaceKeyword, "interfaceKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.CustomAttributeGroupsFollows19, "CustomAttributeGroupsFollows19", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroups at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupsFollows20(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupsFollows20 -> CustomAttributeGroups partialKeyword
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseCustomAttributeGroups(context);
                if ((false 
                            == (TypeDeclParser.partialKeyword == context.SymbolId))) {
                    context.Error("Expecting partialKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.partialKeyword, "partialKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.CustomAttributeGroupsFollows20, "CustomAttributeGroupsFollows20", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroups at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupsFollows21(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupsFollows21 -> CustomAttributeGroups lbracket
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseCustomAttributeGroups(context);
                if ((false 
                            == (ExpressionParser.lbracket == context.SymbolId))) {
                    context.Error("Expecting lbracket at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.lbracket, "lbracket", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.CustomAttributeGroupsFollows21, "CustomAttributeGroupsFollows21", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroups at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupsFollows22(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupsFollows22 -> CustomAttributeGroups Identifier
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(TypeDeclParser.ParseCustomAttributeGroups(context));
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                return new ParseNode(TypeDeclParser.CustomAttributeGroupsFollows22, "CustomAttributeGroupsFollows22", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroups at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupsFollows23(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupsFollows23 -> CustomAttributeGroups namespaceKeyword
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseCustomAttributeGroups(context);
                if ((false 
                            == (TypeDeclParser.namespaceKeyword == context.SymbolId))) {
                    context.Error("Expecting namespaceKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.namespaceKeyword, "namespaceKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.CustomAttributeGroupsFollows23, "CustomAttributeGroupsFollows23", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroups at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeAttributesFollows(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeAttributesFollows -> TypeAttributes classKeyword
            if ((((TypeDeclParser.publicKeyword == context.SymbolId) 
                        || (TypeDeclParser.internalKeyword == context.SymbolId)) 
                        || (TypeDeclParser.privateKeyword == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseTypeAttributes(context);
                if ((false 
                            == (TypeDeclParser.classKeyword == context.SymbolId))) {
                    context.Error("Expecting classKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.classKeyword, "classKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.TypeAttributesFollows, "TypeAttributesFollows", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting TypeAttributes at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeAttributesFollows2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeAttributesFollows2 -> TypeAttributes enumKeyword
            if ((((TypeDeclParser.publicKeyword == context.SymbolId) 
                        || (TypeDeclParser.internalKeyword == context.SymbolId)) 
                        || (TypeDeclParser.privateKeyword == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseTypeAttributes(context);
                if ((false 
                            == (TypeDeclParser.enumKeyword == context.SymbolId))) {
                    context.Error("Expecting enumKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.enumKeyword, "enumKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.TypeAttributesFollows2, "TypeAttributesFollows2", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting TypeAttributes at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeAttributesFollows3(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeAttributesFollows3 -> TypeAttributes structKeyword
            if ((((TypeDeclParser.publicKeyword == context.SymbolId) 
                        || (TypeDeclParser.internalKeyword == context.SymbolId)) 
                        || (TypeDeclParser.privateKeyword == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseTypeAttributes(context);
                if ((false 
                            == (TypeDeclParser.structKeyword == context.SymbolId))) {
                    context.Error("Expecting structKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.structKeyword, "structKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.TypeAttributesFollows3, "TypeAttributesFollows3", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting TypeAttributes at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeAttributesFollows4(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeAttributesFollows4 -> TypeAttributes interfaceKeyword
            if ((((TypeDeclParser.publicKeyword == context.SymbolId) 
                        || (TypeDeclParser.internalKeyword == context.SymbolId)) 
                        || (TypeDeclParser.privateKeyword == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseTypeAttributes(context);
                if ((false 
                            == (TypeDeclParser.interfaceKeyword == context.SymbolId))) {
                    context.Error("Expecting interfaceKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.interfaceKeyword, "interfaceKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.TypeAttributesFollows4, "TypeAttributesFollows4", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting TypeAttributes at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeAttributesFollows5(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeAttributesFollows5 -> TypeAttributes partialKeyword
            if ((((TypeDeclParser.publicKeyword == context.SymbolId) 
                        || (TypeDeclParser.internalKeyword == context.SymbolId)) 
                        || (TypeDeclParser.privateKeyword == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseTypeAttributes(context);
                if ((false 
                            == (TypeDeclParser.partialKeyword == context.SymbolId))) {
                    context.Error("Expecting partialKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.partialKeyword, "partialKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.TypeAttributesFollows5, "TypeAttributesFollows5", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting TypeAttributes at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseWhereFollows(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // WhereFollows -> Where lbrace
            if ((TypeDeclParser.whereKeyword == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseWhere(context);
                if ((false 
                            == (ExpressionParser.lbrace == context.SymbolId))) {
                    context.Error("Expecting lbrace at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.lbrace, "lbrace", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.WhereFollows, "WhereFollows", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Where at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseWhereClauseFollows(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // WhereClauseFollows -> WhereClause lbrace
            if (((ExpressionParser.verbatimIdentifier == context.SymbolId) 
                        || (ExpressionParser.identifier2 == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseWhereClause(context);
                if ((false 
                            == (ExpressionParser.lbrace == context.SymbolId))) {
                    context.Error("Expecting lbrace at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.lbrace, "lbrace", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.WhereClauseFollows, "WhereClauseFollows", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting WhereClause at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseBaseTypeFollows(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // BaseTypeFollows -> BaseType comma
            if (((((((((((((((((ExpressionParser.boolType == context.SymbolId) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(TypeDeclParser.ParseBaseType(context).Children);
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                return new ParseNode(TypeDeclParser.BaseTypeFollows, "BaseTypeFollows", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting BaseType at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseBaseTypeFollows2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // BaseTypeFollows2 -> BaseType whereKeyword
            if (((((((((((((((((ExpressionParser.boolType == context.SymbolId) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(TypeDeclParser.ParseBaseType(context).Children);
                if ((false 
                            == (TypeDeclParser.whereKeyword == context.SymbolId))) {
                    context.Error("Expecting whereKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(TypeDeclParser.whereKeyword, "whereKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                return new ParseNode(TypeDeclParser.BaseTypeFollows2, "BaseTypeFollows2", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting BaseType at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseBaseTypeFollows3(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // BaseTypeFollows3 -> BaseType lbrace
            if (((((((((((((((((ExpressionParser.boolType == context.SymbolId) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(TypeDeclParser.ParseBaseType(context).Children);
                if ((false 
                            == (ExpressionParser.lbrace == context.SymbolId))) {
                    context.Error("Expecting lbrace at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.lbrace, "lbrace", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                return new ParseNode(TypeDeclParser.BaseTypeFollows3, "BaseTypeFollows3", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting BaseType at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeDeclPartFollows(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeDeclPartFollows -> TypeDeclPart rbrace
            if ((((StatementParser.colon == context.SymbolId) 
                        || (TypeDeclParser.whereKeyword == context.SymbolId)) 
                        || (ExpressionParser.lbrace == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseTypeDeclPart(context);
                if ((false 
                            == (ExpressionParser.rbrace == context.SymbolId))) {
                    context.Error("Expecting rbrace at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.rbrace, "rbrace", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.TypeDeclPartFollows, "TypeDeclPartFollows", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting TypeDeclPart at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeParamsFollows(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeParamsFollows -> TypeParams colon
            if ((ExpressionParser.lt == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseTypeParams(context);
                if ((false 
                            == (StatementParser.colon == context.SymbolId))) {
                    context.Error("Expecting colon at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(StatementParser.colon, "colon", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.TypeParamsFollows, "TypeParamsFollows", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting TypeParams at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeParamsFollows2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeParamsFollows2 -> TypeParams whereKeyword
            if ((ExpressionParser.lt == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseTypeParams(context);
                if ((false 
                            == (TypeDeclParser.whereKeyword == context.SymbolId))) {
                    context.Error("Expecting whereKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.whereKeyword, "whereKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.TypeParamsFollows2, "TypeParamsFollows2", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting TypeParams at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeParamsFollows3(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeParamsFollows3 -> TypeParams lbrace
            if ((ExpressionParser.lt == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseTypeParams(context);
                if ((false 
                            == (ExpressionParser.lbrace == context.SymbolId))) {
                    context.Error("Expecting lbrace at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.lbrace, "lbrace", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.TypeParamsFollows3, "TypeParamsFollows3", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting TypeParams at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeDeclFollows(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeDeclFollows -> TypeDecl publicKeyword
            if ((((((((((TypeDeclParser.publicKeyword == context.SymbolId) 
                        || (TypeDeclParser.internalKeyword == context.SymbolId)) 
                        || (TypeDeclParser.privateKeyword == context.SymbolId)) 
                        || (TypeDeclParser.structKeyword == context.SymbolId)) 
                        || (TypeDeclParser.classKeyword == context.SymbolId)) 
                        || (TypeDeclParser.enumKeyword == context.SymbolId)) 
                        || (TypeDeclParser.interfaceKeyword == context.SymbolId)) 
                        || (TypeDeclParser.partialKeyword == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseTypeDecl(context);
                if ((false 
                            == (TypeDeclParser.publicKeyword == context.SymbolId))) {
                    context.Error("Expecting publicKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.publicKeyword, "publicKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.TypeDeclFollows, "TypeDeclFollows", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting TypeDecl at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeDeclFollows2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeDeclFollows2 -> TypeDecl internalKeyword
            if ((((((((((TypeDeclParser.publicKeyword == context.SymbolId) 
                        || (TypeDeclParser.internalKeyword == context.SymbolId)) 
                        || (TypeDeclParser.privateKeyword == context.SymbolId)) 
                        || (TypeDeclParser.structKeyword == context.SymbolId)) 
                        || (TypeDeclParser.classKeyword == context.SymbolId)) 
                        || (TypeDeclParser.enumKeyword == context.SymbolId)) 
                        || (TypeDeclParser.interfaceKeyword == context.SymbolId)) 
                        || (TypeDeclParser.partialKeyword == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseTypeDecl(context);
                if ((false 
                            == (TypeDeclParser.internalKeyword == context.SymbolId))) {
                    context.Error("Expecting internalKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.internalKeyword, "internalKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.TypeDeclFollows2, "TypeDeclFollows2", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting TypeDecl at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeDeclFollows3(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeDeclFollows3 -> TypeDecl privateKeyword
            if ((((((((((TypeDeclParser.publicKeyword == context.SymbolId) 
                        || (TypeDeclParser.internalKeyword == context.SymbolId)) 
                        || (TypeDeclParser.privateKeyword == context.SymbolId)) 
                        || (TypeDeclParser.structKeyword == context.SymbolId)) 
                        || (TypeDeclParser.classKeyword == context.SymbolId)) 
                        || (TypeDeclParser.enumKeyword == context.SymbolId)) 
                        || (TypeDeclParser.interfaceKeyword == context.SymbolId)) 
                        || (TypeDeclParser.partialKeyword == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseTypeDecl(context);
                if ((false 
                            == (TypeDeclParser.privateKeyword == context.SymbolId))) {
                    context.Error("Expecting privateKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.privateKeyword, "privateKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.TypeDeclFollows3, "TypeDeclFollows3", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting TypeDecl at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeDeclFollows4(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeDeclFollows4 -> TypeDecl structKeyword
            if ((((((((((TypeDeclParser.publicKeyword == context.SymbolId) 
                        || (TypeDeclParser.internalKeyword == context.SymbolId)) 
                        || (TypeDeclParser.privateKeyword == context.SymbolId)) 
                        || (TypeDeclParser.structKeyword == context.SymbolId)) 
                        || (TypeDeclParser.classKeyword == context.SymbolId)) 
                        || (TypeDeclParser.enumKeyword == context.SymbolId)) 
                        || (TypeDeclParser.interfaceKeyword == context.SymbolId)) 
                        || (TypeDeclParser.partialKeyword == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseTypeDecl(context);
                if ((false 
                            == (TypeDeclParser.structKeyword == context.SymbolId))) {
                    context.Error("Expecting structKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.structKeyword, "structKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.TypeDeclFollows4, "TypeDeclFollows4", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting TypeDecl at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeDeclFollows5(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeDeclFollows5 -> TypeDecl classKeyword
            if ((((((((((TypeDeclParser.publicKeyword == context.SymbolId) 
                        || (TypeDeclParser.internalKeyword == context.SymbolId)) 
                        || (TypeDeclParser.privateKeyword == context.SymbolId)) 
                        || (TypeDeclParser.structKeyword == context.SymbolId)) 
                        || (TypeDeclParser.classKeyword == context.SymbolId)) 
                        || (TypeDeclParser.enumKeyword == context.SymbolId)) 
                        || (TypeDeclParser.interfaceKeyword == context.SymbolId)) 
                        || (TypeDeclParser.partialKeyword == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseTypeDecl(context);
                if ((false 
                            == (TypeDeclParser.classKeyword == context.SymbolId))) {
                    context.Error("Expecting classKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.classKeyword, "classKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.TypeDeclFollows5, "TypeDeclFollows5", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting TypeDecl at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeDeclFollows6(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeDeclFollows6 -> TypeDecl enumKeyword
            if ((((((((((TypeDeclParser.publicKeyword == context.SymbolId) 
                        || (TypeDeclParser.internalKeyword == context.SymbolId)) 
                        || (TypeDeclParser.privateKeyword == context.SymbolId)) 
                        || (TypeDeclParser.structKeyword == context.SymbolId)) 
                        || (TypeDeclParser.classKeyword == context.SymbolId)) 
                        || (TypeDeclParser.enumKeyword == context.SymbolId)) 
                        || (TypeDeclParser.interfaceKeyword == context.SymbolId)) 
                        || (TypeDeclParser.partialKeyword == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseTypeDecl(context);
                if ((false 
                            == (TypeDeclParser.enumKeyword == context.SymbolId))) {
                    context.Error("Expecting enumKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.enumKeyword, "enumKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.TypeDeclFollows6, "TypeDeclFollows6", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting TypeDecl at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeDeclFollows7(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeDeclFollows7 -> TypeDecl interfaceKeyword
            if ((((((((((TypeDeclParser.publicKeyword == context.SymbolId) 
                        || (TypeDeclParser.internalKeyword == context.SymbolId)) 
                        || (TypeDeclParser.privateKeyword == context.SymbolId)) 
                        || (TypeDeclParser.structKeyword == context.SymbolId)) 
                        || (TypeDeclParser.classKeyword == context.SymbolId)) 
                        || (TypeDeclParser.enumKeyword == context.SymbolId)) 
                        || (TypeDeclParser.interfaceKeyword == context.SymbolId)) 
                        || (TypeDeclParser.partialKeyword == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseTypeDecl(context);
                if ((false 
                            == (TypeDeclParser.interfaceKeyword == context.SymbolId))) {
                    context.Error("Expecting interfaceKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.interfaceKeyword, "interfaceKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.TypeDeclFollows7, "TypeDeclFollows7", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting TypeDecl at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeDeclFollows8(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeDeclFollows8 -> TypeDecl partialKeyword
            if ((((((((((TypeDeclParser.publicKeyword == context.SymbolId) 
                        || (TypeDeclParser.internalKeyword == context.SymbolId)) 
                        || (TypeDeclParser.privateKeyword == context.SymbolId)) 
                        || (TypeDeclParser.structKeyword == context.SymbolId)) 
                        || (TypeDeclParser.classKeyword == context.SymbolId)) 
                        || (TypeDeclParser.enumKeyword == context.SymbolId)) 
                        || (TypeDeclParser.interfaceKeyword == context.SymbolId)) 
                        || (TypeDeclParser.partialKeyword == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseTypeDecl(context);
                if ((false 
                            == (TypeDeclParser.partialKeyword == context.SymbolId))) {
                    context.Error("Expecting partialKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.partialKeyword, "partialKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.TypeDeclFollows8, "TypeDeclFollows8", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting TypeDecl at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeDeclFollows9(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeDeclFollows9 -> TypeDecl lbracket
            if ((((((((((TypeDeclParser.publicKeyword == context.SymbolId) 
                        || (TypeDeclParser.internalKeyword == context.SymbolId)) 
                        || (TypeDeclParser.privateKeyword == context.SymbolId)) 
                        || (TypeDeclParser.structKeyword == context.SymbolId)) 
                        || (TypeDeclParser.classKeyword == context.SymbolId)) 
                        || (TypeDeclParser.enumKeyword == context.SymbolId)) 
                        || (TypeDeclParser.interfaceKeyword == context.SymbolId)) 
                        || (TypeDeclParser.partialKeyword == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseTypeDecl(context);
                if ((false 
                            == (ExpressionParser.lbracket == context.SymbolId))) {
                    context.Error("Expecting lbracket at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.lbracket, "lbracket", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.TypeDeclFollows9, "TypeDeclFollows9", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting TypeDecl at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeDeclFollows10(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeDeclFollows10 -> TypeDecl usingKeyword
            if ((((((((((TypeDeclParser.publicKeyword == context.SymbolId) 
                        || (TypeDeclParser.internalKeyword == context.SymbolId)) 
                        || (TypeDeclParser.privateKeyword == context.SymbolId)) 
                        || (TypeDeclParser.structKeyword == context.SymbolId)) 
                        || (TypeDeclParser.classKeyword == context.SymbolId)) 
                        || (TypeDeclParser.enumKeyword == context.SymbolId)) 
                        || (TypeDeclParser.interfaceKeyword == context.SymbolId)) 
                        || (TypeDeclParser.partialKeyword == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseTypeDecl(context);
                if ((false 
                            == (TypeDeclParser.usingKeyword == context.SymbolId))) {
                    context.Error("Expecting usingKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.usingKeyword, "usingKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.TypeDeclFollows10, "TypeDeclFollows10", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting TypeDecl at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeDeclFollows11(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeDeclFollows11 -> TypeDecl namespaceKeyword
            if ((((((((((TypeDeclParser.publicKeyword == context.SymbolId) 
                        || (TypeDeclParser.internalKeyword == context.SymbolId)) 
                        || (TypeDeclParser.privateKeyword == context.SymbolId)) 
                        || (TypeDeclParser.structKeyword == context.SymbolId)) 
                        || (TypeDeclParser.classKeyword == context.SymbolId)) 
                        || (TypeDeclParser.enumKeyword == context.SymbolId)) 
                        || (TypeDeclParser.interfaceKeyword == context.SymbolId)) 
                        || (TypeDeclParser.partialKeyword == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseTypeDecl(context);
                if ((false 
                            == (TypeDeclParser.namespaceKeyword == context.SymbolId))) {
                    context.Error("Expecting namespaceKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(TypeDeclParser.namespaceKeyword, "namespaceKeyword", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.TypeDeclFollows11, "TypeDeclFollows11", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting TypeDecl at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeDeclFollows12(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeDeclFollows12 -> TypeDecl rbrace
            if ((((((((((TypeDeclParser.publicKeyword == context.SymbolId) 
                        || (TypeDeclParser.internalKeyword == context.SymbolId)) 
                        || (TypeDeclParser.privateKeyword == context.SymbolId)) 
                        || (TypeDeclParser.structKeyword == context.SymbolId)) 
                        || (TypeDeclParser.classKeyword == context.SymbolId)) 
                        || (TypeDeclParser.enumKeyword == context.SymbolId)) 
                        || (TypeDeclParser.interfaceKeyword == context.SymbolId)) 
                        || (TypeDeclParser.partialKeyword == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseTypeDecl(context);
                if ((false 
                            == (ExpressionParser.rbrace == context.SymbolId))) {
                    context.Error("Expecting rbrace at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.rbrace, "rbrace", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.TypeDeclFollows12, "TypeDeclFollows12", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting TypeDecl at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeDeclFollows13(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeDeclFollows13 -> TypeDecl lbracket
            if ((((((((((TypeDeclParser.publicKeyword == context.SymbolId) 
                        || (TypeDeclParser.internalKeyword == context.SymbolId)) 
                        || (TypeDeclParser.privateKeyword == context.SymbolId)) 
                        || (TypeDeclParser.structKeyword == context.SymbolId)) 
                        || (TypeDeclParser.classKeyword == context.SymbolId)) 
                        || (TypeDeclParser.enumKeyword == context.SymbolId)) 
                        || (TypeDeclParser.interfaceKeyword == context.SymbolId)) 
                        || (TypeDeclParser.partialKeyword == context.SymbolId)) 
                        || (ExpressionParser.lbracket == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseTypeDecl(context);
                if ((false 
                            == (ExpressionParser.lbracket == context.SymbolId))) {
                    context.Error("Expecting lbracket at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.lbracket, "lbracket", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.TypeDeclFollows13, "TypeDeclFollows13", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting TypeDecl at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMethodParamListFollows(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MethodParamListFollows -> MethodParamList rparen
            if (((((((((((((((((((ExpressionParser.outKeyword == context.SymbolId) 
                        || (ExpressionParser.refKeyword == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseMethodParamList(context);
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.MethodParamListFollows, "MethodParamListFollows", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MethodParamList at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseParamListFollows(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ParamListFollows -> ParamList rparen
            if (((((((((((((((((ExpressionParser.boolType == context.SymbolId) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseParamList(context);
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.ParamListFollows, "ParamListFollows", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting ParamList at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseParamListFollows2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ParamListFollows2 -> ParamList rbracket
            if (((((((((((((((((ExpressionParser.boolType == context.SymbolId) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseParamList(context);
                if ((false 
                            == (ExpressionParser.rbracket == context.SymbolId))) {
                    context.Error("Expecting rbracket at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.rbracket, "rbracket", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.ParamListFollows2, "ParamListFollows2", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting ParamList at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberFollows(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberFollows -> Member rbrace
            if ((((((((((((((((((((((((((((ExpressionParser.lbracket == context.SymbolId) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (TypeDeclParser.constKeyword == context.SymbolId)) 
                        || (TypeDeclParser.publicKeyword == context.SymbolId)) 
                        || (TypeDeclParser.protectedKeyword == context.SymbolId)) 
                        || (TypeDeclParser.internalKeyword == context.SymbolId)) 
                        || (TypeDeclParser.privateKeyword == context.SymbolId)) 
                        || (TypeDeclParser.staticKeyword == context.SymbolId)) 
                        || (TypeDeclParser.overrideKeyword == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (TypeDeclParser.eventKeyword == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseMember(context);
                if ((false 
                            == (ExpressionParser.rbrace == context.SymbolId))) {
                    context.Error("Expecting rbrace at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.rbrace, "rbrace", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.MemberFollows, "MemberFollows", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Member at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseNamespaceNameListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // NamespaceNameListRightAssoc -> dot Identifier NamespaceNameListRightAssoc
            if ((ExpressionParser.dot == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.dot == context.SymbolId))) {
                    context.Error("Expecting dot at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.dot, "dot", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                children.AddRange(TypeDeclParser.ParseNamespaceNameListRightAssoc(context).Children);
                return new ParseNode(TypeDeclParser.NamespaceNameListRightAssoc, "NamespaceNameListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting dot at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseRelationalExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // RelationalExpressionListRightAssoc -> lt TermExpression RelationalExpressionListRightAssoc
            if ((ExpressionParser.lt == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.lt == context.SymbolId))) {
                    context.Error("Expecting lt at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.lt, "lt", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.TermExpression == context.SymbolId))) {
                    context.Error("Expecting TermExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.TermExpression, "TermExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.RelationalExpressionListRightAssoc, "RelationalExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // RelationalExpressionListRightAssoc ->
            if ((((ExpressionParser.gt == context.SymbolId) 
                        || (ExpressionParser.lte == context.SymbolId)) 
                        || (ExpressionParser.gte == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.RelationalExpressionListRightAssoc, "RelationalExpressionListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting lt at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseRelationalExpressionListRightAssoc2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // RelationalExpressionListRightAssoc2 -> gt TermExpression RelationalExpressionListRightAssoc2
            if ((ExpressionParser.gt == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.gt == context.SymbolId))) {
                    context.Error("Expecting gt at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.gt, "gt", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.TermExpression == context.SymbolId))) {
                    context.Error("Expecting TermExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.TermExpression, "TermExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc2(context).Children);
                return new ParseNode(ExpressionParser.RelationalExpressionListRightAssoc2, "RelationalExpressionListRightAssoc2", children.ToArray(), line__, column__, position__);
            }
            // RelationalExpressionListRightAssoc2 ->
            if (((ExpressionParser.lte == context.SymbolId) 
                        || (ExpressionParser.gte == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.RelationalExpressionListRightAssoc2, "RelationalExpressionListRightAssoc2", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting gt at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseEqualityExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // EqualityExpressionListRightAssoc -> eqEq RelationalExpression EqualityExpressionListRightAssoc
            if ((ExpressionParser.eqEq == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.eqEq == context.SymbolId))) {
                    context.Error("Expecting eqEq at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.eqEq, "eqEq", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.RelationalExpression == context.SymbolId))) {
                    context.Error("Expecting RelationalExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.RelationalExpression, "RelationalExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseEqualityExpressionListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.EqualityExpressionListRightAssoc, "EqualityExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // EqualityExpressionListRightAssoc ->
            if ((ExpressionParser.notEq == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.EqualityExpressionListRightAssoc, "EqualityExpressionListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting eqEq at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseBitwiseAndExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // BitwiseAndExpressionListRightAssoc -> bitwiseAnd EqualityExpression BitwiseAndExpressionListRightAssoc
            if ((ExpressionParser.bitwiseAnd == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.bitwiseAnd == context.SymbolId))) {
                    context.Error("Expecting bitwiseAnd at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.bitwiseAnd, "bitwiseAnd", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.EqualityExpression == context.SymbolId))) {
                    context.Error("Expecting EqualityExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.EqualityExpression, "EqualityExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseBitwiseAndExpressionListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.BitwiseAndExpressionListRightAssoc, "BitwiseAndExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting bitwiseAnd at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseBitwiseOrExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // BitwiseOrExpressionListRightAssoc -> bitwiseOr BitwiseAndExpression BitwiseOrExpressionListRightAssoc
            if ((ExpressionParser.bitwiseOr == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.bitwiseOr == context.SymbolId))) {
                    context.Error("Expecting bitwiseOr at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.bitwiseOr, "bitwiseOr", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.BitwiseAndExpression == context.SymbolId))) {
                    context.Error("Expecting BitwiseAndExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.BitwiseAndExpression, "BitwiseAndExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseBitwiseOrExpressionListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.BitwiseOrExpressionListRightAssoc, "BitwiseOrExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting bitwiseOr at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseAndExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AndExpressionListRightAssoc -> and BitwiseOrExpression AndExpressionListRightAssoc
            if ((ExpressionParser.and == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.and == context.SymbolId))) {
                    context.Error("Expecting and at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.and, "and", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.BitwiseOrExpression == context.SymbolId))) {
                    context.Error("Expecting BitwiseOrExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.BitwiseOrExpression, "BitwiseOrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAndExpressionListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.AndExpressionListRightAssoc, "AndExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting and at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseOrExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // OrExpressionListRightAssoc -> or AndExpression OrExpressionListRightAssoc
            if ((ExpressionParser.or == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.or == context.SymbolId))) {
                    context.Error("Expecting or at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.or, "or", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.AndExpression == context.SymbolId))) {
                    context.Error("Expecting AndExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.AndExpression, "AndExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseOrExpressionListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.OrExpressionListRightAssoc, "OrExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting or at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseAssignExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AssignExpressionListRightAssoc -> eq OrExpression AssignExpressionListRightAssoc
            if ((ExpressionParser.eq == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.eq == context.SymbolId))) {
                    context.Error("Expecting eq at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.eq, "eq", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.AssignExpressionListRightAssoc, "AssignExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionListRightAssoc ->
            if ((((((((ExpressionParser.subAssign == context.SymbolId) 
                        || (ExpressionParser.divAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.AssignExpressionListRightAssoc, "AssignExpressionListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting eq at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseAssignExpressionListRightAssoc2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AssignExpressionListRightAssoc2 -> subAssign OrExpression AssignExpressionListRightAssoc2
            if ((ExpressionParser.subAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.subAssign == context.SymbolId))) {
                    context.Error("Expecting subAssign at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.subAssign, "subAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc2(context).Children);
                return new ParseNode(ExpressionParser.AssignExpressionListRightAssoc2, "AssignExpressionListRightAssoc2", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionListRightAssoc2 ->
            if (((((((ExpressionParser.divAssign == context.SymbolId) 
                        || (ExpressionParser.bitwiseAndAssign == context.SymbolId)) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.AssignExpressionListRightAssoc2, "AssignExpressionListRightAssoc2", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting subAssign at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseAssignExpressionListRightAssoc3(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AssignExpressionListRightAssoc3 -> divAssign OrExpression AssignExpressionListRightAssoc3
            if ((ExpressionParser.divAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.divAssign == context.SymbolId))) {
                    context.Error("Expecting divAssign at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.divAssign, "divAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc3(context).Children);
                return new ParseNode(ExpressionParser.AssignExpressionListRightAssoc3, "AssignExpressionListRightAssoc3", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionListRightAssoc3 ->
            if ((((((ExpressionParser.bitwiseAndAssign == context.SymbolId) 
                        || (ExpressionParser.addAssign == context.SymbolId)) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.AssignExpressionListRightAssoc3, "AssignExpressionListRightAssoc3", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting divAssign at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseAssignExpressionListRightAssoc4(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AssignExpressionListRightAssoc4 -> bitwiseAndAssign OrExpression AssignExpressionListRightAssoc4
            if ((ExpressionParser.bitwiseAndAssign == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.bitwiseAndAssign == context.SymbolId))) {
                    context.Error("Expecting bitwiseAndAssign at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.bitwiseAndAssign, "bitwiseAndAssign", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc4(context).Children);
                return new ParseNode(ExpressionParser.AssignExpressionListRightAssoc4, "AssignExpressionListRightAssoc4", children.ToArray(), line__, column__, position__);
            }
            // AssignExpressionListRightAssoc4 ->
            if (((((ExpressionParser.addAssign == context.SymbolId) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.AssignExpressionListRightAssoc4, "AssignExpressionListRightAssoc4", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting bitwiseAndAssign at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTermExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TermExpressionListRightAssoc -> add FactorExpression TermExpressionListRightAssoc
            if ((ExpressionParser.add == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.add == context.SymbolId))) {
                    context.Error("Expecting add at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.add, "add", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.FactorExpression == context.SymbolId))) {
                    context.Error("Expecting FactorExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.FactorExpression, "FactorExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseTermExpressionListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.TermExpressionListRightAssoc, "TermExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // TermExpressionListRightAssoc ->
            if ((ExpressionParser.sub == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.TermExpressionListRightAssoc, "TermExpressionListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting add at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseFactorExpressionListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // FactorExpressionListRightAssoc -> mul UnaryExpression FactorExpressionListRightAssoc
            if ((ExpressionParser.mul == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.mul == context.SymbolId))) {
                    context.Error("Expecting mul at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.mul, "mul", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.UnaryExpression == context.SymbolId))) {
                    context.Error("Expecting UnaryExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.UnaryExpression, "UnaryExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.FactorExpressionListRightAssoc, "FactorExpressionListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // FactorExpressionListRightAssoc ->
            if (((ExpressionParser.mod == context.SymbolId) 
                        || (ExpressionParser.div == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.FactorExpressionListRightAssoc, "FactorExpressionListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting mul at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseFactorExpressionListRightAssoc2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // FactorExpressionListRightAssoc2 -> mod UnaryExpression FactorExpressionListRightAssoc2
            if ((ExpressionParser.mod == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.mod == context.SymbolId))) {
                    context.Error("Expecting mod at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.mod, "mod", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.UnaryExpression == context.SymbolId))) {
                    context.Error("Expecting UnaryExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.UnaryExpression, "UnaryExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc2(context).Children);
                return new ParseNode(ExpressionParser.FactorExpressionListRightAssoc2, "FactorExpressionListRightAssoc2", children.ToArray(), line__, column__, position__);
            }
            // FactorExpressionListRightAssoc2 ->
            if ((ExpressionParser.div == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(ExpressionParser.FactorExpressionListRightAssoc2, "FactorExpressionListRightAssoc2", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting mod at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberInvokeRefListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberInvokeRefListRightAssoc -> comma MethodArg MemberInvokeRefListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.MethodArg == context.SymbolId))) {
                    context.Error("Expecting MethodArg at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.MethodArg, "MethodArg", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberInvokeRefListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberInvokeRefListRightAssoc, "MemberInvokeRefListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberIndexerRefListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberIndexerRefListRightAssoc -> comma Expression MemberIndexerRefListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseExpression(context));
                children.AddRange(ExpressionParser.ParseMemberIndexerRefListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberIndexerRefListRightAssoc, "MemberIndexerRefListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeBaseListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeBaseListRightAssoc -> dot identifier TypeBaseListRightAssoc
            if ((ExpressionParser.dot == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.dot == context.SymbolId))) {
                    context.Error("Expecting dot at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.dot, "dot", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.identifier2 == context.SymbolId))) {
                    context.Error("Expecting identifier at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.identifier2, "identifier", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseTypeBaseListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.TypeBaseListRightAssoc, "TypeBaseListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting dot at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeArraySpecListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeArraySpecListRightAssoc -> TypeArraySpec TypeArraySpecListRightAssoc
            if ((ExpressionParser.TypeArraySpec == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.TypeArraySpec == context.SymbolId))) {
                    context.Error("Expecting TypeArraySpec at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.TypeArraySpec, "TypeArraySpec", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseTypeArraySpecListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.TypeArraySpecListRightAssoc, "TypeArraySpecListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting TypeArraySpec at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeGenericPartListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeGenericPartListRightAssoc -> comma Type TypeGenericPartListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseType(context));
                children.AddRange(ExpressionParser.ParseTypeGenericPartListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.TypeGenericPartListRightAssoc, "TypeGenericPartListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeArraySpecRankListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeArraySpecRankListRightAssoc -> TypeArraySpecRank TypeArraySpecRankListRightAssoc
            if ((ExpressionParser.TypeArraySpecRank == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.TypeArraySpecRank == context.SymbolId))) {
                    context.Error("Expecting TypeArraySpecRank at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.TypeArraySpecRank, "TypeArraySpecRank", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseTypeArraySpecRankListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.TypeArraySpecRankListRightAssoc, "TypeArraySpecRankListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting TypeArraySpecRank at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseNewObjectPartListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // NewObjectPartListRightAssoc -> comma Expression NewObjectPartListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseExpression(context));
                children.AddRange(ExpressionParser.ParseNewObjectPartListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.NewObjectPartListRightAssoc, "NewObjectPartListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseArraySpecExpressionListListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ArraySpecExpressionListListRightAssoc -> comma Expression ArraySpecExpressionListListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseExpression(context));
                children.AddRange(ExpressionParser.ParseArraySpecExpressionListListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.ArraySpecExpressionListListRightAssoc, "ArraySpecExpressionListListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseArrayInitializerListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ArrayInitializerListRightAssoc -> comma Expression ArrayInitializerListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseExpression(context));
                children.AddRange(ExpressionParser.ParseArrayInitializerListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.ArrayInitializerListRightAssoc, "ArrayInitializerListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefListRightAssoc -> MemberAnyRef MemberAnyRefListRightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefListRightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefListRightAssoc, "MemberAnyRefListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList2RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList2RightAssoc -> MemberAnyRef MemberAnyRefList2RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList2RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList2RightAssoc, "MemberAnyRefList2RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList3RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList3RightAssoc -> MemberAnyRef MemberAnyRefList3RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList3RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList3RightAssoc, "MemberAnyRefList3RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList4RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList4RightAssoc -> MemberAnyRef MemberAnyRefList4RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList4RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList4RightAssoc, "MemberAnyRefList4RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList5RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList5RightAssoc -> MemberAnyRef MemberAnyRefList5RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList5RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList5RightAssoc, "MemberAnyRefList5RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList6RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList6RightAssoc -> MemberAnyRef MemberAnyRefList6RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList6RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList6RightAssoc, "MemberAnyRefList6RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList7RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList7RightAssoc -> MemberAnyRef MemberAnyRefList7RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList7RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList7RightAssoc, "MemberAnyRefList7RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList8RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList8RightAssoc -> MemberAnyRef MemberAnyRefList8RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList8RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList8RightAssoc, "MemberAnyRefList8RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList9RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList9RightAssoc -> MemberAnyRef MemberAnyRefList9RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList9RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList9RightAssoc, "MemberAnyRefList9RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList10RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList10RightAssoc -> MemberAnyRef MemberAnyRefList10RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList10RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList10RightAssoc, "MemberAnyRefList10RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList11RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList11RightAssoc -> MemberAnyRef MemberAnyRefList11RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList11RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList11RightAssoc, "MemberAnyRefList11RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList12RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList12RightAssoc -> MemberAnyRef MemberAnyRefList12RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList12RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList12RightAssoc, "MemberAnyRefList12RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList13RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList13RightAssoc -> MemberAnyRef MemberAnyRefList13RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList13RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList13RightAssoc, "MemberAnyRefList13RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAnyRefList14RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAnyRefList14RightAssoc -> MemberAnyRef MemberAnyRefList14RightAssoc
            if ((ExpressionParser.MemberAnyRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.MemberAnyRef == context.SymbolId))) {
                    context.Error("Expecting MemberAnyRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                context.Advance();
                children.AddRange(ExpressionParser.ParseMemberAnyRefList14RightAssoc(context).Children);
                return new ParseNode(ExpressionParser.MemberAnyRefList14RightAssoc, "MemberAnyRefList14RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAnyRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCatchClauseListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CatchClauseListRightAssoc -> CatchClause CatchClauseListRightAssoc
            if ((StatementParser.CatchClause == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (StatementParser.CatchClause == context.SymbolId))) {
                    context.Error("Expecting CatchClause at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(StatementParser.CatchClause, "CatchClause", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(StatementParser.ParseCatchClauseListRightAssoc(context).Children);
                return new ParseNode(StatementParser.CatchClauseListRightAssoc, "CatchClauseListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CatchClause at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseStatementListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // StatementListRightAssoc -> Statement StatementListRightAssoc
            if ((StatementParser.InnerStatement == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(StatementParser.ParseStatement(context));
                children.AddRange(StatementParser.ParseStatementListRightAssoc(context).Children);
                return new ParseNode(StatementParser.StatementListRightAssoc, "StatementListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Statement at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseStatementList2RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // StatementList2RightAssoc -> Statement StatementList2RightAssoc
            if ((StatementParser.InnerStatement == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(StatementParser.ParseStatement(context));
                children.AddRange(StatementParser.ParseStatementList2RightAssoc(context).Children);
                return new ParseNode(StatementParser.StatementList2RightAssoc, "StatementList2RightAssoc", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Statement at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeArgListListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeArgListListRightAssoc -> comma CustomAttributeArg CustomAttributeArgListListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(TypeDeclParser.ParseCustomAttributeArg(context));
                children.AddRange(TypeDeclParser.ParseCustomAttributeArgListListRightAssoc(context).Children);
                return new ParseNode(TypeDeclParser.CustomAttributeArgListListRightAssoc, "CustomAttributeArgListListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // CustomAttributeArgListListRightAssoc ->
            if ((ExpressionParser.rparen == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(TypeDeclParser.CustomAttributeArgListListRightAssoc, "CustomAttributeArgListListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupListRightAssoc -> comma CustomAttribute CustomAttributeGroupListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(TypeDeclParser.ParseCustomAttribute(context));
                children.AddRange(TypeDeclParser.ParseCustomAttributeGroupListRightAssoc(context).Children);
                return new ParseNode(TypeDeclParser.CustomAttributeGroupListRightAssoc, "CustomAttributeGroupListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // CustomAttributeGroupListRightAssoc ->
            if ((ExpressionParser.rbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(TypeDeclParser.CustomAttributeGroupListRightAssoc, "CustomAttributeGroupListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupList2RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupList2RightAssoc -> comma CustomAttribute CustomAttributeGroupList2RightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(TypeDeclParser.ParseCustomAttribute(context));
                children.AddRange(TypeDeclParser.ParseCustomAttributeGroupList2RightAssoc(context).Children);
                return new ParseNode(TypeDeclParser.CustomAttributeGroupList2RightAssoc, "CustomAttributeGroupList2RightAssoc", children.ToArray(), line__, column__, position__);
            }
            // CustomAttributeGroupList2RightAssoc ->
            if ((ExpressionParser.rbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(TypeDeclParser.CustomAttributeGroupList2RightAssoc, "CustomAttributeGroupList2RightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupList3RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupList3RightAssoc -> CustomAttributeGroup CustomAttributeGroupList3RightAssoc
            // CustomAttributeGroupList3RightAssoc ->
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                ParserContext context2__;
                int advanceCount__ = 0;
                System.Exception lastExcept = null;
                context2__ = context.GetLookAhead();
                context2__.EnsureStarted();
                // CustomAttributeGroupList3RightAssoc -> CustomAttributeGroup CustomAttributeGroupList3RightAssoc
                try {
                    if ((ExpressionParser.lbracket == context2__.SymbolId)) {
                        System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                        children.Add(TypeDeclParser.ParseCustomAttributeGroup(context2__));
                        children.AddRange(TypeDeclParser.ParseCustomAttributeGroupList3RightAssoc(context2__).Children);
                        TypeDeclParser.ParseCustomAttributeGroup(context);
                        TypeDeclParser.ParseCustomAttributeGroupList3RightAssoc(context);
                        return new ParseNode(TypeDeclParser.CustomAttributeGroupList3RightAssoc, "CustomAttributeGroupList3RightAssoc", children.ToArray(), line__, column__, position__);
                    }
                    context.Error("Expecting lbracket");
                }
                catch (SyntaxException ex) {
                    if ((context2__.AdvanceCount > advanceCount__)) {
                        lastExcept = ex;
                        advanceCount__ = context2__.AdvanceCount;
                    }
                }
                finally {

                }
                if ((ExpressionParser.lbracket == context.SymbolId)) {
                    ParseNode[] children = new ParseNode[0];
                    return new ParseNode(TypeDeclParser.CustomAttributeGroupList3RightAssoc, "CustomAttributeGroupList3RightAssoc", children, line__, column__, position__);
                }
                throw lastExcept;
            }
            // CustomAttributeGroupList3RightAssoc ->
            if (((((((((((((((((((((((((((((((((ExpressionParser.newKeyword == context.SymbolId) 
                        || (TypeDeclParser.constKeyword == context.SymbolId)) 
                        || (TypeDeclParser.publicKeyword == context.SymbolId)) 
                        || (TypeDeclParser.protectedKeyword == context.SymbolId)) 
                        || (TypeDeclParser.internalKeyword == context.SymbolId)) 
                        || (TypeDeclParser.privateKeyword == context.SymbolId)) 
                        || (TypeDeclParser.staticKeyword == context.SymbolId)) 
                        || (TypeDeclParser.overrideKeyword == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId)) 
                        || (TypeDeclParser.eventKeyword == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (TypeDeclParser.structKeyword == context.SymbolId)) 
                        || (TypeDeclParser.classKeyword == context.SymbolId)) 
                        || (TypeDeclParser.enumKeyword == context.SymbolId)) 
                        || (TypeDeclParser.interfaceKeyword == context.SymbolId)) 
                        || (TypeDeclParser.partialKeyword == context.SymbolId)) 
                        || (TypeDeclParser.namespaceKeyword == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(TypeDeclParser.CustomAttributeGroupList3RightAssoc, "CustomAttributeGroupList3RightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroup at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeAttributesListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeAttributesListRightAssoc -> publicKeyword TypeAttributesListRightAssoc
            if ((TypeDeclParser.publicKeyword == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (TypeDeclParser.publicKeyword == context.SymbolId))) {
                    context.Error("Expecting publicKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(TypeDeclParser.publicKeyword, "publicKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(TypeDeclParser.ParseTypeAttributesListRightAssoc(context).Children);
                return new ParseNode(TypeDeclParser.TypeAttributesListRightAssoc, "TypeAttributesListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // TypeAttributesListRightAssoc ->
            if ((((((((TypeDeclParser.privateKeyword == context.SymbolId) 
                        || (TypeDeclParser.internalKeyword == context.SymbolId)) 
                        || (TypeDeclParser.classKeyword == context.SymbolId)) 
                        || (TypeDeclParser.enumKeyword == context.SymbolId)) 
                        || (TypeDeclParser.structKeyword == context.SymbolId)) 
                        || (TypeDeclParser.interfaceKeyword == context.SymbolId)) 
                        || (TypeDeclParser.partialKeyword == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(TypeDeclParser.TypeAttributesListRightAssoc, "TypeAttributesListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting publicKeyword at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeAttributesListRightAssoc2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeAttributesListRightAssoc2 -> privateKeyword TypeAttributesListRightAssoc2
            if ((TypeDeclParser.privateKeyword == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (TypeDeclParser.privateKeyword == context.SymbolId))) {
                    context.Error("Expecting privateKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(TypeDeclParser.privateKeyword, "privateKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(TypeDeclParser.ParseTypeAttributesListRightAssoc2(context).Children);
                return new ParseNode(TypeDeclParser.TypeAttributesListRightAssoc2, "TypeAttributesListRightAssoc2", children.ToArray(), line__, column__, position__);
            }
            // TypeAttributesListRightAssoc2 ->
            if (((((((TypeDeclParser.internalKeyword == context.SymbolId) 
                        || (TypeDeclParser.classKeyword == context.SymbolId)) 
                        || (TypeDeclParser.enumKeyword == context.SymbolId)) 
                        || (TypeDeclParser.structKeyword == context.SymbolId)) 
                        || (TypeDeclParser.interfaceKeyword == context.SymbolId)) 
                        || (TypeDeclParser.partialKeyword == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(TypeDeclParser.TypeAttributesListRightAssoc2, "TypeAttributesListRightAssoc2", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting privateKeyword at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseEnumFieldsListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // EnumFieldsListRightAssoc -> comma EnumField EnumFieldsListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(TypeDeclParser.ParseEnumField(context));
                children.AddRange(TypeDeclParser.ParseEnumFieldsListRightAssoc(context).Children);
                return new ParseNode(TypeDeclParser.EnumFieldsListRightAssoc, "EnumFieldsListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // EnumFieldsListRightAssoc ->
            if ((ExpressionParser.rbrace == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(TypeDeclParser.EnumFieldsListRightAssoc, "EnumFieldsListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseWhereClauseListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // WhereClauseListRightAssoc -> comma WhereClausePart WhereClauseListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(TypeDeclParser.ParseWhereClausePart(context));
                children.AddRange(TypeDeclParser.ParseWhereClauseListRightAssoc(context).Children);
                return new ParseNode(TypeDeclParser.WhereClauseListRightAssoc, "WhereClauseListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // WhereClauseListRightAssoc ->
            if ((ExpressionParser.lbrace == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(TypeDeclParser.WhereClauseListRightAssoc, "WhereClauseListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeParamsListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeParamsListRightAssoc -> comma Identifier TypeParamsListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                children.AddRange(TypeDeclParser.ParseTypeParamsListRightAssoc(context).Children);
                return new ParseNode(TypeDeclParser.TypeParamsListRightAssoc, "TypeParamsListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // TypeParamsListRightAssoc ->
            if ((ExpressionParser.gt == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(TypeDeclParser.TypeParamsListRightAssoc, "TypeParamsListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeParamsList2RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeParamsList2RightAssoc -> comma Identifier TypeParamsList2RightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                children.AddRange(TypeDeclParser.ParseTypeParamsList2RightAssoc(context).Children);
                return new ParseNode(TypeDeclParser.TypeParamsList2RightAssoc, "TypeParamsList2RightAssoc", children.ToArray(), line__, column__, position__);
            }
            // TypeParamsList2RightAssoc ->
            if ((ExpressionParser.gt == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(TypeDeclParser.TypeParamsList2RightAssoc, "TypeParamsList2RightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMemberAttributeListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MemberAttributeListRightAssoc -> MemberAttribute MemberAttributeListRightAssoc
            if (((((((((ExpressionParser.newKeyword == context.SymbolId) 
                        || (TypeDeclParser.constKeyword == context.SymbolId)) 
                        || (TypeDeclParser.publicKeyword == context.SymbolId)) 
                        || (TypeDeclParser.protectedKeyword == context.SymbolId)) 
                        || (TypeDeclParser.internalKeyword == context.SymbolId)) 
                        || (TypeDeclParser.privateKeyword == context.SymbolId)) 
                        || (TypeDeclParser.staticKeyword == context.SymbolId)) 
                        || (TypeDeclParser.overrideKeyword == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(TypeDeclParser.ParseMemberAttribute(context).Children);
                children.AddRange(TypeDeclParser.ParseMemberAttributeListRightAssoc(context).Children);
                return new ParseNode(TypeDeclParser.MemberAttributeListRightAssoc, "MemberAttributeListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // MemberAttributeListRightAssoc ->
            if (((((TypeDeclParser.enumKeyword == context.SymbolId) 
                        || (TypeDeclParser.structKeyword == context.SymbolId)) 
                        || (TypeDeclParser.classKeyword == context.SymbolId)) 
                        || (TypeDeclParser.interfaceKeyword == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(TypeDeclParser.MemberAttributeListRightAssoc, "MemberAttributeListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAttribute at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMethodParamListListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MethodParamListListRightAssoc -> comma MethodParam MethodParamListListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(TypeDeclParser.ParseMethodParam(context));
                children.AddRange(TypeDeclParser.ParseMethodParamListListRightAssoc(context).Children);
                return new ParseNode(TypeDeclParser.MethodParamListListRightAssoc, "MethodParamListListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // MethodParamListListRightAssoc ->
            if ((ExpressionParser.rparen == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(TypeDeclParser.MethodParamListListRightAssoc, "MethodParamListListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseParamListListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ParamListListRightAssoc -> comma Param ParamListListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(TypeDeclParser.ParseParam(context));
                children.AddRange(TypeDeclParser.ParseParamListListRightAssoc(context).Children);
                return new ParseNode(TypeDeclParser.ParamListListRightAssoc, "ParamListListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // ParamListListRightAssoc ->
            if (((ExpressionParser.rparen == context.SymbolId) 
                        || (ExpressionParser.rbracket == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(TypeDeclParser.ParamListListRightAssoc, "ParamListListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseConstructorChainListRightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ConstructorChainListRightAssoc -> comma Expression ConstructorChainListRightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseExpression(context));
                children.AddRange(TypeDeclParser.ParseConstructorChainListRightAssoc(context).Children);
                return new ParseNode(TypeDeclParser.ConstructorChainListRightAssoc, "ConstructorChainListRightAssoc", children.ToArray(), line__, column__, position__);
            }
            // ConstructorChainListRightAssoc ->
            if ((ExpressionParser.rparen == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(TypeDeclParser.ConstructorChainListRightAssoc, "ConstructorChainListRightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseConstructorChainList2RightAssoc(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ConstructorChainList2RightAssoc -> comma Expression ConstructorChainList2RightAssoc
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.comma == context.SymbolId))) {
                    context.Error("Expecting comma at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.comma, "comma", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(ExpressionParser.ParseExpression(context));
                children.AddRange(TypeDeclParser.ParseConstructorChainList2RightAssoc(context).Children);
                return new ParseNode(TypeDeclParser.ConstructorChainList2RightAssoc, "ConstructorChainList2RightAssoc", children.ToArray(), line__, column__, position__);
            }
            // ConstructorChainList2RightAssoc ->
            if ((ExpressionParser.rparen == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(TypeDeclParser.ConstructorChainList2RightAssoc, "ConstructorChainList2RightAssoc", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting comma at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributePart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributePart -> CustomAttributeArgList rparen
            if (((((((((((((((((((((((((((((((((((((ExpressionParser.verbatimIdentifier == context.SymbolId) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                ParseNode[] children = new ParseNode[2];
                children[0] = TypeDeclParser.ParseCustomAttributeArgList(context);
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.CustomAttributePart, "CustomAttributePart", children, line__, column__, position__);
            }
            // CustomAttributePart -> rparen
            if ((ExpressionParser.rparen == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.CustomAttributePart, "CustomAttributePart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeArgList or rparen at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeArgList(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeArgList -> CustomAttributeArg CustomAttributeArgListPart
            if (((((((((((((((((((((((((((((((((((((ExpressionParser.verbatimIdentifier == context.SymbolId) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.add == context.SymbolId)) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(TypeDeclParser.ParseCustomAttributeArg(context));
                children.AddRange(TypeDeclParser.ParseCustomAttributeArgListPart(context).Children);
                return new ParseNode(TypeDeclParser.CustomAttributeArgList, "CustomAttributeArgList", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeArg at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeArgListPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeArgListPart -> CustomAttributeArgListList
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(TypeDeclParser.ParseCustomAttributeArgListList(context).Children);
                return new ParseNode(TypeDeclParser.CustomAttributeArgListPart, "CustomAttributeArgListPart", children.ToArray(), line__, column__, position__);
            }
            // CustomAttributeArgListPart ->
            if ((ExpressionParser.rparen == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(TypeDeclParser.CustomAttributeArgListPart, "CustomAttributeArgListPart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeArgListList at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupPart -> CustomAttributeGroupList rbracket
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(TypeDeclParser.ParseCustomAttributeGroupList(context).Children);
                if ((false 
                            == (ExpressionParser.rbracket == context.SymbolId))) {
                    context.Error("Expecting rbracket at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.rbracket, "rbracket", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                return new ParseNode(TypeDeclParser.CustomAttributeGroupPart, "CustomAttributeGroupPart", children.ToArray(), line__, column__, position__);
            }
            // CustomAttributeGroupPart -> rbracket
            if ((ExpressionParser.rbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.rbracket == context.SymbolId))) {
                    context.Error("Expecting rbracket at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.rbracket, "rbracket", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.CustomAttributeGroupPart, "CustomAttributeGroupPart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroupList or rbracket at line {0}, column {1}, position " +
                        "{2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupPart2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupPart2 -> CustomAttributeGroupList2 rbracket
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(TypeDeclParser.ParseCustomAttributeGroupList2(context).Children);
                if ((false 
                            == (ExpressionParser.rbracket == context.SymbolId))) {
                    context.Error("Expecting rbracket at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.rbracket, "rbracket", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                return new ParseNode(TypeDeclParser.CustomAttributeGroupPart2, "CustomAttributeGroupPart2", children.ToArray(), line__, column__, position__);
            }
            // CustomAttributeGroupPart2 -> rbracket
            if ((ExpressionParser.rbracket == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.rbracket == context.SymbolId))) {
                    context.Error("Expecting rbracket at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.rbracket, "rbracket", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.CustomAttributeGroupPart2, "CustomAttributeGroupPart2", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroupList2 or rbracket at line {0}, column {1}, position" +
                        " {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseEnumFieldsPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // EnumFieldsPart -> EnumFieldsList
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(TypeDeclParser.ParseEnumFieldsList(context).Children);
                return new ParseNode(TypeDeclParser.EnumFieldsPart, "EnumFieldsPart", children.ToArray(), line__, column__, position__);
            }
            // EnumFieldsPart ->
            if ((ExpressionParser.rbrace == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(TypeDeclParser.EnumFieldsPart, "EnumFieldsPart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting EnumFieldsList at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseWhereClause(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // WhereClause -> Identifier colon WhereClausePart WhereClausePart2
            if (((ExpressionParser.verbatimIdentifier == context.SymbolId) 
                        || (ExpressionParser.identifier2 == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                if ((false 
                            == (StatementParser.colon == context.SymbolId))) {
                    context.Error("Expecting colon at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(StatementParser.colon, "colon", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.Add(TypeDeclParser.ParseWhereClausePart(context));
                children.AddRange(TypeDeclParser.ParseWhereClausePart2(context).Children);
                return new ParseNode(TypeDeclParser.WhereClause, "WhereClause", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting Identifier at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseWhereClausePart2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // WhereClausePart2 -> WhereClauseList
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(TypeDeclParser.ParseWhereClauseList(context).Children);
                return new ParseNode(TypeDeclParser.WhereClausePart2, "WhereClausePart2", children.ToArray(), line__, column__, position__);
            }
            // WhereClausePart2 ->
            if ((ExpressionParser.lbrace == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(TypeDeclParser.WhereClausePart2, "WhereClausePart2", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting WhereClauseList at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeParamsPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeParamsPart -> TypeParamsList gt
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(TypeDeclParser.ParseTypeParamsList(context).Children);
                if ((false 
                            == (ExpressionParser.gt == context.SymbolId))) {
                    context.Error("Expecting gt at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.gt, "gt", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                return new ParseNode(TypeDeclParser.TypeParamsPart, "TypeParamsPart", children.ToArray(), line__, column__, position__);
            }
            // TypeParamsPart -> gt
            if ((ExpressionParser.gt == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.gt == context.SymbolId))) {
                    context.Error("Expecting gt at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.gt, "gt", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.TypeParamsPart, "TypeParamsPart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting TypeParamsList or gt at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeParamsPart2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeParamsPart2 -> TypeParamsList2 gt
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(TypeDeclParser.ParseTypeParamsList2(context).Children);
                if ((false 
                            == (ExpressionParser.gt == context.SymbolId))) {
                    context.Error("Expecting gt at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.gt, "gt", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                return new ParseNode(TypeDeclParser.TypeParamsPart2, "TypeParamsPart2", children.ToArray(), line__, column__, position__);
            }
            // TypeParamsPart2 -> gt
            if ((ExpressionParser.gt == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.gt == context.SymbolId))) {
                    context.Error("Expecting gt at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.gt, "gt", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.TypeParamsPart2, "TypeParamsPart2", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting TypeParamsList2 or gt at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseInterface(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // Interface -> MemberAttributes interfaceKeyword Identifier InterfacePart
            if (((((((((ExpressionParser.newKeyword == context.SymbolId) 
                        || (TypeDeclParser.constKeyword == context.SymbolId)) 
                        || (TypeDeclParser.publicKeyword == context.SymbolId)) 
                        || (TypeDeclParser.protectedKeyword == context.SymbolId)) 
                        || (TypeDeclParser.internalKeyword == context.SymbolId)) 
                        || (TypeDeclParser.privateKeyword == context.SymbolId)) 
                        || (TypeDeclParser.staticKeyword == context.SymbolId)) 
                        || (TypeDeclParser.overrideKeyword == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(TypeDeclParser.ParseMemberAttributes(context));
                if ((false 
                            == (TypeDeclParser.interfaceKeyword == context.SymbolId))) {
                    context.Error("Expecting interfaceKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(TypeDeclParser.interfaceKeyword, "interfaceKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                children.AddRange(TypeDeclParser.ParseInterfacePart(context).Children);
                return new ParseNode(TypeDeclParser.Interface, "Interface", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MemberAttributes at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseInterfacePart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // InterfacePart -> lt TypeParams gt TypeDeclPart
            if ((ExpressionParser.lt == context.SymbolId)) {
                ParseNode[] children = new ParseNode[4];
                if ((false 
                            == (ExpressionParser.lt == context.SymbolId))) {
                    context.Error("Expecting lt at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.lt, "lt", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[1] = TypeDeclParser.ParseTypeParams(context);
                if ((false 
                            == (ExpressionParser.gt == context.SymbolId))) {
                    context.Error("Expecting gt at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[2] = new ParseNode(ExpressionParser.gt, "gt", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                children[3] = TypeDeclParser.ParseTypeDeclPart(context);
                return new ParseNode(TypeDeclParser.InterfacePart, "InterfacePart", children, line__, column__, position__);
            }
            // InterfacePart -> TypeDeclPart
            if ((((StatementParser.colon == context.SymbolId) 
                        || (TypeDeclParser.whereKeyword == context.SymbolId)) 
                        || (ExpressionParser.lbrace == context.SymbolId))) {
                ParseNode[] children = new ParseNode[1];
                children[0] = TypeDeclParser.ParseTypeDeclPart(context);
                return new ParseNode(TypeDeclParser.InterfacePart, "InterfacePart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting lt or TypeDeclPart at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseMethodParamListPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // MethodParamListPart -> MethodParamListList
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(TypeDeclParser.ParseMethodParamListList(context).Children);
                return new ParseNode(TypeDeclParser.MethodParamListPart, "MethodParamListPart", children.ToArray(), line__, column__, position__);
            }
            // MethodParamListPart ->
            if ((ExpressionParser.rparen == context.SymbolId)) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(TypeDeclParser.MethodParamListPart, "MethodParamListPart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting MethodParamListList at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseParamListPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ParamListPart -> ParamListList
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(TypeDeclParser.ParseParamListList(context).Children);
                return new ParseNode(TypeDeclParser.ParamListPart, "ParamListPart", children.ToArray(), line__, column__, position__);
            }
            // ParamListPart ->
            if (((ExpressionParser.rparen == context.SymbolId) 
                        || (ExpressionParser.rbracket == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(TypeDeclParser.ParamListPart, "ParamListPart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting ParamListList at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParsePropertyGet(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // PropertyGet -> getKeyword PropertyGetPart
            if ((TypeDeclParser.getKeyword == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (TypeDeclParser.getKeyword == context.SymbolId))) {
                    context.Error("Expecting getKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(TypeDeclParser.getKeyword, "getKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(TypeDeclParser.ParsePropertyGetPart(context).Children);
                return new ParseNode(TypeDeclParser.PropertyGet, "PropertyGet", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting getKeyword at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParsePropertyGetPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // PropertyGetPart -> StatementBlock
            if ((ExpressionParser.lbrace == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                children[0] = StatementParser.ParseStatementBlock(context);
                return new ParseNode(TypeDeclParser.PropertyGetPart, "PropertyGetPart", children, line__, column__, position__);
            }
            // PropertyGetPart -> semi
            if ((StatementParser.semi == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (StatementParser.semi == context.SymbolId))) {
                    context.Error("Expecting semi at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(StatementParser.semi, "semi", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.PropertyGetPart, "PropertyGetPart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting StatementBlock or semi at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParsePropertySet(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // PropertySet -> setKeyword PropertySetPart
            if ((TypeDeclParser.setKeyword == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (TypeDeclParser.setKeyword == context.SymbolId))) {
                    context.Error("Expecting setKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(TypeDeclParser.setKeyword, "setKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(TypeDeclParser.ParsePropertySetPart(context).Children);
                return new ParseNode(TypeDeclParser.PropertySet, "PropertySet", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting setKeyword at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParsePropertySetPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // PropertySetPart -> StatementBlock
            if ((ExpressionParser.lbrace == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                children[0] = StatementParser.ParseStatementBlock(context);
                return new ParseNode(TypeDeclParser.PropertySetPart, "PropertySetPart", children, line__, column__, position__);
            }
            // PropertySetPart -> semi
            if ((StatementParser.semi == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (StatementParser.semi == context.SymbolId))) {
                    context.Error("Expecting semi at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(StatementParser.semi, "semi", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.PropertySetPart, "PropertySetPart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting StatementBlock or semi at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseConstructorChainPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ConstructorChainPart -> ConstructorChainList rparen
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(TypeDeclParser.ParseConstructorChainList(context).Children);
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                return new ParseNode(TypeDeclParser.ConstructorChainPart, "ConstructorChainPart", children.ToArray(), line__, column__, position__);
            }
            // ConstructorChainPart -> rparen
            if ((ExpressionParser.rparen == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.ConstructorChainPart, "ConstructorChainPart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting ConstructorChainList or rparen at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseConstructorChainPart2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ConstructorChainPart2 -> ConstructorChainList2 rparen
            if ((ExpressionParser.comma == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(TypeDeclParser.ParseConstructorChainList2(context).Children);
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                return new ParseNode(TypeDeclParser.ConstructorChainPart2, "ConstructorChainPart2", children.ToArray(), line__, column__, position__);
            }
            // ConstructorChainPart2 -> rparen
            if ((ExpressionParser.rparen == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.ConstructorChainPart2, "ConstructorChainPart2", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting ConstructorChainList2 or rparen at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseRelationalExpressionListPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // RelationalExpressionListPart -> lte TermExpression
            if ((ExpressionParser.lte == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.lte == context.SymbolId))) {
                    context.Error("Expecting lte at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.lte, "lte", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                if ((false 
                            == (ExpressionParser.TermExpression == context.SymbolId))) {
                    context.Error("Expecting TermExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.TermExpression, "TermExpression", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.RelationalExpressionListPart, "RelationalExpressionListPart", children, line__, column__, position__);
            }
            // RelationalExpressionListPart -> gte TermExpression
            if ((ExpressionParser.gte == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.gte == context.SymbolId))) {
                    context.Error("Expecting gte at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.gte, "gte", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                if ((false 
                            == (ExpressionParser.TermExpression == context.SymbolId))) {
                    context.Error("Expecting TermExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.TermExpression, "TermExpression", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.RelationalExpressionListPart, "RelationalExpressionListPart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting lte or gte at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseAssignExpressionListPart(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AssignExpressionListPart -> addAssign OrExpression
            if ((ExpressionParser.addAssign == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.addAssign == context.SymbolId))) {
                    context.Error("Expecting addAssign at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.addAssign, "addAssign", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.AssignExpressionListPart, "AssignExpressionListPart", children, line__, column__, position__);
            }
            // AssignExpressionListPart -> mulAssign OrExpression
            if ((ExpressionParser.mulAssign == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.mulAssign == context.SymbolId))) {
                    context.Error("Expecting mulAssign at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.mulAssign, "mulAssign", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.AssignExpressionListPart, "AssignExpressionListPart", children, line__, column__, position__);
            }
            // AssignExpressionListPart -> modAssign OrExpression
            if ((ExpressionParser.modAssign == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.modAssign == context.SymbolId))) {
                    context.Error("Expecting modAssign at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.modAssign, "modAssign", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.AssignExpressionListPart, "AssignExpressionListPart", children, line__, column__, position__);
            }
            // AssignExpressionListPart -> bitwiseOrAssign OrExpression
            if ((ExpressionParser.bitwiseOrAssign == context.SymbolId)) {
                ParseNode[] children = new ParseNode[2];
                if ((false 
                            == (ExpressionParser.bitwiseOrAssign == context.SymbolId))) {
                    context.Error("Expecting bitwiseOrAssign at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.bitwiseOrAssign, "bitwiseOrAssign", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                if ((false 
                            == (ExpressionParser.OrExpression == context.SymbolId))) {
                    context.Error("Expecting OrExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[1] = new ParseNode(ExpressionParser.OrExpression, "OrExpression", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(ExpressionParser.AssignExpressionListPart, "AssignExpressionListPart", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting addAssign, mulAssign, modAssign, or bitwiseOrAssign at line {0}, column" +
                        " {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseEqualityExpressionListRightAssoc2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // EqualityExpressionListRightAssoc2 -> notEq RelationalExpression EqualityExpressionListRightAssoc2
            if ((ExpressionParser.notEq == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.notEq == context.SymbolId))) {
                    context.Error("Expecting notEq at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.notEq, "notEq", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.RelationalExpression == context.SymbolId))) {
                    context.Error("Expecting RelationalExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.RelationalExpression, "RelationalExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseEqualityExpressionListRightAssoc2(context).Children);
                return new ParseNode(ExpressionParser.EqualityExpressionListRightAssoc2, "EqualityExpressionListRightAssoc2", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting notEq at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTermExpressionListRightAssoc2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TermExpressionListRightAssoc2 -> sub FactorExpression TermExpressionListRightAssoc2
            if ((ExpressionParser.sub == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.sub == context.SymbolId))) {
                    context.Error("Expecting sub at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.sub, "sub", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.FactorExpression == context.SymbolId))) {
                    context.Error("Expecting FactorExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.FactorExpression, "FactorExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseTermExpressionListRightAssoc2(context).Children);
                return new ParseNode(ExpressionParser.TermExpressionListRightAssoc2, "TermExpressionListRightAssoc2", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting sub at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseFactorExpressionListRightAssoc3(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // FactorExpressionListRightAssoc3 -> div UnaryExpression FactorExpressionListRightAssoc3
            if ((ExpressionParser.div == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.div == context.SymbolId))) {
                    context.Error("Expecting div at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.div, "div", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.UnaryExpression == context.SymbolId))) {
                    context.Error("Expecting UnaryExpression at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.UnaryExpression, "UnaryExpression", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(ExpressionParser.ParseFactorExpressionListRightAssoc3(context).Children);
                return new ParseNode(ExpressionParser.FactorExpressionListRightAssoc3, "FactorExpressionListRightAssoc3", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting div at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeAttributesListRightAssoc3(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeAttributesListRightAssoc3 -> internalKeyword TypeAttributesListRightAssoc3
            if ((TypeDeclParser.internalKeyword == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (TypeDeclParser.internalKeyword == context.SymbolId))) {
                    context.Error("Expecting internalKeyword at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(TypeDeclParser.internalKeyword, "internalKeyword", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(TypeDeclParser.ParseTypeAttributesListRightAssoc3(context).Children);
                return new ParseNode(TypeDeclParser.TypeAttributesListRightAssoc3, "TypeAttributesListRightAssoc3", children.ToArray(), line__, column__, position__);
            }
            // TypeAttributesListRightAssoc3 ->
            if ((((((TypeDeclParser.classKeyword == context.SymbolId) 
                        || (TypeDeclParser.enumKeyword == context.SymbolId)) 
                        || (TypeDeclParser.structKeyword == context.SymbolId)) 
                        || (TypeDeclParser.interfaceKeyword == context.SymbolId)) 
                        || (TypeDeclParser.partialKeyword == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(TypeDeclParser.TypeAttributesListRightAssoc3, "TypeAttributesListRightAssoc3", children, line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting internalKeyword at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseRelationalExpressionListRightAssoc3(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // RelationalExpressionListRightAssoc3 -> RelationalExpressionListPart RelationalExpressionListRightAssoc3
            if (((ExpressionParser.lte == context.SymbolId) 
                        || (ExpressionParser.gte == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseRelationalExpressionListPart(context).Children);
                children.AddRange(ExpressionParser.ParseRelationalExpressionListRightAssoc3(context).Children);
                return new ParseNode(ExpressionParser.RelationalExpressionListRightAssoc3, "RelationalExpressionListRightAssoc3", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting RelationalExpressionListPart at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseAssignExpressionListRightAssoc5(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // AssignExpressionListRightAssoc5 -> AssignExpressionListPart AssignExpressionListRightAssoc5
            if (((((ExpressionParser.addAssign == context.SymbolId) 
                        || (ExpressionParser.mulAssign == context.SymbolId)) 
                        || (ExpressionParser.modAssign == context.SymbolId)) 
                        || (ExpressionParser.bitwiseOrAssign == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseAssignExpressionListPart(context).Children);
                children.AddRange(ExpressionParser.ParseAssignExpressionListRightAssoc5(context).Children);
                return new ParseNode(ExpressionParser.AssignExpressionListRightAssoc5, "AssignExpressionListRightAssoc5", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting AssignExpressionListPart at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttribute(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttribute -> TypeBase CustomAttributePart2
            if (((((((((((((((((ExpressionParser.boolType == context.SymbolId) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseTypeBase(context));
                children.AddRange(TypeDeclParser.ParseCustomAttributePart2(context).Children);
                return new ParseNode(TypeDeclParser.CustomAttribute, "CustomAttribute", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting TypeBase at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributePart2(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributePart2 ->
            if (((ExpressionParser.comma == context.SymbolId) 
                        || (ExpressionParser.rbracket == context.SymbolId))) {
                ParseNode[] children = new ParseNode[0];
                return new ParseNode(TypeDeclParser.CustomAttributePart2, "CustomAttributePart2", children, line__, column__, position__);
            }
            // CustomAttributePart2 -> lparen CustomAttributePart
            if ((ExpressionParser.lparen == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.lparen == context.SymbolId))) {
                    context.Error("Expecting lparen at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.lparen, "lparen", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(TypeDeclParser.ParseCustomAttributePart(context).Children);
                return new ParseNode(TypeDeclParser.CustomAttributePart2, "CustomAttributePart2", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting lparen at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseTypeParamsPart3(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // TypeParamsPart3 -> CustomAttributeGroup Identifier TypeParamsPart
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(TypeDeclParser.ParseCustomAttributeGroup(context));
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                children.AddRange(TypeDeclParser.ParseTypeParamsPart(context).Children);
                return new ParseNode(TypeDeclParser.TypeParamsPart3, "TypeParamsPart3", children.ToArray(), line__, column__, position__);
            }
            // TypeParamsPart3 -> Identifier TypeParamsPart2
            if (((ExpressionParser.verbatimIdentifier == context.SymbolId) 
                        || (ExpressionParser.identifier2 == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.AddRange(ExpressionParser.ParseIdentifier(context).Children);
                children.AddRange(TypeDeclParser.ParseTypeParamsPart2(context).Children);
                return new ParseNode(TypeDeclParser.TypeParamsPart3, "TypeParamsPart3", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeGroup or Identifier at line {0}, column {1}, position {2" +
                        "}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseConstructorChain(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ConstructorChain -> baseRef lparen ConstructorChainPart3
            if ((ExpressionParser.baseRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.baseRef == context.SymbolId))) {
                    context.Error("Expecting baseRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.baseRef, "baseRef", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.lparen == context.SymbolId))) {
                    context.Error("Expecting lparen at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.lparen, "lparen", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(TypeDeclParser.ParseConstructorChainPart3(context).Children);
                return new ParseNode(TypeDeclParser.ConstructorChain, "ConstructorChain", children.ToArray(), line__, column__, position__);
            }
            // ConstructorChain -> thisRef lparen ConstructorChainPart4
            if ((ExpressionParser.thisRef == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.thisRef == context.SymbolId))) {
                    context.Error("Expecting thisRef at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.thisRef, "thisRef", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                if ((false 
                            == (ExpressionParser.lparen == context.SymbolId))) {
                    context.Error("Expecting lparen at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.lparen, "lparen", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(TypeDeclParser.ParseConstructorChainPart4(context).Children);
                return new ParseNode(TypeDeclParser.ConstructorChain, "ConstructorChain", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting baseRef or thisRef at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseConstructorChainPart3(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ConstructorChainPart3 -> rparen
            if ((ExpressionParser.rparen == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.ConstructorChainPart3, "ConstructorChainPart3", children, line__, column__, position__);
            }
            // ConstructorChainPart3 -> Expression ConstructorChainPart
            if (((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseExpression(context));
                children.AddRange(TypeDeclParser.ParseConstructorChainPart(context).Children);
                return new ParseNode(TypeDeclParser.ConstructorChainPart3, "ConstructorChainPart3", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting rparen or Expression at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseConstructorChainPart4(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // ConstructorChainPart4 -> rparen
            if ((ExpressionParser.rparen == context.SymbolId)) {
                ParseNode[] children = new ParseNode[1];
                if ((false 
                            == (ExpressionParser.rparen == context.SymbolId))) {
                    context.Error("Expecting rparen at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children[0] = new ParseNode(ExpressionParser.rparen, "rparen", context.Value, context.Line, context.Column, context.Position);
                context.Advance();
                return new ParseNode(TypeDeclParser.ConstructorChainPart4, "ConstructorChainPart4", children, line__, column__, position__);
            }
            // ConstructorChainPart4 -> Expression ConstructorChainPart2
            if (((((((((((((((((((((((((((((((((((((ExpressionParser.add == context.SymbolId) 
                        || (ExpressionParser.sub == context.SymbolId)) 
                        || (ExpressionParser.not == context.SymbolId)) 
                        || (ExpressionParser.inc == context.SymbolId)) 
                        || (ExpressionParser.dec == context.SymbolId)) 
                        || (ExpressionParser.lparen == context.SymbolId)) 
                        || (ExpressionParser.nullLiteral == context.SymbolId)) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.typeOf == context.SymbolId)) 
                        || (ExpressionParser.nameOf == context.SymbolId)) 
                        || (ExpressionParser.defaultOf == context.SymbolId)) 
                        || (ExpressionParser.verbatimIdentifier == context.SymbolId)) 
                        || (ExpressionParser.verbatimStringLiteral == context.SymbolId)) 
                        || (ExpressionParser.characterLiteral == context.SymbolId)) 
                        || (ExpressionParser.integerLiteral == context.SymbolId)) 
                        || (ExpressionParser.floatLiteral == context.SymbolId)) 
                        || (ExpressionParser.stringLiteral == context.SymbolId)) 
                        || (ExpressionParser.boolLiteral == context.SymbolId)) 
                        || (ExpressionParser.newKeyword == context.SymbolId)) 
                        || (ExpressionParser.thisRef == context.SymbolId)) 
                        || (ExpressionParser.baseRef == context.SymbolId)) 
                        || (ExpressionParser.boolType == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(ExpressionParser.ParseExpression(context));
                children.AddRange(TypeDeclParser.ParseConstructorChainPart2(context).Children);
                return new ParseNode(TypeDeclParser.ConstructorChainPart4, "ConstructorChainPart4", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting rparen or Expression at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroup(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroup -> lbracket CustomAttributeGroupPart3
            if ((ExpressionParser.lbracket == context.SymbolId)) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                if ((false 
                            == (ExpressionParser.lbracket == context.SymbolId))) {
                    context.Error("Expecting lbracket at line {0}, column {1}, position {2}", context.Line, context.Column, context.Position);
                }
                children.Add(new ParseNode(ExpressionParser.lbracket, "lbracket", context.Value, context.Line, context.Column, context.Position));
                context.Advance();
                children.AddRange(TypeDeclParser.ParseCustomAttributeGroupPart3(context).Children);
                return new ParseNode(TypeDeclParser.CustomAttributeGroup, "CustomAttributeGroup", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting lbracket at line {0}, column {1}, position {2}", line__, column__, position__), line__, column__, position__);
        }
        internal static ParseNode ParseCustomAttributeGroupPart3(ParserContext context) {
            int line__ = context.Line;
            int column__ = context.Column;
            long position__ = context.Position;
            // CustomAttributeGroupPart3 -> CustomAttributeTarget CustomAttribute CustomAttributeGroupPart
            if (((TypeDeclParser.assemblyKeyword == context.SymbolId) 
                        || (StatementParser.returnKeyword == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(TypeDeclParser.ParseCustomAttributeTarget(context));
                children.Add(TypeDeclParser.ParseCustomAttribute(context));
                children.AddRange(TypeDeclParser.ParseCustomAttributeGroupPart(context).Children);
                return new ParseNode(TypeDeclParser.CustomAttributeGroupPart3, "CustomAttributeGroupPart3", children.ToArray(), line__, column__, position__);
            }
            // CustomAttributeGroupPart3 -> CustomAttribute CustomAttributeGroupPart2
            if (((((((((((((((((ExpressionParser.boolType == context.SymbolId) 
                        || (ExpressionParser.identifier2 == context.SymbolId)) 
                        || (ExpressionParser.charType == context.SymbolId)) 
                        || (ExpressionParser.stringType == context.SymbolId)) 
                        || (ExpressionParser.floatType == context.SymbolId)) 
                        || (ExpressionParser.doubleType == context.SymbolId)) 
                        || (ExpressionParser.decimalType == context.SymbolId)) 
                        || (ExpressionParser.sbyteType == context.SymbolId)) 
                        || (ExpressionParser.byteType == context.SymbolId)) 
                        || (ExpressionParser.shortType == context.SymbolId)) 
                        || (ExpressionParser.ushortType == context.SymbolId)) 
                        || (ExpressionParser.intType == context.SymbolId)) 
                        || (ExpressionParser.uintType == context.SymbolId)) 
                        || (ExpressionParser.longType == context.SymbolId)) 
                        || (ExpressionParser.ulongType == context.SymbolId)) 
                        || (ExpressionParser.objectType == context.SymbolId))) {
                System.Collections.Generic.List<ParseNode> children = new System.Collections.Generic.List<ParseNode>();
                children.Add(TypeDeclParser.ParseCustomAttribute(context));
                children.AddRange(TypeDeclParser.ParseCustomAttributeGroupPart2(context).Children);
                return new ParseNode(TypeDeclParser.CustomAttributeGroupPart3, "CustomAttributeGroupPart3", children.ToArray(), line__, column__, position__);
            }
            throw new SyntaxException(string.Format("Expecting CustomAttributeTarget or CustomAttribute at line {0}, column {1}, posit" +
                        "ion {2}", line__, column__, position__), line__, column__, position__);
        }
    }
    /// <summary>
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Parsley", "0.1.2.0")]
    internal class SyntaxException : Exception {
        private int _line;
        private int _column;
        private long _position;
        /// <summary>
        /// Creates a syntax exception with the specified arguments
        /// </summary>
        /// <param name="message">The error message</param>
        /// <param name="line">The line where the error occurred</param>
        /// <param name="column">The column where the error occured</param>
        /// <param name="position">The position where the error occured</param>
        public SyntaxException(string message, int line, int column, long position) : 
                base(SyntaxException._GetMessage(message, line, column, position)) {
            this._line = line;
            this._column = column;
            this._position = position;
        }
        /// <summary>
        /// The line where the error occurred
        /// </summary>
        public int Line {
            get {
                return this._line;
            }
        }
        /// <summary>
        /// The column where the error occurred
        /// </summary>
        public int Column {
            get {
                return this._column;
            }
        }
        /// <summary>
        /// The position where the error occurred
        /// </summary>
        public long Position {
            get {
                return this._position;
            }
        }
        static string _GetMessage(string message, int line, int column, long position) {
            return string.Format("{0} at line {1}, column {2}, position {3}", message, line, column, position);
        }
    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Parsley", "0.1.2.0")]
    internal partial class ParseNode {
        private int _symbolId;
        private string _symbol;
        private string _value;
        private int _line;
        private int _column;
        private long _position;
        private ParseNode[] _children;
        public ParseNode(int symbolId, string symbol, ParseNode[] children, int line, int column, long position) {
            this._symbolId = symbolId;
            this._symbol = symbol;
            this._value = null;
            this._children = children;
            this._line = line;
            this._column = column;
            this._position = position;
        }
        public ParseNode(int symbolId, string symbol, string value, int line, int column, long position) {
            this._symbolId = symbolId;
            this._symbol = symbol;
            this._value = value;
            this._children = null;
            this._line = line;
            this._column = column;
            this._position = position;
        }
        public bool IsNonTerminal {
            get {
                return (null != this._children);
            }
        }
        public ParseNode[] Children {
            get {
                return this._children;
            }
        }
        public int SymbolId {
            get {
                return this._symbolId;
            }
        }
        public string Symbol {
            get {
                return this._symbol;
            }
        }
        public string Value {
            get {
                return this._value;
            }
        }
        public int Line {
            get {
                return this._line;
            }
        }
        public int Column {
            get {
                return this._column;
            }
        }
        public long Position {
            get {
                return this._position;
            }
        }
    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Parsley", "0.1.2.0")]
    internal partial class ParserContext : Object, IDisposable {
        private int _state;
        private IEnumerator<Token> _e;
        private LookAheadEnumerator<Token> _el;
        private Token _t;
        private int _advanceCount;
        private int _line;
        private int _column;
        private long _position;
        public ParserContext(IEnumerable<Token> tokenizer) : 
                this(tokenizer.GetEnumerator(), true) {
        }
        private ParserContext(IEnumerator<Token> enumerator, bool wrap) {
            this._e = enumerator;
            if (wrap) {
                this._el = new LookAheadEnumerator<Token>(enumerator);
                this._e = this._el;
                // we need both pointers to point to the lookahead
            }
            this._state = -1;
            this._t.SymbolId = -1;
            this._advanceCount = 0;
        }
        public void SetLocation(int line, int column, long position) {
            this._line = line;
            this._column = column;
            this._position = position;
        }
        public void EnsureStarted() {
            if ((-1 == this._state)) {
                this.Advance();
            }
        }
        public ParserContext GetLookAhead() {
            if ((null == this._el)) {
                throw new NotSupportedException("This parser context does not support lookahead.");
            }
            ParserContext result = new ParserContext(this._el.LookAhead.GetEnumerator(), true);
            return result;
        }
        public Token Current {
            get {
                return this._t;
            }
        }
        public ParserContext GetLookAhead(bool start) {
            ParserContext result = this.GetLookAhead();
            if (start) {
                result.EnsureStarted();
            }
            return result;
        }
        public int AdvanceCount {
            get {
                return this._advanceCount;
            }
        }
        public void ResetAdvanceCount() {
            this._advanceCount = 0;
        }
        public int SymbolId {
            get {
                return this._t.SymbolId;
            }
        }
        public string Value {
            get {
                return this._t.Value;
            }
        }
        public int Line {
            get {
                return this._t.Line;
            }
        }
        public int Column {
            get {
                return this._t.Column;
            }
        }
        public long Position {
            get {
                return this._t.Position;
            }
        }
        public bool IsEnded {
            get {
                return (-2 == this._state);
            }
        }
        public Token[] Skipped {
            get {
                return this._t.Skipped;
            }
        }
        public bool Advance() {
            if ((false == this._e.MoveNext())) {
                this._t.SymbolId = -2;
                this._state = -2;
            }
            else {
                // sanity check. should never happen
                if ((int.MaxValue == this._advanceCount)) {
                    this._advanceCount = -1;
                }
                this._advanceCount = (this._advanceCount + 1);
                this._state = 0;
                this._t = this._e.Current;
                this._t.Line = (this._t.Line + this._line);
                this._t.Column = (this._t.Column + this._column);
                this._t.Position = (this._t.Position + this._position);
                return true;
            }
            return false;
        }
        public void Error(string message, int line, int column, long position) {
            throw new SyntaxException(string.Format((message + " at line {0}, column {1}, position"), line, column, position), line, column, position);
        }
        public void Error(string message) {
            this.Error(message, this.Line, this.Column, this.Position);
        }
        public void Dispose() {
            this._e.Dispose();
            this._state = -3;
        }
    }
    /// <summary>
    /// An enumerator that provides lookahead without advancing the cursor
    /// </summary>
    /// <typeparam name="T">The type to enumerate</typeparam>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Parsley", "0.1.2.0")]
    internal class LookAheadEnumerator<T> : object, IEnumerator<T>
     {
        private const int _Enumerating = 0;
        private const int _NotStarted = -2;
        private const int _Ended = -1;
        private const int _Disposed = -3;
        private IEnumerator<T> _inner;
        private int _state;
        // for the lookahead queue
        private const int _DefaultCapacity = 16;
        private const float _GrowthFactor = 0.9F;
        private T[] _queue;
        private int _queueHead;
        private int _queueCount;
        /// <summary>
        /// Creates a new instance. Once this is created, the inner/wrapped enumerator must not be touched.
        /// </summary>
        /// <param name="inner"></param>
        public LookAheadEnumerator(IEnumerator<T> inner) {
            this._inner = inner;
            this._state = LookAheadEnumerator<T>._NotStarted;
            this._queue = new T[LookAheadEnumerator<T>._DefaultCapacity];
            this._queueHead = 0;
            this._queueCount = 0;
        }
        /// <summary>
        /// Discards the lookahead and advances the cursor to the physical position.
        /// </summary>
        public void DiscardLookAhead() {
            for (
            ; (1 < this._queueCount); 
            ) {
                this._Dequeue();
            }
        }
        /// <summary>
        /// Retrieves the value under the cursor
        /// </summary>
        public T Current {
            get {
                if ((0 > this._state)) {
                    if ((LookAheadEnumerator<T>._NotStarted == this._state)) {
                        throw new InvalidOperationException("The cursor is before the start of the enumeration.");
                    }
                    if ((LookAheadEnumerator<T>._Ended == this._state)) {
                        throw new InvalidOperationException("The cursor is after the end of the enumeration.");
                    }
                    throw new ObjectDisposedException(typeof(LookAheadEnumerator<T>).Name);
                }
                return this._queue[this._queueHead];
            }
        }
        // legacy enum support (required)
        object System.Collections.IEnumerator.Current {
            get {
                return this.Current;
            }
        }
        internal int QueueCount {
            get {
                return this._queueCount;
            }
        }
        /// <summary>
        /// Attempts to peek the specified number of positions from the current position without advancing
        /// </summary>
        /// <param name="lookahead">The offset from the current position to peek at</param>
        /// <param name="value">The value returned</param>
        /// <returns>True if the peek could be satisfied, otherwise false</returns>
        public bool TryPeek(int lookahead, out T value) {
            if ((LookAheadEnumerator<T>._Disposed == this._state)) {
                throw new ObjectDisposedException(typeof(LookAheadEnumerator<T>).Name);
            }
            if ((0 > lookahead)) {
                throw new ArgumentOutOfRangeException("lookahead");
            }
            if ((LookAheadEnumerator<T>._Ended == this._state)) {
                value = default(T);
                return false;
            }
            if ((LookAheadEnumerator<T>._NotStarted == this._state)) {
                if ((0 == lookahead)) {
                    value = default(T);
                    return false;
                }
            }
            if ((lookahead < this._queueCount)) {
                value = this._queue[((lookahead + this._queueHead) 
                            % this._queue.Length)];
                return true;
            }
            lookahead = (lookahead - this._queueCount);
            value = default(T);
            for (
            ; ((0 <= lookahead) 
                        && this._inner.MoveNext()); 
            ) {
                value = this._inner.Current;
                this._Enqueue(value);
                lookahead = (lookahead - 1);
            }
            return (-1 == lookahead);
        }
        /// <summary>
        /// Peek the specified number of positions from the current position without advancing
        /// </summary>
        /// <param name="lookahead">The offset from the current position to peek at</param>
        /// <returns>The value at the specified position</returns>
        public T Peek(int lookahead) {
            T value;
            if ((false == this.TryPeek(lookahead, out value))) {
                throw new InvalidOperationException("There were not enough values in the enumeration to satisfy the request");
            }
            return value;
        }
        internal bool IsEnumerating {
            get {
                return (-1 < this._state);
            }
        }
        internal bool IsEnded {
            get {
                return (LookAheadEnumerator<T>._Ended == this._state);
            }
        }
        /// <summary>
        /// Retrieves a lookahead cursor from the current cursor that can be navigated without moving the main cursor
        /// </summary>
        public IEnumerable<T> LookAhead {
            get {
                if ((0 > this._state)) {
                    if ((this._state == LookAheadEnumerator<T>._NotStarted)) {
                        throw new InvalidOperationException("The cursor is before the start of the enumeration.");
                    }
                    if ((this._state == LookAheadEnumerator<T>._Ended)) {
                        throw new InvalidOperationException("The cursor is after the end of the enumeration.");
                    }
                    throw new ObjectDisposedException(typeof(LookAheadEnumerator<T>).Name);
                }
                return new LookAheadEnumeratorEnumerable<T>(this);
            }
        }
        /// <summary>
        /// Advances the cursor
        /// </summary>
        /// <returns>True if more input was read, otherwise false</returns>
        bool System.Collections.IEnumerator.MoveNext() {
            if ((0 > this._state)) {
                if ((LookAheadEnumerator<T>._Disposed == this._state)) {
                    throw new ObjectDisposedException(typeof(LookAheadEnumerator<T>).Name);
                }
                if ((LookAheadEnumerator<T>._Ended == this._state)) {
                    return false;
                }
                if ((LookAheadEnumerator<T>._NotStarted == this._state)) {
                    if ((0 < this._queueCount)) {
                        this._state = LookAheadEnumerator<T>._Enumerating;
                        return true;
                    }
                    if ((false == this._inner.MoveNext())) {
                        this._state = LookAheadEnumerator<T>._Ended;
                        return false;
                    }
                    this._Enqueue(this._inner.Current);
                    this._state = LookAheadEnumerator<T>._Enumerating;
                    return true;
                }
            }
            this._Dequeue();
            if ((0 == this._queueCount)) {
                if ((false == this._inner.MoveNext())) {
                    this._state = LookAheadEnumerator<T>._Ended;
                    return false;
                }
                this._Enqueue(this._inner.Current);
            }
            return true;
        }
        /// <summary>
        /// Resets the cursor, and clears the queue.
        /// </summary>
        void System.Collections.IEnumerator.Reset() {
            this._inner.Reset();
            if (((0 < this._queueCount) 
                        && (null == default(T)))) {
                System.Array.Clear(this._queue, this._queueHead, (this._queue.Length - this._queueHead));
                if (((this._queueHead + this._queueCount) 
                            >= this._queue.Length)) {
                    System.Array.Clear(this._queue, 0, (this._queueHead 
                                    + (this._queueCount % this._queue.Length)));
                }
            }
            this._queueHead = 0;
            this._queueCount = 0;
            this._state = LookAheadEnumerator<T>._NotStarted;
        }
        #region IDisposable Support
        /// <summary>
        /// Disposes of this instance
        /// </summary>
        void System.IDisposable.Dispose() {
            if ((false 
                        == (LookAheadEnumerator<T>._Disposed == this._state))) {
                this._inner.Dispose();
                this._state = LookAheadEnumerator<T>._Disposed;
            }
        }
        void _Enqueue(T item) {
            if ((this._queueCount == this._queue.Length)) {
                T[] arr = new T[((int)((this._queue.Length 
                            * (1 + LookAheadEnumerator<T>._GrowthFactor))))];
                if (((this._queueHead + this._queueCount) 
                            <= this._queue.Length)) {
                    System.Array.Copy(this._queue, arr, this._queueCount);
                    this._queueHead = 0;
                    arr[this._queueCount] = item;
                    this._queueCount = (this._queueCount + 1);
                    this._queue = arr;
                }
                else {
                    System.Array.Copy(this._queue, this._queueHead, arr, 0, (this._queue.Length - this._queueHead));
                    System.Array.Copy(this._queue, 0, arr, (this._queue.Length - this._queueHead), this._queueHead);
                    this._queueHead = 0;
                    arr[this._queueCount] = item;
                    this._queueCount = (this._queueCount + 1);
                    this._queue = arr;
                }
            }
            else {
                this._queue[((this._queueHead + this._queueCount) 
                            % this._queue.Length)] = item;
                this._queueCount = (this._queueCount + 1);
            }
        }
        T _Dequeue() {
            if ((0 == this._queueCount)) {
                throw new InvalidOperationException("The queue is empty");
            }
            T result = this._queue[this._queueHead];
            this._queue[this._queueHead] = default(T);
            this._queueHead = (this._queueHead + 1);
            this._queueHead = (this._queueHead % this._queue.Length);
            this._queueCount = (this._queueCount - 1);
            return result;
        }
        #endregion
    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Parsley", "0.1.2.0")]
    internal class LookAheadEnumeratorEnumerable<T> : object, IEnumerable<T>
     {
        private LookAheadEnumerator<T> _outer;
        public LookAheadEnumeratorEnumerable(LookAheadEnumerator<T> outer) {
            this._outer = outer;
        }
        public IEnumerator<T> GetEnumerator() {
            // for some reason VB was resolving new as AddressOf, so use this.
            LookAheadEnumeratorEnumerator<T> result = ((LookAheadEnumeratorEnumerator<T>)(System.Activator.CreateInstance(typeof(LookAheadEnumeratorEnumerator<T>), this._outer)));
            return result;
        }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() {
            return this.GetEnumerator();
        }
    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Parsley", "0.1.2.0")]
    internal class LookAheadEnumeratorEnumerator<T> : object, IEnumerator<T>
     {
        private const int _NotStarted = -2;
        private const int _Ended = -1;
        private const int _Disposed = -3;
        private LookAheadEnumerator<T> _outer;
        private int _index;
        private T _current;
        public LookAheadEnumeratorEnumerator(LookAheadEnumerator<T> outer) {
            this._outer = outer;
            if (this._outer.IsEnumerating) {
                this._current = this._outer.Current;
            }
            this._index = LookAheadEnumeratorEnumerator<T>._NotStarted;
        }
        public T Current {
            get {
                if ((0 > this._index)) {
                    if ((this._index == LookAheadEnumeratorEnumerator<T>._NotStarted)) {
                        throw new InvalidOperationException("The cursor is before the start of the enumeration.");
                    }
                    if ((this._index == LookAheadEnumeratorEnumerator<T>._Ended)) {
                        throw new InvalidOperationException("The cursor is after the end of the enumeration.");
                    }
                    throw new ObjectDisposedException(typeof(LookAheadEnumeratorEnumerator<T>).Name);
                }
                return this._current;
            }
        }
        object System.Collections.IEnumerator.Current {
            get {
                return this.Current;
            }
        }
        void System.IDisposable.Dispose() {
            this._index = LookAheadEnumeratorEnumerator<T>._Disposed;
        }
        bool System.Collections.IEnumerator.MoveNext() {
            T value;
            if ((0 > this._index)) {
                if ((this._index == LookAheadEnumeratorEnumerator<T>._Disposed)) {
                    throw new ObjectDisposedException(typeof(LookAheadEnumeratorEnumerator<T>).Name);
                }
                if ((this._index == LookAheadEnumeratorEnumerator<T>._Ended)) {
                    return false;
                }
                this._index = -1;
            }
            this._index = (this._index + 1);
            if ((false == this._outer.TryPeek(this._index, out value))) {
                this._index = LookAheadEnumeratorEnumerator<T>._Ended;
                return false;
            }
            this._current = value;
            return true;
        }
        void System.Collections.IEnumerator.Reset() {
            this._index = LookAheadEnumeratorEnumerator<T>._NotStarted;
        }
    }
}
