//
//  This CSharp output file generated by Gardens Point LEX
//  Gardens Point LEX (GPLEX) is Copyright (c) John Gough, QUT 2006-2014.
//  Output produced by GPLEX is the property of the user.
//  See accompanying file GPLEXcopyright.rtf.
//
//  GPLEX Version:  1.2.2
//  Machine:  DESKTOP-U8QJ4Q2
//  DateTime: 12/26/2019 5:30:19 AM
//  UserName: gazto
//  GPLEX input file <C:\dev\BuildPack\scratch\Slang.lex - 12/26/2019 5:30:18 AM>
//  GPLEX frame file <embedded resource>
//
//  Option settings: unicode, verbose, noParser, stack, minimize
//  Option settings: classes, compressMap, compressNext, persistBuffer, noEmbedBuffers
//  Fallback code page: Raw 8-bit binary
//

//
// Revised backup code
// Version 1.2.1 of 24-June-2013
//
//
#define BACKUP
#define STACK
#define STANDALONE
#define PERSIST

using System;
using System.IO;
using System.Text;
using System.Globalization;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Diagnostics.CodeAnalysis;

using QUT.GplexBuffers;

namespace CD
{   
    /// <summary>
    /// Summary Canonical example of GPLEX automaton
    /// </summary>
    
#if STANDALONE
    //
    // These are the dummy declarations for stand-alone GPLEX applications
    // normally these declarations would come from the parser.
    // If you declare /noparser, or %option noparser then you get this.
    //

     internal enum Tokens
    { 
      EOF = 0, maxParseToken = int.MaxValue 
      // must have at least these two, values are almost arbitrary
    }

     internal abstract class ScanBase
    {
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public abstract int yylex();

        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yywrap")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yywrap")]
        protected virtual bool yywrap() { return true; }

#if BABEL
        protected abstract int CurrentSc { get; set; }
        // EolState is the 32-bit of state data persisted at 
        // the end of each line for Visual Studio colorization.  
        // The default is to return CurrentSc.  You must override
        // this if you want more complicated behavior.
        public virtual int EolState { 
            get { return CurrentSc; }
            set { CurrentSc = value; } 
        }
    }
    
     internal interface IColorScan
    {
        void SetSource(string source, int offset);
        int GetNext(ref int state, out int start, out int end);
#endif // BABEL
    }

#endif // STANDALONE
    
    // If the compiler can't find the scanner base class maybe you
    // need to run GPPG with the /gplex option, or GPLEX with /noparser
#if BABEL
     internal sealed partial class Scanner : ScanBase, IColorScan
    {
        private ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
        
        protected override int CurrentSc 
        {
             // The current start state is a property
             // to try to avoid the user error of setting
             // scState but forgetting to update the FSA
             // start state "currentStart"
             //
             get { return currentScOrd; }  // i.e. return YY_START;
             set { currentScOrd = value;   // i.e. BEGIN(value);
                   currentStart = startState[value]; }
        }
#else  // BABEL
     internal sealed partial class Scanner : ScanBase
    {
        private ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
#endif // BABEL
        
        /// <summary>
        /// The input buffer for this scanner.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public ScanBuff Buffer { get { return buffer; } }
        
        private static int GetMaxParseToken() {
     System.Reflection.FieldInfo f = typeof(Tokens).GetField("maxParseToken");
            return (f == null ? int.MaxValue : (int)f.GetValue(null));
        }
        
        static int parserMax = GetMaxParseToken();
        
        enum Result {accept, noMatch, contextFound};

        const int maxAccept = 177;
        const int initial = 178;
        const int eofNum = 0;
        const int goStart = -1;
        const int INITIAL = 0;

#region user code
/* 
 * Expected file format is Unicode. In the event that no 
 * byte order mark prefix is found, revert to raw bytes.
 */
enum Tokens {
		EOF = -1
		}
		// foreach Token support
    	public Token Current = _InitToken();
		static Token _InitToken()
		{
			var result = default(Token);
			result.SymbolId = -4;
			return result;
		}
		public void Advance()
		{
			Current.Line = yyline;
			Current.Column = yycol;
			Current.Position = yypos;
			Current.SymbolId = yylex();
			Current.Value = yytext;
		}
		public void Close()
		{
			Current.SymbolId = -3; // _Disposed
		}
		bool _TryReadUntil(int character,StringBuilder sb)
		{
			if (-1 == code) return false;
			var chcmp = character.ToString();
			var s = char.ConvertFromUtf32(code);
			sb.Append(s);
			if (code == character)
				return true;
			while (true)
			{
				GetCode();
				if (-1 == code || code == character)
					break;
				s = char.ConvertFromUtf32(code);
				sb.Append(s);
			}
			if (-1!=code)
			{
				s = char.ConvertFromUtf32(code);
				sb.Append(s);
				if (null == tokTxt)
					tokTxt = sb.ToString();
				else
					tokTxt += sb.ToString();
				return code == character;
			}
			return false;
		}
		// reads until the string is encountered, capturing it.
		bool _TryReadUntilBlockEnd(string blockEnd)
		{
			string s = yytext;
			var sb = new StringBuilder();
			int ch = -1;
			var isPair = false;
			if (char.IsSurrogatePair(blockEnd, 0))
			{
				ch = char.ConvertToUtf32(blockEnd, 0);
				isPair = true;
			} 
			else
				ch = blockEnd[0];
			while (-1 != code && _TryReadUntil(ch,sb))
			{
				bool found = true;
				int i = 1;
				if (isPair)
					++i;
				for (; found && i < blockEnd.Length; ++i)
				{
					GetCode();
					int scmp=blockEnd[i];
					if (char.IsSurrogatePair(blockEnd, i))
					{
						scmp = char.ConvertToUtf32(blockEnd, i);
						++i;
					}
					if (-1==code || code!=scmp)
						found = false;
					else if (-1!=code)
						sb.Append(char.ConvertFromUtf32(code));
				}
				if (found)
				{
					// TODO: verify this
					GetCode();
					tokTxt = s+ sb.ToString();
					return true;
				}
			}
			tokTxt = s+sb.ToString();
			return false;
		}
#endregion user code

        int state;
        int currentStart = startState[0];
        int code;      // last code read
        int cCol;      // column number of code
        int lNum;      // current line number
        //
        // The following instance variables are used, among other
        // things, for constructing the yylloc location objects.
        //
        int tokPos;        // buffer position at start of token
        int tokCol;        // zero-based column number at start of token
        int tokLin;        // line number at start of token
        int tokEPos;       // buffer position at end of token
        int tokECol;       // column number at end of token
        int tokELin;       // line number at end of token
        string tokTxt;     // lazily constructed text of token
#if STACK          
        private Stack<int> scStack = new Stack<int>();
#endif // STACK

#region ScannerTables
    struct Table {
        public int min; public int rng; public int dflt;
        public short[] nxt;
        public Table(int m, int x, int d, short[] n) {
            min = m; rng = x; dflt = d; nxt = n;
        }
    };

    static int[] startState = new int[] {178, 0};

#region TwoLevelCharacterMap
    //
    // There are 67 equivalence classes
    // There are 256 character sequence regions
    // There are 47 tables, 12032 entries
    //
    static sbyte[] mLo0 = new sbyte[256] {
/*     '\0' */ 31, 29, 29, 29, 29, 29, 29, 31, 31, 63, 0, 66, 66, 65, 29, 29, 
/*   '\x10' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/*   '\x20' */ 62, 41, 28, 61, 29, 46, 47, 37, 50, 51, 44, 42, 54, 43, 55, 45, 
/*      '0' */ 56, 32, 32, 32, 32, 32, 32, 32, 35, 35, 29, 29, 38, 39, 40, 29, 
/*      '@' */ 1, 34, 34, 34, 60, 58, 60, 3, 3, 3, 3, 3, 57, 59, 3, 16, 
/*      'P' */ 3, 3, 3, 3, 3, 36, 3, 3, 3, 3, 3, 48, 30, 49, 29, 2, 
/*      '`' */ 29, 14, 23, 24, 17, 9, 10, 22, 25, 21, 26, 64, 18, 15, 13, 5, 
/*      'p' */ 12, 64, 8, 20, 7, 6, 64, 19, 33, 11, 64, 52, 27, 53, 29, 29, 
/*   '\x80' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/*   '\x90' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/*   '\xA0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 3, 29, 29, 29, 29, 29, 
/*   '\xB0' */ 29, 29, 29, 29, 29, 3, 29, 29, 29, 29, 3, 29, 29, 29, 29, 29, 
/*   '\xC0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/*   '\xD0' */ 3, 3, 3, 3, 3, 3, 3, 29, 3, 3, 3, 3, 3, 3, 3, 3, 
/*   '\xE0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/*   '\xF0' */ 3, 3, 3, 3, 3, 3, 3, 29, 3, 3, 3, 3, 3, 3, 3, 3 };
    static sbyte[] mLo1 = new sbyte[256] {
/* '\u0100' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0110' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0120' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0130' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0140' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0150' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0160' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0170' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0180' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0190' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u01A0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u01B0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u01C0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u01D0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u01E0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u01F0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3 };
    static sbyte[] mLo2 = new sbyte[256] {
/* '\u0200' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0210' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0220' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0230' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0240' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0250' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0260' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0270' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0280' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0290' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u02A0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u02B0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u02C0' */ 3, 3, 29, 29, 29, 29, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u02D0' */ 3, 3, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u02E0' */ 3, 3, 3, 3, 3, 29, 29, 29, 29, 29, 29, 29, 29, 29, 3, 29, 
/* '\u02F0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 };
    static sbyte[] mLo3 = new sbyte[256] {
/* '\u0300' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0310' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0320' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0330' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0340' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0350' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0360' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0370' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 3, 3, 3, 3, 29, 29, 
/* '\u0380' */ 29, 29, 29, 29, 29, 29, 3, 29, 3, 3, 3, 29, 3, 29, 3, 3, 
/* '\u0390' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u03A0' */ 3, 3, 29, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u03B0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u03C0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 
/* '\u03D0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u03E0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u03F0' */ 3, 3, 3, 3, 3, 3, 29, 3, 3, 3, 3, 3, 3, 3, 3, 3 };
    static sbyte[] mLo4 = new sbyte[256] {
/* '\u0400' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0410' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0420' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0430' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0440' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0450' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0460' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0470' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0480' */ 3, 3, 29, 29, 29, 29, 29, 29, 29, 29, 3, 3, 3, 3, 3, 3, 
/* '\u0490' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u04A0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u04B0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u04C0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u04D0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u04E0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u04F0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3 };
    static sbyte[] mLo5 = new sbyte[256] {
/* '\u0500' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0510' */ 3, 3, 3, 3, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0520' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0530' */ 29, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0540' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0550' */ 3, 3, 3, 3, 3, 3, 3, 29, 29, 3, 29, 29, 29, 29, 29, 29, 
/* '\u0560' */ 29, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0570' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0580' */ 3, 3, 3, 3, 3, 3, 3, 3, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0590' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u05A0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u05B0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u05C0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u05D0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u05E0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 29, 29, 29, 29, 
/* '\u05F0' */ 3, 3, 3, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 };
    static sbyte[] mLo6 = new sbyte[256] {
/* '\u0600' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0610' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0620' */ 29, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0630' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 29, 29, 29, 29, 
/* '\u0640' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 29, 29, 29, 29, 
/* '\u0650' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0660' */ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 29, 29, 29, 29, 3, 3, 
/* '\u0670' */ 29, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0680' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0690' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u06A0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u06B0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u06C0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u06D0' */ 3, 3, 3, 3, 29, 3, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u06E0' */ 29, 29, 29, 29, 29, 3, 3, 29, 29, 29, 29, 29, 29, 29, 3, 3, 
/* '\u06F0' */ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 29, 29, 3 };
    static sbyte[] mLo7 = new sbyte[256] {
/* '\u0700' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0710' */ 3, 29, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0720' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0730' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0740' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 3, 3, 3, 
/* '\u0750' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0760' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 29, 
/* '\u0770' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0780' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0790' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u07A0' */ 3, 3, 3, 3, 3, 3, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u07B0' */ 29, 3, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u07C0' */ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 
/* '\u07D0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u07E0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 29, 29, 29, 29, 
/* '\u07F0' */ 29, 29, 29, 29, 3, 3, 29, 29, 29, 29, 3, 29, 29, 29, 29, 29 };
    static sbyte[] mLo8 = new sbyte[256] {
/* '\u0800' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0810' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0820' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0830' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0840' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0850' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0860' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0870' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0880' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0890' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u08A0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u08B0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u08C0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u08D0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u08E0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u08F0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 };
    static sbyte[] mLo9 = new sbyte[256] {
/* '\u0900' */ 29, 29, 29, 29, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0910' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0920' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0930' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 29, 29, 3, 29, 29, 
/* '\u0940' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0950' */ 3, 29, 29, 29, 29, 29, 29, 29, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0960' */ 3, 3, 29, 29, 29, 29, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
/* '\u0970' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 3, 3, 3, 3, 3, 
/* '\u0980' */ 29, 29, 29, 29, 29, 3, 3, 3, 3, 3, 3, 3, 3, 29, 29, 3, 
/* '\u0990' */ 3, 29, 29, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u09A0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 3, 3, 3, 3, 3, 3, 
/* '\u09B0' */ 3, 29, 3, 29, 29, 29, 3, 3, 3, 3, 29, 29, 29, 3, 29, 29, 
/* '\u09C0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 3, 29, 
/* '\u09D0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 3, 3, 29, 3, 
/* '\u09E0' */ 3, 3, 29, 29, 29, 29, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
/* '\u09F0' */ 3, 3, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 };
    static sbyte[] mLo10 = new sbyte[256] {
/* '\u0A00' */ 29, 29, 29, 29, 29, 3, 3, 3, 3, 3, 3, 29, 29, 29, 29, 3, 
/* '\u0A10' */ 3, 29, 29, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0A20' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 3, 3, 3, 3, 3, 3, 
/* '\u0A30' */ 3, 29, 3, 3, 29, 3, 3, 29, 3, 3, 29, 29, 29, 29, 29, 29, 
/* '\u0A40' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0A50' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 3, 3, 3, 3, 29, 3, 29, 
/* '\u0A60' */ 29, 29, 29, 29, 29, 29, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
/* '\u0A70' */ 29, 29, 3, 3, 3, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0A80' */ 29, 29, 29, 29, 29, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 3, 
/* '\u0A90' */ 3, 3, 29, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0AA0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 3, 3, 3, 3, 3, 3, 
/* '\u0AB0' */ 3, 29, 3, 3, 29, 3, 3, 3, 3, 3, 29, 29, 29, 3, 29, 29, 
/* '\u0AC0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0AD0' */ 3, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0AE0' */ 3, 3, 29, 29, 29, 29, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
/* '\u0AF0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 };
    static sbyte[] mLo11 = new sbyte[256] {
/* '\u0B00' */ 29, 29, 29, 29, 29, 3, 3, 3, 3, 3, 3, 3, 3, 29, 29, 3, 
/* '\u0B10' */ 3, 29, 29, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0B20' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 3, 3, 3, 3, 3, 3, 
/* '\u0B30' */ 3, 29, 3, 3, 29, 3, 3, 3, 3, 3, 29, 29, 29, 3, 29, 29, 
/* '\u0B40' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0B50' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 3, 3, 29, 3, 
/* '\u0B60' */ 3, 3, 29, 29, 29, 29, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
/* '\u0B70' */ 29, 3, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0B80' */ 29, 29, 29, 3, 29, 3, 3, 3, 3, 3, 3, 29, 29, 29, 3, 3, 
/* '\u0B90' */ 3, 29, 3, 3, 3, 3, 29, 29, 29, 3, 3, 29, 3, 29, 3, 3, 
/* '\u0BA0' */ 29, 29, 29, 3, 3, 29, 29, 29, 3, 3, 3, 29, 29, 29, 3, 3, 
/* '\u0BB0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 29, 29, 29, 29, 29, 
/* '\u0BC0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0BD0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0BE0' */ 29, 29, 29, 29, 29, 29, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
/* '\u0BF0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 };
    static sbyte[] mLo12 = new sbyte[256] {
/* '\u0C00' */ 29, 29, 29, 29, 29, 3, 3, 3, 3, 3, 3, 3, 3, 29, 3, 3, 
/* '\u0C10' */ 3, 29, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0C20' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 3, 3, 3, 3, 3, 3, 
/* '\u0C30' */ 3, 3, 3, 3, 29, 3, 3, 3, 3, 3, 29, 29, 29, 29, 29, 29, 
/* '\u0C40' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0C50' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0C60' */ 3, 3, 29, 29, 29, 29, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
/* '\u0C70' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0C80' */ 29, 29, 29, 29, 29, 3, 3, 3, 3, 3, 3, 3, 3, 29, 3, 3, 
/* '\u0C90' */ 3, 29, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0CA0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 3, 3, 3, 3, 3, 3, 
/* '\u0CB0' */ 3, 3, 3, 3, 29, 3, 3, 3, 3, 3, 29, 29, 29, 3, 29, 29, 
/* '\u0CC0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0CD0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 3, 29, 
/* '\u0CE0' */ 3, 3, 29, 29, 29, 29, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
/* '\u0CF0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 };
    static sbyte[] mLo13 = new sbyte[256] {
/* '\u0D00' */ 29, 29, 29, 29, 29, 3, 3, 3, 3, 3, 3, 3, 3, 29, 3, 3, 
/* '\u0D10' */ 3, 29, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0D20' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 3, 3, 3, 3, 3, 3, 
/* '\u0D30' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 29, 29, 29, 29, 29, 
/* '\u0D40' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0D50' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0D60' */ 3, 3, 29, 29, 29, 29, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
/* '\u0D70' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0D80' */ 29, 29, 29, 29, 29, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0D90' */ 3, 3, 3, 3, 3, 3, 3, 29, 29, 29, 3, 3, 3, 3, 3, 3, 
/* '\u0DA0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0DB0' */ 3, 3, 29, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 3, 29, 29, 
/* '\u0DC0' */ 3, 3, 3, 3, 3, 3, 3, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0DD0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0DE0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0DF0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 };
    static sbyte[] mLo14 = new sbyte[256] {
/* '\u0E00' */ 29, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0E10' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0E20' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0E30' */ 3, 29, 3, 3, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0E40' */ 3, 3, 3, 3, 3, 3, 3, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0E50' */ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 29, 29, 29, 29, 29, 29, 
/* '\u0E60' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0E70' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0E80' */ 29, 3, 3, 29, 3, 29, 29, 3, 3, 29, 3, 29, 29, 3, 29, 29, 
/* '\u0E90' */ 29, 29, 29, 29, 3, 3, 3, 3, 29, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0EA0' */ 29, 3, 3, 3, 29, 3, 29, 3, 29, 29, 3, 3, 29, 3, 3, 3, 
/* '\u0EB0' */ 3, 29, 3, 3, 29, 29, 29, 29, 29, 29, 29, 29, 29, 3, 29, 29, 
/* '\u0EC0' */ 3, 3, 3, 3, 3, 29, 3, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0ED0' */ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 29, 29, 3, 3, 29, 29, 
/* '\u0EE0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0EF0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 };
    static sbyte[] mLo15 = new sbyte[256] {
/* '\u0F00' */ 3, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0F10' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0F20' */ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 29, 29, 29, 29, 29, 29, 
/* '\u0F30' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0F40' */ 3, 3, 3, 3, 3, 3, 3, 3, 29, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0F50' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0F60' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 29, 29, 29, 29, 
/* '\u0F70' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0F80' */ 29, 29, 29, 29, 29, 29, 29, 29, 3, 3, 3, 3, 29, 29, 29, 29, 
/* '\u0F90' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0FA0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0FB0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0FC0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0FD0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0FE0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u0FF0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 };
    static sbyte[] mLo16 = new sbyte[256] {
/* '\u1000' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1010' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1020' */ 3, 3, 29, 3, 3, 3, 3, 3, 29, 3, 3, 29, 29, 29, 29, 29, 
/* '\u1030' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u1040' */ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 29, 29, 29, 29, 29, 29, 
/* '\u1050' */ 3, 3, 3, 3, 3, 3, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u1060' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u1070' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u1080' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u1090' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u10A0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u10B0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u10C0' */ 3, 3, 3, 3, 3, 3, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u10D0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u10E0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u10F0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 3, 29, 29, 29 };
    static sbyte[] mLo17 = new sbyte[256] {
/* '\u1100' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1110' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1120' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1130' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1140' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1150' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 29, 29, 29, 29, 3, 
/* '\u1160' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1170' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1180' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1190' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u11A0' */ 3, 3, 3, 29, 29, 29, 29, 29, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u11B0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u11C0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u11D0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u11E0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u11F0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 29, 29, 29, 29, 29 };
    static sbyte[] mLo18 = new sbyte[256] {
/* '\u1200' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1210' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1220' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1230' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1240' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 3, 3, 3, 3, 29, 29, 
/* '\u1250' */ 3, 3, 3, 3, 3, 3, 3, 29, 3, 29, 3, 3, 3, 3, 29, 29, 
/* '\u1260' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1270' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1280' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 3, 3, 3, 3, 29, 29, 
/* '\u1290' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u12A0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u12B0' */ 3, 29, 3, 3, 3, 3, 29, 29, 3, 3, 3, 3, 3, 3, 3, 29, 
/* '\u12C0' */ 3, 29, 3, 3, 3, 3, 29, 29, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u12D0' */ 3, 3, 3, 3, 3, 3, 3, 29, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u12E0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u12F0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3 };
    static sbyte[] mLo19 = new sbyte[256] {
/* '\u1300' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1310' */ 3, 29, 3, 3, 3, 3, 29, 29, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1320' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1330' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1340' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1350' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 29, 29, 29, 29, 
/* '\u1360' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u1370' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u1380' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1390' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u13A0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u13B0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u13C0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u13D0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u13E0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u13F0' */ 3, 3, 3, 3, 3, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 };
    static sbyte[] mLo20 = new sbyte[256] {
/* '\u1400' */ 29, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1410' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1420' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1430' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1440' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1450' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1460' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1470' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1480' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1490' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u14A0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u14B0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u14C0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u14D0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u14E0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u14F0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3 };
    static sbyte[] mLo22 = new sbyte[256] {
/* '\u1600' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1610' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1620' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1630' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1640' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1650' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1660' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 29, 3, 
/* '\u1670' */ 3, 3, 3, 3, 3, 3, 3, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u1680' */ 29, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1690' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 29, 29, 29, 29, 
/* '\u16A0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u16B0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u16C0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u16D0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u16E0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 29, 29, 29, 29, 
/* '\u16F0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 };
    static sbyte[] mLo23 = new sbyte[256] {
/* '\u1700' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 3, 3, 
/* '\u1710' */ 3, 3, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u1720' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1730' */ 3, 3, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u1740' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1750' */ 3, 3, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u1760' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 3, 3, 
/* '\u1770' */ 3, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u1780' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1790' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u17A0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u17B0' */ 3, 3, 3, 3, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u17C0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u17D0' */ 29, 29, 29, 29, 29, 29, 29, 3, 29, 29, 29, 29, 3, 29, 29, 29, 
/* '\u17E0' */ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 29, 29, 29, 29, 29, 29, 
/* '\u17F0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 };
    static sbyte[] mLo24 = new sbyte[256] {
/* '\u1800' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u1810' */ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 29, 29, 29, 29, 29, 29, 
/* '\u1820' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1830' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1840' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1850' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1860' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1870' */ 3, 3, 3, 3, 3, 3, 3, 3, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u1880' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1890' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u18A0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 29, 29, 29, 29, 29, 29, 
/* '\u18B0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u18C0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u18D0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u18E0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u18F0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 };
    static sbyte[] mLo25 = new sbyte[256] {
/* '\u1900' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1910' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 29, 29, 
/* '\u1920' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u1930' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u1940' */ 29, 29, 29, 29, 29, 29, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
/* '\u1950' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1960' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 29, 
/* '\u1970' */ 3, 3, 3, 3, 3, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u1980' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1990' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u19A0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 29, 29, 29, 29, 29, 
/* '\u19B0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u19C0' */ 29, 3, 3, 3, 3, 3, 3, 3, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u19D0' */ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 29, 29, 29, 29, 29, 29, 
/* '\u19E0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u19F0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 };
    static sbyte[] mLo26 = new sbyte[256] {
/* '\u1A00' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1A10' */ 3, 3, 3, 3, 3, 3, 3, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u1A20' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u1A30' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u1A40' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u1A50' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u1A60' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u1A70' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u1A80' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u1A90' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u1AA0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u1AB0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u1AC0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u1AD0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u1AE0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u1AF0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 };
    static sbyte[] mLo27 = new sbyte[256] {
/* '\u1B00' */ 29, 29, 29, 29, 29, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1B10' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1B20' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1B30' */ 3, 3, 3, 3, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u1B40' */ 29, 29, 29, 29, 29, 3, 3, 3, 3, 3, 3, 3, 29, 29, 29, 29, 
/* '\u1B50' */ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 29, 29, 29, 29, 29, 29, 
/* '\u1B60' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u1B70' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u1B80' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u1B90' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u1BA0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u1BB0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u1BC0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u1BD0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u1BE0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u1BF0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 };
    static sbyte[] mLo29 = new sbyte[256] {
/* '\u1D00' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1D10' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1D20' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1D30' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1D40' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1D50' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1D60' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1D70' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1D80' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1D90' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1DA0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1DB0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1DC0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u1DD0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u1DE0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u1DF0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 };
    static sbyte[] mLo30 = new sbyte[256] {
/* '\u1E00' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1E10' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1E20' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1E30' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1E40' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1E50' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1E60' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1E70' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1E80' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1E90' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 29, 29, 29, 
/* '\u1EA0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1EB0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1EC0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1ED0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1EE0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1EF0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 29, 29, 29, 29, 29 };
    static sbyte[] mLo31 = new sbyte[256] {
/* '\u1F00' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1F10' */ 3, 3, 3, 3, 3, 3, 29, 29, 3, 3, 3, 3, 3, 3, 29, 29, 
/* '\u1F20' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1F30' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1F40' */ 3, 3, 3, 3, 3, 3, 29, 29, 3, 3, 3, 3, 3, 3, 29, 29, 
/* '\u1F50' */ 3, 3, 3, 3, 3, 3, 3, 3, 29, 3, 29, 3, 29, 3, 29, 3, 
/* '\u1F60' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1F70' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 29, 
/* '\u1F80' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1F90' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1FA0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1FB0' */ 3, 3, 3, 3, 3, 29, 3, 3, 3, 3, 3, 3, 3, 29, 3, 29, 
/* '\u1FC0' */ 29, 29, 3, 3, 3, 29, 3, 3, 3, 3, 3, 3, 3, 29, 29, 29, 
/* '\u1FD0' */ 3, 3, 3, 3, 29, 29, 3, 3, 3, 3, 3, 3, 29, 29, 29, 29, 
/* '\u1FE0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 29, 29, 
/* '\u1FF0' */ 29, 29, 3, 3, 3, 29, 3, 3, 3, 3, 3, 3, 3, 29, 29, 29 };
    static sbyte[] mLo32 = new sbyte[256] {
/* '\u2000' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u2010' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u2020' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u2030' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u2040' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u2050' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u2060' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u2070' */ 29, 3, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 3, 
/* '\u2080' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u2090' */ 3, 3, 3, 3, 3, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u20A0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u20B0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u20C0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u20D0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u20E0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u20F0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 };
    static sbyte[] mLo33 = new sbyte[256] {
/* '\u2100' */ 29, 29, 3, 29, 29, 29, 29, 3, 29, 29, 3, 3, 3, 3, 3, 3, 
/* '\u2110' */ 3, 3, 3, 3, 29, 3, 29, 29, 29, 3, 3, 3, 3, 3, 29, 29, 
/* '\u2120' */ 29, 29, 29, 29, 3, 29, 3, 29, 3, 29, 3, 3, 3, 3, 29, 3, 
/* '\u2130' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 29, 3, 3, 3, 3, 
/* '\u2140' */ 29, 29, 29, 29, 29, 3, 3, 3, 3, 3, 29, 29, 29, 29, 3, 29, 
/* '\u2150' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u2160' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u2170' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u2180' */ 29, 29, 29, 3, 3, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u2190' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u21A0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u21B0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u21C0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u21D0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u21E0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u21F0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 };
    static sbyte[] mLo44 = new sbyte[256] {
/* '\u2C00' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u2C10' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u2C20' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 
/* '\u2C30' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u2C40' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u2C50' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 
/* '\u2C60' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 29, 29, 
/* '\u2C70' */ 29, 29, 29, 29, 3, 3, 3, 3, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u2C80' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u2C90' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u2CA0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u2CB0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u2CC0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u2CD0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u2CE0' */ 3, 3, 3, 3, 3, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u2CF0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 };
    static sbyte[] mLo45 = new sbyte[256] {
/* '\u2D00' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u2D10' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u2D20' */ 3, 3, 3, 3, 3, 3, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u2D30' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u2D40' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u2D50' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u2D60' */ 3, 3, 3, 3, 3, 3, 29, 29, 29, 29, 29, 29, 29, 29, 29, 3, 
/* '\u2D70' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u2D80' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u2D90' */ 3, 3, 3, 3, 3, 3, 3, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u2DA0' */ 3, 3, 3, 3, 3, 3, 3, 29, 3, 3, 3, 3, 3, 3, 3, 29, 
/* '\u2DB0' */ 3, 3, 3, 3, 3, 3, 3, 29, 3, 3, 3, 3, 3, 3, 3, 29, 
/* '\u2DC0' */ 3, 3, 3, 3, 3, 3, 3, 29, 3, 3, 3, 3, 3, 3, 3, 29, 
/* '\u2DD0' */ 3, 3, 3, 3, 3, 3, 3, 29, 3, 3, 3, 3, 3, 3, 3, 29, 
/* '\u2DE0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u2DF0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 };
    static sbyte[] mLo48 = new sbyte[256] {
/* '\u3000' */ 29, 29, 29, 29, 29, 3, 3, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u3010' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u3020' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u3030' */ 29, 3, 3, 3, 3, 3, 29, 29, 29, 29, 29, 3, 3, 29, 29, 29, 
/* '\u3040' */ 29, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u3050' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u3060' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u3070' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u3080' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u3090' */ 3, 3, 3, 3, 3, 3, 3, 29, 29, 29, 29, 29, 29, 3, 3, 3, 
/* '\u30A0' */ 29, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u30B0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u30C0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u30D0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u30E0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u30F0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 3, 3, 3, 3 };
    static sbyte[] mLo49 = new sbyte[256] {
/* '\u3100' */ 29, 29, 29, 29, 29, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u3110' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u3120' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 29, 29, 
/* '\u3130' */ 29, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u3140' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u3150' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u3160' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u3170' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u3180' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 
/* '\u3190' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u31A0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u31B0' */ 3, 3, 3, 3, 3, 3, 3, 3, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u31C0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u31D0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u31E0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u31F0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3 };
    static sbyte[] mLo77 = new sbyte[256] {
/* '\u4D00' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u4D10' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u4D20' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u4D30' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u4D40' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u4D50' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u4D60' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u4D70' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u4D80' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u4D90' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u4DA0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u4DB0' */ 3, 3, 3, 3, 3, 3, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u4DC0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u4DD0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u4DE0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u4DF0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 };
    static sbyte[] mLo159 = new sbyte[256] {
/* '\u9F00' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u9F10' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u9F20' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u9F30' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u9F40' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u9F50' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u9F60' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u9F70' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u9F80' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u9F90' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u9FA0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u9FB0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 29, 29, 29, 
/* '\u9FC0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u9FD0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u9FE0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\u9FF0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 };
    static sbyte[] mLo164 = new sbyte[256] {
/* '\uA400' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uA410' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uA420' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uA430' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uA440' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uA450' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uA460' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uA470' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uA480' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 29, 29, 
/* '\uA490' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uA4A0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uA4B0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uA4C0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uA4D0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uA4E0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uA4F0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 };
    static sbyte[] mLo167 = new sbyte[256] {
/* '\uA700' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uA710' */ 29, 29, 29, 29, 29, 29, 29, 3, 3, 3, 3, 29, 29, 29, 29, 29, 
/* '\uA720' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uA730' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uA740' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uA750' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uA760' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uA770' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uA780' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uA790' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uA7A0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uA7B0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uA7C0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uA7D0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uA7E0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uA7F0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 };
    static sbyte[] mLo168 = new sbyte[256] {
/* '\uA800' */ 3, 3, 29, 3, 3, 3, 29, 3, 3, 3, 3, 29, 3, 3, 3, 3, 
/* '\uA810' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uA820' */ 3, 3, 3, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uA830' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uA840' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uA850' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uA860' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uA870' */ 3, 3, 3, 3, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uA880' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uA890' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uA8A0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uA8B0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uA8C0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uA8D0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uA8E0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uA8F0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 };
    static sbyte[] mLo215 = new sbyte[256] {
/* '\uD700' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uD710' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uD720' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uD730' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uD740' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uD750' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uD760' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uD770' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uD780' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uD790' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uD7A0' */ 3, 3, 3, 3, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uD7B0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uD7C0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uD7D0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uD7E0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uD7F0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 };
    static sbyte[] mLo250 = new sbyte[256] {
/* '\uFA00' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uFA10' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uFA20' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 29, 
/* '\uFA30' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uFA40' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uFA50' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uFA60' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 29, 29, 29, 29, 
/* '\uFA70' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uFA80' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uFA90' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uFAA0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uFAB0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uFAC0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uFAD0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 29, 29, 29, 29, 29, 
/* '\uFAE0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uFAF0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 };
    static sbyte[] mLo251 = new sbyte[256] {
/* '\uFB00' */ 3, 3, 3, 3, 3, 3, 3, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uFB10' */ 29, 29, 29, 3, 3, 3, 3, 3, 29, 29, 29, 29, 29, 3, 29, 3, 
/* '\uFB20' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 3, 3, 3, 3, 3, 3, 
/* '\uFB30' */ 3, 3, 3, 3, 3, 3, 3, 29, 3, 3, 3, 3, 3, 29, 3, 29, 
/* '\uFB40' */ 3, 3, 29, 3, 3, 29, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uFB50' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uFB60' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uFB70' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uFB80' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uFB90' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uFBA0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uFBB0' */ 3, 3, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uFBC0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uFBD0' */ 29, 29, 29, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uFBE0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uFBF0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3 };
    static sbyte[] mLo253 = new sbyte[256] {
/* '\uFD00' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uFD10' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uFD20' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uFD30' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 29, 
/* '\uFD40' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uFD50' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uFD60' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uFD70' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uFD80' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uFD90' */ 29, 29, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uFDA0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uFDB0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uFDC0' */ 3, 3, 3, 3, 3, 3, 3, 3, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uFDD0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uFDE0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uFDF0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 29, 29, 29 };
    static sbyte[] mLo254 = new sbyte[256] {
/* '\uFE00' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uFE10' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uFE20' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uFE30' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uFE40' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uFE50' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uFE60' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uFE70' */ 3, 3, 3, 3, 3, 29, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uFE80' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uFE90' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uFEA0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uFEB0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uFEC0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uFED0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uFEE0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uFEF0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 29, 29 };
    static sbyte[] mLo255 = new sbyte[256] {
/* '\uFF00' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uFF10' */ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 29, 29, 29, 29, 29, 29, 
/* '\uFF20' */ 29, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uFF30' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 29, 29, 29, 29, 
/* '\uFF40' */ 29, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uFF50' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 29, 29, 29, 29, 
/* '\uFF60' */ 29, 29, 29, 29, 29, 29, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uFF70' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uFF80' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uFF90' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uFFA0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\uFFB0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 
/* '\uFFC0' */ 29, 29, 3, 3, 3, 3, 3, 3, 29, 29, 3, 3, 3, 3, 3, 3, 
/* '\uFFD0' */ 29, 29, 3, 3, 3, 3, 3, 3, 29, 29, 3, 3, 3, 29, 29, 29, 
/* '\uFFE0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\uFFF0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 };

    static sbyte[][] map = new sbyte[256][] {
/* '\u00xx' */ mLo0, mLo1, mLo2, mLo3, mLo4, mLo5, mLo6, mLo7, mLo8, mLo9, mLo10, mLo11, mLo12, mLo13, mLo14, mLo15, 
/* '\u10xx' */ mLo16, mLo17, mLo18, mLo19, mLo20, mLo1, mLo22, mLo23, mLo24, mLo25, mLo26, mLo27, mLo8, mLo29, mLo30, mLo31, 
/* '\u20xx' */ mLo32, mLo33, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo44, mLo45, mLo8, mLo8, 
/* '\u30xx' */ mLo48, mLo49, mLo8, mLo8, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, 
/* '\u40xx' */ mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo77, mLo1, mLo1, 
/* '\u50xx' */ mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, 
/* '\u60xx' */ mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, 
/* '\u70xx' */ mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, 
/* '\u80xx' */ mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, 
/* '\u90xx' */ mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo159, 
/* '\uA0xx' */ mLo1, mLo1, mLo1, mLo1, mLo164, mLo8, mLo8, mLo167, mLo168, mLo8, mLo8, mLo8, mLo1, mLo1, mLo1, mLo1, 
/* '\uB0xx' */ mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, 
/* '\uC0xx' */ mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, 
/* '\uD0xx' */ mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo215, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, 
/* '\uE0xx' */ mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, 
/* '\uF0xx' */ mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo1, mLo250, mLo251, mLo1, mLo253, mLo254, mLo255};

#endregion

#region CompressedCharacterMap
    //
    // There are 67 equivalence classes
    // There are 22 character sequence regions
    // There are 7 tables, 1319 entries
    // There are 15 runs, 0 singletons
    // Decision tree depth is 5
    //
    static sbyte[] mapC0 = new sbyte[251] {
/* '\U00010000' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 3, 3, 3, 
/* '\U00010010' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\U00010020' */ 3, 3, 3, 3, 3, 3, 3, 29, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\U00010030' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 3, 3, 29, 3, 
/* '\U00010040' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 29, 
/* '\U00010050' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 29, 
/* '\U00010060' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\U00010070' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\U00010080' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\U00010090' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\U000100A0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\U000100B0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\U000100C0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\U000100D0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\U000100E0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\U000100F0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3 };
    static sbyte[] mapC2 = new sbyte[256] {
/* '\U00010300' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\U00010310' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 
/* '\U00010320' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\U00010330' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\U00010340' */ 3, 29, 3, 3, 3, 3, 3, 3, 3, 3, 29, 29, 29, 29, 29, 29, 
/* '\U00010350' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\U00010360' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\U00010370' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\U00010380' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\U00010390' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 29, 
/* '\U000103A0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\U000103B0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\U000103C0' */ 3, 3, 3, 3, 29, 29, 29, 29, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\U000103D0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\U000103E0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\U000103F0' */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 };
    static sbyte[] mapC4 = new sbyte[12] {
/* '\U0001049E' */ 29, 29, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4 };
    static sbyte[] mapC6 = new sbyte[64] {
/* '\U00010800' */ 3, 3, 3, 3, 3, 3, 29, 29, 3, 29, 3, 3, 3, 3, 3, 3, 
/* '\U00010810' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\U00010820' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\U00010830' */ 3, 3, 3, 3, 3, 3, 29, 3, 3, 29, 29, 29, 3, 29, 29, 3 };
    static sbyte[] mapC10 = new sbyte[52] {
/* '\U00010A00' */ 3, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* '\U00010A10' */ 3, 3, 3, 3, 29, 3, 3, 3, 29, 3, 3, 3, 3, 3, 3, 3, 
/* '\U00010A20' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\U00010A30' */ 3, 3, 3, 3 };
    static sbyte[] mapC14 = new sbyte[338] {
/* '\U0001D400' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\U0001D410' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\U0001D420' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\U0001D430' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\U0001D440' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\U0001D450' */ 3, 3, 3, 3, 3, 29, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\U0001D460' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\U0001D470' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\U0001D480' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\U0001D490' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 3, 3, 
/* '\U0001D4A0' */ 29, 29, 3, 29, 29, 3, 3, 29, 29, 3, 3, 3, 3, 29, 3, 3, 
/* '\U0001D4B0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 3, 29, 3, 3, 3, 
/* '\U0001D4C0' */ 3, 3, 3, 3, 29, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\U0001D4D0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\U0001D4E0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\U0001D4F0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\U0001D500' */ 3, 3, 3, 3, 3, 3, 29, 3, 3, 3, 3, 29, 29, 3, 3, 3, 
/* '\U0001D510' */ 3, 3, 3, 3, 3, 29, 3, 3, 3, 3, 3, 3, 3, 29, 3, 3, 
/* '\U0001D520' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\U0001D530' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 3, 3, 3, 3, 29, 
/* '\U0001D540' */ 3, 3, 3, 3, 3, 29, 3, 29, 29, 29, 3, 3, 3, 3, 3, 3, 
/* '\U0001D550' */ 3, 29 };
    static sbyte[] mapC16 = new sbyte[346] {
/* '\U0001D6A6' */ 29, 29, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\U0001D6B6' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 3, 3, 3, 3, 
/* '\U0001D6C6' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\U0001D6D6' */ 3, 3, 3, 3, 3, 29, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\U0001D6E6' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\U0001D6F6' */ 3, 3, 3, 3, 3, 29, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\U0001D706' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 
/* '\U0001D716' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\U0001D726' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 
/* '\U0001D736' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\U0001D746' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 3, 3, 3, 3, 3, 3, 
/* '\U0001D756' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\U0001D766' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 3, 3, 3, 3, 3, 3, 
/* '\U0001D776' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\U0001D786' */ 3, 3, 3, 29, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\U0001D796' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\U0001D7A6' */ 3, 3, 3, 29, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\U0001D7B6' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 3, 3, 
/* '\U0001D7C6' */ 3, 3, 3, 3, 3, 3, 29, 29, 4, 4, 4, 4, 4, 4, 4, 4, 
/* '\U0001D7D6' */ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
/* '\U0001D7E6' */ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
/* '\U0001D7F6' */ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4 };

    static sbyte MapC(int code)
    { // '\U00010000' <= code <= '\U0010FFFF'
      if (code < 68148) // '\U00010000' <= code <= '\U00010A33'
        if (code < 66730) // '\U00010000' <= code <= '\U000104A9'
          if (code < 66304) // '\U00010000' <= code <= '\U000102FF'
            if (code < 65787) // '\U00010000' <= code <= '\U000100FA'
              return mapC0[code - 65536];
            else // '\U000100FB' <= code <= '\U000102FF'
              return (sbyte)29;
          else // '\U00010300' <= code <= '\U000104A9'
            if (code < 66560) // '\U00010300' <= code <= '\U000103FF'
              return mapC2[code - 66304];
            else // '\U00010400' <= code <= '\U000104A9'
              if (code < 66718) // '\U00010400' <= code <= '\U0001049D'
                return (sbyte)3;
              else // '\U0001049E' <= code <= '\U000104A9'
                return mapC4[code - 66718];
        else // '\U000104AA' <= code <= '\U00010A33'
          if (code < 67840) // '\U000104AA' <= code <= '\U000108FF'
            if (code < 67584) // '\U000104AA' <= code <= '\U000107FF'
              return (sbyte)29;
            else // '\U00010800' <= code <= '\U000108FF'
              if (code < 67648) // '\U00010800' <= code <= '\U0001083F'
                return mapC6[code - 67584];
              else // '\U00010840' <= code <= '\U000108FF'
                return (sbyte)29;
          else // '\U00010900' <= code <= '\U00010A33'
            if (code < 67862) // '\U00010900' <= code <= '\U00010915'
              return (sbyte)3;
            else // '\U00010916' <= code <= '\U00010A33'
              if (code < 68096) // '\U00010916' <= code <= '\U000109FF'
                return (sbyte)29;
              else // '\U00010A00' <= code <= '\U00010A33'
                return mapC10[code - 68096];
      else // '\U00010A34' <= code <= '\U0010FFFF'
        if (code < 120486) // '\U00010A34' <= code <= '\U0001D6A5'
          if (code < 74607) // '\U00010A34' <= code <= '\U0001236E'
            if (code < 73728) // '\U00010A34' <= code <= '\U00011FFF'
              return (sbyte)29;
            else // '\U00012000' <= code <= '\U0001236E'
              return (sbyte)3;
          else // '\U0001236F' <= code <= '\U0001D6A5'
            if (code < 119808) // '\U0001236F' <= code <= '\U0001D3FF'
              return (sbyte)29;
            else // '\U0001D400' <= code <= '\U0001D6A5'
              if (code < 120146) // '\U0001D400' <= code <= '\U0001D551'
                return mapC14[code - 119808];
              else // '\U0001D552' <= code <= '\U0001D6A5'
                return (sbyte)3;
        else // '\U0001D6A6' <= code <= '\U0010FFFF'
          if (code < 173783) // '\U0001D6A6' <= code <= '\U0002A6D6'
            if (code < 120832) // '\U0001D6A6' <= code <= '\U0001D7FF'
              return mapC16[code - 120486];
            else // '\U0001D800' <= code <= '\U0002A6D6'
              if (code < 131072) // '\U0001D800' <= code <= '\U0001FFFF'
                return (sbyte)29;
              else // '\U00020000' <= code <= '\U0002A6D6'
                return (sbyte)3;
          else // '\U0002A6D7' <= code <= '\U0010FFFF'
            if (code < 194560) // '\U0002A6D7' <= code <= '\U0002F7FF'
              return (sbyte)29;
            else // '\U0002F800' <= code <= '\U0010FFFF'
              if (code < 195102) // '\U0002F800' <= code <= '\U0002FA1D'
                return (sbyte)3;
              else // '\U0002FA1E' <= code <= '\U0010FFFF'
                return (sbyte)29;
    }
#endregion


    static sbyte Map(int code)
    { 
        if (code <= 65535)
            return map[code / 256][code % 256];
        else
            return MapC(code);
    }

    static Table[] NxS = new Table[206] {
/* NxS[   0] */ new Table(0, 0, 0, null), // Shortest string ""
/* NxS[   1] */ // Shortest string "\x20"
      new Table(62, 6, -1, new short[] {1, 1, -1, 1, 1, 1}),
/* NxS[   2] */ // Shortest string "@"
      new Table(27, 45, 176, new short[] {-1, 205, -1, -1, -1, -1, 
          176, 176, -1, 176, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 176, 176, 176, 176, -1, -1, -1, 176, 
          -1, -1, -1, -1, 176, 176, -1}),
/* NxS[   3] */ // Shortest string "_"
      new Table(27, 42, 3, new short[] {-1, -1, -1, -1, -1, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 
          -1, -1, -1, -1}),
/* NxS[   4] */ new Table(0, 0, -1, null), // Shortest string "\u0660"
/* NxS[   5] */ // Shortest string "o"
      new Table(56, 48, -1, new short[] {3, 3, 3, 3, 3, -1, 
          -1, -1, 3, -1, -1, -1, -1, 3, 3, 3, 3, 169, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 170, 3, 3, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3}),
/* NxS[   6] */ // Shortest string "u"
      new Table(56, 48, -1, new short[] {3, 3, 3, 3, 3, -1, 
          -1, -1, 3, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 157, 3, 158, 159, 3, 3, 3, 3, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3}),
/* NxS[   7] */ // Shortest string "t"
      new Table(56, 48, -1, new short[] {3, 3, 3, 3, 3, -1, 
          -1, -1, 3, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 145, 3, 3, 
          146, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 147, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3}),
/* NxS[   8] */ // Shortest string "r"
      new Table(56, 48, -1, new short[] {3, 3, 3, 3, 3, -1, 
          -1, -1, 3, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 143, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3}),
/* NxS[   9] */ // Shortest string "f"
      new Table(56, 48, -1, new short[] {3, 3, 3, 3, 3, -1, 
          -1, -1, 3, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 139, 3, 3, 3, 3, 3, 3, 3, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3}),
/* NxS[  10] */ // Shortest string "n"
      new Table(56, 48, -1, new short[] {3, 3, 3, 3, 3, -1, 
          -1, -1, 3, -1, -1, -1, -1, 3, 3, 3, 3, 129, 3, 3, 130, 3, 
          3, 3, 3, 131, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3}),
/* NxS[  11] */ // Shortest string "d"
      new Table(56, 48, -1, new short[] {3, 3, 3, 3, 3, -1, 
          -1, -1, 3, -1, -1, -1, -1, 3, 3, 3, 113, 3, 3, 3, 114, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3}),
/* NxS[  12] */ // Shortest string "l"
      new Table(27, 46, 3, new short[] {-1, -1, -1, -1, -1, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 
          -1, -1, -1, -1, 3, 3, 3, 110}),
/* NxS[  13] */ // Shortest string "s"
      new Table(56, 48, -1, new short[] {3, 3, 3, 3, 3, -1, 
          -1, -1, 3, -1, -1, -1, -1, 3, 3, 3, 3, 3, 97, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 98, 3, 99, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3}),
/* NxS[  14] */ // Shortest string "i"
      new Table(56, 48, -1, new short[] {3, 3, 3, 3, 3, -1, 
          -1, -1, 3, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 95, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3}),
/* NxS[  15] */ // Shortest string "b"
      new Table(56, 48, -1, new short[] {3, 3, 3, 3, 3, -1, 
          -1, -1, 3, -1, -1, -1, -1, 3, 3, 3, 86, 3, 3, 3, 3, 3, 
          87, 3, 3, 88, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3}),
/* NxS[  16] */ // Shortest string "c"
      new Table(25, 44, 3, new short[] {83, 3, -1, -1, -1, -1, 
          -1, 3, 3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, 
          -1, 3, -1, -1, -1, -1}),
/* NxS[  17] */ // Shortest string "|"
      new Table(27, 13, -1, new short[] {81, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 82}),
/* NxS[  18] */ // Shortest string "\""
      new Table(63, 36, 198, new short[] {-1, 198, -1, -1, -1, 198, 
          198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 
          198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 80, 198, 199, -1}),
/* NxS[  19] */ // Shortest string "1"
      new Table(55, 49, -1, new short[] {182, 19, 44, 180, 43, 43, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, 180, 
          43, -1, -1, -1, -1, 43, -1, 43, 44, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 19, -1, -1, 19, 42}),
/* NxS[  20] */ // Shortest string "'"
      new Table(63, 36, 184, new short[] {-1, 184, -1, -1, -1, 184, 
          184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 
          184, 184, 184, 184, 184, 184, 184, 184, 184, 184, -1, 184, 185, -1}),
/* NxS[  21] */ // Shortest string "<"
      new Table(39, 1, -1, new short[] {78}),
/* NxS[  22] */ // Shortest string "="
      new Table(39, 1, -1, new short[] {77}),
/* NxS[  23] */ // Shortest string ">"
      new Table(39, 1, -1, new short[] {76}),
/* NxS[  24] */ // Shortest string "!"
      new Table(39, 1, -1, new short[] {75}),
/* NxS[  25] */ // Shortest string "+"
      new Table(39, 4, -1, new short[] {73, -1, -1, 74}),
/* NxS[  26] */ // Shortest string "-"
      new Table(39, 5, -1, new short[] {71, -1, -1, -1, 72}),
/* NxS[  27] */ // Shortest string "*"
      new Table(39, 1, -1, new short[] {70}),
/* NxS[  28] */ // Shortest string "/"
      new Table(39, 7, -1, new short[] {67, -1, -1, -1, -1, 68, 
          69}),
/* NxS[  29] */ // Shortest string "%"
      new Table(39, 1, -1, new short[] {66}),
/* NxS[  30] */ // Shortest string "&"
      new Table(39, 9, -1, new short[] {64, -1, -1, -1, -1, -1, 
          -1, -1, 65}),
/* NxS[  31] */ new Table(0, 0, -1, null), // Shortest string "["
/* NxS[  32] */ new Table(0, 0, -1, null), // Shortest string "]"
/* NxS[  33] */ new Table(0, 0, -1, null), // Shortest string "("
/* NxS[  34] */ new Table(0, 0, -1, null), // Shortest string ")"
/* NxS[  35] */ new Table(0, 0, -1, null), // Shortest string "{"
/* NxS[  36] */ new Table(0, 0, -1, null), // Shortest string "}"
/* NxS[  37] */ new Table(0, 0, -1, null), // Shortest string ","
/* NxS[  38] */ // Shortest string "."
      new Table(32, 25, -1, new short[] {45, -1, -1, 45, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 45}),
/* NxS[  39] */ // Shortest string "0"
      new Table(55, 49, -1, new short[] {182, 19, 44, 180, 43, 43, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, 180, 
          43, -1, -1, -1, -1, 43, -1, 43, 44, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 19, 181, -1, 19, 42}),
/* NxS[  40] */ // Shortest string "#"
      new Table(62, 39, -1, new short[] {179, 179, 41, -1, -1, -1, 
          -1, -1, -1, -1, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, -1, 
          41, 41, 41, 41, 41, 41, 41, 41, 41, 41, -1, -1, -1, -1, -1, -1, 
          41}),
/* NxS[  41] */ // Shortest string "#o"
      new Table(64, 37, -1, new short[] {41, -1, -1, -1, -1, -1, 
          -1, -1, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, -1, 41, 41, 
          41, 41, 41, 41, 41, 41, 41, 41, -1, -1, -1, -1, -1, -1, 41}),
/* NxS[  42] */ // Shortest string "1u"
      new Table(57, 29, -1, new short[] {62, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 62}),
/* NxS[  43] */ new Table(0, 0, -1, null), // Shortest string "1f"
/* NxS[  44] */ // Shortest string "1l"
      new Table(6, 31, -1, new short[] {62, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 62}),
/* NxS[  45] */ // Shortest string ".1"
      new Table(56, 47, -1, new short[] {45, -1, 180, 43, 43, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 180, 43, 
          -1, -1, -1, -1, 43, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 45, -1, -1, 45}),
/* NxS[  46] */ // Shortest string "0xe"
      new Table(56, 48, -1, new short[] {47, 44, 47, -1, 47, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, 47, 47, 
          -1, -1, -1, 47, -1, -1, 47, 44, -1, -1, -1, -1, 47, 47, -1, -1, 
          -1, -1, -1, -1, -1, 47, -1, 47, 47, 42}),
/* NxS[  47] */ // Shortest string "0xee"
      new Table(56, 48, -1, new short[] {48, 44, 48, -1, 48, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, 48, 48, 
          -1, -1, -1, 48, -1, -1, 48, 44, -1, -1, -1, -1, 48, 48, -1, -1, 
          -1, -1, -1, -1, -1, 48, -1, 48, 48, 42}),
/* NxS[  48] */ // Shortest string "0xeee"
      new Table(56, 48, -1, new short[] {49, 44, 49, -1, 49, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, 49, 49, 
          -1, -1, -1, 49, -1, -1, 49, 44, -1, -1, -1, -1, 49, 49, -1, -1, 
          -1, -1, -1, -1, -1, 49, -1, 49, 49, 42}),
/* NxS[  49] */ // Shortest string "0xeeee"
      new Table(56, 48, -1, new short[] {50, 44, 50, -1, 50, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, 50, 50, 
          -1, -1, -1, 50, -1, -1, 50, 44, -1, -1, -1, -1, 50, 50, -1, -1, 
          -1, -1, -1, -1, -1, 50, -1, 50, 50, 42}),
/* NxS[  50] */ // Shortest string "0xeeeee"
      new Table(56, 48, -1, new short[] {51, 44, 51, -1, 51, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, 51, 51, 
          -1, -1, -1, 51, -1, -1, 51, 44, -1, -1, -1, -1, 51, 51, -1, -1, 
          -1, -1, -1, -1, -1, 51, -1, 51, 51, 42}),
/* NxS[  51] */ // Shortest string "0xeeeeee"
      new Table(56, 48, -1, new short[] {52, 44, 52, -1, 52, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, 52, 52, 
          -1, -1, -1, 52, -1, -1, 52, 44, -1, -1, -1, -1, 52, 52, -1, -1, 
          -1, -1, -1, -1, -1, 52, -1, 52, 52, 42}),
/* NxS[  52] */ // Shortest string "0xeeeeeee"
      new Table(56, 48, -1, new short[] {53, 44, 53, -1, 53, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, 53, 53, 
          -1, -1, -1, 53, -1, -1, 53, 44, -1, -1, -1, -1, 53, 53, -1, -1, 
          -1, -1, -1, -1, -1, 53, -1, 53, 53, 42}),
/* NxS[  53] */ // Shortest string "0xeeeeeeee"
      new Table(56, 48, -1, new short[] {54, 44, 54, -1, 54, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, 54, 54, 
          -1, -1, -1, 54, -1, -1, 54, 44, -1, -1, -1, -1, 54, 54, -1, -1, 
          -1, -1, -1, -1, -1, 54, -1, 54, 54, 42}),
/* NxS[  54] */ // Shortest string "0xeeeeeeeee"
      new Table(56, 48, -1, new short[] {55, 44, 55, -1, 55, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, 55, 55, 
          -1, -1, -1, 55, -1, -1, 55, 44, -1, -1, -1, -1, 55, 55, -1, -1, 
          -1, -1, -1, -1, -1, 55, -1, 55, 55, 42}),
/* NxS[  55] */ // Shortest string "0xeeeeeeeeee"
      new Table(56, 48, -1, new short[] {56, 44, 56, -1, 56, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, 56, 56, 
          -1, -1, -1, 56, -1, -1, 56, 44, -1, -1, -1, -1, 56, 56, -1, -1, 
          -1, -1, -1, -1, -1, 56, -1, 56, 56, 42}),
/* NxS[  56] */ // Shortest string "0xeeeeeeeeeee"
      new Table(56, 48, -1, new short[] {57, 44, 57, -1, 57, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, 57, 57, 
          -1, -1, -1, 57, -1, -1, 57, 44, -1, -1, -1, -1, 57, 57, -1, -1, 
          -1, -1, -1, -1, -1, 57, -1, 57, 57, 42}),
/* NxS[  57] */ // Shortest string "0xeeeeeeeeeeee"
      new Table(56, 48, -1, new short[] {58, 44, 58, -1, 58, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, 58, 58, 
          -1, -1, -1, 58, -1, -1, 58, 44, -1, -1, -1, -1, 58, 58, -1, -1, 
          -1, -1, -1, -1, -1, 58, -1, 58, 58, 42}),
/* NxS[  58] */ // Shortest string "0xeeeeeeeeeeeee"
      new Table(56, 48, -1, new short[] {59, 44, 59, -1, 59, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, 59, 59, 
          -1, -1, -1, 59, -1, -1, 59, 44, -1, -1, -1, -1, 59, 59, -1, -1, 
          -1, -1, -1, -1, -1, 59, -1, 59, 59, 42}),
/* NxS[  59] */ // Shortest string "0xeeeeeeeeeeeeee"
      new Table(56, 48, -1, new short[] {60, 44, 60, -1, 60, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, 60, 60, 
          -1, -1, -1, 60, -1, -1, 60, 44, -1, -1, -1, -1, 60, 60, -1, -1, 
          -1, -1, -1, -1, -1, 60, -1, 60, 60, 42}),
/* NxS[  60] */ // Shortest string "0xeeeeeeeeeeeeeee"
      new Table(56, 48, -1, new short[] {61, 44, 61, -1, 61, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, 61, 61, 
          -1, -1, -1, 61, -1, -1, 61, 44, -1, -1, -1, -1, 61, 61, -1, -1, 
          -1, -1, -1, -1, -1, 61, -1, 61, 61, 42}),
/* NxS[  61] */ // Shortest string "0xeeeeeeeeeeeeeeee"
      new Table(57, 47, -1, new short[] {44, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 42}),
/* NxS[  62] */ new Table(0, 0, -1, null), // Shortest string "1ul"
/* NxS[  63] */ // Shortest string "1e1"
      new Table(56, 47, -1, new short[] {63, -1, -1, 43, 43, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 43, 
          -1, -1, -1, -1, 43, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 63, -1, -1, 63}),
/* NxS[  64] */ new Table(0, 0, -1, null), // Shortest string "&="
/* NxS[  65] */ new Table(0, 0, -1, null), // Shortest string "&&"
/* NxS[  66] */ new Table(0, 0, -1, null), // Shortest string "%="
/* NxS[  67] */ new Table(0, 0, -1, null), // Shortest string "/="
/* NxS[  68] */ new Table(0, 0, -1, null), // Shortest string "/*"
/* NxS[  69] */ // Shortest string "//"
      new Table(0, 1, 69, new short[] {-1}),
/* NxS[  70] */ new Table(0, 0, -1, null), // Shortest string "*="
/* NxS[  71] */ new Table(0, 0, -1, null), // Shortest string "-="
/* NxS[  72] */ new Table(0, 0, -1, null), // Shortest string "--"
/* NxS[  73] */ new Table(0, 0, -1, null), // Shortest string "+="
/* NxS[  74] */ new Table(0, 0, -1, null), // Shortest string "++"
/* NxS[  75] */ new Table(0, 0, -1, null), // Shortest string "!="
/* NxS[  76] */ new Table(0, 0, -1, null), // Shortest string ">="
/* NxS[  77] */ new Table(0, 0, -1, null), // Shortest string "=="
/* NxS[  78] */ new Table(0, 0, -1, null), // Shortest string "<="
/* NxS[  79] */ new Table(0, 0, -1, null), // Shortest string "'@'"
/* NxS[  80] */ new Table(0, 0, -1, null), // Shortest string "\"\""
/* NxS[  81] */ new Table(0, 0, -1, null), // Shortest string "||"
/* NxS[  82] */ new Table(0, 0, -1, null), // Shortest string "|="
/* NxS[  83] */ // Shortest string "ch"
      new Table(56, 48, -1, new short[] {3, 3, 3, 3, 3, -1, 
          -1, -1, 3, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 84, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3}),
/* NxS[  84] */ // Shortest string "cha"
      new Table(56, 48, -1, new short[] {3, 3, 3, 3, 3, -1, 
          -1, -1, 3, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 85, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3}),
/* NxS[  85] */ // Shortest string "char"
      new Table(27, 42, 3, new short[] {-1, -1, -1, -1, -1, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 
          -1, -1, -1, -1}),
/* NxS[  86] */ // Shortest string "bo"
      new Table(27, 46, 3, new short[] {-1, -1, -1, -1, -1, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 
          -1, -1, -1, -1, 3, 3, 3, 93}),
/* NxS[  87] */ // Shortest string "by"
      new Table(27, 48, 3, new short[] {-1, -1, -1, -1, -1, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 
          -1, -1, -1, -1, 3, 3, 3, 3, 3, 91}),
/* NxS[  88] */ // Shortest string "ba"
      new Table(56, 48, -1, new short[] {3, 3, 3, 3, 3, -1, 
          -1, -1, 3, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 89, 3, 3, 3, 3, 3, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3}),
/* NxS[  89] */ // Shortest string "bas"
      new Table(56, 48, -1, new short[] {3, 3, 3, 3, 3, -1, 
          -1, -1, 3, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 90, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3}),
/* NxS[  90] */ // Shortest string "base"
      new Table(27, 42, 3, new short[] {-1, -1, -1, -1, -1, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 
          -1, -1, -1, -1}),
/* NxS[  91] */ // Shortest string "byt"
      new Table(56, 48, -1, new short[] {3, 3, 3, 3, 3, -1, 
          -1, -1, 3, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 92, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3}),
/* NxS[  92] */ // Shortest string "byte"
      new Table(27, 42, 3, new short[] {-1, -1, -1, -1, -1, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 
          -1, -1, -1, -1}),
/* NxS[  93] */ // Shortest string "boo"
      new Table(56, 48, -1, new short[] {3, 3, 3, 3, 3, -1, 
          -1, -1, 3, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 94, 3, 3, 3, 3, 3, 3, 3, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3}),
/* NxS[  94] */ // Shortest string "bool"
      new Table(27, 42, 3, new short[] {-1, -1, -1, -1, -1, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 
          -1, -1, -1, -1}),
/* NxS[  95] */ // Shortest string "in"
      new Table(27, 48, 3, new short[] {-1, -1, -1, -1, -1, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 
          -1, -1, -1, -1, 3, 3, 3, 3, 3, 96}),
/* NxS[  96] */ // Shortest string "int"
      new Table(27, 42, 3, new short[] {-1, -1, -1, -1, -1, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 
          -1, -1, -1, -1}),
/* NxS[  97] */ // Shortest string "st"
      new Table(56, 48, -1, new short[] {3, 3, 3, 3, 3, -1, 
          -1, -1, 3, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 106, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3}),
/* NxS[  98] */ // Shortest string "sb"
      new Table(56, 48, -1, new short[] {3, 3, 3, 3, 3, -1, 
          -1, -1, 3, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          103, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3}),
/* NxS[  99] */ // Shortest string "sh"
      new Table(27, 46, 3, new short[] {-1, -1, -1, -1, -1, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 
          -1, -1, -1, -1, 3, 3, 3, 100}),
/* NxS[ 100] */ // Shortest string "sho"
      new Table(56, 48, -1, new short[] {3, 3, 3, 3, 3, -1, 
          -1, -1, 3, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 101, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3}),
/* NxS[ 101] */ // Shortest string "shor"
      new Table(27, 48, 3, new short[] {-1, -1, -1, -1, -1, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 
          -1, -1, -1, -1, 3, 3, 3, 3, 3, 102}),
/* NxS[ 102] */ // Shortest string "short"
      new Table(27, 42, 3, new short[] {-1, -1, -1, -1, -1, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 
          -1, -1, -1, -1}),
/* NxS[ 103] */ // Shortest string "sby"
      new Table(27, 48, 3, new short[] {-1, -1, -1, -1, -1, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 
          -1, -1, -1, -1, 3, 3, 3, 3, 3, 104}),
/* NxS[ 104] */ // Shortest string "sbyt"
      new Table(56, 48, -1, new short[] {3, 3, 3, 3, 3, -1, 
          -1, -1, 3, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 105, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3}),
/* NxS[ 105] */ // Shortest string "sbyte"
      new Table(27, 42, 3, new short[] {-1, -1, -1, -1, -1, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 
          -1, -1, -1, -1}),
/* NxS[ 106] */ // Shortest string "str"
      new Table(21, 48, 3, new short[] {107, 3, 3, 3, 3, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 
          3, 3, -1, -1, -1, 3, -1, -1, -1, -1}),
/* NxS[ 107] */ // Shortest string "stri"
      new Table(56, 48, -1, new short[] {3, 3, 3, 3, 3, -1, 
          -1, -1, 3, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 108, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3}),
/* NxS[ 108] */ // Shortest string "strin"
      new Table(22, 47, 3, new short[] {109, 3, 3, 3, 3, -1, 
          -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 
          3, -1, -1, -1, 3, -1, -1, -1, -1}),
/* NxS[ 109] */ // Shortest string "string"
      new Table(27, 42, 3, new short[] {-1, -1, -1, -1, -1, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 
          -1, -1, -1, -1}),
/* NxS[ 110] */ // Shortest string "lo"
      new Table(56, 48, -1, new short[] {3, 3, 3, 3, 3, -1, 
          -1, -1, 3, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 111, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3}),
/* NxS[ 111] */ // Shortest string "lon"
      new Table(22, 47, 3, new short[] {112, 3, 3, 3, 3, -1, 
          -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 
          3, -1, -1, -1, 3, -1, -1, -1, -1}),
/* NxS[ 112] */ // Shortest string "long"
      new Table(27, 42, 3, new short[] {-1, -1, -1, -1, -1, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 
          -1, -1, -1, -1}),
/* NxS[ 113] */ // Shortest string "do"
      new Table(27, 47, 3, new short[] {-1, -1, -1, -1, -1, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 
          -1, -1, -1, -1, 3, 3, 3, 3, 125}),
/* NxS[ 114] */ // Shortest string "de"
      new Table(56, 48, -1, new short[] {3, 3, 3, 3, 3, -1, 
          -1, -1, 3, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 115, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 116, 3, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3}),
/* NxS[ 115] */ // Shortest string "def"
      new Table(56, 48, -1, new short[] {3, 3, 3, 3, 3, -1, 
          -1, -1, 3, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 121, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3}),
/* NxS[ 116] */ // Shortest string "dec"
      new Table(21, 48, 3, new short[] {117, 3, 3, 3, 3, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 
          3, 3, -1, -1, -1, 3, -1, -1, -1, -1}),
/* NxS[ 117] */ // Shortest string "deci"
      new Table(56, 48, -1, new short[] {3, 3, 3, 3, 3, -1, 
          -1, -1, 3, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 118, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3}),
/* NxS[ 118] */ // Shortest string "decim"
      new Table(56, 48, -1, new short[] {3, 3, 3, 3, 3, -1, 
          -1, -1, 3, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 119, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3}),
/* NxS[ 119] */ // Shortest string "decima"
      new Table(56, 48, -1, new short[] {3, 3, 3, 3, 3, -1, 
          -1, -1, 3, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 120, 3, 3, 3, 3, 3, 3, 3, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3}),
/* NxS[ 120] */ // Shortest string "decimal"
      new Table(27, 42, 3, new short[] {-1, -1, -1, -1, -1, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 
          -1, -1, -1, -1}),
/* NxS[ 121] */ // Shortest string "defa"
      new Table(27, 47, 3, new short[] {-1, -1, -1, -1, -1, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 
          -1, -1, -1, -1, 3, 3, 3, 3, 122}),
/* NxS[ 122] */ // Shortest string "defau"
      new Table(56, 48, -1, new short[] {3, 3, 3, 3, 3, -1, 
          -1, -1, 3, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 123, 3, 3, 3, 3, 3, 3, 3, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3}),
/* NxS[ 123] */ // Shortest string "defaul"
      new Table(27, 48, 3, new short[] {-1, -1, -1, -1, -1, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 
          -1, -1, -1, -1, 3, 3, 3, 3, 3, 124}),
/* NxS[ 124] */ // Shortest string "default"
      new Table(27, 42, 3, new short[] {-1, -1, -1, -1, -1, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 
          -1, -1, -1, -1}),
/* NxS[ 125] */ // Shortest string "dou"
      new Table(23, 46, 3, new short[] {126, 3, 3, 3, -1, -1, 
          -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, 
          -1, -1, -1, 3, -1, -1, -1, -1}),
/* NxS[ 126] */ // Shortest string "doub"
      new Table(56, 48, -1, new short[] {3, 3, 3, 3, 3, -1, 
          -1, -1, 3, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 127, 3, 3, 3, 3, 3, 3, 3, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3}),
/* NxS[ 127] */ // Shortest string "doubl"
      new Table(56, 48, -1, new short[] {3, 3, 3, 3, 3, -1, 
          -1, -1, 3, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 128, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3}),
/* NxS[ 128] */ // Shortest string "double"
      new Table(27, 42, 3, new short[] {-1, -1, -1, -1, -1, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 
          -1, -1, -1, -1}),
/* NxS[ 129] */ // Shortest string "nu"
      new Table(56, 48, -1, new short[] {3, 3, 3, 3, 3, -1, 
          -1, -1, 3, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 137, 3, 3, 3, 3, 3, 3, 3, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3}),
/* NxS[ 130] */ // Shortest string "ne"
      new Table(56, 48, -1, new short[] {3, 3, 3, 3, 3, -1, 
          -1, -1, 3, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 136, 3, 3, 3, 3, 3, 3, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3}),
/* NxS[ 131] */ // Shortest string "na"
      new Table(56, 48, -1, new short[] {3, 3, 3, 3, 3, -1, 
          -1, -1, 3, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 132, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3}),
/* NxS[ 132] */ // Shortest string "nam"
      new Table(56, 48, -1, new short[] {3, 3, 3, 3, 3, -1, 
          -1, -1, 3, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 133, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3}),
/* NxS[ 133] */ // Shortest string "name"
      new Table(56, 48, -1, new short[] {3, 3, 3, 3, 3, -1, 
          -1, -1, 3, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 134, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3}),
/* NxS[ 134] */ // Shortest string "nameO"
      new Table(56, 48, -1, new short[] {3, 3, 3, 3, 3, -1, 
          -1, -1, 3, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 135, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3}),
/* NxS[ 135] */ // Shortest string "nameOf"
      new Table(27, 42, 3, new short[] {-1, -1, -1, -1, -1, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 
          -1, -1, -1, -1}),
/* NxS[ 136] */ // Shortest string "new"
      new Table(27, 42, 3, new short[] {-1, -1, -1, -1, -1, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 
          -1, -1, -1, -1}),
/* NxS[ 137] */ // Shortest string "nul"
      new Table(56, 48, -1, new short[] {3, 3, 3, 3, 3, -1, 
          -1, -1, 3, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 138, 3, 3, 3, 3, 3, 3, 3, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3}),
/* NxS[ 138] */ // Shortest string "null"
      new Table(27, 42, 3, new short[] {-1, -1, -1, -1, -1, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 
          -1, -1, -1, -1}),
/* NxS[ 139] */ // Shortest string "fl"
      new Table(27, 46, 3, new short[] {-1, -1, -1, -1, -1, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 
          -1, -1, -1, -1, 3, 3, 3, 140}),
/* NxS[ 140] */ // Shortest string "flo"
      new Table(56, 48, -1, new short[] {3, 3, 3, 3, 3, -1, 
          -1, -1, 3, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 141, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3}),
/* NxS[ 141] */ // Shortest string "floa"
      new Table(27, 48, 3, new short[] {-1, -1, -1, -1, -1, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 
          -1, -1, -1, -1, 3, 3, 3, 3, 3, 142}),
/* NxS[ 142] */ // Shortest string "float"
      new Table(27, 42, 3, new short[] {-1, -1, -1, -1, -1, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 
          -1, -1, -1, -1}),
/* NxS[ 143] */ // Shortest string "re"
      new Table(56, 48, -1, new short[] {3, 3, 3, 3, 3, -1, 
          -1, -1, 3, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 144, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3}),
/* NxS[ 144] */ // Shortest string "ref"
      new Table(27, 42, 3, new short[] {-1, -1, -1, -1, -1, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 
          -1, -1, -1, -1}),
/* NxS[ 145] */ // Shortest string "tr"
      new Table(27, 47, 3, new short[] {-1, -1, -1, -1, -1, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 
          -1, -1, -1, -1, 3, 3, 3, 3, 154}),
/* NxS[ 146] */ // Shortest string "ty"
      new Table(56, 48, -1, new short[] {3, 3, 3, 3, 3, -1, 
          -1, -1, 3, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 150, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3}),
/* NxS[ 147] */ // Shortest string "th"
      new Table(21, 48, 3, new short[] {148, 3, 3, 3, 3, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 
          3, 3, -1, -1, -1, 3, -1, -1, -1, -1}),
/* NxS[ 148] */ // Shortest string "thi"
      new Table(56, 48, -1, new short[] {3, 3, 3, 3, 3, -1, 
          -1, -1, 3, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 149, 3, 3, 3, 3, 3, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3}),
/* NxS[ 149] */ // Shortest string "this"
      new Table(27, 42, 3, new short[] {-1, -1, -1, -1, -1, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 
          -1, -1, -1, -1}),
/* NxS[ 150] */ // Shortest string "typ"
      new Table(56, 48, -1, new short[] {3, 3, 3, 3, 3, -1, 
          -1, -1, 3, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 151, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3}),
/* NxS[ 151] */ // Shortest string "type"
      new Table(27, 46, 3, new short[] {-1, -1, -1, -1, -1, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 
          -1, -1, -1, -1, 3, 3, 3, 152}),
/* NxS[ 152] */ // Shortest string "typeo"
      new Table(56, 48, -1, new short[] {3, 3, 3, 3, 3, -1, 
          -1, -1, 3, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 153, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3}),
/* NxS[ 153] */ // Shortest string "typeof"
      new Table(27, 42, 3, new short[] {-1, -1, -1, -1, -1, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 
          -1, -1, -1, -1}),
/* NxS[ 154] */ // Shortest string "tru"
      new Table(56, 48, -1, new short[] {3, 3, 3, 3, 3, -1, 
          -1, -1, 3, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 155, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3}),
/* NxS[ 155] */ // Shortest string "true"
      new Table(27, 42, 3, new short[] {200, -1, -1, -1, -1, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 
          -1, -1, -1, -1}),
/* NxS[ 156] */ new Table(0, 0, -1, null), // Shortest string "true|false"
/* NxS[ 157] */ // Shortest string "ul"
      new Table(27, 46, 3, new short[] {-1, -1, -1, -1, -1, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 
          -1, -1, -1, -1, 3, 3, 3, 166}),
/* NxS[ 158] */ // Shortest string "us"
      new Table(25, 44, 3, new short[] {162, 3, -1, -1, -1, -1, 
          -1, 3, 3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, 
          -1, 3, -1, -1, -1, -1}),
/* NxS[ 159] */ // Shortest string "ui"
      new Table(56, 48, -1, new short[] {3, 3, 3, 3, 3, -1, 
          -1, -1, 3, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 160, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3}),
/* NxS[ 160] */ // Shortest string "uin"
      new Table(27, 48, 3, new short[] {-1, -1, -1, -1, -1, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 
          -1, -1, -1, -1, 3, 3, 3, 3, 3, 161}),
/* NxS[ 161] */ // Shortest string "uint"
      new Table(27, 42, 3, new short[] {-1, -1, -1, -1, -1, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 
          -1, -1, -1, -1}),
/* NxS[ 162] */ // Shortest string "ush"
      new Table(27, 46, 3, new short[] {-1, -1, -1, -1, -1, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 
          -1, -1, -1, -1, 3, 3, 3, 163}),
/* NxS[ 163] */ // Shortest string "usho"
      new Table(56, 48, -1, new short[] {3, 3, 3, 3, 3, -1, 
          -1, -1, 3, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 164, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3}),
/* NxS[ 164] */ // Shortest string "ushor"
      new Table(27, 48, 3, new short[] {-1, -1, -1, -1, -1, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 
          -1, -1, -1, -1, 3, 3, 3, 3, 3, 165}),
/* NxS[ 165] */ // Shortest string "ushort"
      new Table(27, 42, 3, new short[] {-1, -1, -1, -1, -1, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 
          -1, -1, -1, -1}),
/* NxS[ 166] */ // Shortest string "ulo"
      new Table(56, 48, -1, new short[] {3, 3, 3, 3, 3, -1, 
          -1, -1, 3, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 167, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3}),
/* NxS[ 167] */ // Shortest string "ulon"
      new Table(22, 47, 3, new short[] {168, 3, 3, 3, 3, -1, 
          -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 
          3, -1, -1, -1, 3, -1, -1, -1, -1}),
/* NxS[ 168] */ // Shortest string "ulong"
      new Table(27, 42, 3, new short[] {-1, -1, -1, -1, -1, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 
          -1, -1, -1, -1}),
/* NxS[ 169] */ // Shortest string "ou"
      new Table(27, 48, 3, new short[] {-1, -1, -1, -1, -1, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 
          -1, -1, -1, -1, 3, 3, 3, 3, 3, 175}),
/* NxS[ 170] */ // Shortest string "ob"
      new Table(26, 43, 3, new short[] {171, -1, -1, -1, -1, -1, 
          3, 3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, 
          3, -1, -1, -1, -1}),
/* NxS[ 171] */ // Shortest string "obj"
      new Table(56, 48, -1, new short[] {3, 3, 3, 3, 3, -1, 
          -1, -1, 3, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 172, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          -1, -1, -1, -1, -1, 3, 3, 3, 3, 3}),
/* NxS[ 172] */ // Shortest string "obje"
      new Table(24, 45, 3, new short[] {173, 3, 3, -1, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, 
          -1, -1, 3, -1, -1, -1, -1}),
/* NxS[ 173] */ // Shortest string "objec"
      new Table(27, 48, 3, new short[] {-1, -1, -1, -1, -1, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 
          -1, -1, -1, -1, 3, 3, 3, 3, 3, 174}),
/* NxS[ 174] */ // Shortest string "object"
      new Table(27, 42, 3, new short[] {-1, -1, -1, -1, -1, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 
          -1, -1, -1, -1}),
/* NxS[ 175] */ // Shortest string "out"
      new Table(27, 42, 3, new short[] {-1, -1, -1, -1, -1, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 
          -1, -1, -1, -1}),
/* NxS[ 176] */ // Shortest string "@_"
      new Table(27, 42, 176, new short[] {-1, -1, -1, -1, -1, 176, 
          176, 176, 176, 176, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 176, 176, 176, 176, 176, -1, -1, -1, 176, 
          -1, -1, -1, -1}),
/* NxS[ 177] */ new Table(0, 0, -1, null), // Shortest string "@\"\""
/* NxS[ 178] */ // Shortest string ""
      new Table(61, 63, 3, new short[] {40, 1, 1, 3, 1, 1, 
          1, 2, 3, 3, 4, 5, 6, 7, 8, 3, 9, 3, 3, 10, 3, 3, 
          3, 11, 12, 3, 13, 14, 3, 15, 16, 3, 3, 17, 18, 4, 4, 4, 
          19, 3, 3, 19, 3, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 
          31, 32, 33, 34, 35, 36, 37, 38, 39}),
/* NxS[ 179] */ // Shortest string "#\x20"
      new Table(62, 39, -1, new short[] {179, 179, 41, -1, -1, -1, 
          -1, -1, -1, -1, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, -1, 
          41, 41, 41, 41, 41, 41, 41, 41, 41, 41, -1, -1, -1, -1, -1, -1, 
          41}),
/* NxS[ 180] */ // Shortest string "1e"
      new Table(32, 25, -1, new short[] {63, -1, -1, 63, -1, -1, 
          -1, -1, -1, -1, 183, 183, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 63}),
/* NxS[ 181] */ // Shortest string "0x"
      new Table(56, 47, -1, new short[] {46, -1, 46, -1, 46, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 46, 
          -1, -1, -1, 46, -1, -1, 46, -1, -1, -1, -1, -1, 46, 46, -1, -1, 
          -1, -1, -1, -1, -1, 46, -1, 46, 46}),
/* NxS[ 182] */ // Shortest string "1."
      new Table(32, 25, -1, new short[] {45, -1, -1, 45, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 45}),
/* NxS[ 183] */ // Shortest string "1e+"
      new Table(32, 25, -1, new short[] {63, -1, -1, 63, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 63}),
/* NxS[ 184] */ // Shortest string "'@"
      new Table(37, 1, -1, new short[] {79}),
/* NxS[ 185] */ // Shortest string "'\\"
      new Table(32, 42, 184, new short[] {187, 188, 184, 184, 189, 184, 
          184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 
          184, 184, 187, 184, 184, 184, 184, 184, 184, 184, 184, -1, 184, -1, 184, 184, 
          184, 184, 184, 186}),
/* NxS[ 186] */ // Shortest string "'\\u"
      new Table(56, 49, -1, new short[] {194, -1, 194, -1, 194, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 194, 194, 
          -1, -1, -1, 194, -1, -1, 194, -1, -1, -1, -1, -1, 194, 194, -1, -1, 
          -1, -1, -1, -1, -1, 194, -1, 194, 194, -1, 79}),
/* NxS[ 187] */ // Shortest string "'\\1"
      new Table(32, 25, -1, new short[] {197, -1, -1, -1, -1, 79, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 197}),
/* NxS[ 188] */ // Shortest string "'\\x"
      new Table(56, 49, -1, new short[] {196, -1, 196, -1, 196, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 196, 196, 
          -1, -1, -1, 196, -1, -1, 196, -1, -1, -1, -1, -1, 196, 196, -1, -1, 
          -1, -1, -1, -1, -1, 196, -1, 196, 196, -1, 79}),
/* NxS[ 189] */ // Shortest string "'\\U"
      new Table(56, 49, -1, new short[] {190, -1, 190, -1, 190, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 190, 190, 
          -1, -1, -1, 190, -1, -1, 190, -1, -1, -1, -1, -1, 190, 190, -1, -1, 
          -1, -1, -1, -1, -1, 190, -1, 190, 190, -1, 79}),
/* NxS[ 190] */ // Shortest string "'\\Ue"
      new Table(56, 47, -1, new short[] {191, -1, 191, -1, 191, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 191, 191, 
          -1, -1, -1, 191, -1, -1, 191, -1, -1, -1, -1, -1, 191, 191, -1, -1, 
          -1, -1, -1, -1, -1, 191, -1, 191, 191}),
/* NxS[ 191] */ // Shortest string "'\\Uee"
      new Table(56, 47, -1, new short[] {192, -1, 192, -1, 192, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 192, 192, 
          -1, -1, -1, 192, -1, -1, 192, -1, -1, -1, -1, -1, 192, 192, -1, -1, 
          -1, -1, -1, -1, -1, 192, -1, 192, 192}),
/* NxS[ 192] */ // Shortest string "'\\Ueee"
      new Table(56, 47, -1, new short[] {193, -1, 193, -1, 193, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 193, 193, 
          -1, -1, -1, 193, -1, -1, 193, -1, -1, -1, -1, -1, 193, 193, -1, -1, 
          -1, -1, -1, -1, -1, 193, -1, 193, 193}),
/* NxS[ 193] */ // Shortest string "'\\Ueeee"
      new Table(56, 47, -1, new short[] {194, -1, 194, -1, 194, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 194, 194, 
          -1, -1, -1, 194, -1, -1, 194, -1, -1, -1, -1, -1, 194, 194, -1, -1, 
          -1, -1, -1, -1, -1, 194, -1, 194, 194}),
/* NxS[ 194] */ // Shortest string "'\\ue"
      new Table(56, 47, -1, new short[] {195, -1, 195, -1, 195, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 195, 195, 
          -1, -1, -1, 195, -1, -1, 195, -1, -1, -1, -1, -1, 195, 195, -1, -1, 
          -1, -1, -1, -1, -1, 195, -1, 195, 195}),
/* NxS[ 195] */ // Shortest string "'\\uee"
      new Table(56, 47, -1, new short[] {196, -1, 196, -1, 196, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 196, 196, 
          -1, -1, -1, 196, -1, -1, 196, -1, -1, -1, -1, -1, 196, 196, -1, -1, 
          -1, -1, -1, -1, -1, 196, -1, 196, 196}),
/* NxS[ 196] */ // Shortest string "'\\xe"
      new Table(56, 47, -1, new short[] {184, -1, 184, -1, 184, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 184, 184, 
          -1, -1, -1, 184, -1, -1, 184, -1, -1, -1, -1, -1, 184, 184, -1, -1, 
          -1, -1, -1, -1, -1, 184, -1, 184, 184}),
/* NxS[ 197] */ // Shortest string "'\\11"
      new Table(32, 25, -1, new short[] {184, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 184}),
/* NxS[ 198] */ // Shortest string "\"@"
      new Table(63, 36, 198, new short[] {-1, 198, -1, -1, -1, 198, 
          198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 
          198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 80, 198, 199, -1}),
/* NxS[ 199] */ // Shortest string "\"\\"
      new Table(65, 3, 198, new short[] {-1, 198, -1}),
/* NxS[ 200] */ // Shortest string "true|"
      new Table(10, 1, -1, new short[] {201}),
/* NxS[ 201] */ // Shortest string "true|f"
      new Table(14, 1, -1, new short[] {202}),
/* NxS[ 202] */ // Shortest string "true|fa"
      new Table(18, 1, -1, new short[] {203}),
/* NxS[ 203] */ // Shortest string "true|fal"
      new Table(20, 1, -1, new short[] {204}),
/* NxS[ 204] */ // Shortest string "true|fals"
      new Table(9, 1, -1, new short[] {156}),
/* NxS[ 205] */ // Shortest string "@\""
      new Table(27, 2, 205, new short[] {-1, 177}),
    };

int NextState() {
    if (code == ScanBuff.EndOfFile)
        return eofNum;
    else
        unchecked {
            int rslt;
            int idx = Map(code) - NxS[state].min;
            if (idx < 0) idx += 67;
            if ((uint)idx >= (uint)NxS[state].rng) rslt = NxS[state].dflt;
            else rslt = NxS[state].nxt[idx];
            return rslt;
        }
}

#endregion


#if BACKUP
        // ==============================================================
        // == Nested struct used for backup in automata that do backup ==
        // ==============================================================

        struct Context // class used for automaton backup.
        {
            public int bPos;
            public int rPos; // scanner.readPos saved value
            public int cCol;
            public int lNum; // Need this in case of backup over EOL.
            public int state;
            public int cChr;
        }
        
        private Context ctx = new Context();
#endif // BACKUP

        // ==============================================================
        // ==== Nested struct to support input switching in scanners ====
        // ==============================================================

		struct BufferContext {
            internal ScanBuff buffSv;
			internal int chrSv;
			internal int cColSv;
			internal int lNumSv;
		}

        // ==============================================================
        // ===== Private methods to save and restore buffer contexts ====
        // ==============================================================

        /// <summary>
        /// This method creates a buffer context record from
        /// the current buffer object, together with some
        /// scanner state values. 
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        BufferContext MkBuffCtx()
		{
			BufferContext rslt;
			rslt.buffSv = this.buffer;
			rslt.chrSv = this.code;
			rslt.cColSv = this.cCol;
			rslt.lNumSv = this.lNum;
			return rslt;
		}

        /// <summary>
        /// This method restores the buffer value and allied
        /// scanner state from the given context record value.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void RestoreBuffCtx(BufferContext value)
		{
			this.buffer = value.buffSv;
			this.code = value.chrSv;
			this.cCol = value.cColSv;
			this.lNum = value.lNumSv;
        } 
        // =================== End Nested classes =======================

#if !NOFILES
     internal Scanner(Stream file) {
            SetSource(file, -1); // unicode option
        }

        public Scanner(Stream file, string codepage) {
            SetSource(file, CodePageHandling.GetCodePage(codepage));
        }   
#endif // !NOFILES

     internal Scanner() { }

        private int readPos;

        void GetCode()
        {
            if (code == '\n')  // This needs to be fixed for other conventions
                               // i.e. [\r\n\205\u2028\u2029]
            { 
                cCol = -1;
                lNum++;
            }
            readPos = buffer.Pos;

            // Now read new codepoint.
            code = buffer.Read();
            if (code > ScanBuff.EndOfFile)
            {
#if (!BYTEMODE)
                if (code >= 0xD800 && code <= 0xDBFF)
                {
                    int next = buffer.Read();
                    if (next < 0xDC00 || next > 0xDFFF)
                        code = ScanBuff.UnicodeReplacementChar;
                    else
                        code = (0x10000 + ((code & 0x3FF) << 10) + (next & 0x3FF));
                }
#endif
                cCol++;
            }
        }

        void MarkToken()
        {
#if (!PERSIST)
            buffer.Mark();
#endif
            tokPos = readPos;
            tokLin = lNum;
            tokCol = cCol;
        }
        
        void MarkEnd()
        {
            tokTxt = null;
            tokEPos = readPos;
            tokELin = lNum;
            tokECol = cCol;
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int Peek()
        {
            int rslt, codeSv = code, cColSv = cCol, lNumSv = lNum, bPosSv = buffer.Pos;
            GetCode(); rslt = code;
            lNum = lNumSv; cCol = cColSv; code = codeSv; buffer.Pos = bPosSv;
            return rslt;
        }

        // ==============================================================
        // =====    Initialization of string-based input buffers     ====
        // ==============================================================

        /// <summary>
        /// Create and initialize a StringBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the input string</param>
        /// <param name="offset">starting offset in the string</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(string source, int offset)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.buffer.Pos = offset;
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }

        // ================ LineBuffer Initialization ===================
        /// <summary>
        /// Create and initialize a LineBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the list of input strings</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(IList<string> source)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            this.lNum = 0;
            GetCode();
        }

#if !NOFILES        
        // =============== StreamBuffer Initialization ==================

        /// <summary>
        /// Create and initialize a StreamBuff buffer object for this scanner.
        /// StreamBuff is buffer for 8-bit byte files.
        /// </summary>
        /// <param name="source">the input byte stream</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }
        
#if !BYTEMODE
        // ================ TextBuffer Initialization ===================

        /// <summary>
        /// Create and initialize a TextBuff buffer object for this scanner.
        /// TextBuff is a buffer for encoded unicode files.
        /// </summary>
        /// <param name="source">the input text file</param>
        /// <param name="fallbackCodePage">Code page to use if file has
        /// no BOM. For 0, use machine default; for -1, 8-bit binary</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source, int fallbackCodePage)
        {
            this.buffer = ScanBuff.GetBuffer(source, fallbackCodePage);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }
#endif // !BYTEMODE
#endif // !NOFILES
        
        // ==============================================================

#if BABEL
        //
        //  Get the next token for Visual Studio
        //
        //  "state" is the inout mode variable that maintains scanner
        //  state between calls, using the EolState property. In principle,
        //  if the calls of EolState are costly set could be called once
        //  only per line, at the start; and get called only at the end
        //  of the line. This needs more infrastructure ...
        //
        public int GetNext(ref int state, out int start, out int end)
        {
                Tokens next;
            int s, e;
            s = state;        // state at start
            EolState = state;
                next = (Tokens)Scan();
            state = EolState;
            e = state;       // state at end;
            start = tokPos;
            end = tokEPos - 1; // end is the index of last char.
            return (int)next;
        }        
#endif // BABEL

        // ======== AbstractScanner<> Implementation =========

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public override int yylex()
        {
            // parserMax is set by reflecting on the Tokens
            // enumeration.  If maxParseToken is defined
            // that is used, otherwise int.MaxValue is used.
            int next;
            do { next = Scan(); } while (next >= parserMax);
            return next;
        }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yypos { get { return tokPos; } }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yyline { get { return tokLin; } }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yycol { get { return tokCol; } }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yytext")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yytext")]
        public string yytext
        {
            get 
            {
                if (tokTxt == null) 
                    tokTxt = buffer.GetString(tokPos, tokEPos);
                return tokTxt;
            }
        }

        /// <summary>
        /// Discards all but the first "n" codepoints in the recognized pattern.
        /// Resets the buffer position so that only n codepoints have been consumed;
        /// yytext is also re-evaluated. 
        /// </summary>
        /// <param name="n">The number of codepoints to consume</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void yyless(int n)
        {
            buffer.Pos = tokPos;
            // Must read at least one char, so set before start.
            cCol = tokCol - 1; 
            GetCode();
            // Now ensure that line counting is correct.
            lNum = tokLin;
            // And count the rest of the text.
            for (int i = 0; i < n; i++) GetCode();
            MarkEnd();
        }
       
        //
        //  It would be nice to count backward in the text
        //  but it does not seem possible to re-establish
        //  the correct column counts except by going forward.
        //
        /// <summary>
        /// Removes the last "n" code points from the pattern.
        /// </summary>
        /// <param name="n">The number to remove</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void _yytrunc(int n) { yyless(yyleng - n); }
        
        //
        // This is painful, but we no longer count
        // codepoints.  For the overwhelming majority 
        // of cases the single line code is fast, for
        // the others, well, at least it is all in the
        // buffer so no files are touched. Note that we
        // can't use (tokEPos - tokPos) because of the
        // possibility of surrogate pairs in the token.
        //
        /// <summary>
        /// The length of the pattern in codepoints (not the same as 
        /// string-length if the pattern contains any surrogate pairs).
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yyleng")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yyleng")]
        public int yyleng
        {
            get {
                if (tokELin == tokLin)
                    return tokECol - tokCol;
                else
#if BYTEMODE
                    return tokEPos - tokPos;
#else
                {
                    int ch;
                    int count = 0;
                    int save = buffer.Pos;
                    buffer.Pos = tokPos;
                    do {
                        ch = buffer.Read();
                        if (!char.IsHighSurrogate((char)ch)) count++;
                    } while (buffer.Pos < tokEPos && ch != ScanBuff.EndOfFile);
                    buffer.Pos = save;
                    return count;
                }
#endif // BYTEMODE
            }
        }
        
        // ============ methods available in actions ==============

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int YY_START {
            get { return currentScOrd; }
            set { currentScOrd = value; 
                  currentStart = startState[value]; 
            } 
        }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void BEGIN(int next) {
            currentScOrd = next;
            currentStart = startState[next];
        }

        // ============== The main tokenizer code =================

        int Scan() {
                for (; ; ) {
                    int next;              // next state to enter
#if LEFTANCHORS
                    for (;;) {
                        // Discard characters that do not start any pattern.
                        // Must check the left anchor condition after *every* GetCode!
                        state = ((cCol == 0) ? anchorState[currentScOrd] : currentStart);
                        if ((next = NextState()) != goStart) break; // LOOP EXIT HERE...
                        GetCode();
                    }
                    
#else // !LEFTANCHORS
                    state = currentStart;
                    while ((next = NextState()) == goStart) {
                        // At this point, the current character has no
                        // transition from the current state.  We discard 
                        // the "no-match" char.   In traditional LEX such 
                        // characters are echoed to the console.
                        GetCode();
                    }
#endif // LEFTANCHORS                    
                    // At last, a valid transition ...    
                    MarkToken();
                    state = next;
                    GetCode();                    
#if BACKUP
                    bool contextSaved = false;
                    while ((next = NextState()) > eofNum) { // Exit for goStart AND for eofNum
                        if (state <= maxAccept && next > maxAccept) { // need to prepare backup data
                            // Store data for the *latest* accept state that was found.
                            SaveStateAndPos( ref ctx );
                            contextSaved = true;
                        }
                        state = next;
                        GetCode();
                    }
                    if (state > maxAccept && contextSaved)
                        RestoreStateAndPos( ref ctx );
#else  // BACKUP
                    while ((next = NextState()) > eofNum) { // Exit for goStart AND for eofNum
                         state = next;
                         GetCode();
                    }
#endif // BACKUP
                    if (state <= maxAccept) {
                        MarkEnd();
#region ActionSwitch
#pragma warning disable 162, 1522
    switch (state)
    {
        case eofNum:
            switch (currentStart) {
                case 178:
return -2;
                    break;
            }
            if (yywrap())
                return (int)Tokens.EOF;
            break;
        case 1: // Recognized '[ \t\r\n\v\f]+',	Shortest string "\x20"
return yylex();
            break;
        case 2: // Recognized '[\n]|[^\n]',	Shortest string "@"
        case 4: // Recognized '[\n]|[^\n]',	Shortest string "\u0660"
        case 18: // Recognized '[\n]|[^\n]',	Shortest string "\""
        case 20: // Recognized '[\n]|[^\n]',	Shortest string "'"
        case 40: // Recognized '[\n]|[^\n]',	Shortest string "#"
return -1;
            break;
        case 3: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "_"
        case 5: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "o"
        case 6: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "u"
        case 7: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "t"
        case 8: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "r"
        case 9: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "f"
        case 10: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "n"
        case 11: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "d"
        case 12: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "l"
        case 13: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "s"
        case 14: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "i"
        case 15: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "b"
        case 16: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "c"
        case 83: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "ch"
        case 84: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "cha"
        case 86: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "bo"
        case 87: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "by"
        case 88: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "ba"
        case 89: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "bas"
        case 91: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "byt"
        case 93: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "boo"
        case 95: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "in"
        case 97: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "st"
        case 98: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "sb"
        case 99: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "sh"
        case 100: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "sho"
        case 101: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "shor"
        case 103: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "sby"
        case 104: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "sbyt"
        case 106: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "str"
        case 107: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "stri"
        case 108: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "strin"
        case 110: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "lo"
        case 111: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "lon"
        case 113: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "do"
        case 114: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "de"
        case 115: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "def"
        case 116: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "dec"
        case 117: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "deci"
        case 118: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "decim"
        case 119: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "decima"
        case 121: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "defa"
        case 122: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "defau"
        case 123: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "defaul"
        case 125: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "dou"
        case 126: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "doub"
        case 127: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "doubl"
        case 129: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "nu"
        case 130: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "ne"
        case 131: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "na"
        case 132: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "nam"
        case 133: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "name"
        case 134: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "nameO"
        case 137: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "nul"
        case 139: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "fl"
        case 140: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "flo"
        case 141: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "floa"
        case 143: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "re"
        case 145: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "tr"
        case 146: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "ty"
        case 147: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "th"
        case 148: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "thi"
        case 150: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "typ"
        case 151: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "type"
        case 152: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "typeo"
        case 154: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "tru"
        case 155: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "true"
        case 157: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "ul"
        case 158: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "us"
        case 159: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "ui"
        case 160: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "uin"
        case 162: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "ush"
        case 163: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "usho"
        case 164: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "ushor"
        case 166: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "ulo"
        case 167: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "ulon"
        case 169: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "ou"
        case 170: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "ob"
        case 171: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "obj"
        case 172: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "obje"
        case 173: // Recognized '(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "objec"
return 178;
            break;
        case 17: // Recognized '"|"',	Shortest string "|"
return 186;
            break;
        case 19: // Recognized '(0x[0-9A-Fa-f]{1,16}|([0-9]+))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "1"
        case 39: // Recognized '(0x[0-9A-Fa-f]{1,16}|([0-9]+))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0"
        case 42: // Recognized '(0x[0-9A-Fa-f]{1,16}|([0-9]+))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "1u"
        case 44: // Recognized '(0x[0-9A-Fa-f]{1,16}|([0-9]+))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "1l"
        case 46: // Recognized '(0x[0-9A-Fa-f]{1,16}|([0-9]+))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0xe"
        case 47: // Recognized '(0x[0-9A-Fa-f]{1,16}|([0-9]+))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0xee"
        case 48: // Recognized '(0x[0-9A-Fa-f]{1,16}|([0-9]+))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0xeee"
        case 49: // Recognized '(0x[0-9A-Fa-f]{1,16}|([0-9]+))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0xeeee"
        case 50: // Recognized '(0x[0-9A-Fa-f]{1,16}|([0-9]+))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0xeeeee"
        case 51: // Recognized '(0x[0-9A-Fa-f]{1,16}|([0-9]+))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0xeeeeee"
        case 52: // Recognized '(0x[0-9A-Fa-f]{1,16}|([0-9]+))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0xeeeeeee"
        case 53: // Recognized '(0x[0-9A-Fa-f]{1,16}|([0-9]+))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0xeeeeeeee"
        case 54: // Recognized '(0x[0-9A-Fa-f]{1,16}|([0-9]+))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0xeeeeeeeee"
        case 55: // Recognized '(0x[0-9A-Fa-f]{1,16}|([0-9]+))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0xeeeeeeeeee"
        case 56: // Recognized '(0x[0-9A-Fa-f]{1,16}|([0-9]+))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0xeeeeeeeeeee"
        case 57: // Recognized '(0x[0-9A-Fa-f]{1,16}|([0-9]+))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0xeeeeeeeeeeee"
        case 58: // Recognized '(0x[0-9A-Fa-f]{1,16}|([0-9]+))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0xeeeeeeeeeeeee"
        case 59: // Recognized '(0x[0-9A-Fa-f]{1,16}|([0-9]+))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0xeeeeeeeeeeeeee"
        case 60: // Recognized '(0x[0-9A-Fa-f]{1,16}|([0-9]+))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0xeeeeeeeeeeeeeee"
        case 61: // Recognized '(0x[0-9A-Fa-f]{1,16}|([0-9]+))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0xeeeeeeeeeeeeeeee"
        case 62: // Recognized '(0x[0-9A-Fa-f]{1,16}|([0-9]+))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "1ul"
return 209;
            break;
        case 21: // Recognized '"<"',	Shortest string "<"
return 179;
            break;
        case 22: // Recognized '"="',	Shortest string "="
return 189;
            break;
        case 23: // Recognized '">"',	Shortest string ">"
return 181;
            break;
        case 24: // Recognized '"!"',	Shortest string "!"
return 173;
            break;
        case 25: // Recognized '"+"',	Shortest string "+"
return 171;
            break;
        case 26: // Recognized '"-"',	Shortest string "-"
return 172;
            break;
        case 27: // Recognized '"*"',	Shortest string "*"
return 197;
            break;
        case 28: // Recognized '"/"',	Shortest string "/"
return 198;
            break;
        case 29: // Recognized '"%"',	Shortest string "%"
return 199;
            break;
        case 30: // Recognized '"&"',	Shortest string "&"
return 185;
            break;
        case 31: // Recognized '"["',	Shortest string "["
return 169;
            break;
        case 32: // Recognized '"]"',	Shortest string "]"
return 201;
            break;
        case 33: // Recognized '"("',	Shortest string "("
return 168;
            break;
        case 34: // Recognized '")"',	Shortest string ")"
return 170;
            break;
        case 35: // Recognized '"{"',	Shortest string "{"
return 215;
            break;
        case 36: // Recognized '"}"',	Shortest string "}"
return 203;
            break;
        case 37: // Recognized '","',	Shortest string ","
return 167;
            break;
        case 38: // Recognized '"."',	Shortest string "."
return 149;
            break;
        case 41: // Recognized '#[ \t]*[a-z]+',	Shortest string "#o"
if(!_TryReadUntilBlockEnd("\n")) return -1;return 216;
            break;
        case 43: // Recognized '(([0-9]+)(\.[0-9]+)?([Ee][\+\-]?[0-9]+)?[DdMmFf]?)|((\.[0-9]+)([Ee][\+\-]?[0-9]+)?[DdMmFf]?)',	Shortest string "1f"
        case 45: // Recognized '(([0-9]+)(\.[0-9]+)?([Ee][\+\-]?[0-9]+)?[DdMmFf]?)|((\.[0-9]+)([Ee][\+\-]?[0-9]+)?[DdMmFf]?)',	Shortest string ".1"
        case 63: // Recognized '(([0-9]+)(\.[0-9]+)?([Ee][\+\-]?[0-9]+)?[DdMmFf]?)|((\.[0-9]+)([Ee][\+\-]?[0-9]+)?[DdMmFf]?)',	Shortest string "1e1"
return 210;
            break;
        case 64: // Recognized '"&="',	Shortest string "&="
return 195;
            break;
        case 65: // Recognized '"&&"',	Shortest string "&&"
return 187;
            break;
        case 66: // Recognized '"%="',	Shortest string "%="
return 194;
            break;
        case 67: // Recognized '"/="',	Shortest string "/="
return 193;
            break;
        case 68: // Recognized '"/*"',	Shortest string "/*"
if(!_TryReadUntilBlockEnd("*/")) return -1; return yylex();
            break;
        case 69: // Recognized '\/\/[^\n]*',	Shortest string "//"
return yylex();
            break;
        case 70: // Recognized '"*="',	Shortest string "*="
return 192;
            break;
        case 71: // Recognized '"-="',	Shortest string "-="
return 191;
            break;
        case 72: // Recognized '"--"',	Shortest string "--"
return 175;
            break;
        case 73: // Recognized '"+="',	Shortest string "+="
return 190;
            break;
        case 74: // Recognized '"++"',	Shortest string "++"
return 174;
            break;
        case 75: // Recognized '"!="',	Shortest string "!="
return 184;
            break;
        case 76: // Recognized '">="',	Shortest string ">="
return 182;
            break;
        case 77: // Recognized '"=="',	Shortest string "=="
return 183;
            break;
        case 78: // Recognized '"<="',	Shortest string "<="
return 180;
            break;
        case 79: // Recognized '[\u0027]([^\\\"\a\b\f\n\r\t\v\0]|\\[^\r\n]|\\[0-7]{3}|\\x[0-9A-Fa-f]{2}|\\u[0-9A-Fa-f]{4}|\\U[0-9A-Fa-f]{8})[\u0027]',	Shortest string "'@'"
return 208;
            break;
        case 80: // Recognized '\"([^\\\"\a\b\f\n\r\t\v\0]|\\[^\r\n]|\\[0-7]{3}|\\x[0-9A-Fa-f]{2}|\\u[0-9A-Fa-f]{4}|\\U[0-9A-Fa-f]{8})*\"',	Shortest string "\"\""
return 211;
            break;
        case 81: // Recognized '"||"',	Shortest string "||"
return 188;
            break;
        case 82: // Recognized '"|="',	Shortest string "|="
return 196;
            break;
        case 85: // Recognized '"char"',	Shortest string "char"
return 153;
            break;
        case 90: // Recognized '"base"',	Shortest string "base"
return 214;
            break;
        case 92: // Recognized '"byte"',	Shortest string "byte"
return 159;
            break;
        case 94: // Recognized '"bool"',	Shortest string "bool"
return 152;
            break;
        case 96: // Recognized '"int"',	Shortest string "int"
return 162;
            break;
        case 102: // Recognized '"short"',	Shortest string "short"
return 160;
            break;
        case 105: // Recognized '"sbyte"',	Shortest string "sbyte"
return 158;
            break;
        case 109: // Recognized '"string"',	Shortest string "string"
return 154;
            break;
        case 112: // Recognized '"long"',	Shortest string "long"
return 164;
            break;
        case 120: // Recognized '"decimal"',	Shortest string "decimal"
return 157;
            break;
        case 124: // Recognized '"default"',	Shortest string "default"
return 206;
            break;
        case 128: // Recognized '"double"',	Shortest string "double"
return 156;
            break;
        case 135: // Recognized '"nameOf"',	Shortest string "nameOf"
return 205;
            break;
        case 136: // Recognized '"new"',	Shortest string "new"
return 202;
            break;
        case 138: // Recognized '"null"',	Shortest string "null"
return 176;
            break;
        case 142: // Recognized '"float"',	Shortest string "float"
return 155;
            break;
        case 144: // Recognized '"ref"',	Shortest string "ref"
return 151;
            break;
        case 149: // Recognized '"this"',	Shortest string "this"
return 213;
            break;
        case 153: // Recognized '"typeof"',	Shortest string "typeof"
return 204;
            break;
        case 156: // Recognized '"true|false"',	Shortest string "true|false"
return 212;
            break;
        case 161: // Recognized '"uint"',	Shortest string "uint"
return 163;
            break;
        case 165: // Recognized '"ushort"',	Shortest string "ushort"
return 161;
            break;
        case 168: // Recognized '"ulong"',	Shortest string "ulong"
return 165;
            break;
        case 174: // Recognized '"object"',	Shortest string "object"
return 166;
            break;
        case 175: // Recognized '"out"',	Shortest string "out"
return 150;
            break;
        case 176: // Recognized '@(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*',	Shortest string "@_"
return 177;
            break;
        case 177: // Recognized '@\"([^\"|\"\"])*\"',	Shortest string "@\"\""
return 207;
            break;
        default:
            break;
    }
#pragma warning restore 162, 1522
#endregion
                    }
                }
        }

#if BACKUP
        void SaveStateAndPos(ref Context ctx) {
            ctx.bPos  = buffer.Pos;
            ctx.rPos  = readPos;
            ctx.cCol  = cCol;
            ctx.lNum  = lNum;
            ctx.state = state;
            ctx.cChr  = code;
        }

        void RestoreStateAndPos(ref Context ctx) {
            buffer.Pos = ctx.bPos;
            readPos = ctx.rPos;
            cCol  = ctx.cCol;
            lNum  = ctx.lNum;
            state = ctx.state;
            code  = ctx.cChr;
        }
#endif  // BACKUP

        // ============= End of the tokenizer code ================

#if STACK        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void yy_clear_stack() { scStack.Clear(); }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int yy_top_state() { return scStack.Peek(); }
        
        internal void yy_push_state(int state)
        {
            scStack.Push(currentScOrd);
            BEGIN(state);
        }
        
        internal void yy_pop_state()
        {
            // Protect against input errors that pop too far ...
            if (scStack.Count > 0) {
				int newSc = scStack.Pop();
				BEGIN(newSc);
            } // Otherwise leave stack unchanged.
        }
 #endif // STACK

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void ECHO() { Console.Out.Write(yytext); }
        
    } // end class $Scanner


} // end namespace
